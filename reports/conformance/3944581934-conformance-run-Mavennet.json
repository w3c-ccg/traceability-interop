{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "12b30dbb-1fce-440c-aaa3-22175524cbbb",
        "name": "Clear Cache",
        "item": [
          {
            "id": "fda677b0-716e-4667-89ae-c8531e6b5414",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c0d9925d-73dd-4e73-85ab-2a780a8c029c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "abce8860-cb1c-483b-9e81-2cdd13b27d4e"
                }
              }
            ]
          },
          {
            "id": "5e8c5ac5-3f83-48ed-8e8a-2fb99825845d",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ce771813-6d39-4a46-954a-ccb9c84ca56a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "32af06ee-2ddd-4f90-ba49-f99bcf0c0547"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "f766e5da-bf5f-48c0-b4d0-d2faad14711c",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "ed4cf1db-0960-4797-9b6e-5b318af611b7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9bb20289-34c4-4df9-89c5-34033dab0c3b",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "65060e03-bbba-4ed5-9e5c-10cf8a4c572b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "070893a8-24fa-413f-bd27-99ef933efd13"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4012911c-097b-43f4-b24d-55bb03430fdd",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "46c35684-4662-4f38-a254-85fe6e814544"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b33bd0e7-dac0-4e2c-b2ad-7cbb789d558c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "88dee05f-338b-4352-a7a4-0690faee8b31"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7f647918-0f08-407e-924c-c8c51224c2ac",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "08bd81ba-5f06-4225-971e-7ba4c512a062"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8b317660-9267-4573-83e3-95f7501b4b26",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d336837e-8d3e-43c1-bfb7-f7e511cd7785"
            }
          }
        ]
      },
      {
        "id": "be42e62c-26c0-44c0-9411-5847f544229a",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "9610fa49-7e63-43a3-b71a-0cfdd81a34c4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "db9d859c-5623-4980-be63-3f7252995ebe",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ac923d79-5342-4000-b40c-c4e7125766e2",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f5bdf9d-f7e6-4a26-9c4e-a6b14d6d2cc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "86e56c8c-e077-45e7-a643-ac8b29858efc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98ef2298-8c1c-4a43-b336-e4be4153f59f",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2da0379-d85e-4472-8f87-fbbee00dc970",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "158a26e7-5384-4c91-9ce1-2e29e34bc28f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "387d82ae-a39f-4e7c-9434-d33b4c4e8f77",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf912099-fb8c-475c-a194-c347c10371f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "035d56af-2f0d-46a1-842d-1a358bee521b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c0b78838-ecab-4f7c-95aa-b1f08684b178",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a995e16f-ec43-46ce-b4e7-8941f1a46777",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7762674d-e78c-42df-9a64-edf69f8a6210",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5102aa62-57f1-47c8-a07b-3b36482a9474"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c8fb4b3-460d-4e5d-94ea-72f339539bbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5573d0bd-444a-4cc7-b39e-6797272ebdae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8b55f8d-ad81-48a8-aacf-6639e0507017",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "526bceba-cb43-402d-9798-4d83029c3465",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4b456afd-bac3-4f4b-b018-fde5e2b92943"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89b8ee72-8c6c-48d5-a87b-e47fb4ab83a8",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "8bad1d57-b0fa-48d9-92ab-56593792fa3e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "6917f295-bff8-411c-ac49-763c205021cf",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4d8fc411-d2ef-4394-ab52-b394a0b44134",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bcad0b18-cbf1-424a-8cbe-7db22f841262",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "f1f048a7-51f9-4b9e-9d29-96e549fe48fb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "57bcc645-0dec-469c-86fc-210627b7c7cb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "7d3f100e-4f88-4b75-8f6c-55c2dd4410fe"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "45a617bc-50b5-4ee3-a23a-7ed8ee36ea58",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5511ddaf-3d33-49aa-875e-ad97be06e44d"
            }
          }
        ]
      },
      {
        "id": "1045985d-788b-472e-8d33-0c930e58bc33",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "f28e0a57-5b67-4662-81a3-c551b87bb095",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8591c232-95f1-499f-85df-6692e3f604ab",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "2b7e8126-a863-4656-975e-53cf061e125f",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bb57743-0bec-4e97-9a0a-f48494b2e29c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86e26844-5044-4c08-a261-823b04d3ac25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74e976c4-c848-4771-a3b0-3a15f1ee24ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "847250d9-a17e-4c4e-bd57-be825b616d5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25811ef0-94e2-4319-a6b4-7be36bf90196",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7837d730-e662-4e33-8b19-2f38756ec5e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09197f2b-f6b1-47d2-88ad-68c011a68bf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44ac28b2-acca-4655-b1a4-1d6b16d9224c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "959d446d-0e9b-44c0-b85d-51984200400b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72961b61-a750-420c-a5e3-d2bb68ec91bc",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63eeffe8-d543-46bd-af2c-f5713e5968a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "493b5c83-d9b4-4582-b7ee-669fa03ba84f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f24143c-ecac-4da6-a40c-f3b05f2eb091",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8cffd46e-4a1a-447b-83c1-3852d360c71d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdff88fd-0bbe-4fd8-bb35-ef8e8936f74e",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20634124-8242-4a83-b3e1-b4ff6855d4a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0998e8bd-0a6d-440e-acb7-4f2ab584253c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc20175a-2a23-4b8a-bcc2-93973ae4552c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c6b5c9b6-7661-4af6-85a8-25be6f816785"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff1486e4-7013-4398-b2ca-57d5a1797a8c",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46549814-b0f8-42d0-8194-8e528b1f2c0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44d473ee-63e6-4289-abee-bdeb693571bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c990ca99-1096-49eb-841a-e61045a64ebb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c4a0435a-8f9a-40b8-aabe-15c21c76a7dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "395dd718-6923-4bb3-a32a-44d8c038c178",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b55263ef-5e25-48f9-8382-15b9a4c0feb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fea5e65-c34c-45a1-9dfa-393628c66a85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7282d540-e5ad-4d76-9b5b-c38747809b5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fac89228-e9c1-4b90-9a68-982a849a5c77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d91483f-319e-43f1-8c19-767311691f9b",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1945b695-9e0a-4b20-a2b7-826599b65438",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01d3710f-7c9d-4752-b7af-d3f5d89f23f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "613dfbbf-77d4-46b0-b074-20cfc4e594b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a77eef9e-bd3f-48aa-9b79-0fa5e7224db4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2cb7d24-2c66-43ef-a185-6df24c3adf5d",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e26c0d9f-9460-4e57-8784-dd4fe48ffdd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d300941-6f1b-4126-9963-1eac6b8605ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bbb265d-a9e3-4ebe-9935-c2e94a855197",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "18f70c88-aa86-402f-92fe-31edc705b5ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61391cf1-327b-4642-a564-cefaef9e5c5c",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c92bae2-2845-445f-be10-6efbb5e6fda7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60116efd-2c9f-4553-adb5-2b85f7611b73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9eb8df3-46e7-45a2-8123-825a37ce9f99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9e798114-838d-4b8f-ab00-eaf6fc0bbc3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e7ba732-eacf-4c96-a8ea-60f78e186aba",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fc06bf1-bb8a-4226-bd25-d3d923e782fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51488443-7e39-4aa2-a8d1-2a1780ef96fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e901d457-947d-46f7-8a38-ddeb3d4f69f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e10c8538-29e3-4025-8931-a17800c2d3dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e0208b5-2833-489d-973e-b68712f394a4",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "380fab35-8f77-4fb6-a72b-7c813c651152",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34c231e2-3705-4702-959f-b5ba7c4e586c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0989e03-7f50-4b91-bc63-ebf06d07d445",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dd91d0fc-d142-490e-8bfe-3c606dc04e0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "966ec666-69c4-4e95-9a35-0cd1c29b0336",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "327daa0f-a59c-4019-be90-7ab5f93159dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd1de638-7443-4dd6-9c5d-ff1cfe54ca20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e58d5b2e-ff1d-4923-a4ca-186f9b600d1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a656c034-1ab1-423a-8c8e-fff61107a039"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d612153-6e45-4a86-85cd-92ac706929af",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4460c118-e9ff-452f-ad0f-2485a653b3fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4b8e286-20e0-4393-aa8c-a995a58e1718"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ec5a388-fc03-4791-979d-132fd514c540",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e6b1dfe0-8401-432e-894b-b08dfad976b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f35c8fb-463f-4a34-a579-22038ff2929a",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd1104e5-e379-4dee-b1de-d3272af4da4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91ec9ece-7c9e-4eba-a2b9-2e4c60a4cc17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdabc3ed-cf8e-4b98-bf2f-143feb38d265",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "583e0c18-6eed-4970-816e-6308128c7be5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d68c3334-feb3-4ee0-97aa-4c32249d36e7",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "371ee762-5359-421a-bc53-94978d948042",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "421b479d-ad49-46ea-ab15-ebeb1fb2ca15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "851e5e4b-5065-4b05-b2ea-ee8c96bbeff9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ca722f24-9726-4747-a0c4-c8e5e285e885"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d624533-31f1-4b45-b9de-93034d1cac27",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ace083b-a2a6-4a6f-bb88-5871fade44fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09580a7b-d826-4b5d-b13e-c3fb89ca5fb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a0bc55a-91a0-438d-8e6a-4a4dc6b3d9dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "07f6aa0b-f798-4120-a386-f05f517defe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc6f8d17-d47f-4514-83be-e14d9e3a129b",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df09719d-7923-493b-aca4-d43bdcf159e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea6329da-3da5-4fe0-ba1b-90c6837a76e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e60fb52-0448-4163-8a83-8781c3917acf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6eab5d9f-0132-4411-ad02-fdf1badb0727"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45b8f863-4e64-4afe-baa1-4938c516b9c9",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d38d8cb2-9316-4fbf-b02e-dfccc7e86c13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9de12621-cceb-4863-b1c6-701ce4dd33c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14d35251-4ac9-4804-9b21-37ddb36f0b56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "03e0709d-21a9-4e30-9f74-624c2e8d19f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08d54448-3f66-479b-acec-67fe3fd4f744",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83987d5b-50ce-4778-9898-427974671288",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ada313fe-d6ff-4721-b4f6-754660f9db7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b02c81c4-9288-4dba-80a4-886d4337d7cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6117c99c-9536-4dec-b2d1-a3fd202de549"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7197c1f-6353-4fa2-9573-b6dcc62530d2",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d4d6b5e-daf3-4c6d-bb76-cabf3b360f60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc2305fb-40d7-4541-8cd6-def2a59db58f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c663c71c-ab91-488a-b036-a9ffc6812f40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "3bf5c874-0ad0-4244-abc9-4521a0051734"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca8e17ab-1711-4023-9c4f-a0549aeb383a",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaeb2239-f90c-4a78-a587-84017e42873a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf41383a-c18c-4323-81c7-d8bf9a1f3ea2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c344c239-69ff-4955-8213-8fb05850995e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "38b6d5ff-38d9-48f0-8000-70094aa692cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6957eb62-1e61-4630-9066-dc0db9eccdeb",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10c325e4-5b64-4f27-9295-127e7beb3627",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b122f1fc-6aba-42ab-b477-ced52f84f56c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cafa8d96-f5cc-4781-9c80-9e5ffcaed200",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b0a1188-52ab-4ace-8cd3-3469be6696c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7273535b-5a9e-4cbb-bec7-ad0350616c65",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91a7085c-638a-4ecf-a5d0-72486c62364a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6875d41-3eb8-423e-9863-46f827ec20ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "461c6bf7-9e82-4d6a-8c52-bd9838c81091",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "753d90d7-f47a-4a5e-bc3c-52c1d83ac1f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d7947b5-bb2b-4c70-a477-ac5fa0539954",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce200c36-248c-4da9-9d60-23014781b3e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f64a5431-330e-4df3-bf33-15421e9652d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0e6465e-4001-4f2a-a7b5-b0ced5ddaa67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "57a41a9e-dcb7-4084-8922-faa9ee51e863"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc11f625-318f-4b77-adc5-e6996e78080c",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d28878f3-ea3f-4b3e-ae90-872f8505e35f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93cad958-426e-43bb-bf83-fff7d7023357"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0baa810e-07c5-417d-b6f0-415bcabd3042",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6d9ddd4c-c8db-4b28-98d6-1c0d79f25bdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13a70ed9-8fa0-40a7-97de-ceea4e5dfb9f",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b82c4049-62e1-45c6-86aa-9d0cb3a1c200",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6493eb6-747b-4542-b4b4-1721a51801de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b207f30-c27f-4c46-97fe-5b715a44fe64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "5431e834-f878-4f89-9bcb-176c0a33e599"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80c7b69c-f8bc-4528-87c2-40840ea1a406",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ea2ba15-fdbe-4d37-8b5f-321abb7a795f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "148ab183-4d70-4ebe-b4fa-e8ab5e79e118"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01997ec5-040d-4c18-ac2b-583079a36d40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0fffa728-e17c-42b7-af20-f603dc7ca4cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edff213c-0c15-4362-8879-b040ad3f120e",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "935f9184-150c-45a1-a287-551fff9dd057",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18256e8d-1eb3-4e23-97f0-12cc684804a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81bd801f-82e2-4387-84b5-87595d06d8b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e419b8ac-67a5-4d0c-a4b0-00e574eefd86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ceb9956-3622-44ba-986d-8856ad9f6e26",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cc9531c-4f42-4dd0-93bf-f6b716b634b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e131ac1a-2ae3-482d-897e-3809f94bc681"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7787b2a0-91b6-4f38-82af-31f213c8ec61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b169827-ded1-40ec-b572-b640a5500a00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f611063-a4c2-4029-8a95-cd82aec42c6e",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db1e5f7a-9ca7-41ae-855b-8306593c3d91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55283ff0-6e3b-431e-9a81-99a1edd8f956"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5826688-37b1-4d66-9e3d-62af8bc50b9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8d15c63-8751-4256-bfbd-2d338dd6f929"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17e63bd2-e9fe-4734-a618-f6384899cd12",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c2bfc03-f701-4d91-a942-65cd3204695a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "380d900d-efe7-486e-9f74-9afad7d625f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd1d3e63-7af1-4eb1-873f-c3512ae7ce47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "df076343-47b8-4eff-8efc-b822f44b34e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d4892b3-eb94-42fa-a649-e841e883f986",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f17e8016-c9e2-4f13-aadb-81cebc5c76b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89e91ae6-99e7-4428-866e-1a5f0f82e990"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eca9a7b-d898-4468-a4f8-e47cc15fb770",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "8d4fe35d-d39b-400e-bc5a-0386bea6752e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7d8b15c-1930-4537-b768-b9e183aba804",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d30b693d-a51a-44e3-9939-010f20e71081",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e68b0a6-f1fc-4aff-a4aa-be1532771a4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3734aa22-3745-4aad-b988-796d7bef3dcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "01c0accf-4667-4245-b5f5-2c35b692e720"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3295247c-b377-4a04-9e11-0774a3438b1b",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e80de37-46aa-4cc6-a420-c7ed8c956be2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8717517-fb9f-4d6e-9c32-975623df6e55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2299d490-479b-4f64-a0d5-ba5b569eb0eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "33d19989-9a37-4d51-834f-6dc3cc45511f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97c45aee-17c3-4035-a323-4647a2bdd62e",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "492bdeaa-3ba5-4813-8bf5-e3d34a854d7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bf9e574-bc84-46af-bdec-aceceb119250"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6dfaf54-8637-4399-8160-4f1f73466c40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d86fcb8-38b0-46c4-baad-4c7f86129a26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6f5233a-31cb-4ed9-9df1-64c9ad0e8273",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcad1a53-e1cf-40c5-85d6-5b4acdcea7f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad5c6b3d-2cf7-4604-8a67-9ab5d0327d1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95f5b520-1808-437c-b86f-b84932340faf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e7c6e49-b51b-46b9-a4da-6f4da6a48e2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ef56971-22a4-480f-9e2e-880f086ae07a",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab0baa30-3523-4f4f-8351-0bfe858d1e99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f8d03cf-884a-4516-ad7e-500643c27951"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b82716f7-b2b7-4a54-85ae-59389d54991c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "3f5233e0-6c78-428a-a9b1-c159f771b903"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aaa3df3-3538-4b86-b2d6-e987412d02ac",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f02fb32-f89d-4f34-958f-75f9efb89011",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2d550791-1c34-45ad-8730-456a22c05f4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b545283e-f6d5-4989-ad1b-bbfd1613825c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "27131375-a00c-4889-967d-a88d192120b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "673bc955-d3f0-4e8a-80a6-99f7b57c42e5",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a8a3dbd-bf72-4850-9c52-841c63dad499",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42175dd7-d675-4ccc-9112-7df25c6e4353"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c98f729e-1214-4391-be80-c771c7c60b4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b801e55d-c160-4584-821a-1dcf6a9f26f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d6a123f-03f1-4272-b17a-e69fdae34b10",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "443d0e1c-daff-4587-80b9-c23238e691bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05cc4864-1e36-45e8-8e7c-93989d873d79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12dee948-2552-4c08-93f8-6fd63f8462bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "7c47e739-e922-4cbb-9006-3cef3a205c3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26b6c149-baa2-4a1a-97ae-8a7c30d1c105",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3772284c-da60-4cb4-a4ac-4f136fb56dc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70ef5501-cd2f-4fa1-b66f-23f2705764c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "587e7223-0db1-4611-82db-345f80cd8e3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0c4e4cc3-a839-4afb-9cfd-955226e87095"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ad7cc64-43d4-4ec3-b03f-13935446d275",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dc9a7f9-a7fb-4357-b584-9b4be6033327",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7178ade-f7ba-4719-a08c-87bd54d75402"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9e09c2f-db3f-4ce7-8b0f-67079c82f00a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "adb19d48-2073-438a-8d6a-9c2683823354"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cc88dfc-8fda-430b-8d14-55f3a0d7d203",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4274ee3-f256-4446-b499-5c5f1c3a79e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2564b89b-7efb-4459-b8d8-5fbb51d37460"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48942e22-c301-472c-b208-52467cf97fad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5c919799-fcc7-4539-8bb4-d7dc300afa30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ce3ddfb-f80b-43c3-8bd7-1e24e372b8f9",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a80c31c-26d9-4623-a75b-a7243e9675ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4912b86b-f1bc-4d2a-83db-83bf929a460d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef744b8b-d0b8-4c4e-8eaa-79fed567862d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "aae86d72-3a94-48ae-a6ca-6f44c6dfcf1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b424ed75-1686-4693-88cf-2c3f04cb4a68",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dddf458-dfbb-4200-a7ed-b3e82b98a63f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d7d76b4-9677-49cd-b0ab-477aad78e67a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed0356f2-9f21-422c-b96b-cc9dd913d110",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "932221f9-a2c6-424b-a720-dbc9ef1a4c4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5317b2c2-d9c1-4089-a0ee-ad0e61acf4bf",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b45e53b-2d3c-4195-bff2-3883da930ec4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cc5cd70-b60c-4532-b48c-3c166acfd705"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "268656c3-fd49-493a-b570-2f71ecd64716",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9ae7b1d-1bd7-405e-8189-df97465668a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "432b4e4d-6e56-43c0-9ddc-f5299fa916b7",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d06b764-7bff-4d5f-922d-72b61883e07b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b68caf1d-1754-4feb-be12-187f37b77ab2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75d73ed4-34ce-457a-bcb5-6138cd268b34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a122854f-b5d2-4864-9ad7-d745e36969d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "109a20b1-c8c0-4945-a353-b7f46c32597b",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed4bacd1-45d1-46e9-81e7-2c7fab50e9b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34e19a75-66d6-4303-8a2e-ce8818eb3790"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43d01e3c-1f30-4f15-a460-8a8a79c57c96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5bd798ee-622f-4ce1-87b5-21a0ea69b63f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "762b0804-7174-4d16-af5c-bdae6a0df7bc",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83ebdbb5-f930-4168-a8cb-f153e6f91421",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "792dd4f4-4f75-4ea8-be28-8ed3ff772741"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6340f72-aef2-445e-9899-a6d20823ea8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "92e06946-990c-4a71-9235-bd1269bc632a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47c0ce18-692d-4b17-a1da-bf061691fb61",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bf2091c-2d96-474c-9f82-640fcf33f066",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3c6de5c-ea3b-41ea-98e3-11ef39a37ceb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3595cda-f657-4d90-831a-f993858233a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "000e6bd6-12bf-4dfc-bd4d-81e8526bf4c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "178959bd-8838-45fc-b5bf-f9ef96b84ee5",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dffb6fa-7542-4ea8-8ae0-1c29a886c7f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbe5c87d-8c4c-4a61-a4ad-8f1b50146f3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6db727a-d280-4ba3-980c-e264f06d039d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1c903cd6-f14d-4483-a91f-14301998da9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "498f0e3f-7e37-4f1c-a5eb-6ac96744fd17",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c39691a2-343f-4365-9826-33d4ad44b373",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90e0a058-491a-482b-9edf-62a3ba3ec336"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "014275c5-992a-4da6-8bc2-8a7e006bd727",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "74c27676-47fe-4e53-ae80-be788a82b8f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b17d6e5-2c49-4c05-929e-fb46532f4148",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e37f2d11-b547-42d9-8b87-d4a3e1599a9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b70277f-eaf4-4943-8b8d-4540bf0f870d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5815afc1-6159-4222-b218-369a886de172",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "e343eacf-be40-4672-ae9b-2ac453893f8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25d3651b-6e1f-473f-96f8-c39a8f9b0508",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0db2ac02-8fe1-4a10-a38a-312eea8029b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d5a3587-1760-4350-bc54-9161b49ac5ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acd2b024-11ac-49ef-902e-b2d6f88df4fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "083aa4fd-ff8f-4768-ba07-d029588e09d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04736c36-c0ac-4c1f-a6d8-67c407fa0c46",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40f74af2-f078-4d69-a2e8-3e399def1221",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06c634e3-a8b8-42b5-bce8-1cb9844ef0bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49d36cac-9bbe-4fc2-9df2-b745ac7e6bb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae3a72d1-ca36-4720-9053-ecfb22b8e709"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21648e90-921b-4221-b1fa-52de3000ea97",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b9ad21c-fbcc-4c9f-bfac-3bc44dd8d011",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ce58632-c5e1-42f8-b905-63d58f604cdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c1707ae-c839-47bb-9e10-bc41cf91a3f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d397fc3e-18f8-413b-a59c-465093887191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64252290-85de-4507-914d-6e2416bd4142",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6574c512-f439-49b1-a205-ef7eea4ba06b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88daac03-fd8e-42c7-8071-0d8b01c4935a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5054576-3f5e-4b80-adef-5a539de93e67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1156784d-83c8-41d1-9ad4-2c9da966c328"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c26266d-8939-419c-a365-bc033af152fa",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4877254-553b-4174-9695-f62a795117c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13432d31-9358-4512-814f-19337faf4b46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b66fb07-4ae5-4bb0-a33c-79184039afd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "747922bb-3fc7-4c0f-8c53-ad68f2b8d259"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11ae4e0e-0258-417e-8cee-d8257acf4ef2",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b848f6af-1fe6-4b64-9cc5-d624fe88b9eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "591030c7-8bf6-4aab-a2b5-9dda37df2ad5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3992d317-19f9-4f17-973b-f6a163a41854",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "fb4819f6-058c-4e9d-8450-7813bfe27dcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3101dbdb-a198-444f-b147-c8a581c6ea09",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93aec7e4-53dd-42d3-baae-780431646603",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa189d27-2881-4841-82b1-21c21eafa61f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bee910af-d432-4f9b-85b7-f2f940e971a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e2cd3eb4-ef5d-40f5-afc9-5d924e095813"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b7dd3bd-70ca-4032-9d94-b6c2e7e96433",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17c05288-ac72-4e7f-b074-074e00890ded",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1015fd1b-325a-4280-a9f6-9ed1c8cb01f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6f6af5f-c611-41d3-a818-adbcd8261239",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8d0df6f7-94f9-4320-b6f1-8dd4d43ce6a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b852215-d12a-46fc-a51c-04b0de7eb8b0",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df814dd1-5473-4287-81f8-cab70d7da98c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "192f2e1c-cb39-42af-a179-a68601ae5b01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c405b2f-c561-4ee7-83a0-d7d27c388ad6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8e65978e-cdbc-4f89-b203-8ae71d5b281d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58133157-ec13-47eb-9533-b4eaf250f73b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "626cd374-d262-4b61-8f5e-4daf164e7b14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9244fed-7e68-4060-afed-d44f902ef8f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2549aea2-1b04-4d8d-8fb6-b85401a7152d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "36cc5fff-0c8f-49d2-93c0-a2ebf0cb7b79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7a6d299-e41a-49b8-aa5f-2a930aba187a",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "363bb25c-6610-477a-8742-ebc814b3ab21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc9f9ba2-4ae7-4790-97d9-1fa349495b96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71ec3407-c637-48c6-835a-6f8535582450",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "a08269e2-4773-4344-b807-41c0f19cef2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c40c74e-25d9-4fc6-bb1f-0d0af8601be9",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bfd0d68-e3fc-4fd7-b2fb-099e890c28b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9583440-5af3-49fe-93c2-16bb65bc738a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d82fc7f-643d-4844-b65c-075e0ececd69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "6586cc19-bd20-4a0c-984d-b02882ea1c32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c43b3f44-b50c-44a3-9901-4d5b07c15c39",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61f56fef-da52-4e09-bf91-f668bf415249",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61771545-acad-4957-963f-940138117755"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff5b3b57-e3f6-4789-8dfb-32014fdac83e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce80911b-3b19-49a7-860f-62ca928db95f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c31fdf94-0979-4196-b2a8-149118093868",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcceb0ef-b831-4ed1-8f23-e2d72bfb08f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73d6a29b-5beb-4886-885c-df6aad67339b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc55c24c-06e9-4bf1-a1b4-70fe9db0a816",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7262c391-cc38-460d-87e6-26ef5bba5425"
                        }
                      }
                    ]
                  },
                  {
                    "id": "582759a6-a361-4b9b-83e3-15af1cfff56b",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e244058-37b4-49f1-9f07-b30afb65dfcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c758923-7a2a-4e65-9b2d-1261082b0f2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "132cfbc6-7655-4566-b87b-7c4642c9a0ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "370de020-a8d2-4065-ae95-d1861905c807"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7b6aa9c-b117-4f3b-b714-248c54024424",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0dc9f5a-0332-434d-bda0-3f117cf30299",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0e5acd6-35aa-4c02-a350-5de86c5a2bfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c10f0663-637f-40c2-9186-24f7f114bb11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "85b1a9aa-7760-434f-ac89-bc26383f0a94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e03017b-cb54-4e59-8732-bdbab765c9f3",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6871c967-a222-425d-90bb-e56ad5974aba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "913512d1-c906-46d7-bc93-97248711d9ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "263a734b-d1e6-4de2-84a1-a9d385c96588",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "50fd5db0-498a-4393-a422-aa975411f3d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea8851b8-2a23-4245-904d-9cf418a1e5e4",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce5e6b6f-3dd4-48a3-bbec-db06a9c82c62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a92834c-d5d3-4e57-9fc2-fe33edb290a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71c2db2b-01eb-4b73-851b-b66cde53acae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d5000a9-bfac-457e-a4ff-5880aa8f4181"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53eaeb0c-90d6-4d3b-9ce5-9f0311e2e814",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b221ebd-62f8-44cf-bc26-55c13ee1bab7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d2c9f42-43db-4e3d-b2c4-491a3096f6d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16f840c6-6746-4919-9a41-444c905ed2d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a525190c-f1e0-4c4e-b1d9-1f2e5eea7c70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7d038b0-2f82-43fb-ba3b-20fa85f1c471",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b770438-9570-4db4-8a11-67f5647870f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10515abb-4b16-4572-a252-a2d297766f5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c48b552-c254-42f7-88bd-d2d8b7d21b24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "aba71cef-4220-49fa-8312-673bf1aeb061"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6463fd0d-8a85-4f4c-9165-56b07b256f4e",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c01595dc-63c7-449b-b166-b17626c8579d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffcc3ff0-af2d-44fe-b852-fff6123366b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e0e8162-0359-4207-a8fb-ef08e70f0277",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bfcf3d8c-4c87-47cf-8806-17d90e470cc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca488f83-b159-4c47-9797-851ea339daab",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c354591-b317-4757-9302-36c924ea160e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3877ecc4-e660-49ce-b729-73213816c63a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3e8818e-1709-4f05-b334-2fd8a4334d28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b29cb636-7f63-45f2-af11-1f5513e6aa1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76b21aa4-c206-4594-a091-b21d6af62c5d",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a2842db-2576-4e7f-b999-6732b4e15bb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4540e3a4-3881-4802-a3da-92db428ddd5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa336d6c-e5b0-4920-9e39-c71e0d8cd658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2af9dbfa-1d6f-4257-89d0-c5dd6e324972"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22b75562-2b5b-4cce-8597-0fb33ef7b7aa",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33e75641-e938-4b5d-89c1-99e5a0c7a7cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d504e552-5da7-427d-82e5-087c2d356fa2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f3dd1e9-69e2-4438-9aae-a0c1c6934837",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e89a03f-7dea-4f8e-af7e-77fd598b33d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f49e0577-04fd-4cab-ad61-2eb1b8ad21f4",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c343038-7416-4b6d-ad65-98a65d9db82f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f817285-4673-47af-9926-1b73eee78dbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35463679-2a5f-4f12-bad0-bea32db95c78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ad59767c-e673-4f54-a855-01f50f8308b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6392fcd3-2d05-4ea9-9693-2e7a17cea47e",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "073b1a0e-6baf-42ce-9627-ad85873cdda1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fee9df71-9104-4771-9d85-8f9be6855739"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "304d8378-5d77-4ffe-969b-0cadda0f2b8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7f37761-e0f7-4456-8203-82efb621f64b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a4c1885-b646-4d5a-9985-7016c0b8d17e",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1eceb56-fb81-40da-9e22-1ff32b907997",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e765038f-e517-4e59-b731-4892b61e031d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8569c8d9-0b03-46bd-ba0b-6ccfd39cfab9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9dddc1b-702a-4683-a4a9-b4dc677ce25c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6047d03-0943-431d-9ded-a7ca06715204",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a88e3a4-ade2-45b9-afb5-525e14e8b273",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e672ef3b-eed4-4c39-9281-0bff7f13afcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b12dc5bf-035f-412c-b1ac-1e9217004fac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "503b465d-1512-40eb-afa4-03e1a1b427f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "352943b0-86ce-4618-8a11-16ada25a1b40",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5b9924a-319e-486a-bc43-5650bf119cac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7739cad-0e98-4ee1-a7c8-39701d0e5019"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9708ff83-9f2f-4e0e-9ce5-dc16d45da8fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "20ebf074-3b2d-41ac-9273-598f12109990"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8996416f-c6f0-4cfc-b942-d97fdbc78ef3",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ad0053f-02c1-4f9c-b423-24e67117705d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b90f4f7a-b827-431d-b317-7dafa2d3014d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d78b2666-2f4c-4081-996c-93250fce27e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "2708e52d-cc60-4f2a-9640-ff1fc7307483"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e796768e-4f84-48b3-90f6-d99c001cb632",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcfe5cfe-566d-4f27-aacf-37950e545970",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e39d25ea-de29-4e02-b95b-69c3f8eea3a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "272954d9-a204-4dc9-97d6-ebf5d73622c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7e97a317-22ef-464b-a9ef-2ed1fe839ca2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd1fde5b-5903-4d47-9ffa-df7d6173e428",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f1a74c9-4e76-439e-8736-880ce36a220d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9923381-77c8-4f15-bf38-842920711ff7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cec48289-5c98-4869-ad29-737df5e67765",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa34cc7f-5445-4c99-8f66-bb599f4e26ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ba4b3a8-48b7-4379-8a6a-ed960cca36ad",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cee38d0e-5093-4572-bca5-6ab44ef51cc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "179047ec-2c19-4526-8722-aed521626f47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1951af12-a6ef-4dd3-bcb3-e810315845c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c10022e0-c47f-4bf9-9fd2-843b548bfbfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9be5759b-5b53-4ac8-8d70-de8ed7eb4db6",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "554bec98-4e10-45c2-99ec-3f63e2417dd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fdcfa96-31db-49d8-b934-62a14e18f798"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5bc241a-bdce-464f-96f5-740559a9dc68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "20f03667-8224-4143-a075-891e1fbd2fce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8a6132f-61fa-4766-9e7c-b423ce8323cd",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b722eba0-c52b-46b3-b625-3b13dc9eb736",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a197084b-f270-4122-b627-2d6b7c8da821"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cbc69e6-453e-4402-959a-1e0cb82f37e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bc4a5bdf-bb8f-4604-b06e-5ec6d790d559"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b32ecffc-74ab-40cf-a92b-f588435074d4",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d885147e-8e57-4e37-a788-cf76171c8506",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "230e8b8d-e667-4456-abc7-5dc97bd480b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b4daeab-d1d9-4852-ae4f-570fe49f748f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f9a29fed-fd40-4e69-b77b-ef9be5a481c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b48c1bb4-ae26-4361-a16b-47ee2333520f",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79bad2b9-d910-40df-8adf-3a6e3b1965c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e563c12a-77ba-480f-a0d8-349453fe8da5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9c8e452-2392-425c-8f09-b00afaa7092b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "5795ee0a-b763-479a-8efc-5b1f5b17259a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4fc3ecb-a1ab-429c-a11c-418d79d61a75",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea51c5fc-7d05-4610-b6fe-93a2ca3af147",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3451249-2085-4c81-8a92-c542f53102da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c153b13-174e-4653-a886-dd24bdfff497",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d7d96514-b4d2-40ab-b1fd-fca8c983dcab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1e5347a-2885-4022-997c-d64edb894f14",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fff0acc-6dd5-442d-bad6-2e33d35b7d05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d265ecf9-7126-4910-b0c4-2fcdfa8b7b53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1831dff-375e-432a-b3f1-0780839d35c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7bcfca01-69ad-4db9-bd58-6e6c5565cdab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55ea61df-1fc4-41e1-9246-f9ce9b0296cf",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc6ed008-e7df-471f-8f7f-5098651d07a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e9c3ead-05bc-4db7-b8d3-ca269ca35f99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e671b273-f879-4919-99ab-ebc7d009f715",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "32ff3ffb-025d-457c-9413-fd12f1e70256"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f771f94b-0220-4fdf-8c19-81d4822c2c28",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d58aea13-68c8-41ec-b8fb-f7e9cdec16ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "7eeb2ed3-d193-4e21-8aef-5c16d4958105"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c6502a7-cbb5-4ca9-af6c-d43b8c868427",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "93e20ce7-857d-4f91-99bd-7df109bcf55f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4ca673b3-d833-42c9-a0fb-f04100654a16",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0248a247-8a02-47aa-bbe7-4f2de8eb513d",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87ad029c-13a0-480d-9518-ccc1ecbb3676",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "09e5db71-db44-4df8-ac67-6aef58e85830"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4f320a5-713c-44cd-9e6b-e1ed6b8dfe82",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "44fafe2a-8f8d-40d1-8756-4c62f9f5ea58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d29cd3c8-8ee6-4105-952b-8ef658beade7",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93e32478-e52a-4647-bb70-1b6c3dd57f18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3d61f5c4-30f9-427f-b9c0-9d84a6c0ae52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36a4679a-9486-47d5-ac37-afb6cba85184",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "6d5156e7-09c3-4d64-acc9-4d3c29442f94"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d19146e0-4d1f-439f-80bf-60099d069424",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "800eca11-120b-411b-874a-e20f60168c20"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f55ea557-f71a-4c57-a8e9-4b436b501d77",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8d2eeac2-58b7-47fc-bc60-0c760fbc9331"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5de6a4d0-11e1-4366-9cf8-0760cbe348b1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "619bf306-d262-4e9c-b1e7-826d59c7a237"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "53daaefe-ac08-4305-a1d6-163913b93438",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "06b55f76-b040-4fe2-8b14-7d81fc9aa950"
                }
              }
            ]
          },
          {
            "id": "6b11fca9-d71c-465d-97d0-f6971d0e06e4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a0379195-ebaa-43d5-a5a4-5cbd16928006",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5e080496-d1f6-40f5-87c8-4ad453db7f7f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ab380d28-c0c7-4e8d-a638-3863134d5a61"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "386c3d16-5b92-4123-bcb0-3d4f44e4a461",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "faacd6dd-e07b-4538-a4b7-98894a7ef11e"
                    }
                  }
                ]
              },
              {
                "id": "d88000b7-9b7d-4022-8c06-6de154b1572b",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "67749f4b-dfae-420a-bcb1-db66ebea2dba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e2c4859c-0f6d-44b2-93fe-a7289f68cc4b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7d10fcfe-28d4-4bcd-aa91-2c88d15a7baf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3e982ed3-8077-4f55-b94d-fcb2d2a58d9f"
                    }
                  }
                ]
              },
              {
                "id": "7f1f2cc5-5434-4498-aac1-29f0e056ed29",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "38b306fb-0e18-4468-b03e-f43095a1fc19",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "41a6ad84-2b88-4acf-84e7-458a2ee29f11"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a4194421-fada-4169-98b0-3dd9c3ccb928",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "a6e07b3b-3811-4316-90ec-954acae957f1"
                    }
                  }
                ]
              },
              {
                "id": "08ee5b5b-1424-4380-92f7-b826f3408b4d",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e2d6e4bb-ad22-498f-baa0-7d085177fbaa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e23866fb-172c-4e0e-a38f-64ec09ef59d2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f3313a24-b2c1-424c-a22e-3a1fea897e77",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "6307f695-55c1-4d99-893e-83a7186e10b1"
                    }
                  }
                ]
              },
              {
                "id": "6dee0f55-06d9-4e76-a413-38950aca22ea",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cc96e477-0d66-4098-a108-4cc8edbdf83f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "87b8e284-4bb4-4e2a-adb6-ae2292a408fe"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b9d4f80e-ff39-4fe7-8e75-c5fee14bd68e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "00ff046b-62ec-4a63-8120-80205a02c237"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "43f22a83-91ba-48ad-81f2-b6d11b28ae0c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1e837b25-6914-491d-80c9-ba1955625057"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a43b6151-d45d-4a62-8a8d-56e832235711",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1d9a4061-d0ac-4f55-83d8-7c24f126ef12"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "40a319a9-8ee7-40c2-8199-3529a7bbe602",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "221f3f43-7f38-4df9-9d17-6dd14cad9523"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5674eeba-f987-4e32-8dd7-2414335e0b51",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ffad0982-acd0-4953-b80d-4373a9c79e0f"
            }
          }
        ]
      },
      {
        "id": "1e7da08e-3fc6-4246-ad7b-f106fe418b10",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "ab769d38-92cc-418b-9f10-d7f64a42b1af",
            "name": "Negative Testing",
            "item": [
              {
                "id": "988d1746-5152-4852-b95a-326e163d4dcd",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4a964025-f186-487b-872b-9272c15dfa25",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ed66ae7-31a3-4e56-8461-3d5200fd4a57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84475611-2191-423e-83d0-a01648fe2764"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daf9b586-2160-426f-91d9-eb41f999da67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "7469466f-3137-4fcf-bf13-9f0e1981634f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b722a1c0-757e-441a-ac77-59c303afa18a",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "857ceea7-6ff9-40ce-a53c-f3e5023ba31e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1eef2d7c-4c77-4e2c-95a2-f7e7460636e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d35a6104-9be0-4f9e-bfc7-540432f25153",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6101212a-44c7-4b9f-a3bb-80ae8a9104f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3409a69-e292-4f6a-b4dc-df1972db1585",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23bf8332-377b-4afd-92b7-328d6d393111",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa614650-5ced-4573-b4ed-85c74b43f463"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f492a9c-f94b-4651-8948-393183a92fd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "71f5e727-a24d-41e2-b929-fd0862cd493c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99534d31-7f40-470c-8b5d-e5a2ffebe72a",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8974935-ecff-4252-bf0b-d17abdd104b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3322bb51-580c-4c29-a9fd-8e62143e19d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b76d677-5b39-417a-96a4-394bdcff1d72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9769e496-bae0-4c9f-aa20-4941c596a18c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96f9afa6-085e-40ff-be44-471547f0d3db",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d9e1296-9946-4782-af5a-0f00ad248abc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d4a390b-9351-4a32-96a2-768b8dcd3afb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48b90ab4-e0e6-4c6c-be02-b0fc99b1c8c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "282199e0-9531-4142-a514-4a6456873fe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b928322c-331a-4223-8565-dea63bcc8230",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "491192f6-0eba-468b-9b84-2ec36ad73962",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92fb90d4-f688-48d0-970c-006645065f30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a55ff5d8-e5e6-413d-8ff3-2acf0c715ba0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "370efce3-df7f-4384-aaa5-0f210bcdebbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3a2169f-438a-4699-bbbd-cbfed0f1632a",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee34e34e-a3db-4943-9700-030eae05b270",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1c3c8c5-9235-44ed-8f82-3cd1ab90a8d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ce7b999-0c8c-4354-b450-a27f8c62d890",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "905e1c53-8d6f-4439-930a-c6f69ad21f8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70681efe-7629-4d32-8800-c7e2de58b842",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e52d657-d099-4ee5-974b-f13321ec71a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cda47e9c-64ec-4839-b71d-dde71343cc21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5571470-1cc1-4c24-9af9-7e31930bac52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ace6db2-cf9c-4ffe-8da1-836b1b347c4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4ee892f-4ca4-45bc-a6a3-ed53a8dc4345",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a055c80e-556d-419a-809d-b3053d0f7fd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2c48a1c-8525-44a5-a622-7121a20dfa39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c18ba926-05b1-4caf-b416-2b7a67b23773",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a971bf1-547b-44e5-a2d1-3c03bdec0efe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7b31fa5-ccca-4229-b0f5-861a08f5e41d",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a802dae-4398-4e58-ace4-bbb3c61436d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6237eec8-c32f-4ddb-8a46-ab08f9da6f1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a65db736-9cbc-4fd4-9610-1730a34c1a9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ca2d6c3-4dbf-4f61-b437-6a8769d49543"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7c6113e-5efd-4796-b47a-c8cecb5c3563",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76810815-70fc-4fe0-9c94-ace31748ae4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9c3c798-8f0d-42db-8bac-15e1f3df5b7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93615f59-9dc0-4c47-8f61-e74e7eab335e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "67a0e213-749b-451e-9ce6-e62162da12c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47dd1e30-ba7b-491f-b3ee-1596e6117c84",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3828d83-ba2a-48f9-b614-54b0cd3cc339",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72270a1a-2c19-46f7-bef8-5cae67803273"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ee9e266-3c89-4662-9cf7-2f3771901e54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b537f73e-c644-4c2f-a2ef-449d2f8879f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b59445d3-d47a-4db1-89b0-1bb417d351ce",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9635b2f-0930-48ab-9c60-8b4bf2196cc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09e1ac3e-e361-4bef-a0e5-81ce05ef22bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a5dd7ff-dfaa-42f0-aa32-318ab31b3bac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "236d5f53-8a68-43ea-9dd0-2ef6904426e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0963b591-dd41-4fbb-8a21-a32a3eb0b5c5",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f3bc9d6-d5fc-401b-befb-2f7620fc8ae6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c930de0a-26fc-489b-907d-0929e00d861e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c207b7c-ff2d-4e25-a905-deedfa1def76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "ffc2582a-2dea-4ece-a1f4-a0df57105e91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b08a0c61-1d63-4e98-b605-4cc52c766531",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "538081ea-86cb-470a-b573-2907b003b20b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86f230f7-38f7-4591-a00a-79ca5ab7f1ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a9ea7bf-bb56-4b27-8769-028191d6d184",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e17b713-0eb9-44fd-90cf-b33bbb90b1da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df843c2e-b7bc-4e7d-8fd7-1403caa54c1b",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a92c9f19-9145-4213-8f45-1f199bf6756e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed86bcd1-2ebb-4b15-ba36-c3ebe4c28f47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d1cf031-a8af-4a84-a823-d814e80a7142",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "9cbdafb9-28f7-47be-95b9-151245f3d00e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80ddacc4-d02c-488c-89cf-0cacc69bbd42",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae1ef57d-0a88-4515-8da8-0ff344c7e714",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ef995e8-d5d7-4395-95f9-88b7997be276"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83d32315-380d-4b5b-acf0-f057d7263fe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4861da0-8187-4922-9340-8dcb1317d19a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2412761-3ecf-4fa7-890c-6bb23c1dfd46",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16945ac6-ab36-4212-b3d8-679a1f667275",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43c1b0f5-cddc-4a02-8d4a-2c37f6d02b89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f82d626e-0896-4e8d-9d95-2742b446c425",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "98bc79c3-cce2-4c71-ba44-66e4d5fc7cab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bfdaff3-2781-4551-9b4a-8272dfc02710",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76f40620-7542-4d99-b97b-249282230c3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdf5275f-bd59-4033-a7e7-9e132f9dada5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61126aa2-2584-42fc-83d1-02b2566126d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c616cad-c0fe-4751-bac0-e312f21e372a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bed5ac6-172a-44b2-ab0d-8314476ae4ce",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e548510-30d6-456f-9f82-8fb2140fc7b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e945839-48ea-4b4b-b760-6864b5954a71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62f753df-be39-4578-9d0c-b1205ccbef1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e029ef6-6634-4e5e-bb92-22abe66ad5e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5407699-80ea-4d1c-86d9-a7c94452a494",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7498cb5-c068-4a45-a20d-6eeaeb613dc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "066096bc-814f-467b-b268-ffc2614a745a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4e9e865-e902-4b87-a474-75067973f06b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0beab25c-7ca4-4829-9bfe-3041681134eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04860f55-4aaa-48c9-8994-e045456139d3",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "722a1dc5-6e26-445d-a320-5c81e6869e12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17bd18f4-0fd0-49c0-97d5-b1cbf7a50365"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7465c043-3419-4d3f-909b-e76bc8ad9865",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9db51091-d5c7-489c-adf1-5804a68817f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "708e3f59-743e-4e1e-9de7-1ec8f462c12e",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6199e5c7-a11a-4a58-8ab3-1805772ab87f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7eb18e04-38de-4e62-bb8f-d5ecd00e59ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea1bd97a-43d5-4ee0-a9d3-f11acf8f4937",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b805f609-ac88-4c15-98d0-52be7b1a0c50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e69199a-98c7-4c7f-abbc-071a288e68c1",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9972f5f-8812-4765-9c5e-48e36e76e847",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0b0fb3d-1e82-4c27-add5-9224fb4039ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2052d772-da2e-44c9-ad7f-9d0e1224060a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0198d2ac-57ac-457c-9128-c87499d20c63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5e3ce9c-a184-4edd-b57a-0b62efacd269",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1814af2-af75-4b81-b8ab-08fe6b6302bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0be46c69-b866-46ec-8d50-f2187ba96179"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53a98f10-0612-4ca2-9144-b48b31a0321c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ef540ef-ad0b-4bff-8c73-b4aa8d3897f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ef9a1b0-f8cd-4d9b-a986-ffaa79d90c93",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be67d6e2-c376-4497-812b-384695c78dc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1527c916-4be5-47bf-ad81-0efd6a4b8135"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9a38aa4-982d-49c0-a23c-5ddaacba912e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ffd51d78-0ff2-405a-a012-6906a352fd50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b28c0b2-52ea-4bc6-9a46-0480a0ec182c",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dae6ab0-3105-4a5a-8e84-f811d4254a66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d61bcfe-f71b-40af-8f1f-0f670e30d996"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c8d17f2-b036-4d35-89f1-b70378458c96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c790eafa-3bff-4450-9ca8-cfb1b4198f45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "988530e0-209e-481e-8adc-1843d8503e55",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d366d7e6-28d8-483c-bc2e-f369af02dad5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "788f06c7-d3a6-47d4-94db-bb0d40d0d203"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6adfe7da-13a4-4768-9b7e-237cc4bd066e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0af5c417-082a-43b5-a43b-06bcc2542bae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f87ae345-555c-4044-8a52-9546b17cdb9b",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c9b56f3-97bc-4b59-9381-7551a5caac07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "818a25ce-43a0-44e3-9e97-1b9174afe847"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fad6d585-9d30-46d5-ba3c-13c8dfe40724",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a3d9ca1-5d9d-4b43-9142-ce880fd25144"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53217735-d759-4c0e-96f8-f8b5c97cd43f",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02ef7a3c-9d07-4d5b-944f-d89b1cd53dde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa1e6142-0a5a-4b8c-b217-9b73720928c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd0b508a-72a7-4fb9-9147-5584852215d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2eacdcd7-1a16-4117-82f1-f695344dd9ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b3e0372-0563-4c81-841d-08ab306967f2",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97ac9039-841d-4494-b61d-2b5fa38a4c87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aeef580b-547b-4800-ad86-26c0506de294"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4daad6ee-d58d-4241-befe-858f0b0ae6a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bbef226c-3b9e-4c55-9b85-b156e480f74b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f387c351-621d-40c6-ba38-71ce5ef2e9f6",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b2bd940-9e63-48f1-81ec-591a8931f2db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b2f68fa-dab6-4dcb-b476-ef30ee92a7fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b5bc169-742a-464c-a4ba-d1afb5d014d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d558b44f-b4c8-4f41-b8a3-365e17daa2e6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5188fd40-31c2-47ec-8e67-c9adc83f81ca",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "12277c3a-c17e-4369-b8dc-ce65c0f794cb",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb6e2746-f2dc-452b-b08d-a0d3bf8d9ab4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8302e16-599e-49bd-bc6d-50bff58cf222"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eebbd24c-fa5c-4f79-875a-4878a70a2f99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1125bf38-ce08-430d-9ac2-20ce063a3cc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "642ee54d-61fd-4ae4-ad4b-2eafcbb8338a",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f79c8bee-614c-447b-8fdb-090d76825074",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "66140605-2b7f-4cbb-8bc8-078af2d92db7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99c91c50-5471-4bef-9353-14e9b8abf615",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2092ece7-77d4-47e7-86b5-60ab98c110c7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5ff11296-31e1-43f2-827c-2422c1c8c6e4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "750d9bc8-a68c-4826-884e-b7f3007d28c4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "84cc6a03-258f-4e60-a878-769e0695f059",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "571dd2a1-81fd-42fc-b6a2-ab920576ebd5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "caaaa382-d324-4f76-949a-209e3b47e026",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "fa9d9977-13ab-4fb6-8540-2c5a6311a009"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "48ef3218-0e85-4fa5-8604-b6077e34ed82",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "38f24208-d262-43db-97b7-7a98dbd951e6"
            }
          }
        ]
      },
      {
        "id": "eac69b1b-6db8-429e-9144-5d7f8f49783c",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "049e7660-e168-4253-9d43-1288e4dbf8cd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3a49d443-15db-4777-9465-dc9751014b2e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d13504b8-6f55-413a-85fc-cbe4f09d11a2",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ea5b382-3b1a-4327-9e88-46da148a8763",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ef4e828-ccf3-4092-a47f-b8ae2aaa8b6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "063ea399-1983-434b-9cd3-436dc9e9173c",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "904bccc7-e67e-4671-9969-b7896933268a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "803ca1b1-88a1-49e1-a882-b82567dc10db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdeea282-0c02-462e-a2de-5020b4c817bc",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b111254c-d470-4a1f-ab44-0841927aae97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2688df6c-1648-4c87-baaf-63bb39743b01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78c759ef-f82d-44f2-b8a7-3a3154a1a3b9",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9716fd8-6aa1-47c0-89f9-0d62655c6152",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f9d0818-f24a-431b-9557-f1a3e9ce6262"
                        }
                      }
                    ]
                  },
                  {
                    "id": "013c1ce0-c76d-4048-bbdf-ae853de8233e",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f5c1a3b-70d1-451a-99d1-326554163522",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0860f18-3a8c-41d0-8230-a0aafe01bce2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0db7c63-091a-41f3-ba9b-d06c3f7962d9",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "306782fd-e586-4f33-a6a6-db8e512db132",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f9047cd-f160-4189-b0b5-cc57ad044609"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70942f69-76a7-45f0-aa20-2e5badfefd2d",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16fad8d9-aed0-40bf-937e-0f53d9e14d7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a606dad-2a51-4f83-a4dc-991a2dbc790d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "397452a4-3244-429d-adda-cb7367292427",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f864d98c-02f3-4b41-8ff4-2ca9b37bc548"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d31d824-d91d-4872-8caa-ccac14b64122",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8035bba0-1a28-4036-9555-2aae8c7f601e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aaf27ae7-81d8-44d4-b770-9d9a2cbb55bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d656ea3-0d06-4fa6-b34c-44a485075d62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6c3f852-bc7d-4247-af25-c669c2b4e1c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eac72c49-af34-4aa8-8be6-35dc02bab71c",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e5fcf68-96ab-41b3-b90d-e30920e89580",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b6f41a8-c3fe-4e03-ac03-062fd5f16551"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a829271-cdef-464d-9e3a-5e03f5cc5591",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35b0ec29-1a7e-4e1d-bbe3-024e9c533852"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b177559-6d11-496a-8656-a469cfe42dff",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96e31b87-5c73-4ddc-8457-d27270fbb582",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3f14692-1328-4090-b32c-eb5384532d9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bf42ed3-46ba-4d88-9dc2-4ba310ec4369",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c934620-ccef-4309-bd01-ddd184f25c4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f853f659-1e3a-4a91-9c4a-8b082ef212e2",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8982cddf-006d-44b8-87b3-f38d2bb23573",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7f19be1-dc90-4b6f-a2cb-58ce8b855985"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c701a971-71f8-43d1-889c-44a672508b00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a83a99e5-40c6-4bd4-a181-997281493107"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d70bfdbf-fcec-4912-ba4c-e0d604f71bf2",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a22f084-fd22-4668-b72e-ab7f64d352fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cc28588-b234-458c-86f7-bbe6a4f8253c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d03373da-2f36-415f-8e0e-cbdf7d20a2d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb732b8b-f63b-4179-9859-ed89d358b774"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b39de126-b86f-4198-93f4-4617bef79552",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd29c119-16a4-4b4b-802e-65c0e02188ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0aba58a6-17e2-45c8-9ee1-24271bf0efe5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c65d5b52-8636-4780-9774-f90bcf28e4e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca2a42a3-7eb8-4632-af49-0b9d7eb60930"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c045b9b-5d6e-444a-a6eb-91d5b44f9335",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89e5b23a-5462-4172-b884-82eea6cf653b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "485c645d-cf26-4274-a3ff-870ddf859583"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "056b2d9b-3e78-4b5e-a7b3-3d76138d237a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf5e4c38-796a-421b-a19f-49cc40b694a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f35e3cb0-3e1f-4a1b-ae34-b8370a36dd1e",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "923766ec-6ade-49bf-af44-3bcf64828aac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4302974-03af-46c4-bcca-b9170912e65a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af316e62-914b-4912-b830-3ee58ca10a9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cb50b99-3ca4-450e-a4c7-4aa2db597102"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dffab8ca-a9d9-406a-ad2f-b3e10eead768",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2088db49-95d8-4291-9840-a222b4a6e03e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd0c44aa-e353-4267-9cc7-6f65ff038686"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e679aa36-6312-4786-a9ca-866cb0aa4ab5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "feffa82b-e9fd-4b7e-8c94-f66323833dcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82b28f05-ce08-4c96-95da-8a66ed20c26a",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a23ce8b9-fcde-4b63-bebb-7b5d284937b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9994d6c1-c994-4863-ae74-eac4fa907a5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2919693-942d-47a3-b874-d89de78befe5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89fc2d18-94e6-40a8-9160-9b6f927a17cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02f9278c-add2-48f4-8128-0b29690d3c40",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3001622a-6271-47d4-987d-afa3d54537f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31dc8b7f-f42a-4134-bea9-0e2ae8d45d2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a7a76b0-f538-4919-bcf7-48f7cc4571ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b13d6b8-b3ed-4ef7-9e51-4923cc994406"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b906a42-7ec4-4596-9c58-98edba9c3419",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af5850f2-df1e-47e1-b9c9-c3ad16cb9461",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebcb883c-d9e1-4407-b709-742811bf8882"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eec37cd-38fe-4c8a-835d-4ad076718c07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05b5ac26-490f-4236-999d-119d35c7f97f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a008c78c-b209-478d-8e18-196328a13165",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2450197-5661-4979-a1f1-d3a3960651b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f66f0b7-cb1f-41a4-8af4-3851c4ab0fff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d52bf492-f5b2-4e50-a96a-db64d3728079",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc653eb0-888a-4be5-8e4b-5ef211729d48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e69680fe-1d89-461d-98e0-37422bceaff2",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "796d16e5-26db-476b-8695-6f05362eabf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e216211-6159-4cd6-b544-6f27d4cc12ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "547c807b-48e6-4bc4-806f-76e3627e4063",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e56cddfc-51d5-4319-8d40-767b03a3d140"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16743547-1f44-4418-ad6b-589ec0f88c7a",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aca0d41d-5e11-4f63-abcd-e5ef994c798b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "093f7eaa-df7d-4224-8242-935663cf860f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1139127-15b1-4f6e-a9bb-c7341959048c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3351829-11c1-4701-a553-161fab524ad4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5d585d3-669c-4b66-91ff-308401dc4734",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5db929f1-4e48-408d-9ce6-5db5ae8daa90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "083afaf8-7942-44da-a4b5-efa512d1158f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb8e665f-4286-4806-8c66-93a049dfbcab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4dfce04-94e7-49b4-a7c7-f85bb9ab3f0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c461c07-d268-4758-b226-6ac5745347fb",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ae3b171-03c8-40a2-b6c0-4fd620a48828",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2d4b0cc-59e9-4611-953c-721a55c33f9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afebd247-0b8d-40de-bfe9-6078b7fdd177",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de8087ae-8868-4767-a825-5c5bf129474b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "349f45cc-28bd-4094-b09d-e19aea595cda",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "312c2b84-2aa2-457e-a818-a530eb477460",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93dda29a-b20e-4c34-a8ac-bdc9873c17cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73175d89-9f5a-456b-81cb-53daa1474e0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec50c3c4-e998-4649-af31-d0067460ff0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42bb2126-dd08-45e4-89f2-eca23e355e1c",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ac48696-3b1d-4216-81b5-129d6b41040b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da995cb7-a854-44d3-93f6-c410b06eabd0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50cf3a53-89c1-499e-82b1-eab6e9300ed7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de03a5d5-8b64-4ee5-baf6-746d36ef9163"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e05fa27c-51cf-4c39-a383-1d688d5b0f30",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d54a446b-15a4-4746-a9ff-8e4528e6556c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cac2bace-1deb-43aa-8099-09bcee997667"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78fb5f74-4538-49f0-acb5-5ba6831e6c93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28d13b70-7f54-4d38-8f55-0e34d3d0404a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e7f3e33-9422-4f97-89d1-32f100fd0fe3",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a778d4fe-2713-4f5e-bccc-6234a465a6ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99012364-f7fb-44ed-830f-e14a4bebc30d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36a5e6d8-894b-4c2f-8746-b79827a644f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df6b8fab-6bc8-4ab0-ba74-6a82b036fded"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe31d47b-9c2c-44b3-889a-87950f38cf44",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be87d9ef-3421-4172-8f02-26b6b3984df2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7e081c5-ee51-4df7-b804-993d3c8c6ed2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0edd90de-a260-480a-b54c-9c8ba74e06a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0177c21-c0dd-4aa7-a261-9875900c1b7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fee3f7e-7ebd-47bd-ab81-09caaf805e7c",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d39b2240-df08-4722-8b5d-3fbf97369231",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7cd5adc1-84d8-4a67-ad82-80eef98df16c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94ee43ca-350b-4983-969b-1804a1f6e701",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d684bc7-6272-4cf1-bc43-20dbd67d2b62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3d94168-7968-4479-a3c6-6c9189d7aa32",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75ac2236-68f1-4c24-b3b8-ae64c00e3b5b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79ee9363-bea9-4714-9450-06320aac7f2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fec231c-c851-4172-a561-3cc69a81328d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68b095b6-902b-4b17-b6ac-630d70637217"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b426bd4e-5d97-4db2-b5df-2e630a6b735b",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2de97bb2-ae0c-44cd-a53e-6c168324680b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e942a1ac-aa97-4020-b27b-cd3862e88f68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d56eaaa7-5337-4b29-9f04-61f9c3f089c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef75de6f-dd44-4336-88ce-eeca17ca8017"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73e49ede-1f7a-41b0-9922-d2c2e87d1d19",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "207e7d2e-e9fd-4f07-b9b2-7602ed89b982",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb3a94b6-b309-41e8-a59c-cdb2207a8cee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fd74f8e-bc87-4eb9-a5f1-7add30c7ab77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7ce8cb8-7236-4d20-a230-f4bcdbada81e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbd15fd0-2957-4f2d-a75e-f2fc39af9f2e",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a8e7f1e-c777-4263-82ff-881805e5d5ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11c94e17-747c-4e73-b76a-0cda491a3da2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9e22c42-9af8-41a7-912d-0047bba9324e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e66d3b6-9b2f-43b9-a841-e5ee31422d37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afd4ac63-b48a-47da-a1b4-be57a21d25a8",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5513b9f3-b1cd-4577-9e45-2c54273e540d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef435264-64fd-4da0-a17c-3c2a46238dc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3cb3606-bcd7-418f-a8cf-6c0126825697",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11e296fa-7b6d-4107-ba59-4dc03e3ab208"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7eb3607-46cb-48d5-9489-cedd295e9f63",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0e16f72-57b2-4879-b65d-36be93dc9fdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f750f93-4821-4c71-95f7-ab34a0474f28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "332fafa6-d6ca-4eb6-8df9-cc1e54a78a48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c979184c-6ff8-435a-bae5-605153cdfe05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74bbf0c5-1008-42ce-922c-b29b6abc9dcd",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a40066ed-637a-495e-a1c2-aa1fee145d6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff76d266-aa54-4b23-9552-fc02b5ebf3d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcfd7d7d-562c-4713-acaf-23827a6e393b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6aff3f7e-328c-49af-802b-d1c172298724"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbe52c07-d5d3-4a0c-93ee-2e542085eb3d",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "654ba8b1-0b15-498c-873c-394e4fe95a68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98a742ff-db99-4e14-afbd-7a175bd44ede"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d9f890a-2bb2-411b-8899-0456d5ba7071",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b92477f1-1d84-4cab-a1e1-05932be688ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9c043f0-de59-4970-ac89-a9c0cf79449e",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e650f132-c06e-4efa-9bbd-da3b5d567fd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad378e8b-c6c2-4ae2-991d-8e90f4d6654f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5738eff0-cf0e-4168-bdc2-79cdf219f3c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26f5183b-3c37-49d0-8dfa-8d6f64b57582"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38345c74-6896-41be-ab8e-1bd9a6974bd0",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f369bffb-c24c-44b1-ac28-e2e660db24ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3c6951b-1fa5-4121-a548-3c7ba95305ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c464151f-c12d-4c64-bdac-0183624864a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b6ba403-03af-4fbe-a308-e4d7328e40c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4357ef0-d548-42eb-a7e5-8fe633e6480c",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed4464f0-e1cd-4471-9339-731284256970",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38c17e04-39eb-4074-b456-b277b2937b51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59f514d6-2caa-4b8d-b045-c94d7674b7a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6786f6db-0c86-4395-bc28-546767db06cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "029ce6c1-2ae5-4c1d-9fa5-325b1d3197ee",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db018c1d-fdcd-4977-afa8-446948a57f74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e275b2e3-3cfc-4b40-ac6d-624bbabb4cd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8905cab1-3488-467b-880d-0f7113333073",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b32492bf-e2b6-4e40-aeec-bb65bd6abecb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd6f8599-982d-4e93-9769-656e56f9af33",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27b95b8b-67da-46d1-b64b-e2170ec5209a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45a04a53-0421-40d1-ab1b-aeba6641d260"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7804394-cff6-4f3b-ac56-e188f571713a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ddbb2f2-2002-493d-8223-aca7a1879768"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33a6f476-5760-4d66-90ff-48403a2547fb",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dbab756-b06a-4b72-8730-9e5a7033da11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf138578-2e3a-4d1b-bdb0-59e8823a7b10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c92242e-f1e2-48d9-8124-74c718423151",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40512816-e2a4-4c98-b012-fde3467bf019"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf0c352c-4b05-41c4-8f90-7ada125551ac",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29eea4b7-f82e-4b41-b7a6-b6f10798adb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6523f4cc-4da5-48e7-8d3d-87cd626668f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8e1a53f-4bc4-4c62-94db-92328743587e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95af9da6-680c-467b-8a1b-3e1051d60fa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a635172-64d4-488c-84d8-1ac437a3b9a0",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59e28969-d9b5-4e29-8131-b062c945bec2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53447842-48ca-4186-9916-54a3ba756bf2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98fe49e9-97a0-4e50-9ca9-aec1366c8c2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "026c1e04-9835-4711-8dd7-4e01fe539f6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "847660de-0a6d-45fe-b643-be73bbec7861",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60d63d7f-32d6-4342-a624-1bbc8e471819",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5af3b77b-f49a-47cb-8890-23fbc410401b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ae5de9e-a837-408a-8bd3-f4b2487a4a15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51fe253e-619a-4edf-9613-c479bc085c3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "504596a7-ea9c-4fed-9401-40714717d972",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "190d67e5-c861-43a2-a1bb-a06161723428",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6cdca82-0c87-42ca-aeef-21be6f471bf8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "974bdc35-7719-439f-b57b-ca26f7a7be0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aec34402-51fb-4b22-8b55-11fd5eb24592"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea4c1040-0173-4a27-8ce1-3f170baa9036",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a12e3d5-e1a4-413a-abc0-45dd1fe95bca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acbc88b0-4bf5-429d-afed-d61444d26fe9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d6d9f06-a46c-4823-941d-8ef81cedab8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e838175-dcfd-4997-8435-da13698e5882"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e89b96d-7944-4e36-babe-6384f412d3e0",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2db2661-ad44-4fee-a172-817c538296cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bfef218-3b30-474a-8dbe-0fb2356d4c2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8565503-e69c-40ac-a9e4-27b91ddc16d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91e52402-5561-4272-9b87-d3a6f3cea5fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d93187d-9d09-4d80-9b10-266a4b5513fa",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39b350fc-f54c-48d6-82f8-5cfaa7cae59e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "129f7622-21bd-4866-b0ee-a37d8e1c661e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b8a89dc-70b1-4ef7-81f9-e4b39b3d295b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35ad04f1-dfc2-4df7-9a30-6f7456c9e53f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47009a40-7587-441d-806d-6ece0edbd5c7",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97248e5e-5397-45e8-b9ef-609fa9b17b16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efe5e074-94ba-473a-a80d-a4061beeea58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c774c84-3b3f-4394-95fa-20aea7552562",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d01308e-699b-4241-9972-cdcfe972746c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa0c73b9-0547-48dd-8d6d-6b8994baf43d",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57364d30-d7fd-4a9e-ab12-071d038c56f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "781693b0-89fe-42b4-bfd0-79685c6d81cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "089b4ebf-bdd4-41cb-ac9f-e98f6b13e198",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "256200ab-9ee1-4864-8f19-372ab2818268"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d50f3d3-c615-426d-aa35-caafe57b2ce8",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22fe4f51-0481-4ad0-845e-45a7b50931ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9d1d3f5-bd8f-4d58-ac70-784664c768a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b03df810-671a-4357-8641-3b62691bd695",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39be5f23-bcf8-4ea2-b0c6-fdba336c85bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac39e88d-2dce-4671-ab2c-3dc30fb67508",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b5bcf69-922e-45fa-a22f-b43973a4e646",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "deade18e-0c3f-4922-9077-1ed1c960265b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "601f2825-06c1-43a7-928c-06c278e3313e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e8ea4a0-7c64-4630-94b2-fde0b1df5fce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbabab5f-e8f6-4ad8-9825-d2acefa8026e",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ced8dc13-dbc7-4327-96f8-8ffd0a6a1c09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76b30cc2-6605-489b-becd-894dc002ae1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d142406c-3876-42c9-9925-ce388469f9a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4b7073b-be59-474f-97a2-a524cf65fbc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbef30e5-b6ec-497c-920f-d3a725a92d8d",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73f7b99a-8b7d-427f-b361-736808d5aac4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f587610-6611-4be5-8ff7-30cd3842751c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76c3c44c-68da-42aa-997b-bcff35f88fee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73419fd2-8142-4e80-9e35-af54f20d5962"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4dcc53c-7d19-47e3-91cb-d1d57aee25f6",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e57ddc28-9222-409f-9e98-f597b638e04b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba45984c-2f4f-49aa-a1d1-f7836a88777c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fc8e66e-29f5-41a9-8c28-0cc6bbe5a654",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0305cb0-a002-443d-8c67-46f830debffb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "517de636-6856-4314-b63b-24612177e173",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb2d00e9-08e2-414e-b7d4-99c922377bda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cc59e49-38ea-4358-a91d-2845875332d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f9b2a19-5399-45af-b8cc-e9815467ff93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d7bfc7a-2e39-46bc-9392-3c080766ff98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef11d271-d4d2-4062-9cf0-ec040368d278",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2702b6c-3cb9-4b21-a064-f0445bb9b7e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96209620-6ce0-48f9-9756-c179b3cb7f1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8615dc7-3b92-4110-aaf3-7f54605115aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d85ddfc9-5615-4f2d-a39b-4986a63b5044"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28c908f7-b4fc-4a32-824c-bbf2d64046f4",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcad112f-0710-40ad-9a4b-db56e09325cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24ecd60e-8218-406f-8369-47d7ae8b3404"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "634a5a04-b232-4022-bcb3-d1d266d91132",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c3e1cac-6977-4fcb-818f-1f0729573a02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e0f257d-038d-41a3-bc5f-ffe2ad1bbe30",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7875c89e-2f08-42e2-b190-7ffd3dee41f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54a248e2-7071-4ecf-8247-483c484d3ba3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e96cef4-0794-4cd7-ac23-6088b23adc5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fa761ce-a0ee-4162-acf3-69253fdbfec1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5f92e1e-f244-435b-8ff4-cc8e065ae7a7",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3e974e7-2321-4088-8cbd-c0dcec735a56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dc0c361-0ba1-4cc6-a492-d31a6aed3aea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28b59edd-a60d-45df-a33c-15d9b611b0c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cb4ff44-3fce-4706-833f-3f5827393642"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ab804b3-c5f6-4390-887f-8ff336a63049",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4070e72-c29d-49b1-851f-a4172bf9b1dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f1a80be-1b11-4055-b5b0-f24f98225c0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "602de395-5808-4cc8-8a81-d0935a05e466",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c08f9040-904d-4e4c-b91c-aa459ecc0f34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74cb8dc5-1e3d-41ce-89b0-e502114239bf",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04c55380-a85f-4ea2-8b09-c752c9ee9190",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2be7d1ee-8fc9-45bb-b778-93244cf971fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc3304b9-1af8-47ec-ab95-062d4877f75d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96436342-b613-41b6-96e8-7bc1c5b5400b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bb3fc3c-a80c-478c-9096-82c3f4badc49",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d368763-23c9-472f-975d-3d32d7fae875",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e615a139-0bca-4661-9429-44a5096e0c77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ca59e23-d7a8-404c-8588-730216a5d4f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e21fc364-52a4-4cee-91f9-1f238c03b911"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0faa584a-4aae-4578-848b-99b5399868b5",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dad7799-449d-4bda-aeda-33b4e9f6eced",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6dc84571-cd7c-49c6-bf30-16b0b3551e96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2dd6cd3-d0a2-4f1b-add9-cc6b2ed16ce8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c581d39c-c14d-478a-94b3-5887a132c089"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31e4fe90-ba96-4c13-a9a7-1045d794a004",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fcce5fd-3614-42ed-ba91-2bfc994393cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5a0c349-59e9-4b25-9e68-fe535cadf1fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad5ee828-b8ca-4e05-8b71-acea71f8857b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f1da12f-590f-4134-a17e-5a9357b5fe9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "237e126b-dde9-40d9-8910-f5ce21efb48e",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41915031-7aba-43ac-8510-768366d1c71e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fce922ca-c880-4246-aa28-2fb40682a2c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5df206d3-f4c3-49ad-9e45-133bc80948f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e22b68a-0805-4bac-a150-09622102c457"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73c0dd18-90dd-4da3-a1e5-90e2b8b748a1",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa54ad56-7740-4a96-86d4-1b0917a89f87",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de4c871d-28d3-416b-aa12-fc67d67df1b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0a2bc5e-2f7a-48e4-b161-4dcff55f6e43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b9665ed-2f6b-4a1b-a0e6-c010cf1fd36d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7e3a1a5-44da-49ab-8866-de6ed12e995d",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "571a5120-367a-48ea-88a7-caecba152368",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fbfa4d08-0bb9-41ae-b05f-1d7813235ef9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27001bf7-e9f7-4d65-8731-7d5d7296777d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfb64056-4367-4910-ab90-13d530fd1438"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34f6d1d0-c49f-47cc-ba11-a9d0e82f9a9c",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6988feba-4fd9-485b-a14d-1af5395bf830",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b4f4f37-18b9-44fa-b58c-4239299b28bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d46e3e3-d902-4782-bd9b-da52dea09cdb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2306898b-b6cd-4c1f-984d-ff0488acbf74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e65b727-4740-48b9-898a-1595dc977a6e",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c63df03-126e-4f44-bac9-3e021505804b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5f1f5a7-6a5a-493b-b665-83e3647bf3b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdc9f0f9-8d70-42a5-a63f-73f6cf2aa8c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5a437ea-00b1-4f25-a594-db372135615e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a579d454-e612-429f-9371-303f3ef6024c",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4217a128-b22e-4bf2-b8b6-459a43947e41",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8682ad5-c1f0-40b3-b404-43672dcdf783"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b2fbe0e-bc74-4a21-a034-4f956d146390",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b5dfee3-cfa7-4a8f-900a-70ddfe3251c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2f95d79-5acb-4aa6-941a-c40c8e2a9a27",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0fe6d25-a63e-4714-88ab-46a010424bbc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a98f2bcb-4e3b-4937-8fed-69f237440f2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41d2c68b-e7bf-4b34-9985-a056b88e5b5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "877a0ec8-edfb-4bfa-8d9f-0f14bc22dadf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b21fa2b-2445-4efd-935a-f76d369359bc",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "551e4d7e-8998-47ba-adb4-d70a0ae83060",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47e21dde-5ceb-44a6-b0b4-b1d221234f73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d072345-0af4-42c1-a5a8-928abc299bd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bbef3e3-16a8-406b-87a0-421c76a789d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d98eb022-ea44-44db-85c5-539dfe3229d9",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9409c76e-27fc-4f95-96e8-956fb1ea4a12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57515bf9-e214-45b5-9ab6-bc77544961e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8ef686f-af3d-4600-86e7-1f57c376a1dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d017bd6-3dbe-447c-a1a1-3c2baefc96dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d24dfa6-61f9-4dfb-b7b6-28d60e35ded0",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f15b3cee-15ef-4f70-9b04-0da3f95b7df0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3bb6f534-d902-4b28-b3eb-573d339b04f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acb5108a-99d2-43e8-9d58-bce8b6934da9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3b17023-f9da-4787-b15e-c7366bdf81b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2943e390-e256-425d-bb2d-1ebb4d373718",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3326773b-b4af-4c9a-9611-fba8c787f972",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b50c359-596d-4d71-8e45-0f5b68baedbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "278b6352-c949-43d3-953b-23e0b2ccade5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5368bcb6-536d-4b38-ba41-513c34012f1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5ebbb47-0143-45b1-95d9-955db55e5016",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5788c527-3348-4700-8be3-22a664087df2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "33e04e1d-8d66-4624-b6bb-b91a587f37dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b87a4470-c2a3-4963-aeac-fce4abedfbc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed452528-bb2a-4689-966a-3516796bfa60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ad625a8-e58c-422d-851c-a85a1b59bd18",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4979cc94-09ef-45d9-81ab-4e33a883c6b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "198df303-1192-4cc0-9b3a-e5d921db570f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14ef4119-add4-4315-8e98-aa62cb7c9d72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27077c66-8c45-4750-b224-099bc1c32195"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40225683-4016-4f7f-b28d-5bca1eefedd8",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "815d013c-8d6a-4e8a-9745-1f383e32e584",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d86f4ffd-89da-44f9-ab16-721d566a9665"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d8c7e5b-5f5b-4c4e-83f0-e814cf2e035b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7952ee3-6886-4de2-9e27-0978a03832ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7df55b0-3e54-4860-a32a-1fd19a673d9c",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30e8bd46-da56-462b-b944-8d6537481ebb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d8baaa2-51b8-4d26-9f87-37def7d7519c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4224ef6-e4ed-4e11-a628-77ce8e0ec884",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e68e4443-7ab7-40a9-a3da-6fbc798a977f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "842a1e4e-b5f0-499b-8c9e-dbabf8263d97",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da6c78ef-f5fe-431c-b257-00a0e3c23aa4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ff49186-066a-4c18-b27b-1baddec9eddd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5f8403b-80b6-4464-947c-7d8b8e933ab3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c54cdc1-1e27-495f-9e0d-e71022085b7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c88ba3af-9f82-4d91-aba8-adad90621286",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9345a338-9874-407f-8464-eb3c3c6527b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "632e34b4-cc68-45df-b9a4-189d85ade3af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a33ced3-e383-4789-a35b-5c276b88e31d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d23284b-83f4-4681-85e4-1a961fb3191c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e059c4f3-1f61-4b17-966a-db445c7782c4",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baa323c3-ffda-4b3a-a550-9eda6c38b6fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39b6d7cd-6d1d-427e-879f-9cb8d8d2f772"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ef1bae3-44a1-406b-b249-d82c7fe82a70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5b5dea3-633d-4e6a-aba7-51ac08fdff65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04019ca9-0105-4389-a0c9-beb45adc4f6a",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "610ee61a-14b1-43b8-ab89-44fd1e9a03cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26c710cc-9abc-43df-ad36-be247ce0a13c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "670be529-8896-4c7d-8c56-8db21625cddb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9513057-56af-455b-b9d9-1ac2ea4f6d5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "711b1d90-98c9-47e8-a4ab-385d024d1f42",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "052c0263-d20f-444f-8ef0-f529c03f9578",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8958a28e-35ad-4791-9f1e-be8bc633bc66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2a35ec8-c3a7-44ca-86cd-8dff82cf43eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebdc396b-0e1d-4e45-90a5-5e2f06adb3b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "342d99e9-b9b4-4763-ada5-784b5f909669",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf0e7464-9b8d-4458-9937-f672fae87496",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08940a0e-594e-498b-9362-6c511bb49f1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7686c27f-7483-4f59-9e7f-9347aa3be5ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efc6353f-c7d9-44bb-bd94-9d47e071bbbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a159f1e-d387-405a-900e-785e26fb5a20",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acd1a55c-0564-4e97-a1fe-124cc09440a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c3f3d05-9b68-40d1-9adf-37ad7fc19b33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6f5d514-c9c4-4538-a98f-bd1f851abb89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a551cd1-4b1e-42fb-b6bb-2d73ef66bf2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d54d14d2-130f-4a40-a8ea-a96f8a9e5cda",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf4ab17e-d0db-484a-9a76-2a0e88a7b48c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1c410d7-fbad-4705-85a2-ea177fef6c12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65ca397b-0836-46a8-979f-ee18299a83bb",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c424134-2a10-4666-82f5-43f36fe78393"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f906770-c551-4660-84f9-b200aee238c8",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4e5125a-74c5-4031-835b-56693ab5c420",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c94310b-1b12-4ee1-bb67-90604114695d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bdd3130-bec8-47b8-bf04-a0622883f546",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "517c555a-c61d-4630-bf2e-fd9d83ac635f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "530f5c7e-bb01-49c5-8f27-aa0438e01a39",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85bf361d-0538-4a67-830d-3c7d97db3711",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28d1f545-f19a-4430-8ee7-e8c7c6f0521a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6555752c-8b77-4107-9792-468c8feb9b55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7dbe360-0453-402d-9f43-7f7b6c1c7794"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97b7f502-0390-4807-a5af-b656413cb911",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c1ca4a9-04a6-40a4-9464-23ec0e3b6120",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5fbee41-fb7a-4326-9f73-3c07b9bb3997"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc8173f5-63f6-4435-9127-c5cf779b1dd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7fe8bfc-74a7-41aa-a8ad-9bd7c8626103"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a0689a4-3c1e-424b-8848-e8d43e2587c9",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a935bcfd-c370-4990-b135-4a7c98b6c0c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cba74cfa-e087-4f6e-bde7-e435bd6705fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bb34d05-a836-4e31-8e27-319f562da31b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "caf1d58e-0bf9-47ab-8d7e-06981ec0cb39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c90a7ef6-cb7d-4ee5-884e-e94d867cb4c9",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8812c377-7c87-44c9-a621-381e0a8ea49f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e577c58a-e3a6-4228-943d-865d0c3e5f85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4be0e932-e2c9-430b-b6ca-84602bf670ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fc557d2-f67e-4e50-acd0-f140f8cb913f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c1235bb-c2b3-4290-bd1a-236b346a0ce3",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20a4c77d-9263-4cc7-8275-d1a91d2293a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3789e29a-a247-40e2-b7fb-a7425bcb9dba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "653bb613-5c35-4228-a8e4-e4aaba4d058e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43dbb035-b7c0-4ac0-8605-e63601368797"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40704cec-bf4e-44e0-8e10-e67a3b75a883",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7d775c1-2f1b-498f-bfdf-b050cae788f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "816a6d1f-0b27-4650-b512-f37e3776f8fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d24efb74-d16f-437e-a86d-bd3616387f72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7194295b-743c-49cb-8125-6a5d1e68d88f"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e9b3a027-a3d6-410c-b29b-ea5a1cb83e1d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d8914d68-e63b-419b-bc65-2ffe7c3cf039"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d892294e-99a1-44d9-9735-a50863cdf728",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4d7d2df8-1949-4c25-b3b4-3f8e4c94b00c"
                    }
                  }
                ]
              },
              {
                "id": "44d4a7f4-00e0-4e28-ad2b-2a555ed9f792",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "86f1948a-fb6e-4d4f-b97e-2de799bb4707",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c07e1fd0-2da4-49ef-aee1-2214a1c9943e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "0e390db1-49b2-4bfc-b006-ed5ca4e7ecff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72c7dd2c-268a-40f8-9a6f-ce28fe0b2196",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2a66c097-8196-4b6b-8c6d-a5743345bd5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2bd2945-d55d-4f4a-b720-01052e68a1e8",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "916c1501-62d1-482d-a29b-d8821b7372fa",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "fc2e4035-d330-4668-b7cf-737a5f907e62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ceb9830-bb7e-49b6-b8a3-9655aec9c7aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f096550f-9343-43f4-b4c0-3a88f7b14045"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "64ccd202-3155-40fd-9ed8-6e3ee2e98ff3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "749aff50-6473-46cc-b6b8-8a4403bc8bc3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d48f8031-bc85-4870-8f9b-02f6faf43ee4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "87156a20-676a-4bf8-8b67-ad94bc1270b8"
                    }
                  }
                ]
              },
              {
                "id": "cbefaf7c-76b0-403a-bcac-7a85a1072857",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "9139f1ae-deb2-4d1a-9886-7ecb4036ae71",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "206b1161-b7f6-4bca-970f-f97e706c9417",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "95476634-6274-49a5-926d-d5142cb25231"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9693ba1-fd2e-4e04-bc46-58cd1ffdb59b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb75cb6d-89db-4cbf-b9d3-819c60366766"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "0342e3ed-8a22-44d7-a190-5daf2aca04aa",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e1655d66-d823-48cb-a9f5-381da2d02458",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3f51888a-8f73-452a-ba9b-b52d665e12e4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "c444b5b9-a2b5-488b-bda8-d36982551108"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eaa4fb4a-9ae4-47bd-b379-00c1209644a8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2d52f79a-7536-4279-b530-7fa5f315ca38"
                    }
                  }
                ]
              },
              {
                "id": "d0bfdf78-f389-42b1-b32e-2cc42a68d737",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "55b87559-ccbe-4e86-94ae-a826799d5428",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "0d4a7ea5-fe9a-43d6-962e-a705a202c87f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "57674b31-81d9-4497-b32c-deaa6b2840cb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0c686da0-f2e1-4be5-aec3-763054c22ec0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "473b77e2-ee34-44d9-b64b-0daa29080423",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "8825c41a-d7b6-4067-8488-f00becc1af2e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "546b50fa-a8a3-4e5d-b5de-3cc7be5c4ba2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "46960b47-940b-4ba6-ab13-7bf092ef016a"
            }
          }
        ]
      },
      {
        "id": "3f17b453-8e63-4018-a0ef-cd269f102c06",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "0a653630-3fdd-43df-b554-e1d057880ef4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "59446441-5ee9-43ce-8438-f27482a0d599",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "aa3324e4-0994-44d7-8fd5-7022319ccbb8",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54d8ac6a-b63e-49c8-a584-5ea63d790b09",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "09dd9564-cc85-469c-b16b-479aba8e5f8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c3e2667-9e7c-4997-9f58-3272b90d3cb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "30dad608-1dfa-4aad-9b25-be8c34dd0fa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b2db4c2-234a-4bdb-98b9-a77d5f86af06",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baa48951-0b4d-463c-b650-d75569d6a59e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b9c77867-ace2-4342-91f6-1759af03f7ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3db51515-c4af-4220-8a43-b709ae3caf89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bdca5033-af51-4588-b27b-f19200027b5c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "59fe6a66-49ed-459f-b89e-bef83ce7cdbd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "82080453-4def-4db5-817a-baef6e98f833"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b85a936e-b64e-4f7e-a12f-3367e688aea8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "311335a0-7bd2-427c-a2d2-8354d6f5438f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f700da21-3b4c-4fa9-8146-529557ce2c89",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "483b0764-5798-40c4-ae90-aaceb8253386"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "96058aba-6265-4fcc-9c8d-80d2050b21e4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ab59817c-e52e-4112-a9eb-c05331832cb9"
            }
          }
        ]
      },
      {
        "id": "5a938ee1-066c-4888-93a0-f79bca47d724",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "4c615ddd-5626-4884-83c4-ee26362bcd89",
            "name": "Negative Testing",
            "item": [
              {
                "id": "884d0e9f-ff72-49ed-8e52-aea04c8f5b16",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "24d4d4d7-656f-49ff-a9c5-a6635b4d9436",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50000775-ee3c-43df-a96b-19e870ba2b6d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "86d30b36-a1c7-45e9-ac9d-cb08c3ce024d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f106257-40b5-40a1-bb2c-4caaff5a8c3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c0cab6b0-2a7f-4a5d-9d64-ce9eb64ecf29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05569731-3058-4e84-a8a3-e6937beb79b1",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56f2da2a-781b-4050-a9ec-3fbf3868fc30",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "17754d13-b224-4a5e-8684-2544e0089734"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b57d56bf-8107-40c7-9387-dcd5d6411b56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "876e414c-39a8-46c1-b2ed-49e3291d722e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "71f18a53-b0de-45b1-8b07-2fc02ce692e0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "896886bc-0724-4063-bc20-291194a13ba3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f93f9938-eee9-425c-b0dd-4cfa0c5b165e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a3acb42c-6c31-4ffa-8125-8c7cb795a84a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c850bd6c-184c-43ef-9f19-85ca04a47d2d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "1604b4bd-ca8d-4acf-9a74-3428bc577b0d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b6accd0e-9ed0-4f98-b955-8077e066d186",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7385f6df-40a6-4016-be7f-7bdd226a6b79"
            }
          }
        ]
      },
      {
        "id": "28c3a7f9-deb6-4839-8b4b-0bb7cca8a45e",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "cf629c9f-c67b-4a69-bf23-cb40345187e0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8559db31-3ed5-4c58-bf1c-11e5a178217e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "dd5e7856-37c1-4eb3-9f82-afc18a27b529",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4053b837-5233-4ad3-8de5-b1aaa5749196",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "0aa763c6-104a-4064-a8ca-2a303622a52e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ed01e7b-5b91-4f65-acb9-59353b3cd872",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "15ef6a60-c2cc-4905-9dcb-dc89934cf3c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d88c19f-fa5d-4ae1-822a-554dd5807c2f",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63f94bb9-845c-4306-96f2-f55e5fddd414",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "0f834a9c-9c73-4504-becc-e03370b29469"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5825906-ad5e-4758-b071-595d42ce7348",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "77f5d293-7e01-454f-9fb9-3953c0cfc9ab"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ffb38369-86e6-43a7-b12c-132f9d6e8c76",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "60fd1c99-0f4d-42ea-aeae-248f79889dac"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7e87b16b-204e-4b43-8866-83f384f9b7e0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c2f72959-4717-4e0b-9bc8-7ebfc59ca1bb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b6f9553d-900b-4658-99cd-226aadafa08e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "528dc4c3-7485-41da-a875-92aff9cd87b0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "78072d0d-d2a6-4de9-9c5d-cc4ab4a4e54b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b11f672f-9817-4fcc-979b-ea9b60c5f7fd"
            }
          }
        ]
      },
      {
        "id": "ac6caf58-8ae4-4f40-bdb6-1d57ba6ab0d9",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "870953a2-c355-4507-b435-50594cfd5862",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1a4f38a8-21c8-49b4-9710-8957b67c7333",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "3b486db3-1175-463c-a6d8-67c3a894e2bc",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8d52f55b-d6d3-4f7d-8c43-e31ce704f0c8",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3bbf4136-8b9d-404d-9c1f-4c71b328264d",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 6
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 405,
        "pending": 0,
        "failed": 6
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 469
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 6
      }
    },
    "timings": {
      "responseAverage": 240.72700305593364,
      "responseMin": 15,
      "responseMax": 5299,
      "responseSd": 875.3311227845354,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1674002428883,
      "completed": 1674002535420
    },
    "executions": [
      {
        "id": "fda677b0-716e-4667-89ae-c8531e6b5414",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "adc93a66-c5f3-4213-aa4f-e546d3cee808",
          "httpRequestId": "64d13252-6488-467e-a8d8-8e61af835521"
        },
        "item": {
          "id": "fda677b0-716e-4667-89ae-c8531e6b5414",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "0746fc3d-c9c9-43c7-9ffe-47a391ac0ff5",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 0
        }
      },
      {
        "id": "5e8c5ac5-3f83-48ed-8e8a-2fb99825845d",
        "cursor": {
          "ref": "f079ee4f-d6cc-4804-b6fa-b42e989a0d2e",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "e2826138-a2b0-4ee5-b47f-28872db08b1b"
        },
        "item": {
          "id": "5e8c5ac5-3f83-48ed-8e8a-2fb99825845d",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "d2d6a086-8c3c-4369-97a2-5c8a41acec7a",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 0
        }
      },
      {
        "id": "9bb20289-34c4-4df9-89c5-34033dab0c3b",
        "cursor": {
          "ref": "a47e8aa6-635c-40bc-aec6-b01fd88d0431",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "1646964c-49f3-4e48-b579-48370fd71950"
        },
        "item": {
          "id": "9bb20289-34c4-4df9-89c5-34033dab0c3b",
          "name": "did_json"
        },
        "response": {
          "id": "4bd6ec31-9146-4465-b3da-6e6cc89dd2ac",
          "status": "OK",
          "code": 200,
          "responseTime": 233,
          "responseSize": 1012
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac923d79-5342-4000-b40c-c4e7125766e2",
        "cursor": {
          "ref": "f49a2dc5-621d-418b-a2e7-9f1249f6c095",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "9e9140a1-4525-4ed4-86d6-9c2a6a8f203c"
        },
        "item": {
          "id": "ac923d79-5342-4000-b40c-c4e7125766e2",
          "name": "did:invalid"
        },
        "response": {
          "id": "a2f91a93-ee12-4375-9bec-20342c8c8117",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 38
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac923d79-5342-4000-b40c-c4e7125766e2",
        "cursor": {
          "ref": "f49a2dc5-621d-418b-a2e7-9f1249f6c095",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "9e9140a1-4525-4ed4-86d6-9c2a6a8f203c"
        },
        "item": {
          "id": "ac923d79-5342-4000-b40c-c4e7125766e2",
          "name": "did:invalid"
        },
        "response": {
          "id": "a2f91a93-ee12-4375-9bec-20342c8c8117",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 38
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98ef2298-8c1c-4a43-b336-e4be4153f59f",
        "cursor": {
          "ref": "f850b649-9f6e-4c84-b804-06713f5b5707",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "62437f0d-5b1e-40c9-9a39-575218e9e256"
        },
        "item": {
          "id": "98ef2298-8c1c-4a43-b336-e4be4153f59f",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "204a4bd5-94c7-4c06-b766-eb3a39a1b5e5",
          "status": "Not Found",
          "code": 404,
          "responseTime": 242,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "387d82ae-a39f-4e7c-9434-d33b4c4e8f77",
        "cursor": {
          "ref": "07e6df89-887d-412a-9ef8-171ae434e044",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "22cd31be-92f7-4fa8-afb6-009a8a509897"
        },
        "item": {
          "id": "387d82ae-a39f-4e7c-9434-d33b4c4e8f77",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "36f6e365-6ccb-4685-ab5a-d1c1b1cb02fd",
          "status": "Not Found",
          "code": 404,
          "responseTime": 74,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a995e16f-ec43-46ce-b4e7-8941f1a46777",
        "cursor": {
          "ref": "4ba3dec1-7cbf-4b60-88d8-15b76ad8780b",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "6884c067-0919-462c-8777-f55d9b9e8cf2"
        },
        "item": {
          "id": "a995e16f-ec43-46ce-b4e7-8941f1a46777",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "6d0e39cd-f707-473a-9f53-45e0e7f29ee2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8b55f8d-ad81-48a8-aacf-6639e0507017",
        "cursor": {
          "ref": "df710e51-d3bb-4078-bf91-b29a77156df4",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "9ce10b00-4dfb-4d99-b1d0-b41576c6f599"
        },
        "item": {
          "id": "f8b55f8d-ad81-48a8-aacf-6639e0507017",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "c35c82f3-78b0-4a72-9537-c5158bd94809",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "f8b55f8d-ad81-48a8-aacf-6639e0507017",
        "cursor": {
          "ref": "df710e51-d3bb-4078-bf91-b29a77156df4",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "9ce10b00-4dfb-4d99-b1d0-b41576c6f599"
        },
        "item": {
          "id": "f8b55f8d-ad81-48a8-aacf-6639e0507017",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "c35c82f3-78b0-4a72-9537-c5158bd94809",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "4d8fc411-d2ef-4394-ab52-b394a0b44134",
        "cursor": {
          "ref": "f7e01113-7dc3-451d-b6af-82e33c15a5e5",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "d8495d7f-6049-495e-bcb7-56aab9a9c210"
        },
        "item": {
          "id": "4d8fc411-d2ef-4394-ab52-b394a0b44134",
          "name": "identifiers"
        },
        "response": {
          "id": "f30ba1ee-c403-4bdd-8369-a0d378ed260f",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b7e8126-a863-4656-975e-53cf061e125f",
        "cursor": {
          "ref": "b0237362-6950-45ee-8b4c-fb63a1894807",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "d4cec949-e0cb-4676-afba-6e6a649978c3"
        },
        "item": {
          "id": "2b7e8126-a863-4656-975e-53cf061e125f",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "95b176be-94f6-4d4f-aefd-e8bba6e3ce30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "2b7e8126-a863-4656-975e-53cf061e125f",
        "cursor": {
          "ref": "b0237362-6950-45ee-8b4c-fb63a1894807",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "d4cec949-e0cb-4676-afba-6e6a649978c3"
        },
        "item": {
          "id": "2b7e8126-a863-4656-975e-53cf061e125f",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "95b176be-94f6-4d4f-aefd-e8bba6e3ce30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "25811ef0-94e2-4319-a6b4-7be36bf90196",
        "cursor": {
          "ref": "d23cee7d-f6cb-4c73-a3d8-2c178e601c79",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "6b3d3890-3351-4cec-98e1-dba40ffb29eb"
        },
        "item": {
          "id": "25811ef0-94e2-4319-a6b4-7be36bf90196",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "fac73629-a4f4-44a1-ae3b-2005dc84647d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "72961b61-a750-420c-a5e3-d2bb68ec91bc",
        "cursor": {
          "ref": "3e87d170-79bf-43a3-b783-3f87c2cf3f66",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "3da99b92-d6c9-434b-827f-4b278dac4822"
        },
        "item": {
          "id": "72961b61-a750-420c-a5e3-d2bb68ec91bc",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "53de012b-4de3-43d6-b629-f2044cfe1e87",
          "status": "Created",
          "code": 201,
          "responseTime": 116,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "fdff88fd-0bbe-4fd8-bb35-ef8e8936f74e",
        "cursor": {
          "ref": "db89dc20-870d-4ab4-a3bb-03fb133d25b9",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "8b325d00-0839-4ed5-8648-8c27e7bf463d"
        },
        "item": {
          "id": "fdff88fd-0bbe-4fd8-bb35-ef8e8936f74e",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "113113a4-cf1c-4677-ab9a-12a6cc3b49a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "ff1486e4-7013-4398-b2ca-57d5a1797a8c",
        "cursor": {
          "ref": "c218f804-f0f2-4952-ac09-cc29972a81a3",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "23e835c8-7e16-43da-9126-72b732436548"
        },
        "item": {
          "id": "ff1486e4-7013-4398-b2ca-57d5a1797a8c",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "65643918-0f16-4238-8c1c-95ff8973fc77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "395dd718-6923-4bb3-a32a-44d8c038c178",
        "cursor": {
          "ref": "1cdaee32-28da-4152-8643-304d8eee9345",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "4a4bdc97-ab20-4888-96b0-c161ea39fc17"
        },
        "item": {
          "id": "395dd718-6923-4bb3-a32a-44d8c038c178",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "bf7c6cdb-e7a0-40b8-8bc4-ec596ba3ed2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "1d91483f-319e-43f1-8c19-767311691f9b",
        "cursor": {
          "ref": "91bde36b-86ee-489e-bd3e-e333e53279ca",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "82bb2045-b0dd-4280-943d-c2a7f0bc8ec0"
        },
        "item": {
          "id": "1d91483f-319e-43f1-8c19-767311691f9b",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "821f7bc1-03b5-4ac9-8f1e-83c49003819d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "a2cb7d24-2c66-43ef-a185-6df24c3adf5d",
        "cursor": {
          "ref": "9780617a-a8d6-41a4-8c1f-695c78ccb5a9",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "1b1eef1d-c230-4a11-a634-0defd8d0593c"
        },
        "item": {
          "id": "a2cb7d24-2c66-43ef-a185-6df24c3adf5d",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "ca4e832a-9bc3-499b-8929-9e94cffe239b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "61391cf1-327b-4642-a564-cefaef9e5c5c",
        "cursor": {
          "ref": "c54a6d5e-b5a0-4c12-86a5-7b245e2af77e",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "4ce305e0-1656-4a00-bc28-96e42a03d48d"
        },
        "item": {
          "id": "61391cf1-327b-4642-a564-cefaef9e5c5c",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "5a8e725f-e4bf-48d5-9c04-1e6009dec4da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "1e7ba732-eacf-4c96-a8ea-60f78e186aba",
        "cursor": {
          "ref": "9ba0b044-77c3-4ff6-82b5-de42823384ea",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "f6e7e5c4-1ada-404a-b441-2951f85ad2bf"
        },
        "item": {
          "id": "1e7ba732-eacf-4c96-a8ea-60f78e186aba",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "b4c79951-eb8c-4c10-9152-0340d7c8a5ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "3e0208b5-2833-489d-973e-b68712f394a4",
        "cursor": {
          "ref": "c04093f7-5056-4a3a-8232-5337f377ee41",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "157b9235-960e-4471-84b2-350525c494e4"
        },
        "item": {
          "id": "3e0208b5-2833-489d-973e-b68712f394a4",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "3bdc5490-29bb-4241-9f10-9516de7b947e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "966ec666-69c4-4e95-9a35-0cd1c29b0336",
        "cursor": {
          "ref": "2d6a7ffa-58af-41e1-9139-ee0d28ac27a5",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "6457b852-3d3d-48f4-ab94-cff75a1af21a"
        },
        "item": {
          "id": "966ec666-69c4-4e95-9a35-0cd1c29b0336",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "751c6ba7-abf1-4374-a759-e5525b521014",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "5d612153-6e45-4a86-85cd-92ac706929af",
        "cursor": {
          "ref": "02d3d9c8-2b28-4f3f-b542-ff540f7d1741",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "378f9b2c-fbd1-4cb5-a506-013a5c9f18d8"
        },
        "item": {
          "id": "5d612153-6e45-4a86-85cd-92ac706929af",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "641d47a1-34a5-4743-8794-89fe8e79fe3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "3f35c8fb-463f-4a34-a579-22038ff2929a",
        "cursor": {
          "ref": "b1cc54d1-1de9-4c9e-b643-be3c3e5f9cd0",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "14a9dda1-f08c-4435-b2c3-decd12310be1"
        },
        "item": {
          "id": "3f35c8fb-463f-4a34-a579-22038ff2929a",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "7096bb77-3a7c-44ac-aff3-533f39e087ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "d68c3334-feb3-4ee0-97aa-4c32249d36e7",
        "cursor": {
          "ref": "61c51473-7a7f-459f-af0f-c05912967e79",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "7bfeeb1c-6aed-4c7b-b8e7-0fc749b4acfa"
        },
        "item": {
          "id": "d68c3334-feb3-4ee0-97aa-4c32249d36e7",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "e97211de-cc30-429e-a2e5-6dbad2f5e0a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "4d624533-31f1-4b45-b9de-93034d1cac27",
        "cursor": {
          "ref": "5125bd1f-5e97-4ffb-8e66-a82ab80bdbd1",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "f704e9a9-3f1a-4d44-b9b3-6a720c44f61b"
        },
        "item": {
          "id": "4d624533-31f1-4b45-b9de-93034d1cac27",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "68ce44a3-3d23-417c-b8ec-246a9fde7515",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "cc6f8d17-d47f-4514-83be-e14d9e3a129b",
        "cursor": {
          "ref": "5179f591-7c26-457a-a73b-0bf21d76deaa",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "8a320572-26e5-4232-b859-c2fc093501ef"
        },
        "item": {
          "id": "cc6f8d17-d47f-4514-83be-e14d9e3a129b",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "cf6706db-0aa3-428e-8351-e7a52871841c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "45b8f863-4e64-4afe-baa1-4938c516b9c9",
        "cursor": {
          "ref": "76ef2c9c-660c-48bb-9b99-52fa05e8309e",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "0cd94564-3790-4660-ab27-8029b29b758e"
        },
        "item": {
          "id": "45b8f863-4e64-4afe-baa1-4938c516b9c9",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "9b83ffa6-e0b3-4975-b576-1a397d56bd88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "08d54448-3f66-479b-acec-67fe3fd4f744",
        "cursor": {
          "ref": "67a8878c-032b-49b0-a176-e23230980e52",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "fb0ff5e7-390b-4594-9ec9-518fef31fb87"
        },
        "item": {
          "id": "08d54448-3f66-479b-acec-67fe3fd4f744",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "e20d6d78-8266-4b34-8c9b-162b45a7e67e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "a7197c1f-6353-4fa2-9573-b6dcc62530d2",
        "cursor": {
          "ref": "caa96111-3a8c-4864-855f-43842d2adcb6",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "3d890721-be0d-41f7-9475-0866019559b0"
        },
        "item": {
          "id": "a7197c1f-6353-4fa2-9573-b6dcc62530d2",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "905fb801-140f-4e37-a982-cca09458a68d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "ca8e17ab-1711-4023-9c4f-a0549aeb383a",
        "cursor": {
          "ref": "828ab9c7-dd84-4258-8ca6-97a71ff831f7",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "da5976d7-1d94-4f8c-a231-c1c532a9fb14"
        },
        "item": {
          "id": "ca8e17ab-1711-4023-9c4f-a0549aeb383a",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "c9a08ca4-3ed4-4292-b504-468ffb5e0db1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "6957eb62-1e61-4630-9066-dc0db9eccdeb",
        "cursor": {
          "ref": "a24f0ab5-0323-45e0-abda-8ae9c93ec021",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "9c788ab0-2bb1-4653-9962-6cc775a81147"
        },
        "item": {
          "id": "6957eb62-1e61-4630-9066-dc0db9eccdeb",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "cf83c4e0-d56e-4efd-8d49-cd5d3908a346",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "7273535b-5a9e-4cbb-bec7-ad0350616c65",
        "cursor": {
          "ref": "09f17874-2bbd-41dc-9e32-db50aa02082e",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "5d376626-9df3-411b-bb15-b9a852fe5662"
        },
        "item": {
          "id": "7273535b-5a9e-4cbb-bec7-ad0350616c65",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "2f886b04-f7e0-4991-b3cd-f967be878c9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "8d7947b5-bb2b-4c70-a477-ac5fa0539954",
        "cursor": {
          "ref": "41dd8eb6-4c9d-466d-91d4-32439874dd09",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "569b4cdf-e045-472b-b3a1-a255f3d4384c"
        },
        "item": {
          "id": "8d7947b5-bb2b-4c70-a477-ac5fa0539954",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "6a2a2b27-bd37-4f39-a55e-3e47afb9952b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "bc11f625-318f-4b77-adc5-e6996e78080c",
        "cursor": {
          "ref": "66ec183d-1c20-47af-abf2-ad4f164e145f",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "ce08b4dd-506f-49ae-b89e-90e4768e16af"
        },
        "item": {
          "id": "bc11f625-318f-4b77-adc5-e6996e78080c",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "1e5247a9-a5bd-4989-9e41-78df6f1f14b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "13a70ed9-8fa0-40a7-97de-ceea4e5dfb9f",
        "cursor": {
          "ref": "53d240dd-f2fe-4887-be8e-9bfab8964cc4",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "a9cb1d1d-da2e-4a04-9d1b-fa6b66cdee61"
        },
        "item": {
          "id": "13a70ed9-8fa0-40a7-97de-ceea4e5dfb9f",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "664b17f1-d07e-40f7-89f6-935bb05d82ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "80c7b69c-f8bc-4528-87c2-40840ea1a406",
        "cursor": {
          "ref": "e63b719e-776b-415c-9907-c957eddccc93",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "895deb75-6932-46dc-9d34-31325cdd3bb1"
        },
        "item": {
          "id": "80c7b69c-f8bc-4528-87c2-40840ea1a406",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "09aa1d31-71cf-4807-aa5d-1abce40cfde9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4364,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "edff213c-0c15-4362-8879-b040ad3f120e",
        "cursor": {
          "ref": "7bbc5f93-3c87-4e2b-8cc9-74a799c92ba7",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "f673b5b2-3651-4566-af6f-806c459ca0a2"
        },
        "item": {
          "id": "edff213c-0c15-4362-8879-b040ad3f120e",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "9ea2ac2c-a6f0-463c-97c1-86d1b51ecf5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5054,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "6ceb9956-3622-44ba-986d-8856ad9f6e26",
        "cursor": {
          "ref": "dded5fe9-aae6-4bbd-9430-fa27c1ea1ffd",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "7a2bda72-1d36-4068-bc9d-83a65d5a68a9"
        },
        "item": {
          "id": "6ceb9956-3622-44ba-986d-8856ad9f6e26",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "0a74cce4-2deb-49e1-b7c8-cee029a04d05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5050,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "5f611063-a4c2-4029-8a95-cd82aec42c6e",
        "cursor": {
          "ref": "78dc6df3-32f5-458c-bc28-cf057e1466fd",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "1d3e4461-268b-4414-b216-cf5ef1f8488c"
        },
        "item": {
          "id": "5f611063-a4c2-4029-8a95-cd82aec42c6e",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "3b99af06-1610-45fc-9780-9bd65435889c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3651,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "17e63bd2-e9fe-4734-a618-f6384899cd12",
        "cursor": {
          "ref": "c1ce8b54-7327-4e55-8840-3eaf5ca9f91d",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "cf033dce-87e9-4802-a87a-7d59c503c0dc"
        },
        "item": {
          "id": "17e63bd2-e9fe-4734-a618-f6384899cd12",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "8c528078-c229-4d95-b029-d811a7bec73c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3457,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "9d4892b3-eb94-42fa-a649-e841e883f986",
        "cursor": {
          "ref": "9335efa0-33e4-4c24-92b4-491e9aa777b0",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "8247c3bf-739a-4df2-8aeb-e0bf0e2b9fa2"
        },
        "item": {
          "id": "9d4892b3-eb94-42fa-a649-e841e883f986",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "ea05e6d7-bad9-4693-9eef-5a050469b93c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "c7d8b15c-1930-4537-b768-b9e183aba804",
        "cursor": {
          "ref": "11c57260-413d-4f3d-ab57-37f7445e96c2",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "37e3ad39-e735-4fb1-b6e0-a1747b5213f7"
        },
        "item": {
          "id": "c7d8b15c-1930-4537-b768-b9e183aba804",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "9bf3a839-7939-41fd-be81-5a291679ec93",
          "status": "Created",
          "code": 201,
          "responseTime": 3745,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "3295247c-b377-4a04-9e11-0774a3438b1b",
        "cursor": {
          "ref": "b294f479-cac5-4518-8aa0-77360b465deb",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "0da72293-f7fc-47ca-b43f-3a25871057f2"
        },
        "item": {
          "id": "3295247c-b377-4a04-9e11-0774a3438b1b",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "eb846c44-62a9-4a7a-a6f3-bb80337be3a5",
          "status": "Created",
          "code": 201,
          "responseTime": 4893,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "97c45aee-17c3-4035-a323-4647a2bdd62e",
        "cursor": {
          "ref": "6e69932a-028e-405e-aaf2-4df7e84f7a9d",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "4302479f-dbbb-4d18-a469-8989e047e853"
        },
        "item": {
          "id": "97c45aee-17c3-4035-a323-4647a2bdd62e",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "501e0ad3-ef8c-454a-9e01-d845ff6a23e2",
          "status": "Created",
          "code": 201,
          "responseTime": 4389,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "e6f5233a-31cb-4ed9-9df1-64c9ad0e8273",
        "cursor": {
          "ref": "f3ae4ad3-176c-4afd-9354-342d8c728aa7",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "8871916a-4aa3-4dec-bceb-1dd03855b417"
        },
        "item": {
          "id": "e6f5233a-31cb-4ed9-9df1-64c9ad0e8273",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "d31206ac-28a8-42f6-8dd5-32428a050c8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "5ef56971-22a4-480f-9e2e-880f086ae07a",
        "cursor": {
          "ref": "48542e71-abaf-4b37-9e31-cd0c40898a08",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "fa2656c6-897b-4695-bd42-ba2f13e7ce17"
        },
        "item": {
          "id": "5ef56971-22a4-480f-9e2e-880f086ae07a",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "0c40fcb8-77c2-489a-b17b-3ecc37119b81",
          "status": "Created",
          "code": 201,
          "responseTime": 3727,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "2aaa3df3-3538-4b86-b2d6-e987412d02ac",
        "cursor": {
          "ref": "25477253-5a17-4220-8136-6fbeaee64913",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "7231de00-f816-43a5-ad6d-9335400b7645"
        },
        "item": {
          "id": "2aaa3df3-3538-4b86-b2d6-e987412d02ac",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "6fb86b90-89cb-4511-942f-3309c849b408",
          "status": "Created",
          "code": 201,
          "responseTime": 3514,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "673bc955-d3f0-4e8a-80a6-99f7b57c42e5",
        "cursor": {
          "ref": "ba7f65ae-dd6f-4027-8ad1-493664738d31",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "d2cdf7c7-5607-45dc-a698-89977e4c2f09"
        },
        "item": {
          "id": "673bc955-d3f0-4e8a-80a6-99f7b57c42e5",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "7197f30a-d94c-405c-b6b8-497bd9d9ee11",
          "status": "Created",
          "code": 201,
          "responseTime": 3710,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "2d6a123f-03f1-4272-b17a-e69fdae34b10",
        "cursor": {
          "ref": "7d3f6a35-365c-47ec-bee6-63e7626e18b0",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "faf6a7e9-8ec2-4798-a01d-0efec47255f1"
        },
        "item": {
          "id": "2d6a123f-03f1-4272-b17a-e69fdae34b10",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "16df8130-3e5b-4074-a67d-a935b9949551",
          "status": "Created",
          "code": 201,
          "responseTime": 4037,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "26b6c149-baa2-4a1a-97ae-8a7c30d1c105",
        "cursor": {
          "ref": "2a121472-bc88-435b-9e9a-9b176de6cd0e",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "6ab00600-2869-488e-94be-55fa20019f0a"
        },
        "item": {
          "id": "26b6c149-baa2-4a1a-97ae-8a7c30d1c105",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "ca17cf22-a8f7-40c6-af6e-7eeaa18ff889",
          "status": "Created",
          "code": 201,
          "responseTime": 3952,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "6ad7cc64-43d4-4ec3-b03f-13935446d275",
        "cursor": {
          "ref": "823ff0b3-ac95-47e7-9f77-a0c473c9729c",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "c5c13f11-d283-43fb-a6ad-d271cfa2f2b5"
        },
        "item": {
          "id": "6ad7cc64-43d4-4ec3-b03f-13935446d275",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "f5e65e56-519d-4def-886f-0053da914893",
          "status": "Created",
          "code": 201,
          "responseTime": 5299,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "3cc88dfc-8fda-430b-8d14-55f3a0d7d203",
        "cursor": {
          "ref": "2d657969-3f91-4380-bda3-c9b96f315d1f",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "4fee686b-530b-41f2-a19e-0690cdd3e2a2"
        },
        "item": {
          "id": "3cc88dfc-8fda-430b-8d14-55f3a0d7d203",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "9032c4fb-37de-4e8f-b585-730542ca2523",
          "status": "Created",
          "code": 201,
          "responseTime": 3641,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "1ce3ddfb-f80b-43c3-8bd7-1e24e372b8f9",
        "cursor": {
          "ref": "48b9f3a0-8ded-4483-b3e5-4519d9fd5ac1",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "928d7826-244b-4796-8ddd-ddee33b4364d"
        },
        "item": {
          "id": "1ce3ddfb-f80b-43c3-8bd7-1e24e372b8f9",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "a6de86a4-1022-4638-bb8e-f264806dd083",
          "status": "Created",
          "code": 201,
          "responseTime": 3743,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "b424ed75-1686-4693-88cf-2c3f04cb4a68",
        "cursor": {
          "ref": "4726f975-fa9c-443d-aa9f-48bbaf678e7f",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "311f4a66-d689-4345-afb8-6c3466f1c696"
        },
        "item": {
          "id": "b424ed75-1686-4693-88cf-2c3f04cb4a68",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "49516dbc-c58b-4f08-b75d-7185ac61dd62",
          "status": "Created",
          "code": 201,
          "responseTime": 3841,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "5317b2c2-d9c1-4089-a0ee-ad0e61acf4bf",
        "cursor": {
          "ref": "996c9db8-be81-424e-ac9e-98a5b9bb36c9",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "b071846b-fd78-46dd-820f-39eca0138d4e"
        },
        "item": {
          "id": "5317b2c2-d9c1-4089-a0ee-ad0e61acf4bf",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "3ed18c89-dd34-4919-988e-5b4f7ba3b88a",
          "status": "Created",
          "code": 201,
          "responseTime": 3453,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "432b4e4d-6e56-43c0-9ddc-f5299fa916b7",
        "cursor": {
          "ref": "7320f237-8fd7-4cf4-aee3-e3401df4d916",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "b003e443-5608-4c5d-bec5-d4ee2b8bf960"
        },
        "item": {
          "id": "432b4e4d-6e56-43c0-9ddc-f5299fa916b7",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "1be8ecd1-f600-4d21-b0d4-32c5bb2c5277",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "109a20b1-c8c0-4945-a353-b7f46c32597b",
        "cursor": {
          "ref": "9f0f13c0-e4a0-4398-bbfc-9e908dae3406",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "8a511354-bd50-424a-89e8-3a79f0766a08"
        },
        "item": {
          "id": "109a20b1-c8c0-4945-a353-b7f46c32597b",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "48a7a9cb-eb77-4e07-be0c-63ff70a040bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "762b0804-7174-4d16-af5c-bdae6a0df7bc",
        "cursor": {
          "ref": "b57c6507-8739-415f-83e2-e0e4a5c805b9",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "fb827db2-ae47-4f06-a9d8-8f1117ae377c"
        },
        "item": {
          "id": "762b0804-7174-4d16-af5c-bdae6a0df7bc",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "bdd8c4a9-f690-4119-a339-8865ac738e9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "47c0ce18-692d-4b17-a1da-bf061691fb61",
        "cursor": {
          "ref": "8ba4170b-8f63-4260-a266-69393ef35547",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "6001c1a1-9bbe-4ee2-8f9f-0bc3d08d50bd"
        },
        "item": {
          "id": "47c0ce18-692d-4b17-a1da-bf061691fb61",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "bb4173e7-b58c-4954-ae0a-59221ac68b0f",
          "status": "Created",
          "code": 201,
          "responseTime": 4577,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "178959bd-8838-45fc-b5bf-f9ef96b84ee5",
        "cursor": {
          "ref": "999e2344-3209-4deb-b30e-2532f82f71fd",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "089a6beb-a1f5-4138-9791-0576c4037762"
        },
        "item": {
          "id": "178959bd-8838-45fc-b5bf-f9ef96b84ee5",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "bdeffd77-3568-4736-bbfa-752dde573cb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 453,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "498f0e3f-7e37-4f1c-a5eb-6ac96744fd17",
        "cursor": {
          "ref": "49c82ae3-a1dd-4179-b3b4-85800384df5f",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "0387317e-0416-45b3-b443-80897d73b24d"
        },
        "item": {
          "id": "498f0e3f-7e37-4f1c-a5eb-6ac96744fd17",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "c5f5bf5b-53c0-4fd9-99c6-8c7d95aa3cc4",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 341,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "7b17d6e5-2c49-4c05-929e-fb46532f4148",
        "cursor": {
          "ref": "c6ede9ff-89d6-4051-adcd-1393e6061cfe",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "897910b0-7866-4978-bf87-566af0ba6300"
        },
        "item": {
          "id": "7b17d6e5-2c49-4c05-929e-fb46532f4148",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "c5fc074b-099d-4770-9901-3ccbfa0c6fb5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "25d3651b-6e1f-473f-96f8-c39a8f9b0508",
        "cursor": {
          "ref": "7c9fda45-3f35-435a-9a54-db2c4e1b913d",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "0cc2eb0d-d9d0-40d9-a73c-d0bf6560da0b"
        },
        "item": {
          "id": "25d3651b-6e1f-473f-96f8-c39a8f9b0508",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "2f783092-d941-471b-bc46-422ce74d3c28",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "04736c36-c0ac-4c1f-a6d8-67c407fa0c46",
        "cursor": {
          "ref": "792c1bfa-af60-481e-8f45-7376cb01b00f",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "4528d89a-74c6-41a6-bb00-7b3daf64faf3"
        },
        "item": {
          "id": "04736c36-c0ac-4c1f-a6d8-67c407fa0c46",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "cffb84a1-5f62-40e8-8f1b-15c7356e40cf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "21648e90-921b-4221-b1fa-52de3000ea97",
        "cursor": {
          "ref": "5cdac272-8186-4b9d-844b-82b87af5b168",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "f8f9e17a-39b0-49e7-8a26-642480061f40"
        },
        "item": {
          "id": "21648e90-921b-4221-b1fa-52de3000ea97",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "3ac622f1-fe59-4f75-96f1-49c1a435005a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "64252290-85de-4507-914d-6e2416bd4142",
        "cursor": {
          "ref": "c511d4a8-92f0-44d5-961b-0a487189fa5a",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "de9c3acc-f207-4229-a03c-40f96bf15079"
        },
        "item": {
          "id": "64252290-85de-4507-914d-6e2416bd4142",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "85c06d98-28fb-4e82-8aa7-2dcadc0958c6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "3c26266d-8939-419c-a365-bc033af152fa",
        "cursor": {
          "ref": "559a87e6-b0f7-461c-a208-26fbe060800e",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "2da948b6-c6c2-4a55-82e2-476c50cdd736"
        },
        "item": {
          "id": "3c26266d-8939-419c-a365-bc033af152fa",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "b69db95a-24b8-4118-b041-6f502ad65f5c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "11ae4e0e-0258-417e-8cee-d8257acf4ef2",
        "cursor": {
          "ref": "3cf01ca9-3686-4485-bcf6-491a31a532b4",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "9f003752-aaac-4aa6-9dc0-437bcf6492f2"
        },
        "item": {
          "id": "11ae4e0e-0258-417e-8cee-d8257acf4ef2",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "e144dbaa-ac31-4e2b-b80e-2736e5e3c6c1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "3101dbdb-a198-444f-b147-c8a581c6ea09",
        "cursor": {
          "ref": "3ed51ea0-09ff-4da6-b0c0-329e02403012",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "c1967d1b-01fd-4822-a25f-89789fe8c2f0"
        },
        "item": {
          "id": "3101dbdb-a198-444f-b147-c8a581c6ea09",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "db1c2a11-a38c-4963-a16b-29c02d8a4b59",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "7b7dd3bd-70ca-4032-9d94-b6c2e7e96433",
        "cursor": {
          "ref": "b897dd0b-0cc9-48ef-a299-bceaf4357917",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "25894229-85b4-47aa-99a2-aeb65704fa06"
        },
        "item": {
          "id": "7b7dd3bd-70ca-4032-9d94-b6c2e7e96433",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "26333d91-93dd-42b0-a047-af8f44b34a98",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "5b852215-d12a-46fc-a51c-04b0de7eb8b0",
        "cursor": {
          "ref": "df5ff4ca-14b5-4e73-bd6e-871d0cc810b4",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "1996516e-38d0-4889-ba2a-29721b05893f"
        },
        "item": {
          "id": "5b852215-d12a-46fc-a51c-04b0de7eb8b0",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "7b9e38c0-d2c7-491e-b818-ad7e0a6eee0d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "58133157-ec13-47eb-9533-b4eaf250f73b",
        "cursor": {
          "ref": "66982c0c-760b-4e08-bfd5-2585c28d4406",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "6c4fc550-e4f0-415a-9697-32bf37acfa71"
        },
        "item": {
          "id": "58133157-ec13-47eb-9533-b4eaf250f73b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "ac1e597c-d66e-41ba-a3b6-b6e9c58333c7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "b7a6d299-e41a-49b8-aa5f-2a930aba187a",
        "cursor": {
          "ref": "16dda70f-ea63-4099-9d28-7c568ef68dec",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "e38b10a8-e7d8-47f3-9347-6581afad33e3"
        },
        "item": {
          "id": "b7a6d299-e41a-49b8-aa5f-2a930aba187a",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "a376b910-64d2-4ca0-a8e6-c098cecf8885",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "6c40c74e-25d9-4fc6-bb1f-0d0af8601be9",
        "cursor": {
          "ref": "949ba42f-8ad3-47aa-aa28-8706cbbbec45",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "b60913ff-04c2-4efa-9a59-443f5dc2369b"
        },
        "item": {
          "id": "6c40c74e-25d9-4fc6-bb1f-0d0af8601be9",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "2275d1a6-0c45-46d2-9f1d-9aaafaece338",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "c43b3f44-b50c-44a3-9901-4d5b07c15c39",
        "cursor": {
          "ref": "67ae886a-c15e-4cb5-a413-91a6db0608d1",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "037463c0-7a66-4d2c-a5ca-43d49e8b1aa0"
        },
        "item": {
          "id": "c43b3f44-b50c-44a3-9901-4d5b07c15c39",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "440aeffe-319a-498a-b575-b9a6b6924ed4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "c31fdf94-0979-4196-b2a8-149118093868",
        "cursor": {
          "ref": "c704dd3e-508b-48c9-b07f-ce3b117b95f4",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "576e1f0f-c8c7-4ebd-8eef-7ce6bbdd233e"
        },
        "item": {
          "id": "c31fdf94-0979-4196-b2a8-149118093868",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "1017d6fb-afc4-441e-84b6-55ccf058f0a3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "582759a6-a361-4b9b-83e3-15af1cfff56b",
        "cursor": {
          "ref": "6d746e6f-5117-42af-917e-43f205f4adfb",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "2fe48dee-9441-4952-95af-7f1a01b1a2f8"
        },
        "item": {
          "id": "582759a6-a361-4b9b-83e3-15af1cfff56b",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "984d908b-42ee-4d15-bde8-5ca6d43a7235",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "f7b6aa9c-b117-4f3b-b714-248c54024424",
        "cursor": {
          "ref": "96d7733a-fac1-4873-b2fb-cd495384df48",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "8c8414f0-56e1-414a-8f69-aa6e2ad23a94"
        },
        "item": {
          "id": "f7b6aa9c-b117-4f3b-b714-248c54024424",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "b94cefea-f654-432c-ba57-55edd311e052",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "1e03017b-cb54-4e59-8732-bdbab765c9f3",
        "cursor": {
          "ref": "14dac7b8-65f1-4f95-85fa-e296477f4a44",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "56b6487f-890b-48a5-b9b7-3f5e99a7645d"
        },
        "item": {
          "id": "1e03017b-cb54-4e59-8732-bdbab765c9f3",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "75125772-579c-4f0f-9e4d-cd6fb23847b2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "ea8851b8-2a23-4245-904d-9cf418a1e5e4",
        "cursor": {
          "ref": "7bbbf3a5-315d-430d-bcfe-70961c63227d",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "9560ed6a-9f98-40db-8d1b-9a74ec0abdbd"
        },
        "item": {
          "id": "ea8851b8-2a23-4245-904d-9cf418a1e5e4",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "1c339f31-16cc-4726-9070-f4bbdbc58518",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "53eaeb0c-90d6-4d3b-9ce5-9f0311e2e814",
        "cursor": {
          "ref": "695d01aa-8a8a-4570-b893-69e964678acb",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "51d2ffe0-7705-45f8-92c6-18ee101bc620"
        },
        "item": {
          "id": "53eaeb0c-90d6-4d3b-9ce5-9f0311e2e814",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "33660eb8-a1b1-4a8f-b899-f140e73591c5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "e7d038b0-2f82-43fb-ba3b-20fa85f1c471",
        "cursor": {
          "ref": "fb53dd0e-08b9-4795-9cfa-bb19530a484b",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "e79b6e76-a9d9-48e4-a103-cc304b3e1594"
        },
        "item": {
          "id": "e7d038b0-2f82-43fb-ba3b-20fa85f1c471",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "0cf24464-8f32-44f2-807b-4974a9ded49b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "6463fd0d-8a85-4f4c-9165-56b07b256f4e",
        "cursor": {
          "ref": "3d4588d3-15a6-4835-af51-6021f305037b",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "fc3a5fa8-3dce-4782-958b-9b37cdda597d"
        },
        "item": {
          "id": "6463fd0d-8a85-4f4c-9165-56b07b256f4e",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "ef529d0d-a94f-4958-b258-c73300ad2631",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "ca488f83-b159-4c47-9797-851ea339daab",
        "cursor": {
          "ref": "6265e815-a178-4fc7-95dc-86191098d026",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "999b9231-ecbd-4d38-94bf-2f38813fd02c"
        },
        "item": {
          "id": "ca488f83-b159-4c47-9797-851ea339daab",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "69ff28db-4ec8-4408-a10c-5626aead770b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "76b21aa4-c206-4594-a091-b21d6af62c5d",
        "cursor": {
          "ref": "4c02b1d7-f13d-427b-b1e5-2ac6e2fde58f",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "4e171ac3-f076-4f54-baa2-8cf4e39fae7e"
        },
        "item": {
          "id": "76b21aa4-c206-4594-a091-b21d6af62c5d",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "da596740-3e01-4e35-bdc3-ded6456e95b7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "22b75562-2b5b-4cce-8597-0fb33ef7b7aa",
        "cursor": {
          "ref": "ad93d25f-e5e4-4441-b734-4b6ed110bff5",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "49c7befc-e51c-4c28-a576-6a05fca1f589"
        },
        "item": {
          "id": "22b75562-2b5b-4cce-8597-0fb33ef7b7aa",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "0bbb7184-a47d-4be2-b90c-a769a43f1d8c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "f49e0577-04fd-4cab-ad61-2eb1b8ad21f4",
        "cursor": {
          "ref": "86626ba1-09df-44ba-ae70-38ff2b62ee0b",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "c4c2bc1f-7fea-4c89-8957-e76d866abddd"
        },
        "item": {
          "id": "f49e0577-04fd-4cab-ad61-2eb1b8ad21f4",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "1358e833-d503-48e6-b032-eb1699680473",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "6392fcd3-2d05-4ea9-9693-2e7a17cea47e",
        "cursor": {
          "ref": "19226806-c234-4589-a278-18bd8be2db05",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "6f3aebab-6533-40b8-8dc9-9b6213d1aa71"
        },
        "item": {
          "id": "6392fcd3-2d05-4ea9-9693-2e7a17cea47e",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "a82a2c28-1cf4-46c5-905c-5c253794325d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "3a4c1885-b646-4d5a-9985-7016c0b8d17e",
        "cursor": {
          "ref": "044b9a08-4fbe-404b-bbb7-8a1fa0df865a",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "4c41652b-c438-4a90-89fc-b8bd33f070b6"
        },
        "item": {
          "id": "3a4c1885-b646-4d5a-9985-7016c0b8d17e",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "c216e6db-2675-45d4-b2d2-589404c079e2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "d6047d03-0943-431d-9ded-a7ca06715204",
        "cursor": {
          "ref": "5aea57b0-d2c7-4747-803c-363965f3a5b8",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "2e970228-c672-4ed9-a13f-5f7792837869"
        },
        "item": {
          "id": "d6047d03-0943-431d-9ded-a7ca06715204",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "4fb33e51-204b-40ad-960f-7ee4c8dbf043",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "352943b0-86ce-4618-8a11-16ada25a1b40",
        "cursor": {
          "ref": "4b7c7897-2890-4ac1-abbd-cc89657e6b4e",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "66c839a8-7a44-4168-a9be-65287b53a9a6"
        },
        "item": {
          "id": "352943b0-86ce-4618-8a11-16ada25a1b40",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "e8d56d54-cc91-4947-aa74-a898a9f1abf2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "8996416f-c6f0-4cfc-b942-d97fdbc78ef3",
        "cursor": {
          "ref": "ea48286e-5c8f-4fb4-95a7-c6b49f8bd02f",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "999dd6e9-b8af-4616-8d75-5d023fe18d16"
        },
        "item": {
          "id": "8996416f-c6f0-4cfc-b942-d97fdbc78ef3",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "46a28681-ad5f-4194-b2ee-c308bb752a63",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "e796768e-4f84-48b3-90f6-d99c001cb632",
        "cursor": {
          "ref": "a6ef5699-e5b8-4d57-bf05-8af1f776126b",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "f35a0692-4080-4473-b250-d0530abb6afb"
        },
        "item": {
          "id": "e796768e-4f84-48b3-90f6-d99c001cb632",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "295e1df0-f3ac-4f14-bce3-dd39632722e1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "dd1fde5b-5903-4d47-9ffa-df7d6173e428",
        "cursor": {
          "ref": "ad61020e-13ef-47e2-90ce-3f08921ba190",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "bd78a1b5-328e-4c64-a360-1c9d4e926f5a"
        },
        "item": {
          "id": "dd1fde5b-5903-4d47-9ffa-df7d6173e428",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "4f326985-b215-4231-9071-3865cbc1400b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "4ba4b3a8-48b7-4379-8a6a-ed960cca36ad",
        "cursor": {
          "ref": "ddb8fe76-5e5d-43a9-9003-779547f86f46",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "05e3db2d-dee7-4716-ba0b-b64ad42f2332"
        },
        "item": {
          "id": "4ba4b3a8-48b7-4379-8a6a-ed960cca36ad",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "4838bb01-65f4-4650-91f1-26831ce86412",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "9be5759b-5b53-4ac8-8d70-de8ed7eb4db6",
        "cursor": {
          "ref": "7e6546cf-8abd-445e-903c-3fec2bd6a4ad",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "f1a55a25-bb43-4c18-a1e8-a3f0d8728499"
        },
        "item": {
          "id": "9be5759b-5b53-4ac8-8d70-de8ed7eb4db6",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "426449d3-cd75-4edf-93d8-6cb84001ff4f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "c8a6132f-61fa-4766-9e7c-b423ce8323cd",
        "cursor": {
          "ref": "5dc4de41-961d-4d40-a2ba-ae242fda3be4",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "d14860df-2791-4bce-aa3d-c70d0f42d2e0"
        },
        "item": {
          "id": "c8a6132f-61fa-4766-9e7c-b423ce8323cd",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "88746236-4785-40db-883c-9755c3594839",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "b32ecffc-74ab-40cf-a92b-f588435074d4",
        "cursor": {
          "ref": "8c745a07-1404-4cf6-8950-cc3f7fa9b21a",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "160edf4e-941b-4f99-a449-6019f25f1512"
        },
        "item": {
          "id": "b32ecffc-74ab-40cf-a92b-f588435074d4",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "79a87992-e0cb-490e-85f0-5e3e0eba7d39",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "b48c1bb4-ae26-4361-a16b-47ee2333520f",
        "cursor": {
          "ref": "4ba5191e-84b3-4fa7-8163-c9b58c72f881",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "3eacaee9-7209-469a-9fea-5b68f7a22690"
        },
        "item": {
          "id": "b48c1bb4-ae26-4361-a16b-47ee2333520f",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "c2add1b7-fa06-47dc-b2f2-62fa6a8a1558",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "a4fc3ecb-a1ab-429c-a11c-418d79d61a75",
        "cursor": {
          "ref": "2d1d6859-3f2f-4c70-b2c3-5f7bbfb5d263",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "e1682697-13e4-4598-9b24-c2603c8d6e6d"
        },
        "item": {
          "id": "a4fc3ecb-a1ab-429c-a11c-418d79d61a75",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "d41f174d-89ce-4a03-86f2-c53c3b1fcc68",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "d1e5347a-2885-4022-997c-d64edb894f14",
        "cursor": {
          "ref": "026b3668-d657-4df3-87cd-c47f9e39a4e7",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "722cc0eb-7e9d-47e4-8835-884465f1843b"
        },
        "item": {
          "id": "d1e5347a-2885-4022-997c-d64edb894f14",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "5e5cc780-d91a-4ae5-9de9-a37981119f6d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "55ea61df-1fc4-41e1-9246-f9ce9b0296cf",
        "cursor": {
          "ref": "2b3b1f02-fc62-404e-93fa-bd0d1ccd6808",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "8730158c-d32b-445e-95b7-53f2841bbf37"
        },
        "item": {
          "id": "55ea61df-1fc4-41e1-9246-f9ce9b0296cf",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "d009590b-49f2-4230-b719-8be583626da6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "f771f94b-0220-4fdf-8c19-81d4822c2c28",
        "cursor": {
          "ref": "cd75dc64-24b9-4344-a62d-37b714a9c6ac",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "7421ceee-dbd5-423c-a29e-a10977e7d9ce"
        },
        "item": {
          "id": "f771f94b-0220-4fdf-8c19-81d4822c2c28",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "8d1125fe-6987-43b2-ad88-2bf66bc79941",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "0248a247-8a02-47aa-bbe7-4f2de8eb513d",
        "cursor": {
          "ref": "2b4bafa7-f4ad-4f47-a954-80f68dbb267e",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "b3b83206-8191-45eb-a83d-1dc53971a3c2"
        },
        "item": {
          "id": "0248a247-8a02-47aa-bbe7-4f2de8eb513d",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "474f59ae-9feb-4ae6-a86f-1e3b98b43668",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "d29cd3c8-8ee6-4105-952b-8ef658beade7",
        "cursor": {
          "ref": "d018d22f-0063-44c9-a6fc-c71ce391ce6d",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "1a8558cb-d964-4298-80af-7ce7b79e2269"
        },
        "item": {
          "id": "d29cd3c8-8ee6-4105-952b-8ef658beade7",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "3abb23d3-2225-4495-86d6-f36d7ab67e83",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "a0379195-ebaa-43d5-a5a4-5cbd16928006",
        "cursor": {
          "ref": "ee0b41ae-0f65-4cda-86f8-417caf80bee2",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "6152eaca-2890-452f-9934-3d44bb482b4f"
        },
        "item": {
          "id": "a0379195-ebaa-43d5-a5a4-5cbd16928006",
          "name": "credentials_issue"
        },
        "response": {
          "id": "2ea0bcb4-b822-4917-95ba-717038773c3c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:106)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response issuer matches request credential.issuer",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:106)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 4,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:5:106)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 5,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:6:106)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 6,
              "test": "response proof.created is close to 'now'",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:7:106)"
            }
          }
        ]
      },
      {
        "id": "d88000b7-9b7d-4022-8c06-6de154b1572b",
        "cursor": {
          "ref": "b8f994f8-9a87-44a1-a879-7bacc8d0c2bd",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "78c0e08f-5989-4d24-bad3-10ad137981fd"
        },
        "item": {
          "id": "d88000b7-9b7d-4022-8c06-6de154b1572b",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "5b5f26d7-b83a-4f12-8f00-965d1076a0e1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:107)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "7f1f2cc5-5434-4498-aac1-29f0e056ed29",
        "cursor": {
          "ref": "866b4367-7e0a-45f6-bcce-d678b21a5f70",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "35c70acc-1466-479e-a498-7e4907127921"
        },
        "item": {
          "id": "7f1f2cc5-5434-4498-aac1-29f0e056ed29",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "6e22796e-bf0b-4391-ada7-37464a8deb4f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:108)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:108)"
            }
          }
        ]
      },
      {
        "id": "08ee5b5b-1424-4380-92f7-b826f3408b4d",
        "cursor": {
          "ref": "0b36f751-f508-439c-b077-6d2935a2847d",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "f3bf316c-7914-499e-be52-6c37f5ecb2f3"
        },
        "item": {
          "id": "08ee5b5b-1424-4380-92f7-b826f3408b4d",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "93ffad79-bc54-4cee-94dd-844744ae15e5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:109)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:109)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:109)"
            }
          }
        ]
      },
      {
        "id": "6dee0f55-06d9-4e76-a413-38950aca22ea",
        "cursor": {
          "ref": "1f81cb94-e4a5-4f94-aec5-f78ad12797e1",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "9c7d9d18-c890-4588-ba97-a0de9d516dec"
        },
        "item": {
          "id": "6dee0f55-06d9-4e76-a413-38950aca22ea",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "342d6981-0dd0-4672-95b2-7084adc3bbe0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:110)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:110)"
            }
          }
        ]
      },
      {
        "id": "4a964025-f186-487b-872b-9272c15dfa25",
        "cursor": {
          "ref": "2195a13c-f0ed-4d6b-a04a-cc9c8128eeee",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "37d4f58d-bc19-413e-95a1-350a07b32da5"
        },
        "item": {
          "id": "4a964025-f186-487b-872b-9272c15dfa25",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "c9fe1cdf-0dc0-4fff-a03b-fb014e236973",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "4a964025-f186-487b-872b-9272c15dfa25",
        "cursor": {
          "ref": "2195a13c-f0ed-4d6b-a04a-cc9c8128eeee",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "37d4f58d-bc19-413e-95a1-350a07b32da5"
        },
        "item": {
          "id": "4a964025-f186-487b-872b-9272c15dfa25",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "c9fe1cdf-0dc0-4fff-a03b-fb014e236973",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "b722a1c0-757e-441a-ac77-59c303afa18a",
        "cursor": {
          "ref": "dfb6b032-6d22-4c25-bfa1-d5c9fcc99efa",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "de567426-3d4d-4490-9601-675eec1103d1"
        },
        "item": {
          "id": "b722a1c0-757e-441a-ac77-59c303afa18a",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "5ca544dc-9090-4917-9308-f24cbf4f9a98",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "b722a1c0-757e-441a-ac77-59c303afa18a",
        "cursor": {
          "ref": "dfb6b032-6d22-4c25-bfa1-d5c9fcc99efa",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "de567426-3d4d-4490-9601-675eec1103d1"
        },
        "item": {
          "id": "b722a1c0-757e-441a-ac77-59c303afa18a",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "5ca544dc-9090-4917-9308-f24cbf4f9a98",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "e3409a69-e292-4f6a-b4dc-df1972db1585",
        "cursor": {
          "ref": "4ba7b4a6-2eb7-4603-8873-bfc9309741f4",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "d4f0adb0-15cf-4e1d-86ce-dff6b3672d68"
        },
        "item": {
          "id": "e3409a69-e292-4f6a-b4dc-df1972db1585",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "2f38c140-13d3-43bd-a91d-8e319d949f0c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "e3409a69-e292-4f6a-b4dc-df1972db1585",
        "cursor": {
          "ref": "4ba7b4a6-2eb7-4603-8873-bfc9309741f4",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "d4f0adb0-15cf-4e1d-86ce-dff6b3672d68"
        },
        "item": {
          "id": "e3409a69-e292-4f6a-b4dc-df1972db1585",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "2f38c140-13d3-43bd-a91d-8e319d949f0c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "99534d31-7f40-470c-8b5d-e5a2ffebe72a",
        "cursor": {
          "ref": "8ca8bfe0-a442-432d-bb5f-89a45ffeece8",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "35b5b4cd-d7b7-4e50-998d-aee3812fd399"
        },
        "item": {
          "id": "99534d31-7f40-470c-8b5d-e5a2ffebe72a",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "ece8ddf8-deea-4cc5-84da-bf40b4f43d06",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "99534d31-7f40-470c-8b5d-e5a2ffebe72a",
        "cursor": {
          "ref": "8ca8bfe0-a442-432d-bb5f-89a45ffeece8",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "35b5b4cd-d7b7-4e50-998d-aee3812fd399"
        },
        "item": {
          "id": "99534d31-7f40-470c-8b5d-e5a2ffebe72a",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "ece8ddf8-deea-4cc5-84da-bf40b4f43d06",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "96f9afa6-085e-40ff-be44-471547f0d3db",
        "cursor": {
          "ref": "dba3ca53-bec8-45d0-8fa1-5cf6ef11740e",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "10bc3132-e8f0-43fb-bbfb-323e69f237e4"
        },
        "item": {
          "id": "96f9afa6-085e-40ff-be44-471547f0d3db",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "2734e9d5-a308-4ed2-82d2-5def3567f6b7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "96f9afa6-085e-40ff-be44-471547f0d3db",
        "cursor": {
          "ref": "dba3ca53-bec8-45d0-8fa1-5cf6ef11740e",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "10bc3132-e8f0-43fb-bbfb-323e69f237e4"
        },
        "item": {
          "id": "96f9afa6-085e-40ff-be44-471547f0d3db",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "2734e9d5-a308-4ed2-82d2-5def3567f6b7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "b928322c-331a-4223-8565-dea63bcc8230",
        "cursor": {
          "ref": "1baa0a3a-b31a-49e1-bafb-e76d5b0c3efc",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "14163969-7644-4aa4-abe8-184f26db3874"
        },
        "item": {
          "id": "b928322c-331a-4223-8565-dea63bcc8230",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "99449015-6bf0-42d6-b106-1fcdbe42b151",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "b928322c-331a-4223-8565-dea63bcc8230",
        "cursor": {
          "ref": "1baa0a3a-b31a-49e1-bafb-e76d5b0c3efc",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "14163969-7644-4aa4-abe8-184f26db3874"
        },
        "item": {
          "id": "b928322c-331a-4223-8565-dea63bcc8230",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "99449015-6bf0-42d6-b106-1fcdbe42b151",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "c3a2169f-438a-4699-bbbd-cbfed0f1632a",
        "cursor": {
          "ref": "e2345cd2-37b3-41ee-8f60-998f67113340",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "e803aa67-f567-4775-8df1-62c85ebeb465"
        },
        "item": {
          "id": "c3a2169f-438a-4699-bbbd-cbfed0f1632a",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "0dfa3d5f-49d8-45cc-9fec-1d9a69969078",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "c3a2169f-438a-4699-bbbd-cbfed0f1632a",
        "cursor": {
          "ref": "e2345cd2-37b3-41ee-8f60-998f67113340",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "e803aa67-f567-4775-8df1-62c85ebeb465"
        },
        "item": {
          "id": "c3a2169f-438a-4699-bbbd-cbfed0f1632a",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "0dfa3d5f-49d8-45cc-9fec-1d9a69969078",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "70681efe-7629-4d32-8800-c7e2de58b842",
        "cursor": {
          "ref": "c7ec5e8d-2392-4342-94b2-1aba7ac72734",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "40e36408-3bf6-4de4-8621-46593b38461d"
        },
        "item": {
          "id": "70681efe-7629-4d32-8800-c7e2de58b842",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "ba3824c8-1a62-4731-a8cb-74e76b13c5ca",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "70681efe-7629-4d32-8800-c7e2de58b842",
        "cursor": {
          "ref": "c7ec5e8d-2392-4342-94b2-1aba7ac72734",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "40e36408-3bf6-4de4-8621-46593b38461d"
        },
        "item": {
          "id": "70681efe-7629-4d32-8800-c7e2de58b842",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "ba3824c8-1a62-4731-a8cb-74e76b13c5ca",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "e4ee892f-4ca4-45bc-a6a3-ed53a8dc4345",
        "cursor": {
          "ref": "dbc97a87-0a41-419b-9f08-1d304d7fd4ec",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "24541036-8721-407c-94e6-e48f85b0b33f"
        },
        "item": {
          "id": "e4ee892f-4ca4-45bc-a6a3-ed53a8dc4345",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "6ce53e22-90d4-42a7-8fbe-bf524c472c0f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "e4ee892f-4ca4-45bc-a6a3-ed53a8dc4345",
        "cursor": {
          "ref": "dbc97a87-0a41-419b-9f08-1d304d7fd4ec",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "24541036-8721-407c-94e6-e48f85b0b33f"
        },
        "item": {
          "id": "e4ee892f-4ca4-45bc-a6a3-ed53a8dc4345",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "6ce53e22-90d4-42a7-8fbe-bf524c472c0f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "d7b31fa5-ccca-4229-b0f5-861a08f5e41d",
        "cursor": {
          "ref": "a261ec93-8596-4785-89d2-f160163e243f",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "6ccbaaa5-44e6-4e91-8f29-9193789d5499"
        },
        "item": {
          "id": "d7b31fa5-ccca-4229-b0f5-861a08f5e41d",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "7ea77575-9dad-44fd-a2dc-c34050304d4e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "d7b31fa5-ccca-4229-b0f5-861a08f5e41d",
        "cursor": {
          "ref": "a261ec93-8596-4785-89d2-f160163e243f",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "6ccbaaa5-44e6-4e91-8f29-9193789d5499"
        },
        "item": {
          "id": "d7b31fa5-ccca-4229-b0f5-861a08f5e41d",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "7ea77575-9dad-44fd-a2dc-c34050304d4e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "d7c6113e-5efd-4796-b47a-c8cecb5c3563",
        "cursor": {
          "ref": "d71252c5-bf9a-4bfa-852b-a6cdca7f07be",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "aae738a9-9e3b-45a0-98d2-4a6ae63b535f"
        },
        "item": {
          "id": "d7c6113e-5efd-4796-b47a-c8cecb5c3563",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "189e94de-3a26-490e-b48c-fca9f359c812",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "d7c6113e-5efd-4796-b47a-c8cecb5c3563",
        "cursor": {
          "ref": "d71252c5-bf9a-4bfa-852b-a6cdca7f07be",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "aae738a9-9e3b-45a0-98d2-4a6ae63b535f"
        },
        "item": {
          "id": "d7c6113e-5efd-4796-b47a-c8cecb5c3563",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "189e94de-3a26-490e-b48c-fca9f359c812",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "47dd1e30-ba7b-491f-b3ee-1596e6117c84",
        "cursor": {
          "ref": "9e3749a9-cac2-4773-867d-8e4a02913b07",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "39b405c3-9191-43d4-8dcb-356b60a3c08c"
        },
        "item": {
          "id": "47dd1e30-ba7b-491f-b3ee-1596e6117c84",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "f6a1e8ab-16f1-44dd-a09a-2ef338c5b3ef",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "47dd1e30-ba7b-491f-b3ee-1596e6117c84",
        "cursor": {
          "ref": "9e3749a9-cac2-4773-867d-8e4a02913b07",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "39b405c3-9191-43d4-8dcb-356b60a3c08c"
        },
        "item": {
          "id": "47dd1e30-ba7b-491f-b3ee-1596e6117c84",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "f6a1e8ab-16f1-44dd-a09a-2ef338c5b3ef",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "b59445d3-d47a-4db1-89b0-1bb417d351ce",
        "cursor": {
          "ref": "81ce981d-ee77-4c5f-94dc-fb55ec4f0bf7",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "d4fce232-c9ff-4b30-afc6-6ed5237ff4a4"
        },
        "item": {
          "id": "b59445d3-d47a-4db1-89b0-1bb417d351ce",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "0830af46-4e55-4cdd-a537-46afa4f4ad79",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "b59445d3-d47a-4db1-89b0-1bb417d351ce",
        "cursor": {
          "ref": "81ce981d-ee77-4c5f-94dc-fb55ec4f0bf7",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "d4fce232-c9ff-4b30-afc6-6ed5237ff4a4"
        },
        "item": {
          "id": "b59445d3-d47a-4db1-89b0-1bb417d351ce",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "0830af46-4e55-4cdd-a537-46afa4f4ad79",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "0963b591-dd41-4fbb-8a21-a32a3eb0b5c5",
        "cursor": {
          "ref": "67ccfefd-028a-45d8-bde1-a08ca79fa982",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "a05cba81-92ad-49bc-ba58-240af2b8fa8e"
        },
        "item": {
          "id": "0963b591-dd41-4fbb-8a21-a32a3eb0b5c5",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "addecd6f-2fc1-42c8-a91d-500337c37a54",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "0963b591-dd41-4fbb-8a21-a32a3eb0b5c5",
        "cursor": {
          "ref": "67ccfefd-028a-45d8-bde1-a08ca79fa982",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "a05cba81-92ad-49bc-ba58-240af2b8fa8e"
        },
        "item": {
          "id": "0963b591-dd41-4fbb-8a21-a32a3eb0b5c5",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "addecd6f-2fc1-42c8-a91d-500337c37a54",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "b08a0c61-1d63-4e98-b605-4cc52c766531",
        "cursor": {
          "ref": "7f9c6221-c5c9-46a6-9671-79b74499ab15",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "7031eddf-4d32-41dd-840d-2443fce71e19"
        },
        "item": {
          "id": "b08a0c61-1d63-4e98-b605-4cc52c766531",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "f6a95afe-4723-4f47-a3d4-da68728e6682",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "b08a0c61-1d63-4e98-b605-4cc52c766531",
        "cursor": {
          "ref": "7f9c6221-c5c9-46a6-9671-79b74499ab15",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "7031eddf-4d32-41dd-840d-2443fce71e19"
        },
        "item": {
          "id": "b08a0c61-1d63-4e98-b605-4cc52c766531",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "f6a95afe-4723-4f47-a3d4-da68728e6682",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "df843c2e-b7bc-4e7d-8fd7-1403caa54c1b",
        "cursor": {
          "ref": "fb1076aa-a1ca-45f2-9b05-69336fd8ce13",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "9e93e09f-0712-4bd3-a20e-a7ae9f7d2de0"
        },
        "item": {
          "id": "df843c2e-b7bc-4e7d-8fd7-1403caa54c1b",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "b623c897-6a37-4ccb-a034-d34f42a99be9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "df843c2e-b7bc-4e7d-8fd7-1403caa54c1b",
        "cursor": {
          "ref": "fb1076aa-a1ca-45f2-9b05-69336fd8ce13",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "9e93e09f-0712-4bd3-a20e-a7ae9f7d2de0"
        },
        "item": {
          "id": "df843c2e-b7bc-4e7d-8fd7-1403caa54c1b",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "b623c897-6a37-4ccb-a034-d34f42a99be9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "80ddacc4-d02c-488c-89cf-0cacc69bbd42",
        "cursor": {
          "ref": "7d6e7101-3217-4818-b6ab-a608f098e776",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "ddd3d9e0-5763-48b3-bdf9-8918f9b6aca9"
        },
        "item": {
          "id": "80ddacc4-d02c-488c-89cf-0cacc69bbd42",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "45d9613b-0b18-49e3-a447-64546a6c3928",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "80ddacc4-d02c-488c-89cf-0cacc69bbd42",
        "cursor": {
          "ref": "7d6e7101-3217-4818-b6ab-a608f098e776",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "ddd3d9e0-5763-48b3-bdf9-8918f9b6aca9"
        },
        "item": {
          "id": "80ddacc4-d02c-488c-89cf-0cacc69bbd42",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "45d9613b-0b18-49e3-a447-64546a6c3928",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "b2412761-3ecf-4fa7-890c-6bb23c1dfd46",
        "cursor": {
          "ref": "3dd33d8d-8709-446b-af46-a11b866f7e12",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "7c889d12-7270-43cd-9697-86beb9e391ea"
        },
        "item": {
          "id": "b2412761-3ecf-4fa7-890c-6bb23c1dfd46",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "796c5239-6ba1-4650-afe0-63460115d8ba",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "b2412761-3ecf-4fa7-890c-6bb23c1dfd46",
        "cursor": {
          "ref": "3dd33d8d-8709-446b-af46-a11b866f7e12",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "7c889d12-7270-43cd-9697-86beb9e391ea"
        },
        "item": {
          "id": "b2412761-3ecf-4fa7-890c-6bb23c1dfd46",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "796c5239-6ba1-4650-afe0-63460115d8ba",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "9bfdaff3-2781-4551-9b4a-8272dfc02710",
        "cursor": {
          "ref": "e7d1dcca-74e8-49b1-baf8-3b6898549e14",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "3791a5b5-134b-4ab9-8a0c-6d56a89efaa1"
        },
        "item": {
          "id": "9bfdaff3-2781-4551-9b4a-8272dfc02710",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "f61cf532-3d21-4d1b-a89b-bc83e8335d87",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "9bfdaff3-2781-4551-9b4a-8272dfc02710",
        "cursor": {
          "ref": "e7d1dcca-74e8-49b1-baf8-3b6898549e14",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "3791a5b5-134b-4ab9-8a0c-6d56a89efaa1"
        },
        "item": {
          "id": "9bfdaff3-2781-4551-9b4a-8272dfc02710",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "f61cf532-3d21-4d1b-a89b-bc83e8335d87",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "3bed5ac6-172a-44b2-ab0d-8314476ae4ce",
        "cursor": {
          "ref": "8e67b47a-0ed5-42ec-ac5f-a016f4e8ee46",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "3dd439d3-0668-4352-9f2c-af889cdf363e"
        },
        "item": {
          "id": "3bed5ac6-172a-44b2-ab0d-8314476ae4ce",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "6dfd5b4c-030e-4db5-845b-650a65d64bdf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "3bed5ac6-172a-44b2-ab0d-8314476ae4ce",
        "cursor": {
          "ref": "8e67b47a-0ed5-42ec-ac5f-a016f4e8ee46",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "3dd439d3-0668-4352-9f2c-af889cdf363e"
        },
        "item": {
          "id": "3bed5ac6-172a-44b2-ab0d-8314476ae4ce",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "6dfd5b4c-030e-4db5-845b-650a65d64bdf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "b5407699-80ea-4d1c-86d9-a7c94452a494",
        "cursor": {
          "ref": "b43697b0-aa80-42be-896d-fe97dc98d071",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "c2167607-9d76-4280-930a-4f8fd4108d5d"
        },
        "item": {
          "id": "b5407699-80ea-4d1c-86d9-a7c94452a494",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "d5a8f928-1a55-47ff-9972-5bbc15af092e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "b5407699-80ea-4d1c-86d9-a7c94452a494",
        "cursor": {
          "ref": "b43697b0-aa80-42be-896d-fe97dc98d071",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "c2167607-9d76-4280-930a-4f8fd4108d5d"
        },
        "item": {
          "id": "b5407699-80ea-4d1c-86d9-a7c94452a494",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "d5a8f928-1a55-47ff-9972-5bbc15af092e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "04860f55-4aaa-48c9-8994-e045456139d3",
        "cursor": {
          "ref": "a2cabe47-9ba8-43ea-8430-abfa08c9c21e",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "f5a769c5-2f7d-400a-b9d3-7c7de3732c4b"
        },
        "item": {
          "id": "04860f55-4aaa-48c9-8994-e045456139d3",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "68ae982b-65de-465b-a8d1-77a1d5b5b813",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "04860f55-4aaa-48c9-8994-e045456139d3",
        "cursor": {
          "ref": "a2cabe47-9ba8-43ea-8430-abfa08c9c21e",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "f5a769c5-2f7d-400a-b9d3-7c7de3732c4b"
        },
        "item": {
          "id": "04860f55-4aaa-48c9-8994-e045456139d3",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "68ae982b-65de-465b-a8d1-77a1d5b5b813",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "708e3f59-743e-4e1e-9de7-1ec8f462c12e",
        "cursor": {
          "ref": "7e176e11-06ed-485b-a96d-9ac60ee1c81c",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "15e72955-eb39-4d52-8b4b-e1fbb3b0c716"
        },
        "item": {
          "id": "708e3f59-743e-4e1e-9de7-1ec8f462c12e",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "5e24eb19-d6cb-45b1-8cae-6a22e135124d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "708e3f59-743e-4e1e-9de7-1ec8f462c12e",
        "cursor": {
          "ref": "7e176e11-06ed-485b-a96d-9ac60ee1c81c",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "15e72955-eb39-4d52-8b4b-e1fbb3b0c716"
        },
        "item": {
          "id": "708e3f59-743e-4e1e-9de7-1ec8f462c12e",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "5e24eb19-d6cb-45b1-8cae-6a22e135124d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "3e69199a-98c7-4c7f-abbc-071a288e68c1",
        "cursor": {
          "ref": "7edd5b07-e4fc-44ab-b35c-528095f18a45",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "8ab6b867-1d16-4efb-961a-1a0846e70634"
        },
        "item": {
          "id": "3e69199a-98c7-4c7f-abbc-071a288e68c1",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "6081407d-a67f-4ae5-9ac7-d5b0f6211a65",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "3e69199a-98c7-4c7f-abbc-071a288e68c1",
        "cursor": {
          "ref": "7edd5b07-e4fc-44ab-b35c-528095f18a45",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "8ab6b867-1d16-4efb-961a-1a0846e70634"
        },
        "item": {
          "id": "3e69199a-98c7-4c7f-abbc-071a288e68c1",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "6081407d-a67f-4ae5-9ac7-d5b0f6211a65",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "e5e3ce9c-a184-4edd-b57a-0b62efacd269",
        "cursor": {
          "ref": "bf0517d5-21be-44e7-8fcf-b9b4757ce606",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "4ebe18ef-e10e-4f10-8806-760c7665d0da"
        },
        "item": {
          "id": "e5e3ce9c-a184-4edd-b57a-0b62efacd269",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "8786e1eb-c460-4a4b-9475-f0d2569cf34a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "e5e3ce9c-a184-4edd-b57a-0b62efacd269",
        "cursor": {
          "ref": "bf0517d5-21be-44e7-8fcf-b9b4757ce606",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "4ebe18ef-e10e-4f10-8806-760c7665d0da"
        },
        "item": {
          "id": "e5e3ce9c-a184-4edd-b57a-0b62efacd269",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "8786e1eb-c460-4a4b-9475-f0d2569cf34a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "4ef9a1b0-f8cd-4d9b-a986-ffaa79d90c93",
        "cursor": {
          "ref": "cb1245ed-7d1e-414f-a3d6-fdf99dc0905d",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "423a053f-f430-499c-8afb-b8da7b8f9809"
        },
        "item": {
          "id": "4ef9a1b0-f8cd-4d9b-a986-ffaa79d90c93",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "ebe95fa0-c2c5-4fc8-a0ab-891e44cf578c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "4ef9a1b0-f8cd-4d9b-a986-ffaa79d90c93",
        "cursor": {
          "ref": "cb1245ed-7d1e-414f-a3d6-fdf99dc0905d",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "423a053f-f430-499c-8afb-b8da7b8f9809"
        },
        "item": {
          "id": "4ef9a1b0-f8cd-4d9b-a986-ffaa79d90c93",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "ebe95fa0-c2c5-4fc8-a0ab-891e44cf578c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "6b28c0b2-52ea-4bc6-9a46-0480a0ec182c",
        "cursor": {
          "ref": "13ac82b4-4dca-441f-91ae-e5885f06da2a",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "cac274f8-5519-4643-9881-d82c2e33d778"
        },
        "item": {
          "id": "6b28c0b2-52ea-4bc6-9a46-0480a0ec182c",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "5f7f9f20-4948-4e3e-8cd9-eb11f71ac76a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "6b28c0b2-52ea-4bc6-9a46-0480a0ec182c",
        "cursor": {
          "ref": "13ac82b4-4dca-441f-91ae-e5885f06da2a",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "cac274f8-5519-4643-9881-d82c2e33d778"
        },
        "item": {
          "id": "6b28c0b2-52ea-4bc6-9a46-0480a0ec182c",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "5f7f9f20-4948-4e3e-8cd9-eb11f71ac76a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "988530e0-209e-481e-8adc-1843d8503e55",
        "cursor": {
          "ref": "dc42ebbf-c743-4296-b3f0-99d04696f7a0",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "74778de4-900a-48f7-946a-ece0f8aac9d2"
        },
        "item": {
          "id": "988530e0-209e-481e-8adc-1843d8503e55",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "97ba7980-ec94-4b0b-b7e7-a77cca579227",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "988530e0-209e-481e-8adc-1843d8503e55",
        "cursor": {
          "ref": "dc42ebbf-c743-4296-b3f0-99d04696f7a0",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "74778de4-900a-48f7-946a-ece0f8aac9d2"
        },
        "item": {
          "id": "988530e0-209e-481e-8adc-1843d8503e55",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "97ba7980-ec94-4b0b-b7e7-a77cca579227",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "f87ae345-555c-4044-8a52-9546b17cdb9b",
        "cursor": {
          "ref": "5eceb896-b0d0-447c-9641-20df81d38a78",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "0af47801-9a1c-4c12-af09-79b252c635c4"
        },
        "item": {
          "id": "f87ae345-555c-4044-8a52-9546b17cdb9b",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "80564d23-dcf0-4706-bdc0-a70535ea00ea",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "f87ae345-555c-4044-8a52-9546b17cdb9b",
        "cursor": {
          "ref": "5eceb896-b0d0-447c-9641-20df81d38a78",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "0af47801-9a1c-4c12-af09-79b252c635c4"
        },
        "item": {
          "id": "f87ae345-555c-4044-8a52-9546b17cdb9b",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "80564d23-dcf0-4706-bdc0-a70535ea00ea",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "53217735-d759-4c0e-96f8-f8b5c97cd43f",
        "cursor": {
          "ref": "866a7e85-8c6a-4a2a-a8da-c9d830d1669f",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "9e9b985b-3601-45a3-a697-70dcac0fb648"
        },
        "item": {
          "id": "53217735-d759-4c0e-96f8-f8b5c97cd43f",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "f198d94e-78e6-40d8-9c81-d075b4002bad",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "53217735-d759-4c0e-96f8-f8b5c97cd43f",
        "cursor": {
          "ref": "866a7e85-8c6a-4a2a-a8da-c9d830d1669f",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "9e9b985b-3601-45a3-a697-70dcac0fb648"
        },
        "item": {
          "id": "53217735-d759-4c0e-96f8-f8b5c97cd43f",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "f198d94e-78e6-40d8-9c81-d075b4002bad",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "3b3e0372-0563-4c81-841d-08ab306967f2",
        "cursor": {
          "ref": "f41d2107-417c-4d7e-9d51-f97aade4ca2b",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "b5caa43c-4737-4965-ab8b-79104f55839f"
        },
        "item": {
          "id": "3b3e0372-0563-4c81-841d-08ab306967f2",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "01e1bb38-b170-4aa0-83a1-49d7b3a4a0cb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "3b3e0372-0563-4c81-841d-08ab306967f2",
        "cursor": {
          "ref": "f41d2107-417c-4d7e-9d51-f97aade4ca2b",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "b5caa43c-4737-4965-ab8b-79104f55839f"
        },
        "item": {
          "id": "3b3e0372-0563-4c81-841d-08ab306967f2",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "01e1bb38-b170-4aa0-83a1-49d7b3a4a0cb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "f387c351-621d-40c6-ba38-71ce5ef2e9f6",
        "cursor": {
          "ref": "a642ffef-3250-47f8-b243-3cfb43750020",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "05ca4461-f907-48ce-ac13-26216614c4a6"
        },
        "item": {
          "id": "f387c351-621d-40c6-ba38-71ce5ef2e9f6",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "7d3e92d2-5c91-4702-9c13-1a73843e57e5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "f387c351-621d-40c6-ba38-71ce5ef2e9f6",
        "cursor": {
          "ref": "a642ffef-3250-47f8-b243-3cfb43750020",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "05ca4461-f907-48ce-ac13-26216614c4a6"
        },
        "item": {
          "id": "f387c351-621d-40c6-ba38-71ce5ef2e9f6",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "7d3e92d2-5c91-4702-9c13-1a73843e57e5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "12277c3a-c17e-4369-b8dc-ce65c0f794cb",
        "cursor": {
          "ref": "59371d32-63ef-4e31-8db6-fee8c2a199ca",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "780e39e4-7903-4635-a404-86a5f774c3e6"
        },
        "item": {
          "id": "12277c3a-c17e-4369-b8dc-ce65c0f794cb",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "7d5b3ed1-8b7c-455a-9be6-c77526339ae6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "12277c3a-c17e-4369-b8dc-ce65c0f794cb",
        "cursor": {
          "ref": "59371d32-63ef-4e31-8db6-fee8c2a199ca",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "780e39e4-7903-4635-a404-86a5f774c3e6"
        },
        "item": {
          "id": "12277c3a-c17e-4369-b8dc-ce65c0f794cb",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "7d5b3ed1-8b7c-455a-9be6-c77526339ae6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "642ee54d-61fd-4ae4-ad4b-2eafcbb8338a",
        "cursor": {
          "ref": "c5d6b82c-f4d0-40cd-971c-f9f7105654c9",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "53e67181-6412-4a7e-81a8-a7461bdb0763"
        },
        "item": {
          "id": "642ee54d-61fd-4ae4-ad4b-2eafcbb8338a",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "36bc5c8e-3445-452d-91d7-7e3c0af720ef",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "642ee54d-61fd-4ae4-ad4b-2eafcbb8338a",
        "cursor": {
          "ref": "c5d6b82c-f4d0-40cd-971c-f9f7105654c9",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "53e67181-6412-4a7e-81a8-a7461bdb0763"
        },
        "item": {
          "id": "642ee54d-61fd-4ae4-ad4b-2eafcbb8338a",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "36bc5c8e-3445-452d-91d7-7e3c0af720ef",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "d13504b8-6f55-413a-85fc-cbe4f09d11a2",
        "cursor": {
          "ref": "005bfda7-5c25-43a2-92e2-e1f3aef41ed7",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "88667cd8-8fec-4aa9-bdd4-de0af0666a55"
        },
        "item": {
          "id": "d13504b8-6f55-413a-85fc-cbe4f09d11a2",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "47f2d12d-29ea-4b0b-a983-e92ac87bf3f4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "d13504b8-6f55-413a-85fc-cbe4f09d11a2",
        "cursor": {
          "ref": "005bfda7-5c25-43a2-92e2-e1f3aef41ed7",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "88667cd8-8fec-4aa9-bdd4-de0af0666a55"
        },
        "item": {
          "id": "d13504b8-6f55-413a-85fc-cbe4f09d11a2",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "47f2d12d-29ea-4b0b-a983-e92ac87bf3f4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "063ea399-1983-434b-9cd3-436dc9e9173c",
        "cursor": {
          "ref": "56cb1c9b-750e-4862-9baf-cb95649faefe",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "12b158c4-166b-49c6-bdb5-0eb5cebfea6e"
        },
        "item": {
          "id": "063ea399-1983-434b-9cd3-436dc9e9173c",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "d085971b-b66f-435f-9736-202e73d1df36",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "063ea399-1983-434b-9cd3-436dc9e9173c",
        "cursor": {
          "ref": "56cb1c9b-750e-4862-9baf-cb95649faefe",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "12b158c4-166b-49c6-bdb5-0eb5cebfea6e"
        },
        "item": {
          "id": "063ea399-1983-434b-9cd3-436dc9e9173c",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "d085971b-b66f-435f-9736-202e73d1df36",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "cdeea282-0c02-462e-a2de-5020b4c817bc",
        "cursor": {
          "ref": "321d1839-2837-4538-b884-5d36284c541d",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "38adf853-626a-486b-8da5-f893e556ab63"
        },
        "item": {
          "id": "cdeea282-0c02-462e-a2de-5020b4c817bc",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "66d3ad20-4a6b-4805-aa1e-b1daed8112b9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "cdeea282-0c02-462e-a2de-5020b4c817bc",
        "cursor": {
          "ref": "321d1839-2837-4538-b884-5d36284c541d",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "38adf853-626a-486b-8da5-f893e556ab63"
        },
        "item": {
          "id": "cdeea282-0c02-462e-a2de-5020b4c817bc",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "66d3ad20-4a6b-4805-aa1e-b1daed8112b9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "78c759ef-f82d-44f2-b8a7-3a3154a1a3b9",
        "cursor": {
          "ref": "e87174b6-8424-4bb1-80eb-5110f2c471ea",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "09a264fc-b990-45df-8d75-50ff46ecce0e"
        },
        "item": {
          "id": "78c759ef-f82d-44f2-b8a7-3a3154a1a3b9",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "68c6a089-061e-4298-bcbf-703df28fcf34",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "78c759ef-f82d-44f2-b8a7-3a3154a1a3b9",
        "cursor": {
          "ref": "e87174b6-8424-4bb1-80eb-5110f2c471ea",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "09a264fc-b990-45df-8d75-50ff46ecce0e"
        },
        "item": {
          "id": "78c759ef-f82d-44f2-b8a7-3a3154a1a3b9",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "68c6a089-061e-4298-bcbf-703df28fcf34",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "013c1ce0-c76d-4048-bbdf-ae853de8233e",
        "cursor": {
          "ref": "7abc3f30-0b76-4785-bad4-24e405f37a62",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "caa8f1a6-1941-4d21-9f92-13398b0a8cd8"
        },
        "item": {
          "id": "013c1ce0-c76d-4048-bbdf-ae853de8233e",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "11e0c4fc-f599-4fa8-99d2-1f329afffb3d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "013c1ce0-c76d-4048-bbdf-ae853de8233e",
        "cursor": {
          "ref": "7abc3f30-0b76-4785-bad4-24e405f37a62",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "caa8f1a6-1941-4d21-9f92-13398b0a8cd8"
        },
        "item": {
          "id": "013c1ce0-c76d-4048-bbdf-ae853de8233e",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "11e0c4fc-f599-4fa8-99d2-1f329afffb3d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "a0db7c63-091a-41f3-ba9b-d06c3f7962d9",
        "cursor": {
          "ref": "bae8a501-33ec-48c1-878d-51596c0d057c",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "39954df1-6902-4f02-b127-ca8d8186d2a4"
        },
        "item": {
          "id": "a0db7c63-091a-41f3-ba9b-d06c3f7962d9",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "a8a49454-de7c-403f-857e-61f14d3b1dd7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "a0db7c63-091a-41f3-ba9b-d06c3f7962d9",
        "cursor": {
          "ref": "bae8a501-33ec-48c1-878d-51596c0d057c",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "39954df1-6902-4f02-b127-ca8d8186d2a4"
        },
        "item": {
          "id": "a0db7c63-091a-41f3-ba9b-d06c3f7962d9",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "a8a49454-de7c-403f-857e-61f14d3b1dd7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "70942f69-76a7-45f0-aa20-2e5badfefd2d",
        "cursor": {
          "ref": "b2c29a70-0418-4675-abf6-fe6b3ed2d6cf",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "4f66b7ae-b405-445f-b872-20ddbfebb24b"
        },
        "item": {
          "id": "70942f69-76a7-45f0-aa20-2e5badfefd2d",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "59463035-e282-45ef-ba00-4403f9924d2a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "70942f69-76a7-45f0-aa20-2e5badfefd2d",
        "cursor": {
          "ref": "b2c29a70-0418-4675-abf6-fe6b3ed2d6cf",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "4f66b7ae-b405-445f-b872-20ddbfebb24b"
        },
        "item": {
          "id": "70942f69-76a7-45f0-aa20-2e5badfefd2d",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "59463035-e282-45ef-ba00-4403f9924d2a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "6d31d824-d91d-4872-8caa-ccac14b64122",
        "cursor": {
          "ref": "e0d280d5-3581-4623-b39d-a70b0add0420",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "b208e5dd-7adf-424e-8c33-c42a9f189e91"
        },
        "item": {
          "id": "6d31d824-d91d-4872-8caa-ccac14b64122",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "fc3013b5-6705-44c2-b772-a6aa245dd71d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "6d31d824-d91d-4872-8caa-ccac14b64122",
        "cursor": {
          "ref": "e0d280d5-3581-4623-b39d-a70b0add0420",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "b208e5dd-7adf-424e-8c33-c42a9f189e91"
        },
        "item": {
          "id": "6d31d824-d91d-4872-8caa-ccac14b64122",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "fc3013b5-6705-44c2-b772-a6aa245dd71d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "eac72c49-af34-4aa8-8be6-35dc02bab71c",
        "cursor": {
          "ref": "7fa44016-72c2-4a81-80a1-1883279e017f",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "23480a8a-93fa-4760-8504-21941eb72845"
        },
        "item": {
          "id": "eac72c49-af34-4aa8-8be6-35dc02bab71c",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "7f94dab6-50fe-47eb-a7b5-bd0d536311d5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "eac72c49-af34-4aa8-8be6-35dc02bab71c",
        "cursor": {
          "ref": "7fa44016-72c2-4a81-80a1-1883279e017f",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "23480a8a-93fa-4760-8504-21941eb72845"
        },
        "item": {
          "id": "eac72c49-af34-4aa8-8be6-35dc02bab71c",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "7f94dab6-50fe-47eb-a7b5-bd0d536311d5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "2b177559-6d11-496a-8656-a469cfe42dff",
        "cursor": {
          "ref": "7feb29e1-a557-4add-b349-46f9de48c35b",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "a37d69ea-4f92-45da-8be3-038e54bf5ae6"
        },
        "item": {
          "id": "2b177559-6d11-496a-8656-a469cfe42dff",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "071423bb-a894-4686-bdf5-d9d09219a21a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "2b177559-6d11-496a-8656-a469cfe42dff",
        "cursor": {
          "ref": "7feb29e1-a557-4add-b349-46f9de48c35b",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "a37d69ea-4f92-45da-8be3-038e54bf5ae6"
        },
        "item": {
          "id": "2b177559-6d11-496a-8656-a469cfe42dff",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "071423bb-a894-4686-bdf5-d9d09219a21a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "f853f659-1e3a-4a91-9c4a-8b082ef212e2",
        "cursor": {
          "ref": "432b650b-1c70-4f5b-b2f8-571f3fb9fa2f",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "0bfba3c9-ee9c-4656-a1ee-e592ff91b8d6"
        },
        "item": {
          "id": "f853f659-1e3a-4a91-9c4a-8b082ef212e2",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "6d7c4cfe-9730-4563-ad4a-4355cd406169",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "f853f659-1e3a-4a91-9c4a-8b082ef212e2",
        "cursor": {
          "ref": "432b650b-1c70-4f5b-b2f8-571f3fb9fa2f",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "0bfba3c9-ee9c-4656-a1ee-e592ff91b8d6"
        },
        "item": {
          "id": "f853f659-1e3a-4a91-9c4a-8b082ef212e2",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "6d7c4cfe-9730-4563-ad4a-4355cd406169",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "d70bfdbf-fcec-4912-ba4c-e0d604f71bf2",
        "cursor": {
          "ref": "3addb35b-3126-4445-8f8b-90a7a0d0217c",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "10d94cad-a884-40be-8d89-1f0ed0a0762a"
        },
        "item": {
          "id": "d70bfdbf-fcec-4912-ba4c-e0d604f71bf2",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "7ad64a7d-67c4-4973-a3d7-40b6b25975db",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "d70bfdbf-fcec-4912-ba4c-e0d604f71bf2",
        "cursor": {
          "ref": "3addb35b-3126-4445-8f8b-90a7a0d0217c",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "10d94cad-a884-40be-8d89-1f0ed0a0762a"
        },
        "item": {
          "id": "d70bfdbf-fcec-4912-ba4c-e0d604f71bf2",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "7ad64a7d-67c4-4973-a3d7-40b6b25975db",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "b39de126-b86f-4198-93f4-4617bef79552",
        "cursor": {
          "ref": "cda5d61e-1ec4-4a05-9899-e63102c51316",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "ef9b8d0f-6990-45c9-af9d-64451882f394"
        },
        "item": {
          "id": "b39de126-b86f-4198-93f4-4617bef79552",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "34ea2a43-23e4-4b48-a703-d37fde9f98b2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "b39de126-b86f-4198-93f4-4617bef79552",
        "cursor": {
          "ref": "cda5d61e-1ec4-4a05-9899-e63102c51316",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "ef9b8d0f-6990-45c9-af9d-64451882f394"
        },
        "item": {
          "id": "b39de126-b86f-4198-93f4-4617bef79552",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "34ea2a43-23e4-4b48-a703-d37fde9f98b2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "5c045b9b-5d6e-444a-a6eb-91d5b44f9335",
        "cursor": {
          "ref": "02185c36-b944-4cb3-85e7-03766d981c4d",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "b34ce88e-2265-4ef2-bf76-92743248ccdd"
        },
        "item": {
          "id": "5c045b9b-5d6e-444a-a6eb-91d5b44f9335",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "d6998e71-10ef-4f68-9c01-2327c19f04c9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "5c045b9b-5d6e-444a-a6eb-91d5b44f9335",
        "cursor": {
          "ref": "02185c36-b944-4cb3-85e7-03766d981c4d",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "b34ce88e-2265-4ef2-bf76-92743248ccdd"
        },
        "item": {
          "id": "5c045b9b-5d6e-444a-a6eb-91d5b44f9335",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "d6998e71-10ef-4f68-9c01-2327c19f04c9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "f35e3cb0-3e1f-4a1b-ae34-b8370a36dd1e",
        "cursor": {
          "ref": "c5601b94-8bf5-4f12-98e3-2687ccddf0a3",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "c1823dd4-282d-41ec-9bbe-4ddfceafc6c7"
        },
        "item": {
          "id": "f35e3cb0-3e1f-4a1b-ae34-b8370a36dd1e",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "84fc7116-5d2c-4f39-b39c-6efc5ea22337",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "f35e3cb0-3e1f-4a1b-ae34-b8370a36dd1e",
        "cursor": {
          "ref": "c5601b94-8bf5-4f12-98e3-2687ccddf0a3",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "c1823dd4-282d-41ec-9bbe-4ddfceafc6c7"
        },
        "item": {
          "id": "f35e3cb0-3e1f-4a1b-ae34-b8370a36dd1e",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "84fc7116-5d2c-4f39-b39c-6efc5ea22337",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "dffab8ca-a9d9-406a-ad2f-b3e10eead768",
        "cursor": {
          "ref": "34f42d6b-7f66-48a1-a421-c8ddd377f548",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "63d69cf8-dde7-481c-8242-a707fda85ccf"
        },
        "item": {
          "id": "dffab8ca-a9d9-406a-ad2f-b3e10eead768",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "9adb226d-5686-4a09-a1d2-e11afabd1a5b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "dffab8ca-a9d9-406a-ad2f-b3e10eead768",
        "cursor": {
          "ref": "34f42d6b-7f66-48a1-a421-c8ddd377f548",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "63d69cf8-dde7-481c-8242-a707fda85ccf"
        },
        "item": {
          "id": "dffab8ca-a9d9-406a-ad2f-b3e10eead768",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "9adb226d-5686-4a09-a1d2-e11afabd1a5b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "82b28f05-ce08-4c96-95da-8a66ed20c26a",
        "cursor": {
          "ref": "ad129523-ebdc-4cc4-8d46-34954125dcec",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "162f13a7-c4e7-4c27-9df8-8312e25a19a6"
        },
        "item": {
          "id": "82b28f05-ce08-4c96-95da-8a66ed20c26a",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "dd0ec325-2e88-4381-8b1a-1d28570c66e2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "82b28f05-ce08-4c96-95da-8a66ed20c26a",
        "cursor": {
          "ref": "ad129523-ebdc-4cc4-8d46-34954125dcec",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "162f13a7-c4e7-4c27-9df8-8312e25a19a6"
        },
        "item": {
          "id": "82b28f05-ce08-4c96-95da-8a66ed20c26a",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "dd0ec325-2e88-4381-8b1a-1d28570c66e2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "02f9278c-add2-48f4-8128-0b29690d3c40",
        "cursor": {
          "ref": "8e056233-fd2f-42a1-8e3f-1386a796e84b",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "98416952-5bd1-43df-b21a-ca15738a7652"
        },
        "item": {
          "id": "02f9278c-add2-48f4-8128-0b29690d3c40",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "10ed7692-e27a-420e-91ae-0d93cfce1891",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "02f9278c-add2-48f4-8128-0b29690d3c40",
        "cursor": {
          "ref": "8e056233-fd2f-42a1-8e3f-1386a796e84b",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "98416952-5bd1-43df-b21a-ca15738a7652"
        },
        "item": {
          "id": "02f9278c-add2-48f4-8128-0b29690d3c40",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "10ed7692-e27a-420e-91ae-0d93cfce1891",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "6b906a42-7ec4-4596-9c58-98edba9c3419",
        "cursor": {
          "ref": "3176d9ca-3e06-41f5-aa39-12917a8275ab",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "879c7897-12e4-446f-b388-a4e6c793cc32"
        },
        "item": {
          "id": "6b906a42-7ec4-4596-9c58-98edba9c3419",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "2a6176db-3b82-4ed7-ad4c-96abbdb6b43d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "6b906a42-7ec4-4596-9c58-98edba9c3419",
        "cursor": {
          "ref": "3176d9ca-3e06-41f5-aa39-12917a8275ab",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "879c7897-12e4-446f-b388-a4e6c793cc32"
        },
        "item": {
          "id": "6b906a42-7ec4-4596-9c58-98edba9c3419",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "2a6176db-3b82-4ed7-ad4c-96abbdb6b43d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "a008c78c-b209-478d-8e18-196328a13165",
        "cursor": {
          "ref": "73d904d4-c1d2-4416-8463-ec9afc0562a4",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "923fc548-c0e2-4bfb-ad72-71ece716e3eb"
        },
        "item": {
          "id": "a008c78c-b209-478d-8e18-196328a13165",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "c96c26f0-e089-4a52-885d-d0f9cd59e784",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "a008c78c-b209-478d-8e18-196328a13165",
        "cursor": {
          "ref": "73d904d4-c1d2-4416-8463-ec9afc0562a4",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "923fc548-c0e2-4bfb-ad72-71ece716e3eb"
        },
        "item": {
          "id": "a008c78c-b209-478d-8e18-196328a13165",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "c96c26f0-e089-4a52-885d-d0f9cd59e784",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "e69680fe-1d89-461d-98e0-37422bceaff2",
        "cursor": {
          "ref": "3e5ebbfb-d9ad-444e-a0df-06554d745271",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "d1f1270e-e45c-45e3-8a42-b4a9440ecab6"
        },
        "item": {
          "id": "e69680fe-1d89-461d-98e0-37422bceaff2",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "051b644d-3578-4614-9571-86c40ef8a430",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "e69680fe-1d89-461d-98e0-37422bceaff2",
        "cursor": {
          "ref": "3e5ebbfb-d9ad-444e-a0df-06554d745271",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "d1f1270e-e45c-45e3-8a42-b4a9440ecab6"
        },
        "item": {
          "id": "e69680fe-1d89-461d-98e0-37422bceaff2",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "051b644d-3578-4614-9571-86c40ef8a430",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "16743547-1f44-4418-ad6b-589ec0f88c7a",
        "cursor": {
          "ref": "7735ac05-2acf-4fa8-a27d-379c10d52382",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "6c4996e5-e1c6-4c41-8f7b-42ecc8df6df1"
        },
        "item": {
          "id": "16743547-1f44-4418-ad6b-589ec0f88c7a",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "99fe1cc0-1d9b-4a9f-8f1f-e7462fdd8295",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "16743547-1f44-4418-ad6b-589ec0f88c7a",
        "cursor": {
          "ref": "7735ac05-2acf-4fa8-a27d-379c10d52382",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "6c4996e5-e1c6-4c41-8f7b-42ecc8df6df1"
        },
        "item": {
          "id": "16743547-1f44-4418-ad6b-589ec0f88c7a",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "99fe1cc0-1d9b-4a9f-8f1f-e7462fdd8295",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "f5d585d3-669c-4b66-91ff-308401dc4734",
        "cursor": {
          "ref": "92f01e62-ea81-4751-ba47-8237a6382a09",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "94ee2638-d8dc-44e1-a0b1-b5dd0be08daf"
        },
        "item": {
          "id": "f5d585d3-669c-4b66-91ff-308401dc4734",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "608fa84a-aaba-4e4e-9021-dc3aab2d7004",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "f5d585d3-669c-4b66-91ff-308401dc4734",
        "cursor": {
          "ref": "92f01e62-ea81-4751-ba47-8237a6382a09",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "94ee2638-d8dc-44e1-a0b1-b5dd0be08daf"
        },
        "item": {
          "id": "f5d585d3-669c-4b66-91ff-308401dc4734",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "608fa84a-aaba-4e4e-9021-dc3aab2d7004",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "2c461c07-d268-4758-b226-6ac5745347fb",
        "cursor": {
          "ref": "5b5ca180-4e7c-42fb-9fd2-9bfabd5f71da",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "165e185e-e668-456b-a8d4-f3097be16228"
        },
        "item": {
          "id": "2c461c07-d268-4758-b226-6ac5745347fb",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "f4b0d486-aa9c-4280-893e-12a85043832d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "2c461c07-d268-4758-b226-6ac5745347fb",
        "cursor": {
          "ref": "5b5ca180-4e7c-42fb-9fd2-9bfabd5f71da",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "165e185e-e668-456b-a8d4-f3097be16228"
        },
        "item": {
          "id": "2c461c07-d268-4758-b226-6ac5745347fb",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "f4b0d486-aa9c-4280-893e-12a85043832d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "349f45cc-28bd-4094-b09d-e19aea595cda",
        "cursor": {
          "ref": "40635bc6-4035-4fd9-9764-4cf77533cd68",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "4a5ec7c5-64bd-433c-9462-8ffc96055172"
        },
        "item": {
          "id": "349f45cc-28bd-4094-b09d-e19aea595cda",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "47c74cd2-4f86-4d62-9b26-e1dd730749a2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "349f45cc-28bd-4094-b09d-e19aea595cda",
        "cursor": {
          "ref": "40635bc6-4035-4fd9-9764-4cf77533cd68",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "4a5ec7c5-64bd-433c-9462-8ffc96055172"
        },
        "item": {
          "id": "349f45cc-28bd-4094-b09d-e19aea595cda",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "47c74cd2-4f86-4d62-9b26-e1dd730749a2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "42bb2126-dd08-45e4-89f2-eca23e355e1c",
        "cursor": {
          "ref": "8ab2043b-b3eb-4126-9fcc-c2ec6df4e8f3",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "62e04897-653c-4407-bf61-6a06c65b12fc"
        },
        "item": {
          "id": "42bb2126-dd08-45e4-89f2-eca23e355e1c",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "49126fa2-0779-43dd-a58a-a84a438c3705",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "42bb2126-dd08-45e4-89f2-eca23e355e1c",
        "cursor": {
          "ref": "8ab2043b-b3eb-4126-9fcc-c2ec6df4e8f3",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "62e04897-653c-4407-bf61-6a06c65b12fc"
        },
        "item": {
          "id": "42bb2126-dd08-45e4-89f2-eca23e355e1c",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "49126fa2-0779-43dd-a58a-a84a438c3705",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "e05fa27c-51cf-4c39-a383-1d688d5b0f30",
        "cursor": {
          "ref": "059d027f-f4d8-4790-b3ad-8445fdaa9716",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "14eb40f5-6af8-4fec-aac6-cbfa3ba46df3"
        },
        "item": {
          "id": "e05fa27c-51cf-4c39-a383-1d688d5b0f30",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "75b3394b-34fe-473c-9ffa-6ff54c2edd84",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "e05fa27c-51cf-4c39-a383-1d688d5b0f30",
        "cursor": {
          "ref": "059d027f-f4d8-4790-b3ad-8445fdaa9716",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "14eb40f5-6af8-4fec-aac6-cbfa3ba46df3"
        },
        "item": {
          "id": "e05fa27c-51cf-4c39-a383-1d688d5b0f30",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "75b3394b-34fe-473c-9ffa-6ff54c2edd84",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "8e7f3e33-9422-4f97-89d1-32f100fd0fe3",
        "cursor": {
          "ref": "f26a1f5d-2a4c-43d3-87c8-0c3079f75c00",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "bad5c9b6-ef6d-47bc-b1e0-d404da08c1bb"
        },
        "item": {
          "id": "8e7f3e33-9422-4f97-89d1-32f100fd0fe3",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "767c11e6-25e0-4109-83da-8696968ba298",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "8e7f3e33-9422-4f97-89d1-32f100fd0fe3",
        "cursor": {
          "ref": "f26a1f5d-2a4c-43d3-87c8-0c3079f75c00",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "bad5c9b6-ef6d-47bc-b1e0-d404da08c1bb"
        },
        "item": {
          "id": "8e7f3e33-9422-4f97-89d1-32f100fd0fe3",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "767c11e6-25e0-4109-83da-8696968ba298",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "fe31d47b-9c2c-44b3-889a-87950f38cf44",
        "cursor": {
          "ref": "012a33a5-6ef7-43c4-abe6-647c5d77220a",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "b44ab757-b217-4fed-bdcd-7e5a80aa5311"
        },
        "item": {
          "id": "fe31d47b-9c2c-44b3-889a-87950f38cf44",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "8d8f8e52-06cf-4b29-acf8-2b2b3670e03a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "fe31d47b-9c2c-44b3-889a-87950f38cf44",
        "cursor": {
          "ref": "012a33a5-6ef7-43c4-abe6-647c5d77220a",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "b44ab757-b217-4fed-bdcd-7e5a80aa5311"
        },
        "item": {
          "id": "fe31d47b-9c2c-44b3-889a-87950f38cf44",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "8d8f8e52-06cf-4b29-acf8-2b2b3670e03a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "0fee3f7e-7ebd-47bd-ab81-09caaf805e7c",
        "cursor": {
          "ref": "9b40fbb5-094c-4430-8d1e-3a7d43ac0943",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "7801e153-7681-481a-9c7c-15d31462d3fe"
        },
        "item": {
          "id": "0fee3f7e-7ebd-47bd-ab81-09caaf805e7c",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "7824d6c5-4a6e-447c-83a6-c2ed773c51c7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "0fee3f7e-7ebd-47bd-ab81-09caaf805e7c",
        "cursor": {
          "ref": "9b40fbb5-094c-4430-8d1e-3a7d43ac0943",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "7801e153-7681-481a-9c7c-15d31462d3fe"
        },
        "item": {
          "id": "0fee3f7e-7ebd-47bd-ab81-09caaf805e7c",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "7824d6c5-4a6e-447c-83a6-c2ed773c51c7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "b3d94168-7968-4479-a3c6-6c9189d7aa32",
        "cursor": {
          "ref": "a6049818-e612-4528-9021-54a3e91a7c6e",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "fb430e77-3356-4703-9d02-0e5624bf6437"
        },
        "item": {
          "id": "b3d94168-7968-4479-a3c6-6c9189d7aa32",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "40b2c4d8-ce26-4ead-bc78-300ee8aafdfd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "b3d94168-7968-4479-a3c6-6c9189d7aa32",
        "cursor": {
          "ref": "a6049818-e612-4528-9021-54a3e91a7c6e",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "fb430e77-3356-4703-9d02-0e5624bf6437"
        },
        "item": {
          "id": "b3d94168-7968-4479-a3c6-6c9189d7aa32",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "40b2c4d8-ce26-4ead-bc78-300ee8aafdfd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "b426bd4e-5d97-4db2-b5df-2e630a6b735b",
        "cursor": {
          "ref": "f986bde1-7a60-4ca7-95eb-c7adda366270",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "d14a4407-d55a-41d9-8dbb-c96ed4d7b731"
        },
        "item": {
          "id": "b426bd4e-5d97-4db2-b5df-2e630a6b735b",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "025597d1-e5b1-43bd-92e6-c5d81ac46211",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "b426bd4e-5d97-4db2-b5df-2e630a6b735b",
        "cursor": {
          "ref": "f986bde1-7a60-4ca7-95eb-c7adda366270",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "d14a4407-d55a-41d9-8dbb-c96ed4d7b731"
        },
        "item": {
          "id": "b426bd4e-5d97-4db2-b5df-2e630a6b735b",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "025597d1-e5b1-43bd-92e6-c5d81ac46211",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "73e49ede-1f7a-41b0-9922-d2c2e87d1d19",
        "cursor": {
          "ref": "075e1be4-1394-4e14-ab42-ac5aba623fac",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "97089117-c052-406e-87e9-c59d5592edfd"
        },
        "item": {
          "id": "73e49ede-1f7a-41b0-9922-d2c2e87d1d19",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "47b59717-e2e5-4f99-9a62-0e0edc2a681a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "73e49ede-1f7a-41b0-9922-d2c2e87d1d19",
        "cursor": {
          "ref": "075e1be4-1394-4e14-ab42-ac5aba623fac",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "97089117-c052-406e-87e9-c59d5592edfd"
        },
        "item": {
          "id": "73e49ede-1f7a-41b0-9922-d2c2e87d1d19",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "47b59717-e2e5-4f99-9a62-0e0edc2a681a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "cbd15fd0-2957-4f2d-a75e-f2fc39af9f2e",
        "cursor": {
          "ref": "7f157d6a-1441-4fb4-83da-b00a26ba1a09",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "88840019-e7bf-4d48-a5ce-653ad493cd83"
        },
        "item": {
          "id": "cbd15fd0-2957-4f2d-a75e-f2fc39af9f2e",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "405e11f9-4783-4b45-bb04-c7f5c1f986ac",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 49,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "cbd15fd0-2957-4f2d-a75e-f2fc39af9f2e",
        "cursor": {
          "ref": "7f157d6a-1441-4fb4-83da-b00a26ba1a09",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "88840019-e7bf-4d48-a5ce-653ad493cd83"
        },
        "item": {
          "id": "cbd15fd0-2957-4f2d-a75e-f2fc39af9f2e",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "405e11f9-4783-4b45-bb04-c7f5c1f986ac",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 49,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "afd4ac63-b48a-47da-a1b4-be57a21d25a8",
        "cursor": {
          "ref": "f4364d69-a569-4626-8472-502ec8edac11",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "92cd5344-c801-4448-a8c7-3782704c3ac5"
        },
        "item": {
          "id": "afd4ac63-b48a-47da-a1b4-be57a21d25a8",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "18d79cf4-1a66-42e4-ada3-418e95e3ca92",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "afd4ac63-b48a-47da-a1b4-be57a21d25a8",
        "cursor": {
          "ref": "f4364d69-a569-4626-8472-502ec8edac11",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "92cd5344-c801-4448-a8c7-3782704c3ac5"
        },
        "item": {
          "id": "afd4ac63-b48a-47da-a1b4-be57a21d25a8",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "18d79cf4-1a66-42e4-ada3-418e95e3ca92",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "c7eb3607-46cb-48d5-9489-cedd295e9f63",
        "cursor": {
          "ref": "4dd091cc-c404-4380-978b-580e342074fa",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "2a59b042-2bd2-40d7-a79f-fb2a1a2dfea0"
        },
        "item": {
          "id": "c7eb3607-46cb-48d5-9489-cedd295e9f63",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "a53c1829-4440-4321-8960-ef82e4f2e804",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "c7eb3607-46cb-48d5-9489-cedd295e9f63",
        "cursor": {
          "ref": "4dd091cc-c404-4380-978b-580e342074fa",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "2a59b042-2bd2-40d7-a79f-fb2a1a2dfea0"
        },
        "item": {
          "id": "c7eb3607-46cb-48d5-9489-cedd295e9f63",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "a53c1829-4440-4321-8960-ef82e4f2e804",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "74bbf0c5-1008-42ce-922c-b29b6abc9dcd",
        "cursor": {
          "ref": "0d523994-f7ec-436e-9135-11f56923f3d8",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "aa7eebb1-33f9-423b-a567-82ebb658e449"
        },
        "item": {
          "id": "74bbf0c5-1008-42ce-922c-b29b6abc9dcd",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "7c8da11a-750a-4fe4-9f7e-48bbce3c91b5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "74bbf0c5-1008-42ce-922c-b29b6abc9dcd",
        "cursor": {
          "ref": "0d523994-f7ec-436e-9135-11f56923f3d8",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "aa7eebb1-33f9-423b-a567-82ebb658e449"
        },
        "item": {
          "id": "74bbf0c5-1008-42ce-922c-b29b6abc9dcd",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "7c8da11a-750a-4fe4-9f7e-48bbce3c91b5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "bbe52c07-d5d3-4a0c-93ee-2e542085eb3d",
        "cursor": {
          "ref": "8a5038e4-4c41-44e4-9e46-6b7fe5ea9623",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "f823febd-e098-484a-a283-3ea8e644cf82"
        },
        "item": {
          "id": "bbe52c07-d5d3-4a0c-93ee-2e542085eb3d",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "6ca5c3bf-26c5-45cd-b5db-48c3703df5d5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "bbe52c07-d5d3-4a0c-93ee-2e542085eb3d",
        "cursor": {
          "ref": "8a5038e4-4c41-44e4-9e46-6b7fe5ea9623",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "f823febd-e098-484a-a283-3ea8e644cf82"
        },
        "item": {
          "id": "bbe52c07-d5d3-4a0c-93ee-2e542085eb3d",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "6ca5c3bf-26c5-45cd-b5db-48c3703df5d5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "d9c043f0-de59-4970-ac89-a9c0cf79449e",
        "cursor": {
          "ref": "f1183ce0-d189-470e-9573-4ad30f1bff5f",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "e3e7b3bf-49a4-424f-9db4-7dcc672fc25c"
        },
        "item": {
          "id": "d9c043f0-de59-4970-ac89-a9c0cf79449e",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "e29dbff6-c729-4cb0-97f9-cd87788dc08a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "d9c043f0-de59-4970-ac89-a9c0cf79449e",
        "cursor": {
          "ref": "f1183ce0-d189-470e-9573-4ad30f1bff5f",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "e3e7b3bf-49a4-424f-9db4-7dcc672fc25c"
        },
        "item": {
          "id": "d9c043f0-de59-4970-ac89-a9c0cf79449e",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "e29dbff6-c729-4cb0-97f9-cd87788dc08a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "38345c74-6896-41be-ab8e-1bd9a6974bd0",
        "cursor": {
          "ref": "0347ef31-05f5-457c-9a67-fdd7890d427d",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "17fbc312-ac86-4274-a930-e9d414bc498e"
        },
        "item": {
          "id": "38345c74-6896-41be-ab8e-1bd9a6974bd0",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "c784e00a-cc3a-4d3d-92c8-80f5b8b1d22e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "38345c74-6896-41be-ab8e-1bd9a6974bd0",
        "cursor": {
          "ref": "0347ef31-05f5-457c-9a67-fdd7890d427d",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "17fbc312-ac86-4274-a930-e9d414bc498e"
        },
        "item": {
          "id": "38345c74-6896-41be-ab8e-1bd9a6974bd0",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "c784e00a-cc3a-4d3d-92c8-80f5b8b1d22e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "c4357ef0-d548-42eb-a7e5-8fe633e6480c",
        "cursor": {
          "ref": "55a90328-4b01-49ff-8ebf-d187003171ae",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "f2af4289-851a-421a-80ed-10cd6e4ac8eb"
        },
        "item": {
          "id": "c4357ef0-d548-42eb-a7e5-8fe633e6480c",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "9dd47ecb-d147-4796-b71c-2c819f315a01",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "c4357ef0-d548-42eb-a7e5-8fe633e6480c",
        "cursor": {
          "ref": "55a90328-4b01-49ff-8ebf-d187003171ae",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "f2af4289-851a-421a-80ed-10cd6e4ac8eb"
        },
        "item": {
          "id": "c4357ef0-d548-42eb-a7e5-8fe633e6480c",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "9dd47ecb-d147-4796-b71c-2c819f315a01",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "029ce6c1-2ae5-4c1d-9fa5-325b1d3197ee",
        "cursor": {
          "ref": "2d707514-b5e1-4310-9212-478a6fed5811",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "dbe3d96f-b38c-4d25-a66c-b3e808c78352"
        },
        "item": {
          "id": "029ce6c1-2ae5-4c1d-9fa5-325b1d3197ee",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "26a0e376-98e6-493f-9835-3b71fbd393fa",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "029ce6c1-2ae5-4c1d-9fa5-325b1d3197ee",
        "cursor": {
          "ref": "2d707514-b5e1-4310-9212-478a6fed5811",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "dbe3d96f-b38c-4d25-a66c-b3e808c78352"
        },
        "item": {
          "id": "029ce6c1-2ae5-4c1d-9fa5-325b1d3197ee",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "26a0e376-98e6-493f-9835-3b71fbd393fa",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "bd6f8599-982d-4e93-9769-656e56f9af33",
        "cursor": {
          "ref": "cd9b7ed3-c232-423f-8009-2015c9c8cac0",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "96995b12-fb12-4efc-9cfa-26503e4716ba"
        },
        "item": {
          "id": "bd6f8599-982d-4e93-9769-656e56f9af33",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "bb01b939-4a22-492f-b723-4d4c1bfac5a7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "bd6f8599-982d-4e93-9769-656e56f9af33",
        "cursor": {
          "ref": "cd9b7ed3-c232-423f-8009-2015c9c8cac0",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "96995b12-fb12-4efc-9cfa-26503e4716ba"
        },
        "item": {
          "id": "bd6f8599-982d-4e93-9769-656e56f9af33",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "bb01b939-4a22-492f-b723-4d4c1bfac5a7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "33a6f476-5760-4d66-90ff-48403a2547fb",
        "cursor": {
          "ref": "f2da0234-cb70-4714-adf5-e2646735a907",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "8e532501-a372-49ff-ad99-0292fc01da6e"
        },
        "item": {
          "id": "33a6f476-5760-4d66-90ff-48403a2547fb",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "4ba91c9e-a8a1-4176-ac57-a0ea2e90fafd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "33a6f476-5760-4d66-90ff-48403a2547fb",
        "cursor": {
          "ref": "f2da0234-cb70-4714-adf5-e2646735a907",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "8e532501-a372-49ff-ad99-0292fc01da6e"
        },
        "item": {
          "id": "33a6f476-5760-4d66-90ff-48403a2547fb",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "4ba91c9e-a8a1-4176-ac57-a0ea2e90fafd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "bf0c352c-4b05-41c4-8f90-7ada125551ac",
        "cursor": {
          "ref": "c60adb7f-996c-42e1-8d2a-066b212824fc",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "c4e9e44e-f8e1-4ea7-867d-6e272f855502"
        },
        "item": {
          "id": "bf0c352c-4b05-41c4-8f90-7ada125551ac",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "88de0896-94df-42d1-8332-87d6d86a7989",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "bf0c352c-4b05-41c4-8f90-7ada125551ac",
        "cursor": {
          "ref": "c60adb7f-996c-42e1-8d2a-066b212824fc",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "c4e9e44e-f8e1-4ea7-867d-6e272f855502"
        },
        "item": {
          "id": "bf0c352c-4b05-41c4-8f90-7ada125551ac",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "88de0896-94df-42d1-8332-87d6d86a7989",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "0a635172-64d4-488c-84d8-1ac437a3b9a0",
        "cursor": {
          "ref": "1bd3c14b-ab2c-4b4e-8330-91aef4ef26f0",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "3676d752-9cb4-4f62-9f1c-9e085433e020"
        },
        "item": {
          "id": "0a635172-64d4-488c-84d8-1ac437a3b9a0",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "e3c40154-532c-4809-bef9-667f0548db65",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "0a635172-64d4-488c-84d8-1ac437a3b9a0",
        "cursor": {
          "ref": "1bd3c14b-ab2c-4b4e-8330-91aef4ef26f0",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "3676d752-9cb4-4f62-9f1c-9e085433e020"
        },
        "item": {
          "id": "0a635172-64d4-488c-84d8-1ac437a3b9a0",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "e3c40154-532c-4809-bef9-667f0548db65",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "847660de-0a6d-45fe-b643-be73bbec7861",
        "cursor": {
          "ref": "085fe284-e50f-440c-8837-9298b8d38d24",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "79232a9a-0e22-44c2-8543-af85d929c951"
        },
        "item": {
          "id": "847660de-0a6d-45fe-b643-be73bbec7861",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "606730bf-cee0-4011-8a48-f65c58cadfab",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "847660de-0a6d-45fe-b643-be73bbec7861",
        "cursor": {
          "ref": "085fe284-e50f-440c-8837-9298b8d38d24",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "79232a9a-0e22-44c2-8543-af85d929c951"
        },
        "item": {
          "id": "847660de-0a6d-45fe-b643-be73bbec7861",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "606730bf-cee0-4011-8a48-f65c58cadfab",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "504596a7-ea9c-4fed-9401-40714717d972",
        "cursor": {
          "ref": "f4d67d2e-3799-43a4-892c-4d1431e2c6e9",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "ce845a99-9df3-4c85-8ff0-f84974d3791a"
        },
        "item": {
          "id": "504596a7-ea9c-4fed-9401-40714717d972",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "bfe369af-654e-438c-baa7-f5d696ed417a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "504596a7-ea9c-4fed-9401-40714717d972",
        "cursor": {
          "ref": "f4d67d2e-3799-43a4-892c-4d1431e2c6e9",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "ce845a99-9df3-4c85-8ff0-f84974d3791a"
        },
        "item": {
          "id": "504596a7-ea9c-4fed-9401-40714717d972",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "bfe369af-654e-438c-baa7-f5d696ed417a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "ea4c1040-0173-4a27-8ce1-3f170baa9036",
        "cursor": {
          "ref": "793236a4-774b-41ae-94ba-6b9ab663ec4e",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "ed49c111-2030-48ef-abcc-cf86fdfd19fa"
        },
        "item": {
          "id": "ea4c1040-0173-4a27-8ce1-3f170baa9036",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "94b9674f-d149-490e-a6bd-a4c3e9cbc160",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "ea4c1040-0173-4a27-8ce1-3f170baa9036",
        "cursor": {
          "ref": "793236a4-774b-41ae-94ba-6b9ab663ec4e",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "ed49c111-2030-48ef-abcc-cf86fdfd19fa"
        },
        "item": {
          "id": "ea4c1040-0173-4a27-8ce1-3f170baa9036",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "94b9674f-d149-490e-a6bd-a4c3e9cbc160",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "3e89b96d-7944-4e36-babe-6384f412d3e0",
        "cursor": {
          "ref": "7b596c5e-e32f-4717-b421-fd5181f7a0cd",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "abaf5e00-dfeb-4d9e-97fa-d5d95e46a1a4"
        },
        "item": {
          "id": "3e89b96d-7944-4e36-babe-6384f412d3e0",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "dedb64e7-cf62-4604-a3e3-6214d3a59b60",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 48,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "3e89b96d-7944-4e36-babe-6384f412d3e0",
        "cursor": {
          "ref": "7b596c5e-e32f-4717-b421-fd5181f7a0cd",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "abaf5e00-dfeb-4d9e-97fa-d5d95e46a1a4"
        },
        "item": {
          "id": "3e89b96d-7944-4e36-babe-6384f412d3e0",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "dedb64e7-cf62-4604-a3e3-6214d3a59b60",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 48,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "8d93187d-9d09-4d80-9b10-266a4b5513fa",
        "cursor": {
          "ref": "d56f4400-fc9d-4a73-a42a-f2769bac5aa7",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "4e5aa4b9-fc81-4edc-862a-5aa935cb8b11"
        },
        "item": {
          "id": "8d93187d-9d09-4d80-9b10-266a4b5513fa",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "ac746587-140f-421f-a6e0-34b2d981c0d6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "8d93187d-9d09-4d80-9b10-266a4b5513fa",
        "cursor": {
          "ref": "d56f4400-fc9d-4a73-a42a-f2769bac5aa7",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "4e5aa4b9-fc81-4edc-862a-5aa935cb8b11"
        },
        "item": {
          "id": "8d93187d-9d09-4d80-9b10-266a4b5513fa",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "ac746587-140f-421f-a6e0-34b2d981c0d6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "47009a40-7587-441d-806d-6ece0edbd5c7",
        "cursor": {
          "ref": "749cf9fd-3a74-4f47-8cd4-2d41ec168e7b",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "b5d26e90-6452-48be-967a-9bff5a678d4b"
        },
        "item": {
          "id": "47009a40-7587-441d-806d-6ece0edbd5c7",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "dac7aa70-06ae-494f-9f54-25679f3e63e9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "47009a40-7587-441d-806d-6ece0edbd5c7",
        "cursor": {
          "ref": "749cf9fd-3a74-4f47-8cd4-2d41ec168e7b",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "b5d26e90-6452-48be-967a-9bff5a678d4b"
        },
        "item": {
          "id": "47009a40-7587-441d-806d-6ece0edbd5c7",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "dac7aa70-06ae-494f-9f54-25679f3e63e9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "aa0c73b9-0547-48dd-8d6d-6b8994baf43d",
        "cursor": {
          "ref": "4447d7b0-3a21-4a97-a73e-3be34070f8a3",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "70f6ff4b-769d-414e-bba9-12ce1b1fb4e3"
        },
        "item": {
          "id": "aa0c73b9-0547-48dd-8d6d-6b8994baf43d",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "5a5fb166-1e81-49e3-883c-3799f78ba596",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "aa0c73b9-0547-48dd-8d6d-6b8994baf43d",
        "cursor": {
          "ref": "4447d7b0-3a21-4a97-a73e-3be34070f8a3",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "70f6ff4b-769d-414e-bba9-12ce1b1fb4e3"
        },
        "item": {
          "id": "aa0c73b9-0547-48dd-8d6d-6b8994baf43d",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "5a5fb166-1e81-49e3-883c-3799f78ba596",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "4d50f3d3-c615-426d-aa35-caafe57b2ce8",
        "cursor": {
          "ref": "3c6cfaa1-9755-49a8-b7f0-925b6dd36016",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "19951839-9e10-4bc9-9cd8-55e42d6a474d"
        },
        "item": {
          "id": "4d50f3d3-c615-426d-aa35-caafe57b2ce8",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "839f4e2b-1557-4222-8d5d-592559bf7c0f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "4d50f3d3-c615-426d-aa35-caafe57b2ce8",
        "cursor": {
          "ref": "3c6cfaa1-9755-49a8-b7f0-925b6dd36016",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "19951839-9e10-4bc9-9cd8-55e42d6a474d"
        },
        "item": {
          "id": "4d50f3d3-c615-426d-aa35-caafe57b2ce8",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "839f4e2b-1557-4222-8d5d-592559bf7c0f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "ac39e88d-2dce-4671-ab2c-3dc30fb67508",
        "cursor": {
          "ref": "a3b9a38a-2dd4-4cc2-a7de-7fde61ebf579",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "4f29af05-94d1-4e29-8602-9e6fdabd02d2"
        },
        "item": {
          "id": "ac39e88d-2dce-4671-ab2c-3dc30fb67508",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "ba78854b-8123-45fb-9f96-a5589a4c134f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "ac39e88d-2dce-4671-ab2c-3dc30fb67508",
        "cursor": {
          "ref": "a3b9a38a-2dd4-4cc2-a7de-7fde61ebf579",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "4f29af05-94d1-4e29-8602-9e6fdabd02d2"
        },
        "item": {
          "id": "ac39e88d-2dce-4671-ab2c-3dc30fb67508",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "ba78854b-8123-45fb-9f96-a5589a4c134f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "dbabab5f-e8f6-4ad8-9825-d2acefa8026e",
        "cursor": {
          "ref": "52355ab6-2a84-4247-a6a7-ebb6f6183910",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "399c2a2a-344b-4e27-8001-bf587952859c"
        },
        "item": {
          "id": "dbabab5f-e8f6-4ad8-9825-d2acefa8026e",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "3072acf4-7bea-41a3-9139-061d58de4f66",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "dbabab5f-e8f6-4ad8-9825-d2acefa8026e",
        "cursor": {
          "ref": "52355ab6-2a84-4247-a6a7-ebb6f6183910",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "399c2a2a-344b-4e27-8001-bf587952859c"
        },
        "item": {
          "id": "dbabab5f-e8f6-4ad8-9825-d2acefa8026e",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "3072acf4-7bea-41a3-9139-061d58de4f66",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "cbef30e5-b6ec-497c-920f-d3a725a92d8d",
        "cursor": {
          "ref": "5acc53b1-b649-4df5-b591-710b58373875",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "d1371951-c95e-4320-8552-6fe2a436cd4e"
        },
        "item": {
          "id": "cbef30e5-b6ec-497c-920f-d3a725a92d8d",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "fdc542ca-87da-4b5d-8936-c35eae957cc7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "cbef30e5-b6ec-497c-920f-d3a725a92d8d",
        "cursor": {
          "ref": "5acc53b1-b649-4df5-b591-710b58373875",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "d1371951-c95e-4320-8552-6fe2a436cd4e"
        },
        "item": {
          "id": "cbef30e5-b6ec-497c-920f-d3a725a92d8d",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "fdc542ca-87da-4b5d-8936-c35eae957cc7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "c4dcc53c-7d19-47e3-91cb-d1d57aee25f6",
        "cursor": {
          "ref": "829cd7be-ec18-49d1-be8c-02e7e7413f9f",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "6a31aa50-d3e0-497a-8057-e66f5c967d05"
        },
        "item": {
          "id": "c4dcc53c-7d19-47e3-91cb-d1d57aee25f6",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "93d4f937-7400-449e-a154-d05f988c9d9f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "c4dcc53c-7d19-47e3-91cb-d1d57aee25f6",
        "cursor": {
          "ref": "829cd7be-ec18-49d1-be8c-02e7e7413f9f",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "6a31aa50-d3e0-497a-8057-e66f5c967d05"
        },
        "item": {
          "id": "c4dcc53c-7d19-47e3-91cb-d1d57aee25f6",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "93d4f937-7400-449e-a154-d05f988c9d9f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "517de636-6856-4314-b63b-24612177e173",
        "cursor": {
          "ref": "4a7d50a0-cc55-4279-8ef3-b1bdbd2cd2ab",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "aaec879a-d0a5-4ab0-bb24-22161d13f42c"
        },
        "item": {
          "id": "517de636-6856-4314-b63b-24612177e173",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "3da6eec2-bf50-4b06-ba61-5ce0a9258d69",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "517de636-6856-4314-b63b-24612177e173",
        "cursor": {
          "ref": "4a7d50a0-cc55-4279-8ef3-b1bdbd2cd2ab",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "aaec879a-d0a5-4ab0-bb24-22161d13f42c"
        },
        "item": {
          "id": "517de636-6856-4314-b63b-24612177e173",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "3da6eec2-bf50-4b06-ba61-5ce0a9258d69",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "ef11d271-d4d2-4062-9cf0-ec040368d278",
        "cursor": {
          "ref": "b3a03c69-70b8-45c3-a576-296843a2a186",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "e6ca77ca-7b9a-4adf-8072-d7405958ea71"
        },
        "item": {
          "id": "ef11d271-d4d2-4062-9cf0-ec040368d278",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "09fe23a1-2347-4dc2-b05d-68da2082368d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "ef11d271-d4d2-4062-9cf0-ec040368d278",
        "cursor": {
          "ref": "b3a03c69-70b8-45c3-a576-296843a2a186",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "e6ca77ca-7b9a-4adf-8072-d7405958ea71"
        },
        "item": {
          "id": "ef11d271-d4d2-4062-9cf0-ec040368d278",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "09fe23a1-2347-4dc2-b05d-68da2082368d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "28c908f7-b4fc-4a32-824c-bbf2d64046f4",
        "cursor": {
          "ref": "f90c8473-899a-4ab6-b445-1801ce506ea3",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "d9654b9c-496c-4dc0-9ebc-88649b9101ca"
        },
        "item": {
          "id": "28c908f7-b4fc-4a32-824c-bbf2d64046f4",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "f2798bb2-4a7f-4492-808c-d29e5e601ee8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "28c908f7-b4fc-4a32-824c-bbf2d64046f4",
        "cursor": {
          "ref": "f90c8473-899a-4ab6-b445-1801ce506ea3",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "d9654b9c-496c-4dc0-9ebc-88649b9101ca"
        },
        "item": {
          "id": "28c908f7-b4fc-4a32-824c-bbf2d64046f4",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "f2798bb2-4a7f-4492-808c-d29e5e601ee8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "0e0f257d-038d-41a3-bc5f-ffe2ad1bbe30",
        "cursor": {
          "ref": "cfba718c-71fa-4c61-8623-697b49b4a00a",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "6dfdbd0c-d3cd-48fd-b8c4-8422e523b55d"
        },
        "item": {
          "id": "0e0f257d-038d-41a3-bc5f-ffe2ad1bbe30",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "307a61e3-7116-41fa-a8d0-877d49dd914d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "0e0f257d-038d-41a3-bc5f-ffe2ad1bbe30",
        "cursor": {
          "ref": "cfba718c-71fa-4c61-8623-697b49b4a00a",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "6dfdbd0c-d3cd-48fd-b8c4-8422e523b55d"
        },
        "item": {
          "id": "0e0f257d-038d-41a3-bc5f-ffe2ad1bbe30",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "307a61e3-7116-41fa-a8d0-877d49dd914d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "a5f92e1e-f244-435b-8ff4-cc8e065ae7a7",
        "cursor": {
          "ref": "cc983a6d-1afd-47f7-9d3e-73b88369b377",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "50cdd8e0-ea21-42c8-8389-7a6373e51508"
        },
        "item": {
          "id": "a5f92e1e-f244-435b-8ff4-cc8e065ae7a7",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "d7aa0047-0211-4c6b-9c7b-6d16a2ceb1a0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "a5f92e1e-f244-435b-8ff4-cc8e065ae7a7",
        "cursor": {
          "ref": "cc983a6d-1afd-47f7-9d3e-73b88369b377",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "50cdd8e0-ea21-42c8-8389-7a6373e51508"
        },
        "item": {
          "id": "a5f92e1e-f244-435b-8ff4-cc8e065ae7a7",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "d7aa0047-0211-4c6b-9c7b-6d16a2ceb1a0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "5ab804b3-c5f6-4390-887f-8ff336a63049",
        "cursor": {
          "ref": "b1df4df9-a5f2-4720-8b00-0203b2596f1f",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "492fd086-3e12-4f92-86e6-81fa0a48b2b8"
        },
        "item": {
          "id": "5ab804b3-c5f6-4390-887f-8ff336a63049",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "4bbb8d33-39e2-4a38-997c-13e5f8122207",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "5ab804b3-c5f6-4390-887f-8ff336a63049",
        "cursor": {
          "ref": "b1df4df9-a5f2-4720-8b00-0203b2596f1f",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "492fd086-3e12-4f92-86e6-81fa0a48b2b8"
        },
        "item": {
          "id": "5ab804b3-c5f6-4390-887f-8ff336a63049",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "4bbb8d33-39e2-4a38-997c-13e5f8122207",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "74cb8dc5-1e3d-41ce-89b0-e502114239bf",
        "cursor": {
          "ref": "85f18536-09b5-4811-880b-3b7bac4825aa",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "b38d3648-da8a-43df-a3e1-0ae19ed8c0fd"
        },
        "item": {
          "id": "74cb8dc5-1e3d-41ce-89b0-e502114239bf",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "53ab1ecd-fc65-453a-9913-0cab58276e9a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "74cb8dc5-1e3d-41ce-89b0-e502114239bf",
        "cursor": {
          "ref": "85f18536-09b5-4811-880b-3b7bac4825aa",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "b38d3648-da8a-43df-a3e1-0ae19ed8c0fd"
        },
        "item": {
          "id": "74cb8dc5-1e3d-41ce-89b0-e502114239bf",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "53ab1ecd-fc65-453a-9913-0cab58276e9a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "7bb3fc3c-a80c-478c-9096-82c3f4badc49",
        "cursor": {
          "ref": "047c812f-82fc-4b22-b26f-9e9f14d83e13",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "bcdb5855-e35a-417b-92d7-4424d656f3a7"
        },
        "item": {
          "id": "7bb3fc3c-a80c-478c-9096-82c3f4badc49",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "0106f47a-bc66-45ab-a962-6273c19fdbc5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "7bb3fc3c-a80c-478c-9096-82c3f4badc49",
        "cursor": {
          "ref": "047c812f-82fc-4b22-b26f-9e9f14d83e13",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "bcdb5855-e35a-417b-92d7-4424d656f3a7"
        },
        "item": {
          "id": "7bb3fc3c-a80c-478c-9096-82c3f4badc49",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "0106f47a-bc66-45ab-a962-6273c19fdbc5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "0faa584a-4aae-4578-848b-99b5399868b5",
        "cursor": {
          "ref": "297fba21-2d4b-4a74-824e-cdfdb77d9f89",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "8fdd07f1-a9eb-4f0e-81f2-f49d4ff319b4"
        },
        "item": {
          "id": "0faa584a-4aae-4578-848b-99b5399868b5",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "5a5f60e8-c62a-4f49-90e2-d15b83c3a77d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "0faa584a-4aae-4578-848b-99b5399868b5",
        "cursor": {
          "ref": "297fba21-2d4b-4a74-824e-cdfdb77d9f89",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "8fdd07f1-a9eb-4f0e-81f2-f49d4ff319b4"
        },
        "item": {
          "id": "0faa584a-4aae-4578-848b-99b5399868b5",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "5a5f60e8-c62a-4f49-90e2-d15b83c3a77d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "31e4fe90-ba96-4c13-a9a7-1045d794a004",
        "cursor": {
          "ref": "8c1ab136-8e87-4068-ac9e-22c3bb494452",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "36011ef1-946b-40e1-a293-b212bce20101"
        },
        "item": {
          "id": "31e4fe90-ba96-4c13-a9a7-1045d794a004",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "0a42dd5e-e9ef-49ed-81fa-a8a79cf1e875",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "31e4fe90-ba96-4c13-a9a7-1045d794a004",
        "cursor": {
          "ref": "8c1ab136-8e87-4068-ac9e-22c3bb494452",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "36011ef1-946b-40e1-a293-b212bce20101"
        },
        "item": {
          "id": "31e4fe90-ba96-4c13-a9a7-1045d794a004",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "0a42dd5e-e9ef-49ed-81fa-a8a79cf1e875",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "237e126b-dde9-40d9-8910-f5ce21efb48e",
        "cursor": {
          "ref": "c38576c0-548d-458f-bf13-71173d2c06b2",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "fa532e0c-b76d-4a80-b17c-94cfc76666c8"
        },
        "item": {
          "id": "237e126b-dde9-40d9-8910-f5ce21efb48e",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "be17411a-279d-41bf-a7ed-abe5e1e0a4a2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "237e126b-dde9-40d9-8910-f5ce21efb48e",
        "cursor": {
          "ref": "c38576c0-548d-458f-bf13-71173d2c06b2",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "fa532e0c-b76d-4a80-b17c-94cfc76666c8"
        },
        "item": {
          "id": "237e126b-dde9-40d9-8910-f5ce21efb48e",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "be17411a-279d-41bf-a7ed-abe5e1e0a4a2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "73c0dd18-90dd-4da3-a1e5-90e2b8b748a1",
        "cursor": {
          "ref": "19c85191-181f-4444-9807-62f65ede3baf",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "c1c184bb-7a41-44f8-9665-ce457bbcc2c1"
        },
        "item": {
          "id": "73c0dd18-90dd-4da3-a1e5-90e2b8b748a1",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "7d9dda3f-64a8-4f3b-b611-81d67bd811ed",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "73c0dd18-90dd-4da3-a1e5-90e2b8b748a1",
        "cursor": {
          "ref": "19c85191-181f-4444-9807-62f65ede3baf",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "c1c184bb-7a41-44f8-9665-ce457bbcc2c1"
        },
        "item": {
          "id": "73c0dd18-90dd-4da3-a1e5-90e2b8b748a1",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "7d9dda3f-64a8-4f3b-b611-81d67bd811ed",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "e7e3a1a5-44da-49ab-8866-de6ed12e995d",
        "cursor": {
          "ref": "b53bf424-b45c-4eff-bdeb-9b515c6146a3",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "d3807d80-f56e-409f-a0a7-49a90412f2ac"
        },
        "item": {
          "id": "e7e3a1a5-44da-49ab-8866-de6ed12e995d",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "512d72a8-06dd-4c80-b655-7f9d5e52367d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "e7e3a1a5-44da-49ab-8866-de6ed12e995d",
        "cursor": {
          "ref": "b53bf424-b45c-4eff-bdeb-9b515c6146a3",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "d3807d80-f56e-409f-a0a7-49a90412f2ac"
        },
        "item": {
          "id": "e7e3a1a5-44da-49ab-8866-de6ed12e995d",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "512d72a8-06dd-4c80-b655-7f9d5e52367d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "34f6d1d0-c49f-47cc-ba11-a9d0e82f9a9c",
        "cursor": {
          "ref": "9aedf952-e8ec-4532-ac29-f509fcd4ac09",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "bed87007-58c2-49ea-abba-801ecad5b28b"
        },
        "item": {
          "id": "34f6d1d0-c49f-47cc-ba11-a9d0e82f9a9c",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "8b2d7e4e-9b99-430c-9c29-556d6d7c868a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "34f6d1d0-c49f-47cc-ba11-a9d0e82f9a9c",
        "cursor": {
          "ref": "9aedf952-e8ec-4532-ac29-f509fcd4ac09",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "bed87007-58c2-49ea-abba-801ecad5b28b"
        },
        "item": {
          "id": "34f6d1d0-c49f-47cc-ba11-a9d0e82f9a9c",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "8b2d7e4e-9b99-430c-9c29-556d6d7c868a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "4e65b727-4740-48b9-898a-1595dc977a6e",
        "cursor": {
          "ref": "c5d10053-2713-4f3b-8bf3-199331e29ea1",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "94e42f6e-8c70-48be-bb95-5a4fbf722646"
        },
        "item": {
          "id": "4e65b727-4740-48b9-898a-1595dc977a6e",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "937c5354-54ba-411b-a353-c9227d72b06c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "4e65b727-4740-48b9-898a-1595dc977a6e",
        "cursor": {
          "ref": "c5d10053-2713-4f3b-8bf3-199331e29ea1",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "94e42f6e-8c70-48be-bb95-5a4fbf722646"
        },
        "item": {
          "id": "4e65b727-4740-48b9-898a-1595dc977a6e",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "937c5354-54ba-411b-a353-c9227d72b06c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "a579d454-e612-429f-9371-303f3ef6024c",
        "cursor": {
          "ref": "4e2e94f3-bd03-46a5-a58f-2e9188f45fc3",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "f5455ee1-cc29-4a34-9827-223d15669f9f"
        },
        "item": {
          "id": "a579d454-e612-429f-9371-303f3ef6024c",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "765a469b-5f73-49fc-9ed3-3984316e0722",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "a579d454-e612-429f-9371-303f3ef6024c",
        "cursor": {
          "ref": "4e2e94f3-bd03-46a5-a58f-2e9188f45fc3",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "f5455ee1-cc29-4a34-9827-223d15669f9f"
        },
        "item": {
          "id": "a579d454-e612-429f-9371-303f3ef6024c",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "765a469b-5f73-49fc-9ed3-3984316e0722",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "d2f95d79-5acb-4aa6-941a-c40c8e2a9a27",
        "cursor": {
          "ref": "10129fc9-3094-4d17-90d4-54a5e58795fc",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "61d2ecdf-c4f3-43bd-b6df-c0f5cdcfb979"
        },
        "item": {
          "id": "d2f95d79-5acb-4aa6-941a-c40c8e2a9a27",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "7f3472ad-0bbe-496b-ad18-99e6ec2b5f65",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "d2f95d79-5acb-4aa6-941a-c40c8e2a9a27",
        "cursor": {
          "ref": "10129fc9-3094-4d17-90d4-54a5e58795fc",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "61d2ecdf-c4f3-43bd-b6df-c0f5cdcfb979"
        },
        "item": {
          "id": "d2f95d79-5acb-4aa6-941a-c40c8e2a9a27",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "7f3472ad-0bbe-496b-ad18-99e6ec2b5f65",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "0b21fa2b-2445-4efd-935a-f76d369359bc",
        "cursor": {
          "ref": "0fb45903-ed34-40ff-b8c1-85eff6e7b4bf",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "e4c2793f-99fb-45d4-bc01-d5d14ae28104"
        },
        "item": {
          "id": "0b21fa2b-2445-4efd-935a-f76d369359bc",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "a50d8ed6-a7d2-4194-939b-5c77ad82e99d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "0b21fa2b-2445-4efd-935a-f76d369359bc",
        "cursor": {
          "ref": "0fb45903-ed34-40ff-b8c1-85eff6e7b4bf",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "e4c2793f-99fb-45d4-bc01-d5d14ae28104"
        },
        "item": {
          "id": "0b21fa2b-2445-4efd-935a-f76d369359bc",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "a50d8ed6-a7d2-4194-939b-5c77ad82e99d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "d98eb022-ea44-44db-85c5-539dfe3229d9",
        "cursor": {
          "ref": "f792b4f3-c53c-407a-bf58-db5b74931952",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "0468fb51-2c12-42b2-88c2-d264f94aee38"
        },
        "item": {
          "id": "d98eb022-ea44-44db-85c5-539dfe3229d9",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "52f7769b-94ad-457b-b716-d3707cc09612",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "d98eb022-ea44-44db-85c5-539dfe3229d9",
        "cursor": {
          "ref": "f792b4f3-c53c-407a-bf58-db5b74931952",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "0468fb51-2c12-42b2-88c2-d264f94aee38"
        },
        "item": {
          "id": "d98eb022-ea44-44db-85c5-539dfe3229d9",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "52f7769b-94ad-457b-b716-d3707cc09612",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "2d24dfa6-61f9-4dfb-b7b6-28d60e35ded0",
        "cursor": {
          "ref": "e216c405-2f13-4b63-b34f-a729792847e5",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "ab1bdb52-8e62-44b7-826a-bbfa9ade195a"
        },
        "item": {
          "id": "2d24dfa6-61f9-4dfb-b7b6-28d60e35ded0",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "f90c35ad-7711-401c-94af-2921a72acf1f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "2d24dfa6-61f9-4dfb-b7b6-28d60e35ded0",
        "cursor": {
          "ref": "e216c405-2f13-4b63-b34f-a729792847e5",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "ab1bdb52-8e62-44b7-826a-bbfa9ade195a"
        },
        "item": {
          "id": "2d24dfa6-61f9-4dfb-b7b6-28d60e35ded0",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "f90c35ad-7711-401c-94af-2921a72acf1f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "2943e390-e256-425d-bb2d-1ebb4d373718",
        "cursor": {
          "ref": "ff5b1126-e0bf-40a3-9b5f-c73f04137c8e",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "8f0c1079-8bd3-401d-a068-fe49cf35e171"
        },
        "item": {
          "id": "2943e390-e256-425d-bb2d-1ebb4d373718",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "fbaafe2e-b2bb-4861-912d-44cd8f21259c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "2943e390-e256-425d-bb2d-1ebb4d373718",
        "cursor": {
          "ref": "ff5b1126-e0bf-40a3-9b5f-c73f04137c8e",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "8f0c1079-8bd3-401d-a068-fe49cf35e171"
        },
        "item": {
          "id": "2943e390-e256-425d-bb2d-1ebb4d373718",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "fbaafe2e-b2bb-4861-912d-44cd8f21259c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "b5ebbb47-0143-45b1-95d9-955db55e5016",
        "cursor": {
          "ref": "11f4ca70-b7ef-492f-be45-22ad78e89821",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "fb162cf4-c611-4b4c-8362-2eb4db2a1efb"
        },
        "item": {
          "id": "b5ebbb47-0143-45b1-95d9-955db55e5016",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "d7487463-7ed2-4717-a3ab-57d13a8d23eb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "b5ebbb47-0143-45b1-95d9-955db55e5016",
        "cursor": {
          "ref": "11f4ca70-b7ef-492f-be45-22ad78e89821",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "fb162cf4-c611-4b4c-8362-2eb4db2a1efb"
        },
        "item": {
          "id": "b5ebbb47-0143-45b1-95d9-955db55e5016",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "d7487463-7ed2-4717-a3ab-57d13a8d23eb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "3ad625a8-e58c-422d-851c-a85a1b59bd18",
        "cursor": {
          "ref": "07dac8c0-4ef9-49e2-b467-25d52e08f7f8",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "71460082-6010-4b2e-b096-81a5d1e294df"
        },
        "item": {
          "id": "3ad625a8-e58c-422d-851c-a85a1b59bd18",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "0e79ac59-f1dd-4ac2-a5a3-cc367393ae1e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "3ad625a8-e58c-422d-851c-a85a1b59bd18",
        "cursor": {
          "ref": "07dac8c0-4ef9-49e2-b467-25d52e08f7f8",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "71460082-6010-4b2e-b096-81a5d1e294df"
        },
        "item": {
          "id": "3ad625a8-e58c-422d-851c-a85a1b59bd18",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "0e79ac59-f1dd-4ac2-a5a3-cc367393ae1e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "40225683-4016-4f7f-b28d-5bca1eefedd8",
        "cursor": {
          "ref": "be699a3e-1b57-4527-b28e-9bebaaeec345",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "e11a4dd9-be2b-4df7-9859-ccc51acb1710"
        },
        "item": {
          "id": "40225683-4016-4f7f-b28d-5bca1eefedd8",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "17e2a0c0-3957-4947-8eff-ccdce9d22f83",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "40225683-4016-4f7f-b28d-5bca1eefedd8",
        "cursor": {
          "ref": "be699a3e-1b57-4527-b28e-9bebaaeec345",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "e11a4dd9-be2b-4df7-9859-ccc51acb1710"
        },
        "item": {
          "id": "40225683-4016-4f7f-b28d-5bca1eefedd8",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "17e2a0c0-3957-4947-8eff-ccdce9d22f83",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "e7df55b0-3e54-4860-a32a-1fd19a673d9c",
        "cursor": {
          "ref": "d0b61856-505c-4e95-9ea0-fcf6618ab6c2",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "43a1a99a-3d90-4d79-a849-6116a5a2db9c"
        },
        "item": {
          "id": "e7df55b0-3e54-4860-a32a-1fd19a673d9c",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "016910b2-a397-42d0-ab78-6b1108e7ad35",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "e7df55b0-3e54-4860-a32a-1fd19a673d9c",
        "cursor": {
          "ref": "d0b61856-505c-4e95-9ea0-fcf6618ab6c2",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "43a1a99a-3d90-4d79-a849-6116a5a2db9c"
        },
        "item": {
          "id": "e7df55b0-3e54-4860-a32a-1fd19a673d9c",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "016910b2-a397-42d0-ab78-6b1108e7ad35",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "842a1e4e-b5f0-499b-8c9e-dbabf8263d97",
        "cursor": {
          "ref": "879fc231-5a3e-431e-9e16-c4322e4c8b91",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "2c32a537-4ce6-4c2b-9201-177b0fdab8ef"
        },
        "item": {
          "id": "842a1e4e-b5f0-499b-8c9e-dbabf8263d97",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "828c2b61-ada8-444d-ac25-592d69de7c43",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "842a1e4e-b5f0-499b-8c9e-dbabf8263d97",
        "cursor": {
          "ref": "879fc231-5a3e-431e-9e16-c4322e4c8b91",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "2c32a537-4ce6-4c2b-9201-177b0fdab8ef"
        },
        "item": {
          "id": "842a1e4e-b5f0-499b-8c9e-dbabf8263d97",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "828c2b61-ada8-444d-ac25-592d69de7c43",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "c88ba3af-9f82-4d91-aba8-adad90621286",
        "cursor": {
          "ref": "02cf3752-e499-43f2-8bff-c2e0b7e6b783",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "ef07ee47-e52a-4530-afd3-0f67cfb77647"
        },
        "item": {
          "id": "c88ba3af-9f82-4d91-aba8-adad90621286",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "e538cd58-b1cc-431c-8b01-3814cbc5d713",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "c88ba3af-9f82-4d91-aba8-adad90621286",
        "cursor": {
          "ref": "02cf3752-e499-43f2-8bff-c2e0b7e6b783",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "ef07ee47-e52a-4530-afd3-0f67cfb77647"
        },
        "item": {
          "id": "c88ba3af-9f82-4d91-aba8-adad90621286",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "e538cd58-b1cc-431c-8b01-3814cbc5d713",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "e059c4f3-1f61-4b17-966a-db445c7782c4",
        "cursor": {
          "ref": "37f0b28e-d4b5-49be-ad55-36f06fede19f",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "f30686e6-b1c6-4740-b4a6-631aef15e84c"
        },
        "item": {
          "id": "e059c4f3-1f61-4b17-966a-db445c7782c4",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "1c944cf2-7f91-4fce-8e42-9d8c8f81e6de",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "e059c4f3-1f61-4b17-966a-db445c7782c4",
        "cursor": {
          "ref": "37f0b28e-d4b5-49be-ad55-36f06fede19f",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "f30686e6-b1c6-4740-b4a6-631aef15e84c"
        },
        "item": {
          "id": "e059c4f3-1f61-4b17-966a-db445c7782c4",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "1c944cf2-7f91-4fce-8e42-9d8c8f81e6de",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "04019ca9-0105-4389-a0c9-beb45adc4f6a",
        "cursor": {
          "ref": "45ab81e1-49f0-44eb-9202-1b30eed1e0f5",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "86ec4241-239d-4a70-a676-83b9c2de4dbc"
        },
        "item": {
          "id": "04019ca9-0105-4389-a0c9-beb45adc4f6a",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "a15ce8ae-a7e5-423d-8b96-a7d8dcadbe3d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "04019ca9-0105-4389-a0c9-beb45adc4f6a",
        "cursor": {
          "ref": "45ab81e1-49f0-44eb-9202-1b30eed1e0f5",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "86ec4241-239d-4a70-a676-83b9c2de4dbc"
        },
        "item": {
          "id": "04019ca9-0105-4389-a0c9-beb45adc4f6a",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "a15ce8ae-a7e5-423d-8b96-a7d8dcadbe3d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "711b1d90-98c9-47e8-a4ab-385d024d1f42",
        "cursor": {
          "ref": "037874f2-11a4-45c2-8299-7cb7361991a9",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "c0d78966-d396-41d9-97d4-bf866918882b"
        },
        "item": {
          "id": "711b1d90-98c9-47e8-a4ab-385d024d1f42",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "e29cbd5e-e772-4cbb-9566-dac40195b0d3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "711b1d90-98c9-47e8-a4ab-385d024d1f42",
        "cursor": {
          "ref": "037874f2-11a4-45c2-8299-7cb7361991a9",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "c0d78966-d396-41d9-97d4-bf866918882b"
        },
        "item": {
          "id": "711b1d90-98c9-47e8-a4ab-385d024d1f42",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "e29cbd5e-e772-4cbb-9566-dac40195b0d3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "342d99e9-b9b4-4763-ada5-784b5f909669",
        "cursor": {
          "ref": "2b3c94ef-ef8e-4fae-b03a-dc778ca64833",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "ba226c1d-d2fc-4d5c-a5a0-8f0bc5adb7c5"
        },
        "item": {
          "id": "342d99e9-b9b4-4763-ada5-784b5f909669",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "6267bb88-562d-4178-ab5b-594bac3513d3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "342d99e9-b9b4-4763-ada5-784b5f909669",
        "cursor": {
          "ref": "2b3c94ef-ef8e-4fae-b03a-dc778ca64833",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "ba226c1d-d2fc-4d5c-a5a0-8f0bc5adb7c5"
        },
        "item": {
          "id": "342d99e9-b9b4-4763-ada5-784b5f909669",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "6267bb88-562d-4178-ab5b-594bac3513d3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "4a159f1e-d387-405a-900e-785e26fb5a20",
        "cursor": {
          "ref": "6ed56d74-aa69-411c-ace8-f7025375bc74",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "6587aada-9685-4404-8ae4-aeb087f9e491"
        },
        "item": {
          "id": "4a159f1e-d387-405a-900e-785e26fb5a20",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "6f7cfcee-857d-41e0-b024-9542dcf7349d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "4a159f1e-d387-405a-900e-785e26fb5a20",
        "cursor": {
          "ref": "6ed56d74-aa69-411c-ace8-f7025375bc74",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "6587aada-9685-4404-8ae4-aeb087f9e491"
        },
        "item": {
          "id": "4a159f1e-d387-405a-900e-785e26fb5a20",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "6f7cfcee-857d-41e0-b024-9542dcf7349d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "d54d14d2-130f-4a40-a8ea-a96f8a9e5cda",
        "cursor": {
          "ref": "8f973422-b977-40e3-9223-fa39af7833d3",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "1e9f626f-7a13-4b87-8822-cdce08d260be"
        },
        "item": {
          "id": "d54d14d2-130f-4a40-a8ea-a96f8a9e5cda",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "46eeceef-5da9-46a1-837b-487ab9425cfe",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "d54d14d2-130f-4a40-a8ea-a96f8a9e5cda",
        "cursor": {
          "ref": "8f973422-b977-40e3-9223-fa39af7833d3",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "1e9f626f-7a13-4b87-8822-cdce08d260be"
        },
        "item": {
          "id": "d54d14d2-130f-4a40-a8ea-a96f8a9e5cda",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "46eeceef-5da9-46a1-837b-487ab9425cfe",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "3f906770-c551-4660-84f9-b200aee238c8",
        "cursor": {
          "ref": "0bc8f3ea-d391-4231-b34e-9d6d8ed14db1",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "734319c4-3672-41f0-8011-5b568b2d40f6"
        },
        "item": {
          "id": "3f906770-c551-4660-84f9-b200aee238c8",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "8896fabb-2ce0-4757-a002-24fd72405ed5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "3f906770-c551-4660-84f9-b200aee238c8",
        "cursor": {
          "ref": "0bc8f3ea-d391-4231-b34e-9d6d8ed14db1",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "734319c4-3672-41f0-8011-5b568b2d40f6"
        },
        "item": {
          "id": "3f906770-c551-4660-84f9-b200aee238c8",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "8896fabb-2ce0-4757-a002-24fd72405ed5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "530f5c7e-bb01-49c5-8f27-aa0438e01a39",
        "cursor": {
          "ref": "02b1c06f-2e79-4a54-8cab-5e1e05d19c11",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "78ed2214-8cf6-4eae-a52f-2615a22f1961"
        },
        "item": {
          "id": "530f5c7e-bb01-49c5-8f27-aa0438e01a39",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "5c581006-64c0-42ac-a120-087a74f70d79",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "530f5c7e-bb01-49c5-8f27-aa0438e01a39",
        "cursor": {
          "ref": "02b1c06f-2e79-4a54-8cab-5e1e05d19c11",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "78ed2214-8cf6-4eae-a52f-2615a22f1961"
        },
        "item": {
          "id": "530f5c7e-bb01-49c5-8f27-aa0438e01a39",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "5c581006-64c0-42ac-a120-087a74f70d79",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "97b7f502-0390-4807-a5af-b656413cb911",
        "cursor": {
          "ref": "3855d137-fab5-4ad7-b93d-75aecf0014ed",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "9c195bee-7b4b-45f6-86af-a18d78b97569"
        },
        "item": {
          "id": "97b7f502-0390-4807-a5af-b656413cb911",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "9df0a29a-139f-447d-9e21-f0e9274e3126",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "97b7f502-0390-4807-a5af-b656413cb911",
        "cursor": {
          "ref": "3855d137-fab5-4ad7-b93d-75aecf0014ed",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "9c195bee-7b4b-45f6-86af-a18d78b97569"
        },
        "item": {
          "id": "97b7f502-0390-4807-a5af-b656413cb911",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "9df0a29a-139f-447d-9e21-f0e9274e3126",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "9a0689a4-3c1e-424b-8848-e8d43e2587c9",
        "cursor": {
          "ref": "70b51238-afb2-407c-b40a-953fbfbd0c8d",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "f69c96b7-35fc-4c13-ad4e-665d07bc90a8"
        },
        "item": {
          "id": "9a0689a4-3c1e-424b-8848-e8d43e2587c9",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "7279dc07-e8b1-4b0a-aaa6-f9c85720cba9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "9a0689a4-3c1e-424b-8848-e8d43e2587c9",
        "cursor": {
          "ref": "70b51238-afb2-407c-b40a-953fbfbd0c8d",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "f69c96b7-35fc-4c13-ad4e-665d07bc90a8"
        },
        "item": {
          "id": "9a0689a4-3c1e-424b-8848-e8d43e2587c9",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "7279dc07-e8b1-4b0a-aaa6-f9c85720cba9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "c90a7ef6-cb7d-4ee5-884e-e94d867cb4c9",
        "cursor": {
          "ref": "85f32b03-09c4-425a-bce9-43705bb0c778",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "15ba203c-1667-46af-80b5-441b376e6a59"
        },
        "item": {
          "id": "c90a7ef6-cb7d-4ee5-884e-e94d867cb4c9",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "f2d42503-79ed-4640-94a4-b1c3d2c66c94",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "c90a7ef6-cb7d-4ee5-884e-e94d867cb4c9",
        "cursor": {
          "ref": "85f32b03-09c4-425a-bce9-43705bb0c778",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "15ba203c-1667-46af-80b5-441b376e6a59"
        },
        "item": {
          "id": "c90a7ef6-cb7d-4ee5-884e-e94d867cb4c9",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "f2d42503-79ed-4640-94a4-b1c3d2c66c94",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "4c1235bb-c2b3-4290-bd1a-236b346a0ce3",
        "cursor": {
          "ref": "e9c624a7-224a-40f6-adb1-c521319a4e49",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "fea4935c-1079-43f5-ba3a-bcf50db2916e"
        },
        "item": {
          "id": "4c1235bb-c2b3-4290-bd1a-236b346a0ce3",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "212e95a6-72ec-4e53-91fa-5407efe69b24",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "4c1235bb-c2b3-4290-bd1a-236b346a0ce3",
        "cursor": {
          "ref": "e9c624a7-224a-40f6-adb1-c521319a4e49",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "fea4935c-1079-43f5-ba3a-bcf50db2916e"
        },
        "item": {
          "id": "4c1235bb-c2b3-4290-bd1a-236b346a0ce3",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "212e95a6-72ec-4e53-91fa-5407efe69b24",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "40704cec-bf4e-44e0-8e10-e67a3b75a883",
        "cursor": {
          "ref": "7683f719-e29c-4bf1-9e77-44e3859bd52b",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "32f0edd6-db28-44c0-b00c-c23a6f34cb21"
        },
        "item": {
          "id": "40704cec-bf4e-44e0-8e10-e67a3b75a883",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "7bae7d72-67b7-4726-a572-a5232ce6cf0a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "40704cec-bf4e-44e0-8e10-e67a3b75a883",
        "cursor": {
          "ref": "7683f719-e29c-4bf1-9e77-44e3859bd52b",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "32f0edd6-db28-44c0-b00c-c23a6f34cb21"
        },
        "item": {
          "id": "40704cec-bf4e-44e0-8e10-e67a3b75a883",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "7bae7d72-67b7-4726-a572-a5232ce6cf0a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "86f1948a-fb6e-4d4f-b97e-2de799bb4707",
        "cursor": {
          "ref": "9a60889b-b2ab-4f3d-a1be-335852029483",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "048af61f-b73d-4665-9913-5c7f066fc914"
        },
        "item": {
          "id": "86f1948a-fb6e-4d4f-b97e-2de799bb4707",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "15ccd079-1d2a-4f51-8223-cbb9398aa170",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "86f1948a-fb6e-4d4f-b97e-2de799bb4707",
        "cursor": {
          "ref": "9a60889b-b2ab-4f3d-a1be-335852029483",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "048af61f-b73d-4665-9913-5c7f066fc914"
        },
        "item": {
          "id": "86f1948a-fb6e-4d4f-b97e-2de799bb4707",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "15ccd079-1d2a-4f51-8223-cbb9398aa170",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "e2bd2945-d55d-4f4a-b720-01052e68a1e8",
        "cursor": {
          "ref": "e51f2279-c1b4-4c45-a643-d629e63fedf4",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "a1d393ce-0b5a-449d-9162-692fef1d6618"
        },
        "item": {
          "id": "e2bd2945-d55d-4f4a-b720-01052e68a1e8",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "4c6cbd54-2591-4650-9156-0f803e5aa803",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      },
      {
        "id": "e2bd2945-d55d-4f4a-b720-01052e68a1e8",
        "cursor": {
          "ref": "e51f2279-c1b4-4c45-a643-d629e63fedf4",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "a1d393ce-0b5a-449d-9162-692fef1d6618"
        },
        "item": {
          "id": "e2bd2945-d55d-4f4a-b720-01052e68a1e8",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "4c6cbd54-2591-4650-9156-0f803e5aa803",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      },
      {
        "id": "9139f1ae-deb2-4d1a-9886-7ecb4036ae71",
        "cursor": {
          "ref": "301ddb3c-b0e5-4bc6-9fe8-1b9c075abe7a",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "cf3edaef-2cbf-4aaa-a0a0-ab963e1b3bf0"
        },
        "item": {
          "id": "9139f1ae-deb2-4d1a-9886-7ecb4036ae71",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "e9940dec-9265-48b3-851b-abe3d153c610",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is false",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "9139f1ae-deb2-4d1a-9886-7ecb4036ae71",
        "cursor": {
          "ref": "301ddb3c-b0e5-4bc6-9fe8-1b9c075abe7a",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "cf3edaef-2cbf-4aaa-a0a0-ab963e1b3bf0"
        },
        "item": {
          "id": "9139f1ae-deb2-4d1a-9886-7ecb4036ae71",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "e9940dec-9265-48b3-851b-abe3d153c610",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is false",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "e1655d66-d823-48cb-a9f5-381da2d02458",
        "cursor": {
          "ref": "36568e8d-998a-4e87-91e9-3261a98ea768",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "8355059b-5493-4640-aaf1-73c97b8fc49d"
        },
        "item": {
          "id": "e1655d66-d823-48cb-a9f5-381da2d02458",
          "name": "credentials_verify"
        },
        "response": {
          "id": "c6e1a635-21ac-4624-8566-ece56e6ffd62",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "e1655d66-d823-48cb-a9f5-381da2d02458",
        "cursor": {
          "ref": "36568e8d-998a-4e87-91e9-3261a98ea768",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "8355059b-5493-4640-aaf1-73c97b8fc49d"
        },
        "item": {
          "id": "e1655d66-d823-48cb-a9f5-381da2d02458",
          "name": "credentials_verify"
        },
        "response": {
          "id": "c6e1a635-21ac-4624-8566-ece56e6ffd62",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "d0bfdf78-f389-42b1-b32e-2cc42a68d737",
        "cursor": {
          "ref": "423339bf-bd83-4df5-99c5-505965c9310c",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "a5957586-9f3b-4405-8626-095265f8b79f"
        },
        "item": {
          "id": "d0bfdf78-f389-42b1-b32e-2cc42a68d737",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "08ae14f0-88fb-427f-97b4-36b17e8e391e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "d0bfdf78-f389-42b1-b32e-2cc42a68d737",
        "cursor": {
          "ref": "423339bf-bd83-4df5-99c5-505965c9310c",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "a5957586-9f3b-4405-8626-095265f8b79f"
        },
        "item": {
          "id": "d0bfdf78-f389-42b1-b32e-2cc42a68d737",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "08ae14f0-88fb-427f-97b4-36b17e8e391e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "aa3324e4-0994-44d7-8fd5-7022319ccbb8",
        "cursor": {
          "ref": "ebb6d512-4edf-4eca-a7d1-37dbeaf2de4a",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "ac753280-cd72-4289-ad70-8a17bd5e289a"
        },
        "item": {
          "id": "aa3324e4-0994-44d7-8fd5-7022319ccbb8",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "aa3324e4-0994-44d7-8fd5-7022319ccbb8",
        "cursor": {
          "ref": "ebb6d512-4edf-4eca-a7d1-37dbeaf2de4a",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "ac753280-cd72-4289-ad70-8a17bd5e289a"
        },
        "item": {
          "id": "aa3324e4-0994-44d7-8fd5-7022319ccbb8",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "aa3324e4-0994-44d7-8fd5-7022319ccbb8",
        "cursor": {
          "ref": "ebb6d512-4edf-4eca-a7d1-37dbeaf2de4a",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "ac753280-cd72-4289-ad70-8a17bd5e289a"
        },
        "item": {
          "id": "aa3324e4-0994-44d7-8fd5-7022319ccbb8",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "8b2db4c2-234a-4bdb-98b9-a77d5f86af06",
        "cursor": {
          "ref": "61fc335d-40f8-4428-aad2-36e291c2afdf",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "3ff3f153-a195-4495-a385-2eba155d5129"
        },
        "item": {
          "id": "8b2db4c2-234a-4bdb-98b9-a77d5f86af06",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "8b2db4c2-234a-4bdb-98b9-a77d5f86af06",
        "cursor": {
          "ref": "61fc335d-40f8-4428-aad2-36e291c2afdf",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "3ff3f153-a195-4495-a385-2eba155d5129"
        },
        "item": {
          "id": "8b2db4c2-234a-4bdb-98b9-a77d5f86af06",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "8b2db4c2-234a-4bdb-98b9-a77d5f86af06",
        "cursor": {
          "ref": "61fc335d-40f8-4428-aad2-36e291c2afdf",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "3ff3f153-a195-4495-a385-2eba155d5129"
        },
        "item": {
          "id": "8b2db4c2-234a-4bdb-98b9-a77d5f86af06",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "24d4d4d7-656f-49ff-a9c5-a6635b4d9436",
        "cursor": {
          "ref": "52950cbc-8b22-40e7-927e-2348c17cf7e6",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "2ee623cc-16e3-48c4-8ff8-efa694509eb1"
        },
        "item": {
          "id": "24d4d4d7-656f-49ff-a9c5-a6635b4d9436",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "24d4d4d7-656f-49ff-a9c5-a6635b4d9436",
        "cursor": {
          "ref": "52950cbc-8b22-40e7-927e-2348c17cf7e6",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "2ee623cc-16e3-48c4-8ff8-efa694509eb1"
        },
        "item": {
          "id": "24d4d4d7-656f-49ff-a9c5-a6635b4d9436",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "24d4d4d7-656f-49ff-a9c5-a6635b4d9436",
        "cursor": {
          "ref": "52950cbc-8b22-40e7-927e-2348c17cf7e6",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "2ee623cc-16e3-48c4-8ff8-efa694509eb1"
        },
        "item": {
          "id": "24d4d4d7-656f-49ff-a9c5-a6635b4d9436",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "05569731-3058-4e84-a8a3-e6937beb79b1",
        "cursor": {
          "ref": "775eabd2-222e-4afe-ba88-0261cc7c3719",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "8ac6798c-80a7-462f-b311-7de8eff5f857"
        },
        "item": {
          "id": "05569731-3058-4e84-a8a3-e6937beb79b1",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "05569731-3058-4e84-a8a3-e6937beb79b1",
        "cursor": {
          "ref": "775eabd2-222e-4afe-ba88-0261cc7c3719",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "8ac6798c-80a7-462f-b311-7de8eff5f857"
        },
        "item": {
          "id": "05569731-3058-4e84-a8a3-e6937beb79b1",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "05569731-3058-4e84-a8a3-e6937beb79b1",
        "cursor": {
          "ref": "775eabd2-222e-4afe-ba88-0261cc7c3719",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "8ac6798c-80a7-462f-b311-7de8eff5f857"
        },
        "item": {
          "id": "05569731-3058-4e84-a8a3-e6937beb79b1",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "dd5e7856-37c1-4eb3-9f82-afc18a27b529",
        "cursor": {
          "ref": "fe1baa9e-ea89-40ad-bc77-d48f73e12211",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "d49c1d84-16d9-4441-941c-4fe62e376f5d"
        },
        "item": {
          "id": "dd5e7856-37c1-4eb3-9f82-afc18a27b529",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "dd5e7856-37c1-4eb3-9f82-afc18a27b529",
        "cursor": {
          "ref": "fe1baa9e-ea89-40ad-bc77-d48f73e12211",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "d49c1d84-16d9-4441-941c-4fe62e376f5d"
        },
        "item": {
          "id": "dd5e7856-37c1-4eb3-9f82-afc18a27b529",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "dd5e7856-37c1-4eb3-9f82-afc18a27b529",
        "cursor": {
          "ref": "fe1baa9e-ea89-40ad-bc77-d48f73e12211",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "d49c1d84-16d9-4441-941c-4fe62e376f5d"
        },
        "item": {
          "id": "dd5e7856-37c1-4eb3-9f82-afc18a27b529",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "6d88c19f-fa5d-4ae1-822a-554dd5807c2f",
        "cursor": {
          "ref": "910f9057-46cb-4a90-be8d-78096717ed08",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "7fc6764d-84a1-4c31-84a8-1a4b718c89bc"
        },
        "item": {
          "id": "6d88c19f-fa5d-4ae1-822a-554dd5807c2f",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      },
      {
        "id": "6d88c19f-fa5d-4ae1-822a-554dd5807c2f",
        "cursor": {
          "ref": "910f9057-46cb-4a90-be8d-78096717ed08",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "7fc6764d-84a1-4c31-84a8-1a4b718c89bc"
        },
        "item": {
          "id": "6d88c19f-fa5d-4ae1-822a-554dd5807c2f",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      },
      {
        "id": "6d88c19f-fa5d-4ae1-822a-554dd5807c2f",
        "cursor": {
          "ref": "910f9057-46cb-4a90-be8d-78096717ed08",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "7fc6764d-84a1-4c31-84a8-1a4b718c89bc"
        },
        "item": {
          "id": "6d88c19f-fa5d-4ae1-822a-554dd5807c2f",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}