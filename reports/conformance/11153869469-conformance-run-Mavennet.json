{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "97110fb0-3f6d-4458-9eb0-e569f4694931",
        "name": "Clear Cache",
        "item": [
          {
            "id": "5a4b331a-8d0e-4931-a30b-9932b407f220",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7b1fab84-0a69-454e-b007-809997212711",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "8cda6e6f-4428-449b-899e-cae866bb36ef"
                }
              }
            ]
          },
          {
            "id": "ccba5ac6-9d74-4631-8a8a-9a48560abe52",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "59e9c659-7d94-4256-8a5b-983fb2042e7a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "7415ff0f-24df-4c13-ab84-d556b932ca8a"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "164ab9c1-3b28-4569-b02f-302432648af8",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "934d8bc8-3999-4cf8-96a1-86caaa298f12",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9c5961c3-f191-4072-a4cd-3561ffa01cce",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "77a73937-a08c-4b75-a8a7-882695a01425",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b1a89768-9698-407f-9597-fa14cbb31ca2"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f12358d6-73ed-44ab-a185-c7e14fe3a42e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f952903e-5886-43a5-b691-43b33ff81b3d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6cd7001b-429a-41dc-9349-d590d7b8e4a2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b7b34278-21f3-4490-830d-705a3db36b38"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "22f33321-2e89-46bc-b98b-423beff5edb5",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "93d71293-0e72-4933-b2af-cef7b71e6467"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "80e7ae8d-ed57-4221-b265-918ee98dea03",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a70da544-4e7b-44c7-b88a-4d2017b97755"
            }
          }
        ]
      },
      {
        "id": "05a22bb8-5fe3-4586-a2da-10dd4196eaf8",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "04daa964-c542-437f-9340-eeeb4ea8f591",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b58cde98-d878-4b57-ba66-98d23c01cf90",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ed02cf74-51c3-4877-bb14-ee57afb52507",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67e378ec-999b-4c1f-bd9c-506028656a60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1c04a218-2ed0-4db1-a52c-fa873e552473"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60ba8835-cb37-4569-86c5-7860fc8d77fd",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e742ac92-9da4-4ab7-aad1-9b8c29b41b7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d7330551-8e3b-4a23-ab7f-caace8647d27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ba944e2-d539-490c-b4cc-8f196cef7b47",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d58ce169-d06d-4085-8d3a-b1e9ee34f604",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e6c92eea-da66-4115-84f7-2bdac4953de2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "505a18c3-57e7-4502-bdf8-8b2494b22d89",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0c815c1b-b309-44d9-9c35-75cfc1cfc3c9",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a07964b-07c2-4036-849a-b9038a3d94cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7b263bc7-67c3-45a1-8f12-d45a0d51e341"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6508472d-4f3d-4e81-887c-be43d5fd14ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d5cdfe5-1519-47c9-bdd9-d9916aa9f093"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "3301b8c4-a2ee-41da-a768-3f35b0774e52",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c330d3e2-fb86-4a3e-85ba-0d264b8cab26",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "27bc8771-983b-4d74-8efa-16a9be52c977",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "fe913ee4-9385-4a26-8ff5-c003d09ff54d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bad28d0a-7608-4eb3-8eba-b0440541cdd8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "66097d46-a8b0-45cb-8244-5c9e896babfb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "44fc1ea5-ea3d-448e-9118-8cebd1533117",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "16156646-7b69-4740-8fa3-3a164e75c1e4"
            }
          }
        ]
      },
      {
        "id": "3b27a2d3-6a16-4902-a1a8-c024ccf2564d",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "14a46c9e-4151-4942-8613-713f318b5637",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c0844cc8-1a8e-421b-9532-f958a4f8495f",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "4d353677-b004-42f9-875f-751abe3bc588",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88dc38a6-cfa5-4697-b818-18a7db538592",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b4a9637-45a3-4f66-8848-81772ac2c755"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a9df8e7-6f7e-4251-81f8-ce393e29643f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "055d2afb-c387-445f-8692-b7321fd0d30e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "623feb62-6f2b-49f3-b5e5-eb7960ffa940",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b1f88cd-5be5-4e8c-81ec-7619d47a8fe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a990423-34bc-4b84-88fd-3921b716d533"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a69725b-89d0-4473-bade-97b86fa8fe01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "05f225a8-ea38-4978-8a34-b75310e09ce0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da8dfd4e-c21d-4ff6-ba20-ee7037d23ba4",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "572b32f5-de96-4736-8442-85d0648be53a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd9387a5-7a1f-4a0e-a7dd-70539b7bab20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "459a5c99-f4d7-4da0-93da-965a2be1aaa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b0e239a3-7e42-4b4c-892a-70b8f88bdcad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da634bef-0db6-4470-b498-46912375fd4c",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05290b61-b44b-4854-a5f4-cef32423bc8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13bab8f8-6ac4-4e74-a590-0a1537386ea1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dfe9870-e8f5-462a-b7be-3f9755b348fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0d752792-5b1c-4325-b275-94b41a7c3d2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2acd81e-b4db-4e8c-88d4-b286d5a8a2e7",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c22d6fb9-75c9-4d6b-a998-7c47edf84754",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "705f3fcc-7ef0-40f6-aa6e-ff1d08d5727e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d48a4c1-4128-4e62-b6e7-c19a0a3205dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "01f6a037-c99b-496e-8979-e10c4b9b5f10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edefb39c-83c5-41a0-a5ad-30f3a89c705e",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f088cbe-dc25-4e00-b9cb-3cf8337e8c0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10194466-f1ae-4d0c-b567-1a6f6f58a49e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d913274-eb55-4ed1-9b54-c426e350c7ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ead1b160-7f4e-4d04-81b1-e7f9918863a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03bb5d69-7fa1-4e4d-915a-f1cd76550aae",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f069f75e-995d-453c-9666-37e42816c0a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bb0ac84-1b01-44e4-914b-d4e443a43484"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe642d26-e656-417d-a33e-724508a91087",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7343891b-8dee-4727-a7db-38d9478aac4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf5049eb-2106-4c88-8ce5-ca3d63275ac8",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed4bc7ae-b155-488e-9ef3-947ec4e83cdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ef41c8e-313d-4e1b-a41d-e5298bc01a37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa675722-5076-40c1-b883-3594cbe3796d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bb740fc1-8c28-4b05-9014-78effe0bd284"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e41dba1d-dde2-4839-b68d-b61e0f4638d8",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1426fcdd-144c-417e-9148-6b12dd1ca10c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07bf2125-f2ef-46a9-9771-e0c616ea026a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eecbc16c-1c62-4c49-b526-874b495c5b0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c60708a1-7afa-4612-a640-828cf0a683cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90a1cdb4-038f-4ae6-b367-c327155fbc18",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70ec243f-8f9a-4251-98c2-f40949031861",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9541aa13-f246-46f8-bea6-ddaff6ed30b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33589ccc-9cc3-421d-80b2-85d451aeae1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "34c8c7a0-bf8f-40dc-9c4d-5e48138b8449"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c724d9ca-9284-43ee-a9b7-10ca4503fd67",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0cb73b7-21c4-46b7-9106-8dd1d2ff0a11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac72c78b-870c-4674-808c-c6d5de8c7305"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a685d15-6290-4dfe-ba11-13a564a18a14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "753b2246-3de7-439d-9353-a2cc73d1e40a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e61aa8e3-6531-4c65-a903-d38d86172772",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9628f4ee-122b-4713-baaf-8b5c4654a8b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c5cf325-0821-4eb9-938a-976c1ccfd6eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "703190b6-1395-4a79-85ee-372f2a2697bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2d3259e6-2808-43ef-8e93-c63a9ad40079"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29e090ce-eadb-4061-8b9b-ae68a06768c3",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "424aa050-6fe4-4094-b7bf-1bf56d562a91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c8a1764-9f78-4630-b389-8172f2426e06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04767575-69c3-4d57-bb7b-5f6572cf4c08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3f401f01-fee9-4f95-b7a9-cbff22efb3b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67e45c61-a8b3-4f1f-af5b-797ba7231aa1",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84be2c3b-37d2-4000-ba3e-3b30fa2f7e32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efc2ba6b-1b16-4f45-82c5-c91adaebba83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfd454ec-970d-40f2-b96d-8058b1dd5af4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3b1d6888-fc56-49ef-820b-ee0b41de9e33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61fc718e-c4a6-4604-89f7-0e70e3bc9822",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c0866b0-64e1-477c-9065-a99644c7ea0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbfdf47b-3fb1-407d-8eec-71c7e7af941f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0cb6734-ce02-4dbd-8d8b-ca9b23b12951",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5652c3a5-4ee1-4a92-a2c2-2220884f1b4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad0551c9-b8d4-4f3d-87bb-0260342dc699",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b727505a-4783-4570-a670-516fd2633eef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a58bff9-8de3-4827-b12e-0294588cb55d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4909feb-e8af-4599-9cd5-f8d9d9cb30be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "be184aeb-bdcd-4bc7-a722-15d811292669"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d64aa53-0f22-4d13-a1c5-9fa3b3560190",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6224c252-1ed7-4779-9fa9-07791a9aaa28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "028038c2-4813-4927-a8fe-8bc1b0a94917"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d069e60e-5b31-4d19-8d2f-f45b2d3219aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "da520272-8400-4176-9a61-832990309276"
                        }
                      }
                    ]
                  },
                  {
                    "id": "931536a7-1874-4cbe-af9c-66e8fdcf944d",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53b0dd51-0f46-4b36-ba60-4d5579c7d75a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c34d27c5-f4e6-4f30-9388-a830c3759783"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e788b823-3730-4636-b111-72814db6e748",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "d8a648c9-b8c4-4422-a83a-d904502c617d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dea22fcb-cc75-4e77-a0d4-dffb2518bcb4",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14ee902e-4023-42af-ad83-43a8cf26fd5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bb75b41-9355-4fe7-ad63-0fa211405182"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd1289db-761e-4d99-a82e-b369fa1ca967",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "765b300f-b55f-4d50-8a92-dd02808fdfce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f033d0c7-36e2-4156-8fba-437fe3c30ff6",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cab01d2a-6762-41c5-9cfe-ed864dd0f400",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca741930-2396-4cea-a7fd-c35ec9467881"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "601d0a56-c589-4cff-a340-89f1ba61d3f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ee8565a-6e1f-4f1c-8f39-44125058df2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d8aa0a0-d82a-4c6f-8e72-dd64a7c5aea1",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b015c6cc-14cd-4f42-8a59-7448ea4ff82d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abe1129a-95d5-437f-8894-7f6089b078a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ffea4c4-4f5f-4486-9499-b1648d777cfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a3424737-a5e7-46c2-a197-ec7fb8eaa64e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3631a2b-5b57-4c33-955f-226c1838b6f1",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a55d9855-42b7-4ea5-8a84-72add6a8e62d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3398a22b-bdc7-4c7f-b9a4-5829c0e949f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63c6bd63-42b7-4e1e-a56c-9cecddcc4c83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "08574c29-e8f3-4c48-b0b3-5643d07393a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "feedf8ae-8f19-4a02-a7a7-8bd919719ca8",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd7e9c15-95aa-452a-b542-7e52e3a9f507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "029721d3-1348-40cd-afd7-b85a4a6b905f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0cf7eab-8ee2-442a-8218-89cb18dc3735",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9e9bd535-1d48-451b-b2d1-d05c3293735d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaeaf727-8475-4067-a3a9-64bb6ead85e8",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d750af0-65e4-4df2-9b67-8e584278f340",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf629431-9aeb-4871-960c-1160ba5d7eb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b7267fa-5426-455d-afec-cbed3e71233b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "931d207c-d6a6-4a92-ab11-13008dc23aad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edc2f248-82e5-4295-8f81-f74b3ce98d19",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff73b7a2-c033-4cb8-bcae-ed5d3dac71e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f09c4a56-2eda-4caf-963f-6c5d0e0e52af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28ef03ac-1b55-46d1-b2be-10b2670f8587",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1910ff3c-40c0-408c-840b-91533bb48ca3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06f3854f-4212-4b28-8421-56ee22892b35",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2966884d-4a57-48cb-883e-d68858794ddb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2da5d50-12aa-40fc-9f9d-bf0ea4d6223d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e84a397e-8d78-4303-8cf3-65860fc5070e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7977fa12-46bd-40e1-b41e-2ec17e1646bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d75c9703-817f-4a01-a944-d73fd2c50f95",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a24446c-55e5-45eb-9668-18af43d555b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba3811f1-b77a-4ccc-bab7-76199ddda362"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78d7e247-c1a2-435f-816a-f422a108deb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "048b8f39-cf26-4360-a0ab-0e155b67e1f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb572444-d0c3-4439-a7ba-32a7170ae1cd",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc97d4bb-54aa-44b0-aa2f-910d4fa7a106",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bad33ed2-4d6a-4a38-9412-6bce9be4540e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff2716f7-3759-49db-80ef-4a6b6a7c5f0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4e9b5bb3-f024-40ea-9864-b74e053b26cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4358c538-f4ff-4e37-b63e-e65da26c2855",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66277f44-35cd-4f28-984f-0d6ce2d83c38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2b06b85-e723-4c1d-b07c-602ea2ffb8ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44304a21-f83f-4870-8cf0-082a8e9463a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b912a4fa-4754-403e-97b2-8833424788b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1c8b0db-04f1-4924-9d72-997b3530f525",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64549b18-2659-4395-ae48-55ff6310d7eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07aafba0-3670-4e4f-9c24-b0e5832f8e4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "483f7c79-209e-43c7-a821-1f39081c8ee6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "32d5d3a4-e2a2-457f-9d1f-2449fefe2123"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4e3f5da-16ae-4e6c-895b-1f1f711afd79",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e424d415-042f-4468-8e8a-482a8e536fd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0de8e4b0-11bf-4d99-9978-d29e1defa03f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f638ccd8-3014-4b4a-b20e-78cdaeb9fd3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7821119-23a0-47e6-a8fb-45d53685d4cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9301d701-5184-4bdb-8ca9-0970578200c0",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10cbe46f-ad20-48e4-942e-3389aa65dad0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f4e7f97-0124-4a1f-a432-28db63273aad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4343142b-9440-4d9c-b855-956ca6338f35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d3e4501b-221d-4057-9fe3-f76f424a8b82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3aa17627-a8db-4f06-bc0b-20324dbee497",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36178f91-905a-49d1-b029-357727b8e7be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32b310f4-aa56-4ed5-9069-c28485f2dd82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd5e6072-6282-4acf-a700-d93c8e1221ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "63cb279d-dd22-4adf-a3fc-cc41be399f4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c764874-a4ee-4319-a0ea-d4d526773323",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2f33158-969c-4337-aeb7-25f4bbe1373d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adac052a-a28f-4f57-abbd-82f4a3c583d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92768dca-668a-4137-a059-420edf17a968",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "26224789-b9e6-4a46-9ab5-d2ef3804f68c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bca5e80-6371-41aa-9855-f202afe2f6bb",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84f4e466-51d1-4916-a6e6-d924168623e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d2de8c2-010b-4562-a7f0-6f9275f0cdf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cac08a83-d9a1-43c1-b3ce-dbce1021dfa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "62f72963-370d-45e7-acb5-f60fb99841df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cabcbac-45e2-4a52-b48a-69024e29ec65",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5900e5b9-7839-43c9-bd4d-3e9f1e3ac787",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "253e537b-8b98-4a58-ab65-88d8d81c3976"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e323af4b-f401-4e9e-ae28-a36acd1c32a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9a67c5f1-771f-4eb7-bdcf-b982e0bc17fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18771292-6fed-4cc0-84d7-cdd3cc2db246",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a764c7a-76c7-4641-aefd-031cab01dd3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57cda5cc-8c9e-43eb-b075-0371f784a3b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e526981-7a55-44fe-9ad3-37cebaf06193",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7bcbadba-6f5e-44a7-ad80-01b47d937ebb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8489b51-688b-4bef-bc43-3742ca971d24",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c53ae35-b25a-490a-ae1d-e45ba3161104",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b48cc03-49b2-471c-9393-708326fd56a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7627445-c631-4080-a360-190b2650523c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "21a2f66f-4457-48ce-99cc-c6fe7250ef73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "094a9f30-d4fa-45a0-9027-1b85edd5e135",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9a294e9-0657-4a98-a523-76b8b214ace3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5100f93c-823f-4e1f-b2ed-75a91525314f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1152a7d9-9911-42dd-a231-34a01ebea800",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "70d666ed-3474-45f9-aee8-89f07680724f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e04f1fe-773f-47a0-8326-9bbb6f67ec0a",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43699504-e264-4bee-b40a-23fb39b35a12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84fe1c41-fb26-4255-80aa-5bccef06019c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63005123-fcfd-4a46-89a5-de8acfc53869",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "35864c28-6f12-47f1-ab84-50f8fea7223b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23966a50-5d7e-4b78-be31-19931b806a37",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26ba2bb3-4970-4b94-8098-e8636aaf0d0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eeececf3-62f7-4684-b0b6-8bc738baf747"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c095d2f-70e4-46f4-be51-4f1f8afef5eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8d1b583c-6ac3-49af-bc0d-f876b02e9046"
                        }
                      }
                    ]
                  },
                  {
                    "id": "747734ae-8418-44c0-8c54-392868aff683",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d4042d8-0474-4340-8139-6f03528b2b48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb993b48-e3a9-49d7-8c4c-0a3d5da97795"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39cdacad-8625-44a9-8025-c2b11689c2a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "8a259ab7-d2c2-40d9-bc62-c073b2e365c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd87be5d-6fea-42ec-9f0c-fe7942afae83",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98b74d91-e5cc-4e87-ad2a-fea707d503e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a30873b7-132b-4355-9a1f-07a49236eada"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0d5bdca-08cc-4df3-a500-64c4fbc35f3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "52a0144e-3495-4619-a3d4-db3236a2ef47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b06db889-7a86-4778-b2fd-cbff1aadd4d4",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2037c4ab-bbb4-4ddf-b1b9-90badf6b0da1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cee2a85-01a5-4d75-a9a1-53a7b0af7d8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4832f9f8-c486-44de-9425-b29d93b35695",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "d00deaf6-c888-4ba1-86a1-23e74b12067b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "680563da-0363-4ffa-892d-397e4c5dbd9c",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10dc6ad6-5cae-4b13-be40-6b1621a980eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4329364f-1705-4eb2-979a-c07d887e1839"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0ec7990-4611-4ab7-a1f2-33a2dceb9df7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1bfb78c4-a996-4d11-a20a-dc9a3413987d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "910850e9-3051-482b-a99c-ef398ee69ce9",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cb93bbf-a0f7-4fc9-96cd-f6018c96c0be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d707b07-e639-4680-96df-fe661b3740f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b0f7981-5986-4af5-9637-12546bfebacb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d6cbd4f2-9cb0-46c8-8567-c246d97e4bee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33a532ee-7951-4a91-babd-3bc722bb9c4a",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1911aef3-368b-4253-a999-728d9c047c97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b488c571-f2b7-4b34-afeb-5238c78dc76d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a4cf2e8-e20c-40c3-baf3-b4b993e3e60c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "49384a2d-3cde-4d7e-99b6-f331048462f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47834dd6-5a99-462e-9bbc-77fb0ecd5080",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40a4c37d-94db-4431-9cf1-6c4bd905870e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92ff640c-d4c5-4d53-a7be-c5442f1bc860"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b65314b1-4888-4f7d-9caf-0953b56373ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5be38306-943a-4f42-9ab1-81058c0dce5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8692fdeb-5c84-4781-8da7-bb710784dd27",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "082be472-110f-4231-8793-3d42c3e2ae3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a555fdc4-62c4-46d1-8203-9fc9877bf0bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41233032-a7a1-45c7-9097-c6df4cc98b2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "46cc9f13-16e7-442a-b2d7-d8d450c533ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2ccc27e-6550-40fd-bb61-7750c2a6e1b2",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "774e5c90-c603-4410-9d85-f5854eed36ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26c6cc74-89fe-4312-a84f-2fa9610d6707"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df42c863-d04d-44de-9d2b-f36c51851ba5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "12c4cf67-5099-403a-bfda-e02c4d8f3cb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee60b4d7-6d9a-4c20-b11a-f309d55faf6b",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b8bfce4-b634-4b37-af16-31591970397c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57b7d807-9a6b-4cce-84a6-e2792f913556"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a90f41ac-1cc8-4c48-aecd-61baeb43c11c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c4a0f50-8a24-4d72-93d9-72364f1f5b73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb74cd77-bf2e-44ac-8dd6-1320b5f5c3b0",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "019ec218-ec1a-4f62-89ae-dc8ac52f2f32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98ece8bf-4d5b-4dac-8777-b5a22bf0599c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e0cee4f-1af4-41a9-840b-55c67ad6c7a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "70e2ca5d-1c9f-49f1-89e6-f0ad46c1aa05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26930cdc-07d8-436b-8cb7-154aaca158fa",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a2df271-404f-45c7-a5a7-b48818ff4c54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f60fe400-994a-4e46-970f-e12843ff66f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4753095-f357-42d4-aaba-01a62678bb1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "18b5439f-e1da-4d88-b504-f2c33b23a0fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cbbfd6b-6676-47d2-9889-b3d1d6f48391",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6692cb4-d184-459f-ba3b-a7c498bb7cda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcb3a8ca-acec-4199-a864-659231b2dec0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d28a53d-1cfd-4cde-b407-50c921cad185",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ac009e1-847c-410e-9cb1-264f2dc543ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2782940-d33e-47d9-89ba-8b699f99580d",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e5133b9-ae8e-430e-b6b3-b84cd3341979",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7d9a5c0-143e-46bf-801a-7e0552165419"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05d07a03-cc42-443a-8053-ab6e6daea6ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f1c56b81-71e7-42ea-8aff-0a77bf7ab27e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5b5b8bf-391f-4776-a793-0cdfcebb503c",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a56ca2f0-1166-4911-81ab-e4b56040dc75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc9d665d-858e-4636-ae46-f72a7960175f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abd659d1-abcd-4bd9-93f2-d1dc450d9584",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "12773c14-b676-4f0d-a8c4-e135ab66532e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "660b353d-8a2c-4c63-afcf-05f9be5eeb92",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2e62323-bc34-42ff-8071-73e6811cece9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b3d02b8-a809-4b81-a464-b747de97db86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49aaffcb-cd96-4bb8-a502-54a9a49a6f21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f1e4579c-ba84-4c06-a37b-5a236b418183"
                        }
                      }
                    ]
                  },
                  {
                    "id": "606d423d-af72-4cf2-b5b5-8b328be4c9d3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35309a71-89a9-4e54-823f-a1bc553f9dad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc73e55b-ae7f-408d-9bc9-eb521b443778"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60bb2bfb-4482-4713-bafc-bd99f9731e12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "fa01ca8c-9a2c-44cf-b46d-8c28a2ab7ba7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7c5b157-f1d1-46b4-b0de-725f54058470",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52ceb930-81cb-4091-a091-2ee7afdc3355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbd101f5-3470-4790-b143-f2058fb51d79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5f26558-c3ee-41af-b6bb-e1b15db349df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e0300c31-4aed-432f-9647-db9c1e34dae4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ded01692-4514-4022-b899-9d5609987273",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00bbac9e-19c5-44c1-ba64-e558f6150261",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a34ce361-15ed-47d6-9a05-73e4f49f102c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8b1b4e0-00ff-4c77-a836-cd2bf20d41c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "1eac427a-4f25-4638-b7c3-26bade45e445"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75dd0a6d-99fb-405e-bfa3-925dd2eed33e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba856aae-6b0a-4310-9de9-c5feec280f38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fdb786b-cbb8-4e38-9132-d872ea34e002"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "345a5e23-df58-4642-aabe-980b1405e2cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "a01bbb95-90d0-4a13-ba8c-7e19966a65bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2282693a-7796-479e-bd3c-5de6ca8662de",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed59e43d-c924-4afa-9978-bdbab815a2cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72e5b74b-dbbb-43c5-a756-645624df8532"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7960f1c4-0d77-48e5-9c59-38fc9142b60d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c2afe0c-fafb-4fcf-958a-a1c28b6f569c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a0b7489-1b67-4e3c-8b2c-970a51562911",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fea80d3-59f1-4ec7-a281-15420c59d68a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f28a06b-48ab-40f0-9cf4-e4d59f7bc3a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e74db24-455b-46b0-8cbf-4f91150ce50f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1f62b79-57e1-4b57-8fdb-36ec0e947455"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45e8dca3-0231-4176-947c-cc15087ff746",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb1d8c5e-d130-4381-ae30-5e02722eb45d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcf180d8-22dd-4e1b-9dc0-dfd66e0fb9ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b12fdcf0-00a0-45ad-9769-6237482eab41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba932dc6-e213-4ab6-8c1a-adf7645c2dff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27844e41-6699-4afa-894c-489005d0824d",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "506c3dfa-9b5a-46fc-997a-787759c73dbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbf5b279-d94b-4c22-b3be-b54351ce541d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2fdc24e-494c-4d25-8b05-97a62c6332c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f73a5493-4d90-4853-aae6-1892f162192e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cade151-f052-4d9d-bc6d-f71ae8044619",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f85c483d-6a3c-4de0-ad42-86cc3e76956d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "823b272b-70c2-4685-aabb-f9149485d4a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed686270-60f5-4ac2-97db-e163513b944c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "926be0c4-79e0-4e8c-9d25-8201bbc93707"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1ad3aa2-9a62-4a5f-b997-c3f5c28bcad6",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9f44fe4-4cd1-4a44-95b2-17c147a6cfa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e0b1e5f-507e-47be-a9d3-f8d4d776ecd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "766f65b1-177a-4da8-9e96-05864b778334",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b3fa4bd0-9253-4b1e-901a-32315400a0d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2ebf653-2aa0-42bf-ad1a-eb7d8f7167d0",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e063de7d-6fe7-4ae8-b303-a0d88a71dc71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3641fcf-3e44-49b3-9b89-a3340a03f5eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfe71449-b229-4aa0-94b0-ba41fb426685",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf0e1b0c-32cf-44d0-8ba8-6166e52af54d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ae67ce0-1ddd-45f1-beeb-afe234d17546",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "360302f9-f214-49a1-91b3-5d234045a8ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8983e18f-4b13-40e7-b28a-1656f5a15d4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dea1585c-2eac-47ba-81b4-5e8901734980",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb590674-a300-41f4-b39a-e5292f65975c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7de197e-6048-4905-acdd-114ac8cb1804",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8d5e36c-3466-42f7-9d1d-87b6fd214ac0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ade96bc-f308-4728-b0bb-1c7dcf417c06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c16080ab-1c08-4d17-85b4-89b6580bd2b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0fe6e2db-b9ab-46c0-b18d-99a01bf6c8a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93e13171-9337-4aa6-b529-0204e1111853",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e863aa72-2690-4d3b-8532-3ba3aadb3553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abe7c9f3-c129-413a-8471-c61c87aef901"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87e58f07-2158-4419-b38e-6b46f03b0576",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0cded554-ca30-4972-9f09-63595bc59007"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcea82ec-1f6d-4168-9016-8399aa1bf187",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0982cad3-98f8-4cbe-b4ea-bb76d07f5a2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d0ebf1d-1581-4de3-a243-f54a0f537350"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b59446d-8cbe-4344-86f0-d4da21395f16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3febdc9c-aaa3-4779-9f15-faf1b6513e0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35c96772-6346-4604-b090-6958203901f5",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d05f7757-750e-44dd-94f8-783a93833fe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1728a60-96d6-4013-b06b-e204e4182d6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d754575b-c40e-4284-94ed-9d26d0a21668",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6cdb8316-2f34-4ac6-9b5e-5f0b36fbee3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65c7bae8-fb7f-4459-95c7-982442e7d1f9",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6da8b560-cf3f-4b5e-b465-317e3ffcb730",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f188aee8-c1f3-4ef7-98de-8896b8b0a6f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77fc0437-cb48-4e51-9f45-888579df42d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ba1d290a-9e30-4479-9d68-53389ed20d08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19472519-5deb-4f43-a35b-319ccd55104c",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10cd9349-145d-4af8-b283-a050900f04f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c28e0d7-6262-417a-9b6b-dd74f0c82127"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23652de3-81cd-40b8-b884-83f3961ff4c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2cbd03ea-2f46-476b-83e1-2cd33ba325b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6243362-18d7-4a78-96e7-4a591e08a23e",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8688f5c-7b2b-4be5-9164-97200ec56d66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dbce249-45e8-4b09-a532-7aca620d6354"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1cf713a-9a44-4aea-b081-6a1a56f7f719",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1828ff24-d213-4978-b50c-50fa1258c5de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df4cd49b-10ff-4141-9a3d-675430431a4b",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6a37cf3-1fc6-4c5d-a208-44c101ae5b98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e9fdd16-7b8a-46f4-8abb-5d849ddb7d6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "679ec5f1-7efc-4b52-bd59-2849d4f08aa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1bc3cf34-bdff-48af-9689-de3c1fd2814c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ee45627-1133-402a-988e-c4081e39cbda",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d088b084-51db-4998-817f-706ac75bf840",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5daf89bb-75e3-464f-af26-77dfe2f19efa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4afe51ee-bb60-4ebf-a980-c54c66899c91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "92beb46d-6390-405f-8d35-8f28d2a75da3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2587ddb-209a-4e7f-b9f4-a955490183a9",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc29e1da-138d-4188-87fe-03c94edf2841",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c3bf939-ec06-47a2-8d12-1e147a21635b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05f83892-950b-47c4-9ff0-a4334dfcdf6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5956c6f9-8093-4f63-8131-df6749881387"
                        }
                      }
                    ]
                  },
                  {
                    "id": "192062f4-7842-4a20-8315-b2da3a96875b",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cc0ca45-4136-4413-a19e-3555371ef847",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "202382c3-46f6-44fb-b970-df7eee72ed09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30353033-8e6f-402e-9a54-208a32b8f434",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c7a0bd56-6397-4fc3-aacb-910477902494"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9181c68-0ddf-4240-9f37-acf6550d7076",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d216a4ab-6695-4438-8365-86446d9807aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e4f24d6-05dc-469c-b762-08aea9aa1796"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a941fd17-9096-4d62-8d1b-658374703376",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "58ec90c1-5f9b-46a8-b575-f1af4db335d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b480f1de-c5ee-46fd-8e53-f450a5f8b119",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ce8b7e7-3b7c-42ef-a613-cd07c9cbfb37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "234ecba2-cbb4-4d51-b948-4e8770a96af0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "936fd572-b35d-4efa-b629-6e8c02326404",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9489a2e5-6c6e-44ce-9139-4c17ee42c4ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b164b49-046b-4048-a738-326d4c0ebdeb",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c8a1eca-42e2-4ac3-95aa-df6d0938faa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d6c05cb-2b7c-4347-8b47-fbb2ee22a42e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4af7ddc-501a-46e6-9108-5dbe74b45909",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "43b05751-3f97-44c7-bb82-24d901b8b69d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b076119-6746-4f41-ba62-515109f1f216",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f05490e-3794-49c0-b2a5-960735265a4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b703d2bd-cb1b-4234-96d1-774ee965dc32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "409abfca-6757-48e4-8769-381314de903a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6cf0bd1e-c876-4114-a9ca-e2f726bd9f14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37c5af9a-d7cc-497c-9164-ec49a51f3c38",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bb74bd2-8a33-4ac3-ab54-4c0c7073e644",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b684e1e9-7cc4-430a-8fcd-9d21619cabac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "331344d4-be1e-4c4c-bf53-baf6b4ce8eb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d580f011-5ad6-4157-b4b2-59bc5ae4643c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f855405-8617-44d7-930e-bc497c9b96db",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65be6fb5-9b0c-4877-8030-7b04a3306c58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9f381a7-d7d8-4572-9b5f-c57a9b2bde4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "623bf4b7-e856-4560-a59f-38eb628bde84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "77940456-b946-4909-8d5d-70d12a144913"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4918043b-edf0-451f-b604-4d2f93488c7b",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39da0db9-834f-4049-b123-6e91b36cac6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6a428be-6b94-4ad6-b626-0699d0410ede"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f772157-c32e-41d1-a7d4-297001c62dcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f847cb82-d0b8-4059-9b5b-c10ab4f83f11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "194e8c78-51ed-4cbf-a27e-4083e6e52e99",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc07282c-f343-48d3-a9bd-3b3dfb913ba7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7a238af-eea8-4746-8e65-bb1f303554e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4402128-5037-4a2d-8a5d-ff0a2d6248ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f223369e-7cba-48d7-804a-92cc94053464"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0bb8144-cbf9-4f26-bece-b8a4baa14f04",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9856e1ce-533c-4080-83b7-53d868a3310d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cac753b-d52e-4e55-a89f-37b9c5d2a8c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a45d76a-9bc5-47e9-a939-185128048101",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "dc8eb2a1-c0d0-4176-b650-85bef8175fe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07655c1f-f168-45f2-9093-22659d1d6ba3",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4e244c6-b72a-45bb-ac03-33d6f5874472",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21cd7172-1c0c-4ce0-a887-034519b27a8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72066809-1022-4fae-a194-d460f389bab7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "dd728b3f-dca8-40f4-a1f4-c2447b188fd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa8354f5-c4f4-4acd-a633-78f8a27f27e1",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5808807b-1c6d-423d-a223-229a07ec1616",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44b76db3-7f4c-4de7-994c-afae31cdb0c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb92db02-f83d-41b4-aced-504d76d88190",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "c8feb13e-d432-4278-9b27-adc458335aba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aac3a42b-fbf2-447d-9af5-db07d5d3c9ae",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "226272a3-da2e-4d0b-b2a4-d24dfc14041c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "04b4b998-080d-407b-83c1-dc54ab2e9291"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55291a36-ce42-404b-8218-c7fd5f18ef80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "dcf50f35-fd7d-43ba-9ecc-275f341cbb62"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b636a6fb-1f5b-460b-8666-762a2e64b846",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "661938b9-683f-4d2e-88b0-61fc100916ba",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c75382f-20ff-4b3b-9d50-af89f227847c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "62eb4ed7-6f0e-4eea-84d4-328378851441"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31db1f35-cc98-4a05-bec5-05f8dfd4ca5a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0c378cdc-8336-4789-8a42-3d8ae4dedf48"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "55dfe6d0-8270-45f9-93f4-f128405153fe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cee97c80-42e4-4ba3-be15-c17944010248"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b4a01082-0946-48ee-8296-6d69e21afac5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "68cf3f2c-76ba-4864-89a9-6a7978ed281f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "27a585a5-c576-4aab-88b2-cb044e698ebd",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e879c886-7211-4134-833f-9dc2db7c4071"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "660dd046-bdb6-48b1-930b-3492b5da42f6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c42c595b-4826-4860-b654-e781b59acd3a"
                }
              }
            ]
          },
          {
            "id": "d5e3cc51-c98e-49b4-a267-25be8e2600a6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2934966a-4da7-41a7-92c2-e2ed796df210",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "63b94c57-5af2-42b4-8510-0918a03a2f5d",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d875686b-ddcd-49b6-b8c1-7f5c9396e17b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "5bf960c2-eb5b-4f4e-ab99-eb7644122770"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4897da20-2391-42fd-855b-dc202f8a826e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb1489b8-9e1f-4c55-854d-35f083a1cfd9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4c75ab6c-bc61-4cea-a543-c1a62764ccf4",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1b1de017-115a-449c-90c2-a6b3cfd868d4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d43029c3-de5e-4408-a18f-0007e79b8307"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "95a0bd89-e901-40bd-aafb-f7f429ab2e6d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "14956bce-212e-46ea-a1c5-6326ec56137e"
                    }
                  }
                ]
              },
              {
                "id": "2619bded-9895-45ad-bfe8-22dc13800d03",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9ef195ce-f60b-4589-ad45-e9173418b3f8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "50096a7c-5c9a-4f1f-b18b-34b43e75434c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c2160b12-30cd-4661-b62f-5589a74c7414",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1dbc2646-05b5-4728-bca8-cb34acd5c249"
                    }
                  }
                ]
              },
              {
                "id": "43743435-7733-4c92-a3f1-bf0f422558ef",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "de464612-2c34-4416-b51b-494dd8c73abc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "371b5812-c8d7-4909-bce5-fc441394dfd0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9a740a97-1d1f-453d-a8ce-15e7ac81fbea",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0566ecd5-ddb5-4396-9c73-314d5f4df9d7"
                    }
                  }
                ]
              },
              {
                "id": "3da2ef78-3599-4cb5-8624-93f8ec10e10c",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8e302f08-465d-44ba-af1d-d2f7591bde47",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "eaf01ed3-05b8-4648-8c94-1f8891a519cd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f47c5a17-f714-48cd-9318-4569b06ed355",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "1e4650cd-7556-49eb-9553-cba7d1b1b3e9"
                    }
                  }
                ]
              },
              {
                "id": "df719d00-1fa7-4f71-96ce-a84946f4f06e",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "039c0a00-b01f-4d43-95b3-03199e4c38a1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7244afda-eaf9-4cbb-9f9b-e7b07a0ce56b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "47a2938f-3c10-4112-a4dc-ad148f741f31",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "5cb57c7a-7d88-42eb-b092-5d3cd3067a1e"
                    }
                  }
                ]
              },
              {
                "id": "28f9b27e-e853-41fd-8f49-a6736ee476da",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7c0bd42e-fc45-4d45-ba4b-d697ed067111",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b0c3c974-ecfd-4ac4-9854-1a9c7616e77b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "28d0781d-93a9-4fba-8fbe-7062413f84e7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f3fbfcd4-6f02-4e60-837c-8576bcbb47cd"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7d27ff93-28fb-4ff0-8c37-a199531f1610",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c3e6a79c-b3ee-42fc-b11e-ef1a97bbc07d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b081c357-e7e9-4d1d-9b6c-9f01704cc1b5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "998b12ee-602b-4625-8edf-8df93b51c3ff"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "009184d1-ea6f-4e7e-9ffa-630a36662150",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "d1ade507-02bd-49d1-ab9d-46d784087410"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "06b27469-ece8-4114-b05c-637a7a37e3cc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "37d77c18-cc6a-435b-87fd-9fccc211180a"
            }
          }
        ]
      },
      {
        "id": "d52f67fd-6296-4519-a4ea-a3dec0ba9568",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "c7a8a303-ee76-49e9-8498-8e031c3d19bc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "13c2abd2-9d30-4d47-8724-a159e2f6abab",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6c5898f3-6fc8-47f2-82c6-d96d84547045",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "761618b2-798b-4f81-ac05-746f82f76fb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a18d493a-6ce8-4dc9-94bf-330da1d68e3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdd993cd-f7dc-4600-b238-fed856a378df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "f60c9887-ec6f-462d-99dd-ac7fae828501"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e990945-dc2d-40e2-82bd-32a405a8dd8d",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc9ea18e-78f6-46f6-9810-d2a4513ec2bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06072f2d-bbda-4e30-aa74-eb4188db8574"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90a31679-11e0-4f00-a00d-893dcbf7db24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "cbfc5492-47de-4f16-8183-c36b978b03a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5971df76-be3e-4fa6-ade2-39269326a838",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "698fa789-6c0b-45a4-8620-b6d308056234",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bebb69e1-940f-4fe6-b2d9-f76345e60f5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a13da2c-4623-4f68-8580-9ea106b63e12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "28e234eb-ad7e-4f88-8d21-539a64c24a20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2db050f-4928-4a12-aaf8-66eb54393695",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cb1d1fa-ae49-4ede-b3b6-73145202b66b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48ee94c2-7ffd-4403-9b7b-fdef43b22ddb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b60887d3-a133-4e47-abd9-5f6ada9b7e70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d0bd4bc3-89fa-4337-8af2-4364ee2f1443"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd810e9e-5da1-41c2-af06-6658e274247b",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07ae9c88-7cd0-443e-a9da-ea3cb81e23e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1315f43-c1ba-4233-a3cf-a84a37aed5eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25a60b67-3a65-4e4f-a2d7-fd5c4c861e47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "370ba27c-66d1-4650-8a3f-8bd9725d1825"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fce22b6-192a-4593-b5d3-06d18c4a0342",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df219664-fd82-4601-bc51-13cb7eb3b50d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "350d008d-7aa5-4416-b3c0-c1f180927129"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "058be3c1-b51a-48c1-ac71-c400d7e05a7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "396548a0-1f69-44c5-962e-11cc7481c3e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04fc5085-6842-4d0c-b32c-651cf8655a7b",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "887dd17b-dcc5-4d71-b5fe-d05d4a6da3dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aec2291e-c8ce-424e-bd7c-10a329c1a1af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cf0a6ed-8ea5-494d-beb6-b9b99504d92b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "01f3c046-84dc-4956-96ed-ae54ff479907"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a3dd490-d389-4c11-a90b-122a4b810091",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3d18b75-9364-4ce0-a760-55bde9ac7a1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41191d53-c345-4b50-9616-9638b8b44bea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a058870-efb4-426e-935f-8631b4f33dde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6434276e-0108-4d77-9ddf-2ad2305e8149"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98a299bb-e1ce-4ea8-92f5-c7d1e9537e2a",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79a72053-be56-4243-b940-8be8eec902fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c7ff5d9-1fdf-4a59-a8a1-7e421cb32ecf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b759b091-def8-4249-8bc1-debe03c35bd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e0944c69-6f92-4f6f-b02e-201f89d00d68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5367962c-60e3-4afc-a79b-ecb8c34a40fe",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac99267b-c704-4b0e-adda-48da0101546e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3940b73a-fed5-49c9-aaa2-9ad529a13d79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbe3a4a7-3cb7-4e5a-bf26-e8c24d10e8c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa2fa58d-e77f-4912-99f4-03441431285b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbf1eee6-50ca-4150-9f57-07848558130b",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "265eaa41-ba6a-465e-80d2-3edfbb36296f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6fc4547-abd5-4531-90c4-f074b9cc2f4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d461d72c-39fa-4c94-9a92-a1adee588c95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "89bade9f-157e-42cb-80ab-a0af3c16640b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4247aba4-1e46-4643-914f-e9b6bd528464",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00fe0bec-e5cb-4281-a89c-544ad48ef339",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff2beadf-785d-4675-b176-0057019f4988"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dcc69a8-10d0-427f-b3eb-a2999433ba2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5a23663c-ab71-447e-9e69-70a380f43970"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd14460d-b78f-422b-b20d-1ac75eafa163",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22236a50-f4f5-4c8b-a923-d6bb16c6d9c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cffcf2ca-6d45-4f58-b112-61465670ef02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a51b457e-d490-481c-bc03-9cd8cee80bac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a391502-1ab9-44db-be9f-aafa2982b50f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39507245-8812-4a4e-bd88-78c8d484aed4",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "baa34a9e-6ae7-4b35-b5d8-da1cf9166cb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0250a973-05bf-4d3a-b0ce-92c477b14323"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6bca2cc-8b4b-4cb4-a54e-215a104962c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "037cd095-e1cf-4be5-a63a-df5433380d63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cf4f0ab-4ba9-44c9-a5e2-5d1c508ec5c7",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b38a6da-8876-4a9d-acd2-e440cad4fcaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0dae2c2-26ec-4147-87c4-ae10df46e9e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b6b4241-c005-49c4-a10d-c56ade3f0caa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "3dbd7dba-fca2-4d57-934f-23620af14597"
                        }
                      }
                    ]
                  },
                  {
                    "id": "724bc034-44be-48cb-8f01-72ff46e730c6",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a78620e-6ea0-43fe-b530-13b9bc5eb8a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "014dab02-8e7e-4188-a967-2abcf9f114a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb54238d-5dcd-48d1-b2a7-9d33d810183d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "0abcbb98-d0fb-4655-9717-b09894e5376d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28071730-e3a6-4410-9f8b-81638f4ca8eb",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "045edcce-0e6c-480b-b0b0-33cdfc053dd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea5e2970-ff5f-42ce-ba13-fc90158bc1de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1396eb06-a359-44e7-8abe-b4bf5d7d8a9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "11930aff-6dea-4e93-8d0c-2eca64147169"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2102add5-c5e4-47ae-91fe-7bf6494412bd",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cba983e0-c9e1-468c-8dd9-9bcd1aba9e68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bed63e3-3405-43dc-b228-9ccb6794c7c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e1dfc31-bc36-4ae3-ba0f-830541f4271d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f54d85d-3240-4b9b-b308-fa6b7d108cdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57736cb0-38e0-4932-997a-55c47e1b6137",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33a28b09-81f3-4881-b18f-916776f6954d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36c0bda2-8412-4ae7-a985-8e8a937bee1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dea3327-abcb-471b-b3c1-176dc6d71b69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1488d00b-8f93-409c-9eda-6e20bffed9f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb02b674-eb96-4d79-96a6-bc310bad14ee",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bb6c0d6-01e5-4d29-9667-72d2ecc03d9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c49d8e1b-1c4a-4266-ac71-5d184d5d9288"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32ff1ef3-abdd-4f4a-bec2-efffb933daf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "688c386c-d8e4-43b1-83a2-817db52efde8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f3b7977-6b9e-41bf-a9bb-d8460e102420",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97777d45-e872-486d-a241-1b5a1765ffa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ee59941-02df-426f-9af8-f0975c49f7bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15bc14d1-a78a-44c5-b581-67d311b8e659",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "856cc76a-389c-464f-9983-0e75c20c6371"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57a797cd-2dc4-43c8-a210-1cc87a6f8517",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4ae7c1e-2429-4055-a2ef-ccd2d8e0b1bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d9907c1-33cb-4eb6-8431-e8b9e49abaa5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53f9c643-d18b-42fd-ab59-ff0bff7adcfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f88a8081-90ce-4549-820b-1ee013e2eb2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f370bff0-424b-4387-89b0-673da4f17263",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dfedffa-2574-4151-aacc-f683ca2261ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fe922b8-1a31-4c36-a5e6-0a9176a82a28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bba25e36-79e0-4477-8ea3-d802b580b57c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe0c74a4-f137-456e-9f2c-04aff0f3273e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1ed935a-6694-4955-b3bd-9408f487033f",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8359def-5437-4dc6-8f32-4d94e93a9ecd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57d5274c-1d63-4381-8c1c-3dc90981eb2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f67d813-730c-4578-aa67-820f87aaac74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7dac6d65-cfad-4908-b749-97a0e176e57f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d9fc6fd-84ce-4e2c-ae50-bd10403bf86f",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6e657a4-922a-446f-b58b-e6fc47bac1c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78db715d-eda5-4d62-bd37-abce6b17e708"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33e0dcb9-a9e9-4636-8a4d-1e67b28c0508",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "161189d0-d562-48ce-972c-389bf9c09e30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8073dd73-0f97-4170-b6ef-735d4abbd60b",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9a9978d-21c5-4214-82e1-02c8a98e271d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ba17732-ac1d-4334-b6bc-a79391ef0491"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "235178f5-24a6-4b38-89bb-0ee7c4488518",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "872b37db-a770-47d9-b271-5f471f1f323d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe17cb4c-44e2-4686-b49d-2f2d7486a957",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed1dd2d0-0705-4657-a587-4da1b78c449d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8aefec27-1af0-4020-b928-225e4c11aeb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8df621ee-5b69-4237-b1e8-b61ccc1f673f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "be9d805c-8574-4869-b804-2966445ea33b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdb40fd7-73b3-4004-8045-e6bc555bb5c7",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a83fff3-57f1-4394-8cfa-71918991eeb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8b9ab7e-9e8a-4b10-8802-32c581fbce35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f108728d-725b-472d-a622-4fc1985d601e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "53e7c638-26b5-47fa-9a67-c7ff589b539e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d32b414-cfae-4f7a-973f-f39908a957c9",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62fcaf25-c2fa-416d-8774-c7cc75a2d050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed122a60-28aa-4e37-9149-95515472851b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d824eec3-f07e-4d91-b66a-3fde46b82bb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "94321b24-e60f-4169-a7c6-23bb5cd27cae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8cb2f60-eade-48fc-a129-807d0dd0b05e",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8c144ec-5dff-4476-9acb-4bdd94c474ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03de8b1d-9a7f-4bfc-8ea2-ad9d8992938e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c23d5a4-6bcf-4929-8a2b-7b0cf5c907db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f0c7e448-cb31-46ef-893c-355170eebc40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9d763f3-2363-4e71-b1bc-d50d709d6e1b",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f68fbc7-78a9-44ec-9c3b-ca7904285edf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbaba98f-a8c6-457c-9460-334d4e7294d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0642db07-08e3-4389-aa5c-e0093be597ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a223ad18-ad5e-4293-964d-fe79e8166e1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4581df0-98d9-4daa-9933-b9e68acd18ab",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58d74c28-6757-45f4-8078-14c7d76a893a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ebe3549-9935-42e0-9700-663bdabcf704"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fe4e976-4a07-48fc-9c77-2e1a4324eaea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "91efe9a6-5596-4f26-8a76-3dbadeba823d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9dde1c8-b99d-4b30-af87-1d0fe6dda954",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cbf61d1-1856-4913-9670-718e727a97da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb625354-a0d2-455e-8c3e-a103e26876e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04a88e2e-dac8-4241-a07f-f421af32cb3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea01ebf9-03be-40a4-a111-3c9f9571490a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "754bce27-b6f2-4b26-b8f0-9697906fece5",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f5b14c6-d5f5-4da9-aad2-4c2ae5d75607",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bc9b56f-d5c4-4dd0-9ccf-66fb31be4c53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d11b7e4-3e8b-4857-a7a1-b347067b0e52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa2f4cd9-8d23-4af9-bb79-ad630ed3ad1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75e868ab-f2c5-4a2f-9764-e30e8af6c45b",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60f936eb-42bd-45b6-ab63-e940eb13f3de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa84e392-2f74-419b-8794-2d0af65240b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "735a7721-6e64-44b1-87c1-0b3fd605d1fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "76369429-a704-4136-a6e7-e4fc04383225"
                        }
                      }
                    ]
                  },
                  {
                    "id": "788fb187-4f94-4d1a-bfa6-e946a9045eb4",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "634c208f-894a-4e07-ad8d-d763687f5051",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fc82267-46f8-4d85-a91c-f0c461e19135"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df161763-53fc-4806-bb6c-0718f27a480e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fcbf3d59-5403-4f33-b20b-6dc6f60419db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8053a837-e2ba-49e1-97f6-2f2a98636aeb",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "223efe8c-2765-4acf-896d-e7c08c104f88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf60cf7d-a1c6-4464-8c21-eb695583fa7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e484888-5d88-4bce-99b3-c51dcd780eb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a553202e-09c5-4e62-9a27-2cfbe68bc84a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5a9e8f95-f582-4beb-9849-cd20d629f662",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bc513e11-8e8d-469c-bcfe-4597e0ca2809",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a73b97f-834b-4d85-871d-32ee63736b46",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "7c7620a0-bd17-43a7-8726-307a736a09dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89a6e62c-e1be-4f4e-997e-3d42cb3a1892",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ef2a668c-e3db-46cc-9568-1defe58ba3b1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "19142c0f-116b-46e8-baef-01c1df6b8c88",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9fa8e7f8-1b94-40cf-9def-aa5320a5f308"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4e73aa95-4d91-4afc-b28d-db786edd86a3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c532a82d-8066-4765-b775-a1ed6c052bb7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "514eea71-6878-4358-92b0-04b00ad57f2d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b5f22412-9bb5-4daf-a33a-3c41cbbc253c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2f6ffc0d-9c76-422a-b107-5da60347bd50",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bf62b034-8352-4576-8544-d8022181a4f9"
            }
          }
        ]
      },
      {
        "id": "df3aa626-b87b-4ab6-9a19-5a929368f899",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "aa780083-5118-4e09-8a9a-9bc3c5859960",
            "name": "Negative Testing",
            "item": [
              {
                "id": "903f6c7e-9dd1-4136-b127-f5e9a1ed014c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e2c22961-996f-491f-ba54-29fd0bf31ff0",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3621b8fb-28d1-40b7-b103-86a61dd8b94c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1f841bb-9efb-4c67-96cf-6e1bbf626ff1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "829bfe10-8be8-4017-a374-2e31747d8d4e",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "280cb6ea-648e-4be3-85e1-c509a5eca4a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72547668-7f28-41bf-bb66-167a9d074bbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bc3b797-1b4e-49e7-8974-54ac59b6d59c",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8ff01a4-a7e0-47d3-b994-57c553e19c13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9584965f-1c38-461b-908e-7077acc9aac4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "979b590e-d0f6-4387-9682-bee81419887a",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e62e6acc-de16-4d76-9d71-45af37130218",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72179830-f807-4fbf-b067-c63bac348ff9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d1c306b-36dc-41be-aff7-159401e09411",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf8c4d86-f8fa-4786-922d-0069a1e53dce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6917e7c8-2ee1-44c3-9e52-dc5ad93591b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4778f75-e148-4601-aaa0-5bc56377e61d",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96eb1d82-65dd-4289-a0e5-5c08fa4a37a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "884b90e4-baba-4653-a09c-405c22742863"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05b9a838-0356-471a-8077-25815df60983",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8ce7c53-d365-4d53-a29c-1cbdcf0e9aec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2339574-4605-4456-b1df-7e2d7bfe81e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3089bed-162c-469b-8ec6-6fa485212609",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2e954a3-7ce4-42a9-a10d-89dca42a3784"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9c1606a-70a8-42b7-9741-0615f11f778c",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61076bf0-d5ac-4ce4-8409-474aaf96e5c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "326c4207-4960-44f4-b50a-bf7255fc05fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aee4c74-b178-48ff-91cd-8fc0adceee7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59da530d-3b2f-4e42-bcb3-1b1717044628"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d48d85d6-4a38-4597-b3c6-c50b15217578",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2980b1b-2703-40d0-a960-930ddb7383ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "faa6427a-f3d5-41c8-adce-04146033b950"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01f3705e-1790-4129-bf75-fb78ef560540",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a4c05c2-9987-44bd-b957-4cfb9ec2f7e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fdaa5c7-b64b-4530-8f09-93f522677643",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb09b939-e799-4fd5-bd8a-b8445922d837",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05bc4f9b-40f7-4147-8f37-4bbae767f786"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1cec2f8-87c8-42a0-8d98-4fc9f7663b73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b8e6a70-711a-4166-a85a-af565dfdbbfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1c07e0d-45b0-41fc-94b9-27f5eb8bfdf2",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "618bfcca-1338-4ce8-85ae-2235d79dddcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "066dda1f-9abd-497c-a3ff-1670bd2dafd3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43de20d0-b520-48bb-aa42-b24f8109725e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fc1c859-5a1f-47f9-a1de-3ea9cc39f4a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7c05326-8e39-4eaa-95fa-a4b2235abb6e",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbc009a8-d293-4cb8-876b-4f699e48b444",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5774d487-6718-43b6-a977-bcb03fe2c033"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2a544e5-6450-43b9-896d-cf2d3257376f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fab1d9c-9a13-43f1-b8da-842f25719158"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dd16677-ed4e-4a1c-9d8e-af83f9ca0e0e",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb1537db-33e6-42fb-8554-73ec24efe070",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "903a8809-3e9c-43a8-a6fa-b4eff1702897"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf42e5e4-9ddd-4bb8-8705-fc990384200b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9e33e04-2557-4dc6-8590-bcc53dcc10df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac13e381-e8fb-4c90-a162-90df0c8fbbfa",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4abe9c2e-f6f6-4872-b5a4-44d4581af49d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13ff1f93-6cb8-4419-841c-a8df9537c9e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57b175a5-f1a8-415a-b712-f3ab9bcf9b72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "749b33c0-5da2-4cd6-bb9f-af721c59ffc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4e234bb-1604-4d01-a3a4-2be26baecab1",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be820cdd-f8ec-436e-9964-debde761a0d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d59f1e4-959d-4244-9919-f40cf9ab1dc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d98e46d8-f937-478c-9945-187dc989c759",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b04958e-564a-4191-958e-9c1d14f63066"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7c38284-1fb8-4654-9fca-89de74f4a4c4",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fc04a08-7ca8-485a-a7dd-b0749b85e86e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19c26237-aa1f-418c-b57b-e534a547e39d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5a2a872-ceff-4491-928d-fe3ddb6f5666",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b463006c-e6b8-4e17-a9e9-0f331ae21b2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eb33263-9d9a-46b0-bc0c-bbd5658bd6a2",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5ced0a9-bab6-4d4b-a641-53cfc56764cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad5331a7-0c37-442e-a0e1-c79fedf5ead9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efc19602-4653-4e3a-aa69-4d37aa4d7f6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf82bc5d-55e9-4374-9314-76aed67c3c0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a443ff0-230b-4026-a351-bfeca54037e0",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19e3b371-d7cf-47fc-8bac-16458443e039",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44233769-6761-4988-b6f3-0b74243b7f68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "348317b9-b382-4501-8b27-8c5a037e7b24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bca48c33-173f-4d72-83dd-f2be054f0c02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78cd1302-f8fd-493a-b7cf-7e9d54a1f392",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c375956-701e-49c9-a367-1098f18c72e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1461ca53-5ba9-4d09-af2a-af162258876a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "912a5385-bb64-48df-84cb-f38d48d3fadf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5db168a7-cbc5-493b-9fc2-4edb099185e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a719661-d3a6-49ba-ae13-b2209c8a1457",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d4df4dd-63b9-4d8a-aee6-97b14bd419a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c335f59a-149b-4170-b109-5f188763f001"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "531fd455-ae27-4142-a756-5b9971831c7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f23b90c-5639-4d1e-b48e-c9e285848390"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e969edf6-8ef8-4b6c-ac3b-880239d45d64",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1abf514-11a5-4f1f-9bb4-cbe2642618ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "076736fc-b087-4586-947c-4f4352cae1c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96ca996d-15d9-43f6-8a71-6dd7f49a1463",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f53f9c1-4000-4027-b9ad-203a07d0fdf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5f0ec6e-e265-490d-8561-0efb01028545",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fae46fc-da54-49e5-b413-5706ae0cd5f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af1995ab-56a9-4cc3-b2ed-2de3fed0aba7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98b69685-494e-41f3-8760-e508587b8d39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61c9e4f9-e27c-4b60-baf2-95539d5b2540"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebca6eac-5ebd-49ce-8015-3f04aaa80db3",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b8f074e-9091-4970-b288-f20e1741403a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6eaf9aae-5d77-4e46-9c65-4e85136c17ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffb05a3e-669a-4906-953d-bea50bf0eefb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47b70899-8850-4130-8692-efa29a385759"
                        }
                      }
                    ]
                  },
                  {
                    "id": "725948c7-e8eb-417b-bbff-66f750049c29",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35e602d0-4e77-4ff8-884a-b223fd73f4d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27e1e35e-4b2f-4264-a3ca-71e3d5f08ae8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "999e3ff6-c253-4093-94cd-fb046ef45a57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9e53484-1782-48f5-a761-4f2a684ef773"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f549a5d6-6b4f-45d5-980c-ed2c1816e500",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a388ce6e-c1ab-495b-b327-85d289f64d9d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31cf66f8-7d72-43bf-a9e2-b35ae4c2549d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61e74556-bf15-4480-83d9-506528331fe6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2c7768f-6dea-4748-a198-d5f1753a06f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6e8c050-ef02-436b-9534-efa83f0a5354",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "177765eb-9de9-4aee-b056-7b8731e3c86c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1aa00fd2-4509-450c-8f9e-e8d4a1c911e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3088c9b1-c347-4c74-acd3-3f55ce9c2f1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f688684-588f-4c8f-9483-301d910313b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae5b6035-3f53-47ca-9b8a-6a713d97816f",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5581e457-09b6-4f16-8a3e-6657c8ab9234",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "110b53c3-31bb-420a-abbc-6dba37c10174"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db222013-744a-4a66-9a43-a62df4e6c430",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d16ca41d-0878-4c77-bb8b-853564805be9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04b373c6-c98a-44f1-ba13-00c1a80820b0",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0258291-5c8e-4322-91d4-acebfc38dc7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b60e4613-1772-4a96-95eb-31bb0dd3f039"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "038581f9-553f-4c51-b15a-7b0100aa3c54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f079f3b4-3a91-4910-b787-e4353ca1047e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf054e46-63e7-429c-a98f-2fb918f9a789",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7a242c3-ee2a-4968-a37b-c6e37eb6b914",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ea52794-a04f-42de-bca1-9b7fd95aba7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e8c0cab-2a5d-4028-8618-f4b791d6f2da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb61c31e-de15-44e9-838b-2c22e003796a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb24c7d4-dcde-4793-8c52-ece65fe84e67",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb8a7fa5-fc58-4494-a605-62a14215a952",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c67bc26-7c5d-425d-9082-3ef442493050"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c881865e-1e9f-4fd0-b391-cb64ac5c5218",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4c62dcd-45e9-4f1f-b263-8eb640cee498"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e426a9a-b630-48ce-b760-a116b07bd3d4",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b387d78-5a7b-4c1d-ac01-09a717648400",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3d01e05-1e17-4151-b3e1-31491e35ad2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f75e7b84-7570-4628-9467-ab06c3b856ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "981753bc-d3ec-4e12-b81e-4008f3894e18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6439217a-561a-4376-8105-054e54d96381",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b42fbd73-16c4-4321-8c16-1df45f0cc2f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e50cea4f-c908-48ff-8602-d70f32c73b4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b50d81ab-807f-450b-9856-d49b0eeea1ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7955e855-5955-4b8d-bc7c-dd5687c51017"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9284dc08-a3d4-4862-8dd6-ef0c0d80a6ce",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce8cc73b-b53d-4614-9ae5-334239463e34",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7bf183f-a191-48ef-8e52-31f194d7f860"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b02e04e2-5adf-4b81-bb36-2ecdba28bd2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f75f8ae-5f45-4e8b-a840-0c4953c7212d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "944f309d-899d-414c-936e-0e8846c4d665",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "063dc5a3-117f-46bd-a0ae-415d6e47b93d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0722c65e-2986-4d0f-b0f8-3bf0254ec7df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33ecebd4-b307-42a3-89f2-d5514e52d8d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4599514d-90fb-4765-a0b1-aad482f2a09a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f395f2cb-d8cf-4977-9432-b168e8a298b6",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54ad4903-7ffe-4f89-bd74-b8aaa1bc0778",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f464074b-acfc-413d-b29d-ac881611983e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "178fbafd-ec40-4bde-af51-42b13cd99911",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50ae3128-0185-4499-baa8-5999d36c10e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a723da3e-eb5c-4bf3-a0a9-3d40a9f82949",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97e4e7ce-0a80-45ab-aa12-10ac5d10e38d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3c80711-219a-4ce0-9a6b-37e4bd752a2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22eab156-c049-48af-b97e-62035b7d1fbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fe06900-174b-4ad6-8fc8-ee697fb09c69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cc5a55f-e162-4309-9aa3-d40a337863d5",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6712b1f-1a17-4571-afea-34e0d4b4c852",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dc25113-1df6-4afe-8ae9-ddc59debe451"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f393fc3f-353d-4569-8973-51d51b705e8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39f89647-8aae-435d-a208-57c0ed716c6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a17bf4e-ff70-414b-9f27-c1d29a203ce3",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac323c6e-5789-4c46-b67a-e054b1038ddc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73e90a06-4f38-4cd3-9486-2e7bb26bda40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c02f990-87ed-4f4a-a089-1cb91ce08091",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e92f5f6f-3f95-482b-b50c-c6d3f20831bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "484967a1-38b8-4e83-931a-4be18905e390",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a14c8a7-9c9b-43d3-9927-8726d4ec3a78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e3a58a9-a60e-47d1-99e4-e731974336a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90ebd8a0-e9c7-4b5b-934b-1743006bfecd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58cdeb32-3da3-461b-a2ef-ef39373c4d2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "316a452b-d18e-451a-92b8-83be953a0cfc",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a70d66c-e342-488e-a53a-66d25d537ed8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fa8e73c-19a8-4e3b-b482-804577b4683c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba8cac20-cf6e-4f20-aed0-94f2c6b30800",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b47195aa-f933-4afb-bb7a-b9233735aa7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80f42549-5bf3-46f4-a172-568c6f2ca6f6",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "728260bf-24c2-4dcc-b2ab-98315fc84a06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27881537-c938-480f-a8be-4e1055c42708"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "000940b2-e07f-45ed-a4c6-71647ccde31e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da10c942-07c2-444a-b123-b0e6cbd0a974"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7aff66f-63e7-4b4b-bacd-d8ee6526250b",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c22f4c1-317f-4dbc-9252-57d04455d43f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b14e9cb6-cc0b-4883-8bee-9afc12866cf5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6264ace-9f55-4269-8b60-9af85bce6fe2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0990c494-02b1-4a83-a666-54b44d248b0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df7b8a31-89c8-480c-9193-43dac3d203bb",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31a8dce5-b9ea-4c93-8a29-c098a5516626",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09a5bf92-cadb-4581-b0bf-71cef389845a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eefc3c69-7459-43c5-a146-a88b754fd745",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7b7a121-53d7-4164-a814-907b9a488051"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac8c2599-ba15-40d5-9d23-490e97730663",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dde88e5-1f3d-455e-a83b-1597d60dac80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c508debe-ca3e-43fa-abba-431da05d45ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4faf595c-c1e2-46d7-bc58-f1162a9cace4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b45f4895-f785-44ef-ba76-c274dbdf97ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0342a571-a21b-46f1-9dba-886b5b5e4873",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dd85f8c-b6d8-4b5c-95f6-05903711f2eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5daf8d15-a59e-45bc-8029-1c2d2a41a634"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34313a1d-6bfb-496e-b849-12b5131f483b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f80ed27-b065-4192-b5a6-70a72a6cc1b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15ce8f06-c50f-48b4-b1ab-0c3f3151d9b2",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "012f40fe-709d-43f6-88ca-92efd182754e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bc1aeb1-37d2-479e-8206-4e1b43cc6dc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba28d20f-7506-4224-9922-2e8c33b727ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f84d9184-a4a4-4208-8a75-78072af59f82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b294dfe-45a5-4b63-8760-5311ac6593b2",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc51a762-b9bc-4374-b5e6-60483df7ca10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "254d2119-c885-4084-9f0f-961a10757cf9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96b6fc57-0988-4274-89e6-27be37a9e523",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33a7c230-f8e6-439e-8426-7ffc594c5b49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1086857-fbda-448d-9942-3e1eab9cc286",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b23fd39-7a5c-44ba-91f6-5a740d5f5ada",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "402b3732-8120-4fbe-8d3a-f2a21c3afea8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d52b7fa-54c1-401b-94bf-f2cd20b3387b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d9750e8-0ad0-4fce-98d8-20173170f397"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3bf9eee-dd94-4d90-b221-94da0089b655",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "071ab563-48c8-42ec-9d78-755b0f6476d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a719d80-7969-4323-90d3-7f7bf9a5fe5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d40a41ef-68a0-4dca-bfd6-d5f413f494ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dcd181b-9bfb-45ec-aa89-22d90f164c48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aee73478-0999-41c1-b9ea-f594dfbeda94",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "071b8591-a9a8-4c57-9d54-2ff83eb68e2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62361ac8-453c-4545-99a9-490463be44f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "880ea679-08a7-4894-9467-4ecbb192f37e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac5de4b4-07d5-48d4-b815-6dd771821cf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bdbd7ee-6e7c-4675-b40e-f0c718165f32",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a5a9388-d8d5-4c92-b06f-6149c376d7ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2eb4151-dd7f-4b32-9bd6-904e104a22b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d47ec0e-d826-4e76-aa75-00471a4b810a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14567895-67e0-469c-a0cd-f1cb8f09b4c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7669b77e-79cb-40af-ad68-f2471f9c3c07",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d53443c-4e48-4c6c-b7da-e8fc6ae99981",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94c1bf83-8f37-466f-af2c-042cdd2b233f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "263bebbe-5c1f-4826-9f53-5c7eef8ef2ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "646dbe60-c900-435b-b7d9-8accc3c3fc12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0309210b-6294-4696-9576-e65b508dcf15",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "607cc95f-c360-4e46-a12c-026ca51196ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac5b3214-9a40-412f-8017-6f912dcb4c6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5800cb0-c0ba-4b5a-b5b4-c126af8c7127",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6114b71c-e00f-41f3-a872-fb638890e6b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a1d373e-c01b-4fa5-992f-c58520419476",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9edb592-a85a-4e64-940a-6d6250d8f1a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f06479f-0e7a-45c2-9aff-ffb1baf33bf2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52c680ad-1b31-4b9e-b9df-54860977fe53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e0f1ad7-24a4-4a0c-be4f-d402b9744eb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c5af7a7-a940-4b16-a385-d90b21be5766",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4be5b02d-4cb2-48e8-8939-07ecef875d0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c0bac1e-f1c1-4399-a235-b3fe36584f7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f663de7-320a-4b4e-8f3e-3144cfe63a53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c8158cf-751f-487e-b0b6-690fc0aa8041"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f0c9d5e-b83f-4ee4-b6b2-8283ab4cc9d6",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d5b3aef-57a4-4cd2-b087-0d9b9dee047e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee576565-ec55-46e1-80ba-2597151f6157"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "971f82af-dd35-4066-9c33-299b8e24c174",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "624b0feb-e2d5-43cc-a554-2e08d5404627"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e39d035c-11c2-471b-a4c1-5e2983fd301e",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fa91d83-f2f4-414d-8c6f-a042940d725c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b908664-42ba-4334-a65a-b55244a65371"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "101825e6-43f0-4e3d-b212-23d582cdc853",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3de55c20-d78e-400e-8a3a-11f0015e6539"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48dc43f8-d7dd-462f-8568-b7ede323aaaa",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5963f58c-71c1-42a0-89af-d534cd1f469a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a5a313c-e675-41d5-9caf-eb29a866871c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "203a115e-c15a-45c8-b0ce-ae66f55dc5ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2373687-1bb2-48a6-b635-ce5842762685"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b286683-123c-4257-95a4-1fa27040f716",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e67b5b9-d03d-4dfa-a41c-e297041f69d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0dcba4b-04b8-41fd-95d4-644f088d7d57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c046799-d47e-4463-bec1-091a5ea92dc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b668afb0-6d75-4acf-8150-0865c612cf02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8a727e1-f2db-43b4-a59f-727bddc1837d",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dd5a673-1aa1-4a30-9e6b-37e10cea1089",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07dfc985-e7c9-451f-9615-c20e9eca7ecb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d810207-5dbe-4e02-9b4a-0a153b6294d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "619aa4db-06b1-44f6-98f4-ef32eddbcf5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63cbf75c-18aa-4389-89da-af0172bb5908",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43f90c62-3f4f-45ba-873a-d581469a2154",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6be927f5-1b41-435e-80f7-5bb76a430b3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0193de06-0016-4b18-8927-5651e79847f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edcc25ea-61a2-4d6f-bb0b-82aaf7706a83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac7ed485-7f72-4397-84cc-71f46a68c49d",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b691792-3b9a-46c5-bf70-0afbbf4514eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7b6fe24-10a5-466b-b9fe-a7bff7244c07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "525ffb04-1758-41db-bc30-11d77d5c1442",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "130f39db-b3d4-4955-82c7-9da60595c08e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fc7270c-953e-4527-aecf-c3b8f620eda9",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dc9d2aa-7878-4ea4-acd0-60f26a28b00c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e518593a-16f4-4213-925a-3dc3131d8e0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5567d17-1600-42a4-9b48-ad2e4a9fc803",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f895d66f-f94b-430a-8260-16cf6505133c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4aee32d7-41b9-42c2-b3f1-77a36afd966b",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a5e59ec-074d-4b38-9576-2d9d9bcac9a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4bd2cbfe-e8b5-4403-9cdd-7f81dbb3c0ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecf16a8b-d847-419d-a262-754d10dac1a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87c36234-2be1-489b-a95a-3d5ccc1c6e16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e43b446d-595b-4278-bbdb-e538fd25084d",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b11ce529-e77a-4633-b76b-8d5cc9995348",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e14b2ec-bc49-4a68-b45b-e0b762e9f1c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8d1b28e-b937-4e0b-ba2c-d3a4ee6ec49e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "698b4759-2f92-46ea-94b6-c9f1f99f28a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7420e645-e2e4-4113-b129-463affbfc591",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "372f899e-1d37-42cc-b5f8-d5038b748a98",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fcb81a67-333f-4d00-b607-827e6e44dc50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f51eddd-9aa8-4fd6-ac4b-90cd792d9340",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "078fbb3c-be7f-40f0-a3f5-7a50784647b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6351d9f-79cd-4da3-ad2d-07e4a51eb2eb",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1d2a506-3b72-4bd2-85d3-6d0588950a2d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8fb870c2-7164-42a3-bff5-00ec84078791"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0afeb553-1a1f-4569-972e-6e4185b053da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "490f78d6-a5a4-42e0-bfc6-fcbcb643c2c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32aa9bea-1cea-4f9e-87e9-c70971fbaa32",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02404fdb-d04a-4101-9850-13536a8b400e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3269b7a-d332-4490-a49b-412006304a17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8b793df-ca0b-4d82-b2ab-613e649d8286",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3ecae0f-3d48-4ff2-8076-54c732c69cba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b77e78e3-ff1f-4bcc-91f2-3b37f61c77ff",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcb188da-120d-4c14-b15d-fe4bb5f90cb9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f8c2b83-b74d-4228-bbff-e0e164ab76aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "429935de-5bb0-4be8-a8b4-8c2800e162b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "563b3ea0-664d-4ca1-9ef1-b7794e64b8ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b02fbe0-a638-459a-a94f-7a3f2df6a7f9",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca4ff7af-c719-4c21-9056-b35b0f082bd5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca0732ac-510f-49ac-a3b1-55b4d5756fa5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaf4ee95-30de-46e9-9913-18d0926cecc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2db1c6c-d98b-487d-bfd9-22ce72032fb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6fc0e16-2422-4eb5-8bdd-c8835f209991",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54df0804-54d2-43af-bdb7-1de1f303a565",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe61d873-8e75-4bd8-aa39-8eae00e24feb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2712d2ef-ca08-4bc4-b5dc-75812f390528",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13961dfe-6bc2-44cd-942b-44d3c5bc6c75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bba85b1-7181-4286-b877-8eabe60520ed",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40474141-ac0a-4b69-9405-de5a101cd922",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e28425fa-5150-41a3-92dc-90d85fcba3cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48fb951e-c473-4377-9e52-61d5c49d532b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ff703a5-761d-403c-959d-66acb526cf18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdd64352-f988-4a57-bc68-df284c63d1af",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb4351ac-dd93-4e92-abc5-41bec2434260",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf7ddcab-60c0-4f01-a546-d0c1709f3b82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6b852c3-3c48-450f-b679-bc2e620194eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de466c39-1fe2-4573-a317-e0ae7e047887"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f23abf9-7815-4c20-9474-4b30df3d5b83",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d7f855f-8338-4bf1-bdcb-7f2fb13a865e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8716665-4094-4d6d-99d0-f1196b414559"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52e3a46a-448c-4cac-bb41-deef40e7e781",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3124867a-6786-49bc-b89d-9e1c686d8024"
                        }
                      }
                    ]
                  },
                  {
                    "id": "493d96e5-d8d9-4fdd-9457-8cc028cc1327",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e3a2982-2699-475b-829d-e3f631ab82db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4819bd03-ea6e-4485-b8c8-ee663f9f19b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "032a999d-a951-4836-bbba-c9197b1cacbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0447cc7f-fe1f-4c47-b6ee-87776a0597fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c46e5f36-5ec3-4888-b6d7-c311ed6e2105",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a119ce7-777b-44df-8dbc-ef2781abf9b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f29e87f5-c8f4-431b-9f53-5f060010f16e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82108311-5f0b-4eb6-bf91-2b620e496c8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0d63cb2-dfa8-4433-8efb-3d05608e4b66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e10ba37-d998-4756-bd40-33b16ce561e5",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b045553a-6162-4c0e-88da-77974306a5e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90bc4e60-b3d2-4de7-8f76-b4773be5baf9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c18eb3d-6cc4-42c0-8dbc-e3fdf9db3d81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a4248a9-18ef-44cd-b738-0bf71242b32b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c049a4c-ff24-4f0c-8ec1-c2b2068b99d7",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b468288-1076-4bb9-a623-80dfb34a22de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "570158ef-c202-4613-9c50-836a9ff6635a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c90f3ca0-bb07-45cd-96b1-9d5d4d1a3e6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5f4283d-9f61-4132-bb8d-cf23600b4b84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "115060f9-a733-4119-8609-a38078cd2516",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d960d73-6edc-4ec1-b9e7-49fe1f71acd4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1cc0b64-2747-4761-8a92-7c48476648b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "267dfe02-8948-4084-b981-80d2a9f6cbe8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "094b3bf0-b9ca-4da7-ae81-9052448fca1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c945457f-b805-4f81-aad3-a33c76b5f2d4",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6604b95-ac05-44bc-a106-ea9b6e41eb10",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b892168-6448-4172-8ba2-e65c593ac2e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9197a434-c06e-4a21-8c54-d9f6427cf048",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a63bba17-f113-4555-a98a-57289b7c7c3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f924ad3a-1d1d-4f1f-8109-1884b0f045b1",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9abd344d-cad9-4982-88be-ee0d1df612ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1fc2b33a-fa41-4c45-aa79-c279baea7a41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67c19c5f-b407-47b3-9e78-dac3aeb6b479",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0712b7ae-8266-490f-b0cb-5f6656115c47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ce5aac2-8080-4f21-9cd9-daddcc1b11de",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aec0e0b6-ed00-459b-a3dd-78549ce75500",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b80c7746-f395-4d01-808e-574144c098c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0db34cde-bb54-4f76-8fa9-b1b0251219ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36c55a9b-faaa-4980-ae67-aee27e4866c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b9fea36-74d7-4656-97a5-2a886b38946f",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f78040c8-2bbb-4e70-ad87-3c091c172afc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a35ce78b-5bde-44f0-bad9-71a56a1dd0e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8ea3218-6ea6-4d17-ab44-cc5273f86968",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90bac06a-1e9e-465b-993d-63a92cce1606"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aedaabe6-16ae-4066-96da-b4a020448720",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b93f3f6-ae60-47ed-9441-a675d75d000c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1edd9a8c-1320-4d70-9dda-c0262f597538"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf8f625f-8e39-4668-9377-bc4d7f07716e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71460871-6812-4dee-a034-e1897ae74c38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d554d1fa-c256-4296-addb-fffcd1f11d32",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2ad7d3d-7200-46a2-8f1c-d72800853842",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "423fb060-f965-421d-a2f1-f58f8cb21227"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed6c8d5b-8571-4279-801e-6ec26c833b21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2a083ae-ed67-42aa-9577-1a45cf5e8a70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81d06c4c-d822-41ed-ba53-f0d690c25295",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13469af0-8241-48bf-bdfd-4dcc0772bf79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28601bd9-c434-46e9-91fa-7f5cfaa78647"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2e8e0cb-bf01-43e3-bf14-54d3fa7d5ff5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f30ad48-16f8-4cba-b5fd-c0ae3d088aaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e1feba8-1dc1-4ebf-a75e-a96679ee93ff",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dc735c1-f140-41b8-9acc-45b9fe42389a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3fa5ffed-6a84-4b34-b3a1-a00d38671a43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "740a4190-db89-4ad1-9583-5d65e1ecf9b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5438fba1-e3ec-4ad4-93a8-5bc89bad9911"
                        }
                      }
                    ]
                  },
                  {
                    "id": "797c4ff5-66ca-49c6-a7b5-43681417e3c1",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd47a3c4-ab23-4d6a-bd0a-3c165fa1663a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "edeaedf9-2023-4e0a-98b4-4aebbe25dd28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14827e28-9dd3-4fec-a56b-e4dc84a95ea3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4bba978-8cfc-4acb-a9a1-9628e3beb88c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e9ab6bb-b11c-434d-ab7d-0d411fa41d4c",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec81d3f4-0c44-4f11-a32c-3a80e1657165",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2d65c02-8248-4486-a11a-3c1500f3f6da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33de9a21-17ac-4250-ae85-48b6e495f8a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a3797a6-6c29-41c9-9a28-38356df18bfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d746130-7ffc-4e94-97cd-26d641dc86db",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b074b4f4-5e60-4c2d-b7cf-26f5f3d0f061",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38bd5cfe-1774-4e1d-98a7-d9161813472b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63b36930-ab6a-4931-8434-bc5938498e19",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ca4e608-9758-4831-bd87-7db06cade8c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "566b150f-a6f6-4a14-9ce1-515cef1065bf",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1008dfb-0696-4c91-9875-6cff8f2f6738",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a22d15e0-6eb3-45c5-af4a-5f3c43504278"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4af88d57-7dc3-457c-84bc-2f17af10d26c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c8359f3-350a-4fc2-83b1-82e171a3c5fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3d8038e-50ae-4e7f-862c-68f04fb1d485",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "171bb025-d705-488d-8a88-5fd8fccf656a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ae66dbb-d6fc-4d27-90e2-e34833f6a5bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df65c3e1-f599-4a94-9ed2-8c839c7db440",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5dc03e1-7ae1-443e-88c5-45f39a009e3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dc316b5-a985-4577-8605-f96548c8e2c0",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17d2b2a8-b4b2-4d66-82e2-108014a6a1e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01cc6ff7-3b52-4007-94e1-f16492f07236"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44d92ae8-b0cc-4c6a-b07a-b061d89c606a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60d0e99e-5883-485f-b961-1a9173f08904"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33b3e75f-f31c-401f-ac5b-83f2c6364f87",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "129aeb97-7ee7-497f-b0d9-031ca85424a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5eb59fa1-f52d-4800-9609-0507316fa3c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfb24746-984f-4cdd-8ec7-31221bb17203",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4252925-107c-4b37-bdf7-d2df52dad56c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca048a2d-ce0f-497a-8b32-1362747a4491",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bfc5d88-4050-4571-8aac-70b42c396474",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf2cb31f-cbbd-4548-9f10-a89c7002ec64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aee2bc41-c9ff-4042-80aa-fbed0cf30900",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d8d8b2f-a28d-4d09-9dd8-0dd57f35bb03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "374d489f-ddc6-40c5-a982-9744f8b6f4b2",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e6dbd83-d059-4688-9279-7b09cf1c044a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "518ec253-153b-4a15-a1c8-d7ecff61ef18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a761652-e689-414b-921d-59e92a4148a7",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62e9def8-c457-48ec-9fdc-cca0562b9dfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42560234-1820-47f5-b0bd-a3f1de61d47c",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e264b0d-4d09-4dc7-89d3-92cd1873e6fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c14d1a13-687b-42c7-9458-6817eab07947"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0222692f-8d37-41e6-bb9c-0878b4ef0c61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a2d3636-3a3d-419c-8bea-8c9757b9f3e4"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e9eaf418-0506-44e6-9853-38b4da46202b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "10090bdb-2f63-4447-979a-269b83e9f189"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7487eec9-52d0-42db-8320-b133f7b3f4a2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "70e3c62c-0987-443b-b4e7-850cbd2cf211"
                    }
                  }
                ]
              },
              {
                "id": "1377525c-5bbb-43ef-815c-e46394c9e6df",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "022b2f9b-c2ba-41a0-93fd-635a5d1a4a3e",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30be2fa4-f79a-429a-9d50-611c8df27ffe",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "4022fbda-f790-497a-8331-a84959d19df4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cb4547c-a21e-44fc-8bd7-3b199657026e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b8e005ee-b820-4a20-ae0d-b808700f26a1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "729e3680-b010-40e4-b2f8-f7e82c9a02bd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dbb42332-4d7a-4c11-9999-acbd1c218081"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fa1d46f4-0d31-4501-8cff-f70fff9aba02",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "656f075c-8b56-44f8-b488-616f697afd14"
                    }
                  }
                ]
              },
              {
                "id": "a44ab1b7-196a-41a7-94ff-f81a29a72102",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "bf666c42-f6e4-4758-9c1b-d04e821a5861",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84df2b7b-72aa-4b3d-bfa2-3b71a420ef0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "1fef6d46-15c7-4144-8b9d-07753d559807"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10e90c03-ed89-450f-9abb-898c2d040c4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9121f2ec-96d1-43dd-b60f-db2fda24c4cf"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "73c55f55-09a2-46d3-9dfd-8c3fc806122f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "39a5cd67-b408-4066-b9ae-09dc00fd5982",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0131fa77-4c7f-47d6-9fef-e3d2f977847a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "38f0f1bb-ff79-4ee2-8ed6-c01913286b24"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f1f77d14-cb9b-41a0-b26e-fc4f2d6199bc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a8bfa41c-e816-4f88-ab26-af57a16fca95"
                    }
                  }
                ]
              },
              {
                "id": "ce215dfb-c5f5-4170-a225-df14492491c8",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8c3d2b35-6575-484f-8fd4-288f57205dcb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "96491248-516d-45b9-a9bd-ed5d6141498b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "188f7554-ef98-4bc5-b08f-ee441ad68b9b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "43a8144b-9c49-4dbc-b723-41251b7937c4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e2be9cc2-894d-443a-91cf-233a3509188d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "4e888eb5-b7eb-4f60-8b7c-c8dd55cccfb7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "adc44556-5eea-46d8-b868-74c2b44045d3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ee6500b5-314c-4e21-8a1b-72bc758e3c90"
            }
          }
        ]
      },
      {
        "id": "f0a151b9-a9d1-4529-bc72-f0106251433b",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "3c2b1d55-bcf4-4355-b914-bcddd3787b84",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e874ffb1-6eff-4cae-8c2c-55dc2b62d0b6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8489a759-d12d-47d4-b5c8-fd20058c9df2",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd98bf13-f3ee-486d-93d0-bad095a6aa96",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ba4b56d8-763a-4cbc-9827-d2539c620afd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc38344c-1725-47bf-8da7-a0673b1e9c1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0cc15990-5c2b-4b20-8c9f-15ace0ba6693"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bf41f023-60dc-4bd0-adb7-443d2551c91f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d3bed554-f720-4bd7-982b-68d47bb3b5d3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7fcef6da-a599-4528-8b25-47e00e5f840f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a9eb464b-9b94-4c75-8b34-0e1b129657a2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "72b1b5ae-baba-466d-b27b-368886c829ef",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "c2df3781-fca8-4477-8949-a6cc861b780b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "75b0d280-4c87-4152-815c-3be62daa87d9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d490fd16-7b01-43f6-83cb-eb407f48df84"
            }
          }
        ]
      },
      {
        "id": "d60e7880-2453-4a48-8238-d41983d621a8",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "4f57bb96-d2e0-49a1-96bc-d85bf0f5d901",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1ba28d82-32ed-4cca-8f25-e8b586bd6b47",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c927ba0f-ea54-49ab-a03f-011b58971d66",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bce0a61-da18-4799-ac02-08dc253cce0d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4ae12415-3b68-4678-b7c2-5fa45814acd3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec461e32-7691-49cc-890b-ed3a8da5ded8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2b2201a6-45d2-43c2-be19-8233a841a50f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c0ff7cb3-9f8a-4e04-98f9-808091448f89",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fd839e64-d156-4723-b23a-1bba5dc43321"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b48f9371-748a-4368-bf31-a606595a627a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4080a18b-3327-461b-84c9-5e827d86116a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3c89a60b-1ab6-4481-8150-5a9aede12d20",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "1674c294-4902-4e3c-84cd-3d67d4ebabd6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2a5d4284-3a48-429f-a249-adeed4352720",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4ed8fec5-ef47-4a1d-8d09-de54f511769d"
            }
          }
        ]
      },
      {
        "id": "f4aa6a49-2a79-43c1-9c48-32ee7e9a1edb",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "20ae99ce-d15a-4b0f-a14c-ff29a9e58974",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2faf9035-4b9a-4d75-a58e-9a0c4ec2612b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d5e21308-b1ac-4923-8c63-e4a3f306e798",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d919b28-9f3b-4cc5-b99f-8144562d7bc0",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1d641680-dc2a-4dca-831c-9f8366e1a1c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d77a13c6-2f84-42e7-9aae-c78bbc31ab76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "086d93f2-becf-410a-981d-32157c0b89dd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6e5cd06d-dc7a-4d7b-b405-83286439143a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bc5431d3-ebb8-46d9-b322-76c06951d7ce"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "175a6f11-5dc9-473e-9aef-5784de022bad",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4db03258-8800-4528-bf87-d5c505e3c886"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e6eb102a-729c-4e2b-af74-dd7cf50ea25f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d95f07e1-b9e6-49c2-a9bb-809380b03b35"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dabfe66d-3fc7-45dc-a0b4-df79f0d4a42c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8f1253ac-1090-46d7-ae51-d4eccf5623b6"
            }
          }
        ]
      },
      {
        "id": "8cf70f0a-aca0-4f75-9f18-68f943f7a298",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8dcf1dbb-03c0-427e-8697-f238950ea8d8",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6c15c34d-7df4-4732-ac9e-7aa4f7c5606a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "2fa39718-b117-4b29-8c7e-61fe1d97410f",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e28daadd-997e-4c00-9bea-9296d678495f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "67e8f363-2ebb-4538-994d-c9409087eedb",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 264
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 57.992063492063494,
      "responseMin": 6,
      "responseMax": 699,
      "responseSd": 79.99573361954559,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1727916309458,
      "completed": 1727916332689
    },
    "executions": [
      {
        "id": "5a4b331a-8d0e-4931-a30b-9932b407f220",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "37de0c7c-9e40-4cc8-9394-e2ed735744db",
          "httpRequestId": "039eb083-aa85-4a41-ad48-c15b18be3da8"
        },
        "item": {
          "id": "5a4b331a-8d0e-4931-a30b-9932b407f220",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "f1dd81e2-a1c0-4d2b-8bfe-c5582b9c73b3",
          "status": "OK",
          "code": 200,
          "responseTime": 61,
          "responseSize": 0
        }
      },
      {
        "id": "ccba5ac6-9d74-4631-8a8a-9a48560abe52",
        "cursor": {
          "ref": "a1acef73-ea81-4156-9015-ba4e31bba249",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "35f798c1-5c82-4bf6-b864-9f503ce112bb"
        },
        "item": {
          "id": "ccba5ac6-9d74-4631-8a8a-9a48560abe52",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "d1370917-6063-482a-b69a-4cd8591c2d53",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "9c5961c3-f191-4072-a4cd-3561ffa01cce",
        "cursor": {
          "ref": "ba4ea139-304a-4691-b54e-0cbcf68bfd58",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "8cc46904-1aa7-482a-9501-ada5567bf50d"
        },
        "item": {
          "id": "9c5961c3-f191-4072-a4cd-3561ffa01cce",
          "name": "did_json"
        },
        "response": {
          "id": "6ec8ebfb-153f-4887-b20b-d525739f0e11",
          "status": "OK",
          "code": 200,
          "responseTime": 202,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed02cf74-51c3-4877-bb14-ee57afb52507",
        "cursor": {
          "ref": "3b54904e-a11b-4965-9d78-b0f09da4aab1",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "2c7829d8-2e18-4ccd-93e0-788126dc5dda"
        },
        "item": {
          "id": "ed02cf74-51c3-4877-bb14-ee57afb52507",
          "name": "did:invalid"
        },
        "response": {
          "id": "f1a51bfd-a60e-4543-8d77-863ecf0927ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 452,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed02cf74-51c3-4877-bb14-ee57afb52507",
        "cursor": {
          "ref": "3b54904e-a11b-4965-9d78-b0f09da4aab1",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "2c7829d8-2e18-4ccd-93e0-788126dc5dda"
        },
        "item": {
          "id": "ed02cf74-51c3-4877-bb14-ee57afb52507",
          "name": "did:invalid"
        },
        "response": {
          "id": "f1a51bfd-a60e-4543-8d77-863ecf0927ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 452,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60ba8835-cb37-4569-86c5-7860fc8d77fd",
        "cursor": {
          "ref": "6212efac-26b0-4086-8f20-82f92e6fa4be",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "f8d0d244-fcb6-47b9-bc97-fd06bfacac74"
        },
        "item": {
          "id": "60ba8835-cb37-4569-86c5-7860fc8d77fd",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "f3faf56c-2bce-4853-9135-3ae0c05ad041",
          "status": "Not Found",
          "code": 404,
          "responseTime": 98,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ba944e2-d539-490c-b4cc-8f196cef7b47",
        "cursor": {
          "ref": "66ff310b-4c21-432d-817d-0264f056c765",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "58798240-389d-4808-a36d-4706fc22e706"
        },
        "item": {
          "id": "9ba944e2-d539-490c-b4cc-8f196cef7b47",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "25564e60-71d5-4e4d-bb55-bf0e9fa33c8d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 28,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c815c1b-b309-44d9-9c35-75cfc1cfc3c9",
        "cursor": {
          "ref": "9779172e-6793-4ad4-a652-6fd889a5781d",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "325e121d-96dc-466c-8c4a-ade6223ca15a"
        },
        "item": {
          "id": "0c815c1b-b309-44d9-9c35-75cfc1cfc3c9",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "8406bbc8-1fc1-4c50-9304-281d33870b67",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c330d3e2-fb86-4a3e-85ba-0d264b8cab26",
        "cursor": {
          "ref": "20773265-44cf-4dc0-95f1-de7f83e2b71a",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "6057a2a1-bd9b-4c9f-a6f0-7c7613bba491"
        },
        "item": {
          "id": "c330d3e2-fb86-4a3e-85ba-0d264b8cab26",
          "name": "identifiers"
        },
        "response": {
          "id": "baea3a6f-c190-40d5-aa2e-abcef5b3c505",
          "status": "OK",
          "code": 200,
          "responseTime": 304,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d353677-b004-42f9-875f-751abe3bc588",
        "cursor": {
          "ref": "162362c3-9ead-43b7-ab87-ba0131f3d556",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "801d08d1-d884-4c48-83e0-795335355318"
        },
        "item": {
          "id": "4d353677-b004-42f9-875f-751abe3bc588",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "f1c816e9-3ca7-4d21-b9e5-01c369c2e8b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "623feb62-6f2b-49f3-b5e5-eb7960ffa940",
        "cursor": {
          "ref": "0ab0538f-8ec3-4064-ae11-c2bde62dee9f",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "469ae79f-bcef-453a-99c1-6c817dbac520"
        },
        "item": {
          "id": "623feb62-6f2b-49f3-b5e5-eb7960ffa940",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "4ff867dc-7fdd-45f0-baa4-4b0d32c49aff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "da8dfd4e-c21d-4ff6-ba20-ee7037d23ba4",
        "cursor": {
          "ref": "02da25fd-b13f-4964-98c7-e87f7387cce0",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "cf3ec3ba-b76d-4578-80ae-1f57f18a621a"
        },
        "item": {
          "id": "da8dfd4e-c21d-4ff6-ba20-ee7037d23ba4",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "6dbc4791-205a-45ae-89a1-1ca7d8fa69a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "da634bef-0db6-4470-b498-46912375fd4c",
        "cursor": {
          "ref": "53801ab9-d6c6-444d-b486-3e73b283cab6",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "254338e4-21cc-42a2-b2fd-ba67e58381c7"
        },
        "item": {
          "id": "da634bef-0db6-4470-b498-46912375fd4c",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "7374b72f-aa9f-48c6-b669-85cc4cee6685",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "c2acd81e-b4db-4e8c-88d4-b286d5a8a2e7",
        "cursor": {
          "ref": "ee8becfd-1af9-451e-a09f-4c9f64e6817d",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "fa491b55-1aa1-4cfa-8506-dee60985b8c7"
        },
        "item": {
          "id": "c2acd81e-b4db-4e8c-88d4-b286d5a8a2e7",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "6a738af1-d481-44d5-9ff2-1ffa176e0a35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "edefb39c-83c5-41a0-a5ad-30f3a89c705e",
        "cursor": {
          "ref": "df1bb7ef-6f98-4d2d-8200-2110b22088e4",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "1aff8f3b-2ffd-434e-bb02-786006015e4f"
        },
        "item": {
          "id": "edefb39c-83c5-41a0-a5ad-30f3a89c705e",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "f13a5a5b-54be-486f-9c51-cdc708c7ac68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "03bb5d69-7fa1-4e4d-915a-f1cd76550aae",
        "cursor": {
          "ref": "0821d71c-edfe-412f-b665-a8be82b1da33",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "339e7cda-d8dd-44c9-95c4-d85dfa3ef91f"
        },
        "item": {
          "id": "03bb5d69-7fa1-4e4d-915a-f1cd76550aae",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "df683bd0-26b2-4d90-920b-1a682fa05ea1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "bf5049eb-2106-4c88-8ce5-ca3d63275ac8",
        "cursor": {
          "ref": "2bede50d-c287-4b34-a383-3243a72d53bf",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "b4fb0e1c-8f9a-4c49-9f89-8653f7dba810"
        },
        "item": {
          "id": "bf5049eb-2106-4c88-8ce5-ca3d63275ac8",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "74fe46e2-ac18-45a2-870a-f34eafbe3d06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "e41dba1d-dde2-4839-b68d-b61e0f4638d8",
        "cursor": {
          "ref": "dcd8d60a-bd17-4f4b-a22b-7927a75af8f0",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "8df835e8-7d39-4721-a772-603408c56415"
        },
        "item": {
          "id": "e41dba1d-dde2-4839-b68d-b61e0f4638d8",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "bcbdaae4-6a69-4e2a-b2d6-da57436204f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "90a1cdb4-038f-4ae6-b367-c327155fbc18",
        "cursor": {
          "ref": "e37111f7-4277-4c7a-b07e-af4bbe8bda57",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "86e49ae6-2599-4a57-b3f3-b47d72257cf5"
        },
        "item": {
          "id": "90a1cdb4-038f-4ae6-b367-c327155fbc18",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "4391622d-bc11-46af-897b-94bec2d97830",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "c724d9ca-9284-43ee-a9b7-10ca4503fd67",
        "cursor": {
          "ref": "2eacd73c-254b-4b3b-a015-f3e31fbf828e",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "c589f787-646a-4456-b645-5ebb28737f05"
        },
        "item": {
          "id": "c724d9ca-9284-43ee-a9b7-10ca4503fd67",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "ee3f9dbd-8e75-4edc-8426-87c70170b74b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "e61aa8e3-6531-4c65-a903-d38d86172772",
        "cursor": {
          "ref": "eed5c79c-c957-4757-9a14-a8287ff1ddea",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "6b345dcb-eff9-44df-9f83-69a523275899"
        },
        "item": {
          "id": "e61aa8e3-6531-4c65-a903-d38d86172772",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "ac4fa3f9-b97d-4525-b019-61dcafcecf1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "29e090ce-eadb-4061-8b9b-ae68a06768c3",
        "cursor": {
          "ref": "d3ad6e40-3d9e-4f5e-8c8a-4bab2adc05ff",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "bfb4a869-3f3d-431a-8f9d-905df4a27809"
        },
        "item": {
          "id": "29e090ce-eadb-4061-8b9b-ae68a06768c3",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "6176ef4d-57c5-491a-bb4c-921dcc293b83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "67e45c61-a8b3-4f1f-af5b-797ba7231aa1",
        "cursor": {
          "ref": "101872d5-675a-4a1c-9a82-45e4f03ebe03",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "dd6235a3-0c6f-44cc-814b-d43efe0edd5f"
        },
        "item": {
          "id": "67e45c61-a8b3-4f1f-af5b-797ba7231aa1",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "0b3468e7-ae76-4ee4-a96a-654b93298e2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "61fc718e-c4a6-4604-89f7-0e70e3bc9822",
        "cursor": {
          "ref": "a9dcca9a-be8e-4afc-a342-44ddc0437553",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "2259e5d0-99b2-4221-8ab7-0f8b12150a96"
        },
        "item": {
          "id": "61fc718e-c4a6-4604-89f7-0e70e3bc9822",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "5a7dc4c5-4ff3-4687-b2fb-2ea338f4656a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "ad0551c9-b8d4-4f3d-87bb-0260342dc699",
        "cursor": {
          "ref": "16ae5497-9fc3-4b51-8d55-e1b5b088fd76",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "5a202a83-4cf9-44c5-9349-2a223fa36ed4"
        },
        "item": {
          "id": "ad0551c9-b8d4-4f3d-87bb-0260342dc699",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "a56bba0d-ad57-45b6-801c-58a2bd5dbd0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "2d64aa53-0f22-4d13-a1c5-9fa3b3560190",
        "cursor": {
          "ref": "a9023161-e724-42d3-9e42-fc49bf859c8e",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "c721baad-a261-4a4a-92aa-66b6cdd73831"
        },
        "item": {
          "id": "2d64aa53-0f22-4d13-a1c5-9fa3b3560190",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "1fbce6b9-630d-4131-9f3b-7605e06dc0b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "931536a7-1874-4cbe-af9c-66e8fdcf944d",
        "cursor": {
          "ref": "a1573e46-b6d5-4009-a06a-87a760bc74ad",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "3399055b-43ef-4a09-aa87-d1461b2bfe81"
        },
        "item": {
          "id": "931536a7-1874-4cbe-af9c-66e8fdcf944d",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "15c9c35b-fcf4-4090-b2de-ae4982b05cdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "dea22fcb-cc75-4e77-a0d4-dffb2518bcb4",
        "cursor": {
          "ref": "2b84a7b9-9be1-4f48-a21f-3e24c3536a37",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "4664e920-cfa3-448d-ad4f-779fac9da3f6"
        },
        "item": {
          "id": "dea22fcb-cc75-4e77-a0d4-dffb2518bcb4",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "31cde8d6-07ae-45fa-8c7b-277775e2f4c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "f033d0c7-36e2-4156-8fba-437fe3c30ff6",
        "cursor": {
          "ref": "88b3add0-7a6b-4e16-ba97-34c99974eec0",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "83ec9503-21b6-4331-8eb1-b193cb6b54ec"
        },
        "item": {
          "id": "f033d0c7-36e2-4156-8fba-437fe3c30ff6",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "f01cbef0-336e-4af2-870a-315bfb9aaa83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "8d8aa0a0-d82a-4c6f-8e72-dd64a7c5aea1",
        "cursor": {
          "ref": "0c0a2d86-150a-41b9-b02d-ae9c244b052d",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "99074c0d-4c96-4aff-a6e7-a56122e8fbe6"
        },
        "item": {
          "id": "8d8aa0a0-d82a-4c6f-8e72-dd64a7c5aea1",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "c1b8f547-8c85-43ea-846e-5d423b7bfa53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "e3631a2b-5b57-4c33-955f-226c1838b6f1",
        "cursor": {
          "ref": "4b14b2a4-d093-4257-9c97-e368f2470b50",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "ea870fec-013c-43cd-bb47-cfb7011ae23b"
        },
        "item": {
          "id": "e3631a2b-5b57-4c33-955f-226c1838b6f1",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "91afe052-2081-40b7-86f6-8adb16c2b180",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "feedf8ae-8f19-4a02-a7a7-8bd919719ca8",
        "cursor": {
          "ref": "5748871e-5731-442e-824d-4f70945e6c6f",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "8b3dd992-cf4c-44c4-9120-152a3b18ce04"
        },
        "item": {
          "id": "feedf8ae-8f19-4a02-a7a7-8bd919719ca8",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "a5c701a0-c9b5-4c96-8faf-7519c02cf2a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "eaeaf727-8475-4067-a3a9-64bb6ead85e8",
        "cursor": {
          "ref": "af1ded9e-efcf-4d37-94e1-8a338a3141e2",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "e13639a8-5b67-4e74-9bfe-b8e88dd69716"
        },
        "item": {
          "id": "eaeaf727-8475-4067-a3a9-64bb6ead85e8",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "18abf6ab-c215-460e-b7d8-7107beed634b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "edc2f248-82e5-4295-8f81-f74b3ce98d19",
        "cursor": {
          "ref": "61259505-df80-401a-aaf7-0ff949df4199",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "da07ad70-0625-4b40-9ae9-f5914b23776e"
        },
        "item": {
          "id": "edc2f248-82e5-4295-8f81-f74b3ce98d19",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "e2e5369e-2a6c-4d9a-b9b1-0b56b945c257",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "06f3854f-4212-4b28-8421-56ee22892b35",
        "cursor": {
          "ref": "b8806400-a88c-418b-8ca9-be354296b4b4",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "9595a2e5-d5a3-4d64-b1ea-d517fad19b24"
        },
        "item": {
          "id": "06f3854f-4212-4b28-8421-56ee22892b35",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "7a195d0d-dcde-4c0c-8d39-72bf17bb222d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "d75c9703-817f-4a01-a944-d73fd2c50f95",
        "cursor": {
          "ref": "c49cb6b1-9179-4fc5-bcfa-76b090bb275b",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "e69a9842-0d34-4d2e-91d1-86b8245ddc57"
        },
        "item": {
          "id": "d75c9703-817f-4a01-a944-d73fd2c50f95",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "e9654e75-9cc3-4051-9272-283a53a6bfa5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "cb572444-d0c3-4439-a7ba-32a7170ae1cd",
        "cursor": {
          "ref": "ca8ce4d6-8ba7-4155-a9b3-dc0a7aa3b9ae",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "08f08d5d-8136-4906-811d-927eef04dab7"
        },
        "item": {
          "id": "cb572444-d0c3-4439-a7ba-32a7170ae1cd",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "0b01661d-53f0-4294-a721-e430b43eeb1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "4358c538-f4ff-4e37-b63e-e65da26c2855",
        "cursor": {
          "ref": "f7ff71f6-e4c2-42f2-8a09-7ad4ea753252",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "0f6b64fc-a4cd-4d5b-a4a3-f752187ea0e3"
        },
        "item": {
          "id": "4358c538-f4ff-4e37-b63e-e65da26c2855",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "28a6f4ee-d6fb-4167-9002-d7ffa5a6ee79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "b1c8b0db-04f1-4924-9d72-997b3530f525",
        "cursor": {
          "ref": "1d7601a4-69e6-489f-8c82-41a4021d9634",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "b51c8b68-ddde-424b-b9de-5ce43ede1129"
        },
        "item": {
          "id": "b1c8b0db-04f1-4924-9d72-997b3530f525",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "54a3ca97-867c-4cea-b9d2-c6f00a42691f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 92
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "c4e3f5da-16ae-4e6c-895b-1f1f711afd79",
        "cursor": {
          "ref": "9537891b-a89b-419a-a202-a0de2a07374d",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "3318b2bb-6593-4578-bcb4-8b5b7d7ff9d5"
        },
        "item": {
          "id": "c4e3f5da-16ae-4e6c-895b-1f1f711afd79",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "a148a95d-7103-4af1-ab45-86fd9112d21f",
          "status": "Created",
          "code": 201,
          "responseTime": 699,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "9301d701-5184-4bdb-8ca9-0970578200c0",
        "cursor": {
          "ref": "11d015cf-004d-452b-a45c-e7e479610b79",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "86c5db28-3036-48a0-9506-690303bdeedf"
        },
        "item": {
          "id": "9301d701-5184-4bdb-8ca9-0970578200c0",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "fab0f330-2919-40c5-94dc-4ee2818b1227",
          "status": "Created",
          "code": 201,
          "responseTime": 224,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "3aa17627-a8db-4f06-bc0b-20324dbee497",
        "cursor": {
          "ref": "c42c20f9-d884-40c0-903a-b07ecbe4bbb6",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "0c47b7d9-45c0-439d-82e7-83fe5e00d6eb"
        },
        "item": {
          "id": "3aa17627-a8db-4f06-bc0b-20324dbee497",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "257d0a42-3fa8-4aea-befd-28298866b340",
          "status": "Created",
          "code": 201,
          "responseTime": 226,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "1c764874-a4ee-4319-a0ea-d4d526773323",
        "cursor": {
          "ref": "4bae9c70-ff67-4c81-893f-3ff96c711d9e",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "bc9558eb-2a83-47c5-b977-4a9dbb848a32"
        },
        "item": {
          "id": "1c764874-a4ee-4319-a0ea-d4d526773323",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "113d2b60-74b3-4ccd-8aa6-da642bd4960e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 92
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "3bca5e80-6371-41aa-9855-f202afe2f6bb",
        "cursor": {
          "ref": "d80b6912-4739-49c9-9de4-e338dac8c5dd",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "21eaac04-9586-48d7-9a19-16b1ca9a3b12"
        },
        "item": {
          "id": "3bca5e80-6371-41aa-9855-f202afe2f6bb",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "40e2fc85-be5c-4b3c-adf8-1faf4f159115",
          "status": "Created",
          "code": 201,
          "responseTime": 214,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "6cabcbac-45e2-4a52-b48a-69024e29ec65",
        "cursor": {
          "ref": "012f0914-5933-45ad-9063-f5f2b4cfa8f4",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "232c0dce-5aa5-473e-9d3e-3fa7c756e3e2"
        },
        "item": {
          "id": "6cabcbac-45e2-4a52-b48a-69024e29ec65",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "c5d4f487-b65c-4f09-b0a3-fd57776ed02b",
          "status": "Created",
          "code": 201,
          "responseTime": 250,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "18771292-6fed-4cc0-84d7-cdd3cc2db246",
        "cursor": {
          "ref": "28992ed8-de86-453c-8100-001176fe477d",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "7fd94075-7c4f-46ff-864c-f9bdef859715"
        },
        "item": {
          "id": "18771292-6fed-4cc0-84d7-cdd3cc2db246",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "6775c09c-7ab6-4010-a142-3931a13fb3e1",
          "status": "Created",
          "code": 201,
          "responseTime": 244,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "d8489b51-688b-4bef-bc43-3742ca971d24",
        "cursor": {
          "ref": "777f04e6-7c3f-4c13-adf0-68354f6d2f5d",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "54ccd21e-06cf-4ef9-a4a6-50c29d2f9223"
        },
        "item": {
          "id": "d8489b51-688b-4bef-bc43-3742ca971d24",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "e6e9ce05-0a14-4414-8a18-07e303e80319",
          "status": "Created",
          "code": 201,
          "responseTime": 220,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "094a9f30-d4fa-45a0-9027-1b85edd5e135",
        "cursor": {
          "ref": "7039851b-9503-4f2b-9684-4b35f1a181fd",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "d781a4f8-be9c-48f5-a996-657bbf125980"
        },
        "item": {
          "id": "094a9f30-d4fa-45a0-9027-1b85edd5e135",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "87995896-528b-4179-90f6-2462cbff5a07",
          "status": "Created",
          "code": 201,
          "responseTime": 293,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "1e04f1fe-773f-47a0-8326-9bbb6f67ec0a",
        "cursor": {
          "ref": "0a2227b2-f39f-4c29-8dec-36d6e724af24",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "f1f2b57c-5baa-41da-9510-d5bff28b22b3"
        },
        "item": {
          "id": "1e04f1fe-773f-47a0-8326-9bbb6f67ec0a",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "18c6a297-631f-4fea-8155-39b14e666dd0",
          "status": "Created",
          "code": 201,
          "responseTime": 253,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "23966a50-5d7e-4b78-be31-19931b806a37",
        "cursor": {
          "ref": "0a0c919a-c50b-4d10-ac1c-7e4f4ed141f9",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "47d03a88-0aa6-49f5-8cea-3900ce368026"
        },
        "item": {
          "id": "23966a50-5d7e-4b78-be31-19931b806a37",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "38591079-4d10-4ae6-a0aa-3609630cc323",
          "status": "Created",
          "code": 201,
          "responseTime": 222,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "747734ae-8418-44c0-8c54-392868aff683",
        "cursor": {
          "ref": "dda5146b-8411-430a-88f2-4b3e3f791bb6",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "82dfe415-ed27-4e34-9b9b-4db3eae47608"
        },
        "item": {
          "id": "747734ae-8418-44c0-8c54-392868aff683",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "742f3e81-8ad6-47cb-840b-40869de32877",
          "status": "Created",
          "code": 201,
          "responseTime": 227,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "dd87be5d-6fea-42ec-9f0c-fe7942afae83",
        "cursor": {
          "ref": "f3e578aa-6c9d-42af-9e91-ecd6af601a18",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "3d45de3e-128e-4183-aff0-970c98d8e6e5"
        },
        "item": {
          "id": "dd87be5d-6fea-42ec-9f0c-fe7942afae83",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "53a7f8bc-5dc5-4111-b488-615a07a5356c",
          "status": "Created",
          "code": 201,
          "responseTime": 258,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "b06db889-7a86-4778-b2fd-cbff1aadd4d4",
        "cursor": {
          "ref": "67579be7-edb9-4086-8d86-4129917bf014",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "6079a4e5-155a-4e1a-8aa6-3baaa6a5d255"
        },
        "item": {
          "id": "b06db889-7a86-4778-b2fd-cbff1aadd4d4",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "1668207c-f217-4ff0-983e-baf27ade8aeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "680563da-0363-4ffa-892d-397e4c5dbd9c",
        "cursor": {
          "ref": "fb1842bf-dd44-4f8d-8b23-8994b3da6a00",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "09c17140-cf46-4c3f-9d5f-45b5a8024363"
        },
        "item": {
          "id": "680563da-0363-4ffa-892d-397e4c5dbd9c",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "3a69c3e7-16e6-4929-b9ef-d43a4e28d6a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "910850e9-3051-482b-a99c-ef398ee69ce9",
        "cursor": {
          "ref": "b6c43107-f22c-436f-b339-3eb224b0b8b6",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "aef9f01d-6d01-472c-91b3-7fde31769f25"
        },
        "item": {
          "id": "910850e9-3051-482b-a99c-ef398ee69ce9",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "d00b383c-5beb-408a-b723-9670f735866b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "33a532ee-7951-4a91-babd-3bc722bb9c4a",
        "cursor": {
          "ref": "03220b09-a4ff-48d5-866f-4e85c2639058",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "7d1d0c72-2fde-4027-8843-935604065cc8"
        },
        "item": {
          "id": "33a532ee-7951-4a91-babd-3bc722bb9c4a",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "b57bf032-eeff-4440-a579-2cb8631b684a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "47834dd6-5a99-462e-9bbc-77fb0ecd5080",
        "cursor": {
          "ref": "ff7e4e54-77f1-4daa-8933-8cfcd157789a",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "4704e068-9342-43a0-b9da-6db56b7d2a3d"
        },
        "item": {
          "id": "47834dd6-5a99-462e-9bbc-77fb0ecd5080",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "e98db9a6-1a07-4e91-88a1-7c7fb3b9f840",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "8692fdeb-5c84-4781-8da7-bb710784dd27",
        "cursor": {
          "ref": "e62b38ed-6d22-45da-9e46-ee93638d42d9",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "47f29e9b-f6b9-461b-bb51-fd284eb6e9ac"
        },
        "item": {
          "id": "8692fdeb-5c84-4781-8da7-bb710784dd27",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "f05a4e2e-0b8a-492f-8381-c5232dc82493",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "d2ccc27e-6550-40fd-bb61-7750c2a6e1b2",
        "cursor": {
          "ref": "710ba25e-4907-409e-83e4-96820f61e0f8",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "f170232b-3866-4cac-b99a-1eb7ec77903d"
        },
        "item": {
          "id": "d2ccc27e-6550-40fd-bb61-7750c2a6e1b2",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "04f84815-90af-484f-9f5b-0bf12f251c81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "ee60b4d7-6d9a-4c20-b11a-f309d55faf6b",
        "cursor": {
          "ref": "0ca6112b-8cbe-4f5c-9835-23fd5468f162",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "24c06284-a446-42fa-8fe7-a507895d9c5d"
        },
        "item": {
          "id": "ee60b4d7-6d9a-4c20-b11a-f309d55faf6b",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "451fb5e2-a194-4dc1-a709-27df1baa1498",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "bb74cd77-bf2e-44ac-8dd6-1320b5f5c3b0",
        "cursor": {
          "ref": "f63b44e9-e01a-4844-8a4f-50b899f96ada",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "20de65e3-71b8-4cdc-8e28-1908711ea40f"
        },
        "item": {
          "id": "bb74cd77-bf2e-44ac-8dd6-1320b5f5c3b0",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "1cc083af-b7fa-49fa-8a5b-6c512573af99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 197
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "26930cdc-07d8-436b-8cb7-154aaca158fa",
        "cursor": {
          "ref": "637bba7d-ff21-4d23-9126-a22c3b58b64f",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "a6b695ae-dfdd-4e04-a281-474075bf08a2"
        },
        "item": {
          "id": "26930cdc-07d8-436b-8cb7-154aaca158fa",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "55c97994-9111-423e-b0b1-e7ed8f0b02e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "9cbbfd6b-6676-47d2-9889-b3d1d6f48391",
        "cursor": {
          "ref": "fe9a31e4-b57f-49e1-bb6d-b941c2c537e5",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "72ce7732-426d-49f9-95f2-e5ac8c8f375b"
        },
        "item": {
          "id": "9cbbfd6b-6676-47d2-9889-b3d1d6f48391",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "8439839f-79fb-4660-9754-15687bef5945",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "b2782940-d33e-47d9-89ba-8b699f99580d",
        "cursor": {
          "ref": "dd972fa5-2dc3-4c3a-acd1-bc934d0f3f69",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "d1484cc5-bfe6-4730-a7a0-c1644727a577"
        },
        "item": {
          "id": "b2782940-d33e-47d9-89ba-8b699f99580d",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "0c5b3a4c-5a83-44db-ba14-04ec203a61a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "a5b5b8bf-391f-4776-a793-0cdfcebb503c",
        "cursor": {
          "ref": "7258bbd0-a09f-4df8-905d-de39e52b432e",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "60dd4ce3-f41a-4d4e-985b-c15b6ae84e68"
        },
        "item": {
          "id": "a5b5b8bf-391f-4776-a793-0cdfcebb503c",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "4ec7a727-93a0-4136-b1af-20634543aa91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "660b353d-8a2c-4c63-afcf-05f9be5eeb92",
        "cursor": {
          "ref": "8d480736-07af-44d9-8e11-862143462de5",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "e49867ba-5d93-4a67-b254-28decddcd051"
        },
        "item": {
          "id": "660b353d-8a2c-4c63-afcf-05f9be5eeb92",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "f9175cd9-f0c8-4011-b4a7-40c03a340dea",
          "status": "Created",
          "code": 201,
          "responseTime": 235,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "606d423d-af72-4cf2-b5b5-8b328be4c9d3",
        "cursor": {
          "ref": "974aadb1-aab1-4a56-838a-e9d75eb9e3ab",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "3a032411-4fb9-49bd-b9b3-8d7d40c28835"
        },
        "item": {
          "id": "606d423d-af72-4cf2-b5b5-8b328be4c9d3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "b4538d57-e80e-46a3-908b-2aae39e72c6d",
          "status": "Created",
          "code": 201,
          "responseTime": 232,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "e7c5b157-f1d1-46b4-b0de-725f54058470",
        "cursor": {
          "ref": "ca05b87e-54d4-42c0-b5a8-7805ece743ec",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "2e103d3e-a014-4f2b-b35b-3e73be3b8d96"
        },
        "item": {
          "id": "e7c5b157-f1d1-46b4-b0de-725f54058470",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "e3c2bf2c-e2e4-4429-8aed-33a1051f65f7",
          "status": "Created",
          "code": 201,
          "responseTime": 235,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "ded01692-4514-4022-b899-9d5609987273",
        "cursor": {
          "ref": "a7d1042b-228c-4e15-b5ca-a31e18378f77",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "c891c8c5-a509-4110-950c-5dacda29bf0c"
        },
        "item": {
          "id": "ded01692-4514-4022-b899-9d5609987273",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "acf5d3fd-04f1-4610-86af-97e981f2030c",
          "status": "Created",
          "code": 201,
          "responseTime": 229,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "75dd0a6d-99fb-405e-bfa3-925dd2eed33e",
        "cursor": {
          "ref": "2e783d54-8682-42ae-b645-874d770afa00",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "1440ef48-57dc-48a6-b57f-13f38603335c"
        },
        "item": {
          "id": "75dd0a6d-99fb-405e-bfa3-925dd2eed33e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "806981de-5273-4cba-bebe-9c1ba351f2dd",
          "status": "Created",
          "code": 201,
          "responseTime": 246,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "2282693a-7796-479e-bd3c-5de6ca8662de",
        "cursor": {
          "ref": "242ec645-67cf-406e-9782-5c254d50bf4e",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "357a9707-fd9b-4f7f-8666-a1641ed400e4"
        },
        "item": {
          "id": "2282693a-7796-479e-bd3c-5de6ca8662de",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "1a1db8ff-0f56-4576-a3b3-5ab14a054d76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "7a0b7489-1b67-4e3c-8b2c-970a51562911",
        "cursor": {
          "ref": "658512e7-ff06-4c41-932f-d39a1fc1cf02",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "9d43b233-37aa-4e02-9499-5ca12d4b397e"
        },
        "item": {
          "id": "7a0b7489-1b67-4e3c-8b2c-970a51562911",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "6512a31b-75f9-4604-9ef7-d04f5599bff6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 80
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "45e8dca3-0231-4176-947c-cc15087ff746",
        "cursor": {
          "ref": "d0ef7d07-3bdc-4d49-8fac-1a1070ee1886",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "6899de1c-2de7-47b2-9070-8860769a4b89"
        },
        "item": {
          "id": "45e8dca3-0231-4176-947c-cc15087ff746",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "ef1eae14-a6fa-4a5f-aa1d-f37c17c442ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "27844e41-6699-4afa-894c-489005d0824d",
        "cursor": {
          "ref": "4ea5fc7d-c93a-4498-9fcd-5aadb3f1c565",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "c59713b4-c3db-4dab-827c-1b6b2fbcb860"
        },
        "item": {
          "id": "27844e41-6699-4afa-894c-489005d0824d",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "499e9af1-da73-4cbd-bca8-54a2201acec4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "4cade151-f052-4d9d-bc6d-f71ae8044619",
        "cursor": {
          "ref": "c58d181f-c381-443c-afbb-b3df44768243",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "7ce6ca02-a830-4c21-8400-7c2db60875e6"
        },
        "item": {
          "id": "4cade151-f052-4d9d-bc6d-f71ae8044619",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "0e191d84-ea0d-4eb3-82ac-54a80e9359ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "e1ad3aa2-9a62-4a5f-b997-c3f5c28bcad6",
        "cursor": {
          "ref": "cbf6076d-8732-44a4-81f3-39dffe730589",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "494bdf3b-8dfc-46ac-a71d-d61bae1849f5"
        },
        "item": {
          "id": "e1ad3aa2-9a62-4a5f-b997-c3f5c28bcad6",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "869636b0-9ad5-40a8-92cb-48dd964887b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "f2ebf653-2aa0-42bf-ad1a-eb7d8f7167d0",
        "cursor": {
          "ref": "796c4692-51ff-44a1-8484-fb37e9ef394d",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "5a9b0d1b-86e2-42e9-bbdc-322a438d416f"
        },
        "item": {
          "id": "f2ebf653-2aa0-42bf-ad1a-eb7d8f7167d0",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "bc8128b1-6e40-4b6d-9c99-90247fa009c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 270
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "8ae67ce0-1ddd-45f1-beeb-afe234d17546",
        "cursor": {
          "ref": "190ab352-5352-4d3a-8047-5e0d0102374e",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "c29670c5-28f6-4478-a59b-8798b3d45312"
        },
        "item": {
          "id": "8ae67ce0-1ddd-45f1-beeb-afe234d17546",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "6161daec-971c-4e36-b3a1-02e13fbf6d2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "e7de197e-6048-4905-acdd-114ac8cb1804",
        "cursor": {
          "ref": "cdbbbf5d-1d4a-4fee-b073-2fd65f375a83",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "17245503-7060-4fb1-927e-6798687c3ba5"
        },
        "item": {
          "id": "e7de197e-6048-4905-acdd-114ac8cb1804",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "b5dd58ce-d5fd-444b-89ed-e49c211857cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "93e13171-9337-4aa6-b529-0204e1111853",
        "cursor": {
          "ref": "2325f2bc-5b52-4f80-a212-68ffd195986a",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "da7ab692-ac13-49e7-8c84-1ef364f5e5b9"
        },
        "item": {
          "id": "93e13171-9337-4aa6-b529-0204e1111853",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "84234cef-de25-4e9c-b36e-488f579fb20f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "bcea82ec-1f6d-4168-9016-8399aa1bf187",
        "cursor": {
          "ref": "e7315b4e-5aa3-4ae2-9c1a-271c0803de52",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "931aa18e-78a4-4eb3-b58c-57a218ed0111"
        },
        "item": {
          "id": "bcea82ec-1f6d-4168-9016-8399aa1bf187",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "13e29353-de6b-4d9f-b204-1050a8d4d0b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 270
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "35c96772-6346-4604-b090-6958203901f5",
        "cursor": {
          "ref": "606d0b95-7b91-4da0-b359-719a287cf6ef",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "6a644320-4618-4e63-bafa-d6e0ae8e693c"
        },
        "item": {
          "id": "35c96772-6346-4604-b090-6958203901f5",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "4a967a98-208c-4b50-8b64-25d2e4bdd640",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "65c7bae8-fb7f-4459-95c7-982442e7d1f9",
        "cursor": {
          "ref": "40f912c2-acd6-4488-9b29-933df7048ce0",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "9d757aa7-a3ee-4037-9938-66f09658f591"
        },
        "item": {
          "id": "65c7bae8-fb7f-4459-95c7-982442e7d1f9",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "15500b40-0f9c-415a-817a-eaa4080e0a28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "19472519-5deb-4f43-a35b-319ccd55104c",
        "cursor": {
          "ref": "29843206-343b-4571-ac9a-c3a085e9f62b",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "2c41e797-b94e-4193-85c6-1312f4d230ac"
        },
        "item": {
          "id": "19472519-5deb-4f43-a35b-319ccd55104c",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "619765f5-2eaf-4973-abde-fb308f1413d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "e6243362-18d7-4a78-96e7-4a591e08a23e",
        "cursor": {
          "ref": "a1e3e4f8-46ec-4763-a260-e0e28a7983a9",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "1869213e-c785-44fb-95dc-ed22a74c4bc1"
        },
        "item": {
          "id": "e6243362-18d7-4a78-96e7-4a591e08a23e",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "65305838-3512-4ea5-baca-bdd5ae3eb402",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "df4cd49b-10ff-4141-9a3d-675430431a4b",
        "cursor": {
          "ref": "bb3828d3-4fdd-4e55-b472-b4a29e33ab34",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "03cf9b25-3e0b-404d-b766-29658630951f"
        },
        "item": {
          "id": "df4cd49b-10ff-4141-9a3d-675430431a4b",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "0b84b0ac-a033-4af1-81c7-4586eb6c60a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "3ee45627-1133-402a-988e-c4081e39cbda",
        "cursor": {
          "ref": "da6ca187-94bb-4a9f-8aed-3f02cf7758e6",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "f4bf36f3-fec4-4784-8224-562fba8d5217"
        },
        "item": {
          "id": "3ee45627-1133-402a-988e-c4081e39cbda",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "42033e8f-c991-4991-b934-811c1a8e6cc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "b2587ddb-209a-4e7f-b9f4-a955490183a9",
        "cursor": {
          "ref": "835b656b-8d24-49d1-bf20-70398a69a017",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "5a02e3e3-41fb-4902-9f4a-4addfc229eb8"
        },
        "item": {
          "id": "b2587ddb-209a-4e7f-b9f4-a955490183a9",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "8f8a52a1-a01e-4c98-9259-d2bc3b6d913f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "192062f4-7842-4a20-8315-b2da3a96875b",
        "cursor": {
          "ref": "3be44d32-a0db-4de4-a620-8a5b2573b454",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "5b6ca065-327b-4874-af29-14c3ff4a57ac"
        },
        "item": {
          "id": "192062f4-7842-4a20-8315-b2da3a96875b",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "5de1f8ee-756b-4f57-923a-5b112df7d4da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "e9181c68-0ddf-4240-9f37-acf6550d7076",
        "cursor": {
          "ref": "06a0a88a-01be-4b6f-b196-276f1112e797",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "3e24260d-fba5-4c8d-825e-d09d1f03f420"
        },
        "item": {
          "id": "e9181c68-0ddf-4240-9f37-acf6550d7076",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "0b645171-8eb0-470b-9248-cdd12bc38bb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 143
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "b480f1de-c5ee-46fd-8e53-f450a5f8b119",
        "cursor": {
          "ref": "00c9b167-dc6f-470b-8b7b-370be366365a",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "1c3b57b9-fc45-437f-8c4f-2ec1cb1ece74"
        },
        "item": {
          "id": "b480f1de-c5ee-46fd-8e53-f450a5f8b119",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "51f3deeb-2a03-4190-ae8e-b37f4fea2839",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "7b164b49-046b-4048-a738-326d4c0ebdeb",
        "cursor": {
          "ref": "ae75aad6-341f-4251-824c-8d1be34a7706",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "04a56e10-b7af-4b46-9c5a-e713506f176e"
        },
        "item": {
          "id": "7b164b49-046b-4048-a738-326d4c0ebdeb",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "4b447027-f5bd-4e87-b981-a4f733b4f01f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "1b076119-6746-4f41-ba62-515109f1f216",
        "cursor": {
          "ref": "11df7b43-2442-4765-b00f-8b4f14ca479e",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "959862a0-737b-4cc5-9684-20de8ef44227"
        },
        "item": {
          "id": "1b076119-6746-4f41-ba62-515109f1f216",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "81c52274-9795-48f9-9ad9-8403481f8414",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "37c5af9a-d7cc-497c-9164-ec49a51f3c38",
        "cursor": {
          "ref": "80098e2b-3630-4a31-84b9-7029035d7950",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "d8dd1351-b966-497d-8811-fcecf21080d7"
        },
        "item": {
          "id": "37c5af9a-d7cc-497c-9164-ec49a51f3c38",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "cfc1a7ce-317a-4b03-ab26-1c0866ea5a8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "5f855405-8617-44d7-930e-bc497c9b96db",
        "cursor": {
          "ref": "d002fecf-80c9-482a-8ce1-b01062f63725",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "e63a8b20-d22f-442d-b47b-78c06ec0a699"
        },
        "item": {
          "id": "5f855405-8617-44d7-930e-bc497c9b96db",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "8d9664b2-702e-47e3-8494-ca733d9db173",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "4918043b-edf0-451f-b604-4d2f93488c7b",
        "cursor": {
          "ref": "a12fc63a-2af1-4d1d-a8b2-aad352c6da8b",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "caffeac7-c46f-472c-aa88-0d39ed5ac326"
        },
        "item": {
          "id": "4918043b-edf0-451f-b604-4d2f93488c7b",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "5b87fc5a-764c-48ee-b43d-bd195bf3f68f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "194e8c78-51ed-4cbf-a27e-4083e6e52e99",
        "cursor": {
          "ref": "d505995f-288d-4222-8b54-2c6a072ad55b",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "6fb1829e-12ea-43d1-83ac-2389747121c3"
        },
        "item": {
          "id": "194e8c78-51ed-4cbf-a27e-4083e6e52e99",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "5f119c42-4ef8-4cf5-ad7f-1d7d2d8ba17c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "c0bb8144-cbf9-4f26-bece-b8a4baa14f04",
        "cursor": {
          "ref": "0375a3a5-a240-4cea-8cab-9ad27c8aa0fb",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "6ba93e02-c9d2-4d02-bde7-677d69d990e9"
        },
        "item": {
          "id": "c0bb8144-cbf9-4f26-bece-b8a4baa14f04",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "c8bf4527-8ae2-45ad-80c1-a160552b706c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "07655c1f-f168-45f2-9093-22659d1d6ba3",
        "cursor": {
          "ref": "b0c86f60-01fc-4f04-9a49-7b9efd180996",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "263a899c-409b-4805-b14b-892cac076ab0"
        },
        "item": {
          "id": "07655c1f-f168-45f2-9093-22659d1d6ba3",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "ce253e75-ddcd-48b3-b051-2e797b87cba9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "fa8354f5-c4f4-4acd-a633-78f8a27f27e1",
        "cursor": {
          "ref": "5320e13e-f036-4970-9812-2549d8636dfe",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "459699d6-2591-4a30-a448-e0b5ccf48ff3"
        },
        "item": {
          "id": "fa8354f5-c4f4-4acd-a633-78f8a27f27e1",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "b855f100-1aff-43d1-a0aa-7a5710200b18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "aac3a42b-fbf2-447d-9af5-db07d5d3c9ae",
        "cursor": {
          "ref": "0c2bbfbc-8ee7-42dc-ab5b-350d64d98118",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "28544a61-530a-4e9b-9466-6be5ccc8fc4b"
        },
        "item": {
          "id": "aac3a42b-fbf2-447d-9af5-db07d5d3c9ae",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "8d406db5-f6f2-4278-bd6e-bcca6442c325",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "661938b9-683f-4d2e-88b0-61fc100916ba",
        "cursor": {
          "ref": "9064e136-3aec-4b89-8fdd-6cb8b2d195d5",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "3b52b8d2-d0aa-47df-bcd6-b99b3b55c3cf"
        },
        "item": {
          "id": "661938b9-683f-4d2e-88b0-61fc100916ba",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "7a16f8b7-7b1e-4dd3-9850-1e9eae5ae3f5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63b94c57-5af2-42b4-8510-0918a03a2f5d",
        "cursor": {
          "ref": "bfafbb2d-52e6-45b2-8c50-d1fe57eb8fb8",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "74fbada9-ac12-4b34-9232-3ff07bc23124"
        },
        "item": {
          "id": "63b94c57-5af2-42b4-8510-0918a03a2f5d",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "982ab971-fbb6-44fb-b516-7815066072e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 143
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "4c75ab6c-bc61-4cea-a543-c1a62764ccf4",
        "cursor": {
          "ref": "785c5f20-c011-4574-8535-c122d80f2560",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "ea761f39-d29f-448b-b234-615a0b88512f"
        },
        "item": {
          "id": "4c75ab6c-bc61-4cea-a543-c1a62764ccf4",
          "name": "credentials_issue"
        },
        "response": {
          "id": "21c3aa77-9e18-49c2-a0b6-40248cd0fa33",
          "status": "Created",
          "code": 201,
          "responseTime": 261,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "2619bded-9895-45ad-bfe8-22dc13800d03",
        "cursor": {
          "ref": "d96492f9-2847-4184-939d-a0ddeaf7e89b",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "72ad9f65-7127-4fc4-be41-5788984091b8"
        },
        "item": {
          "id": "2619bded-9895-45ad-bfe8-22dc13800d03",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "caf3e71a-8404-4812-8325-1f3e924a67a7",
          "status": "Created",
          "code": 201,
          "responseTime": 256,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "43743435-7733-4c92-a3f1-bf0f422558ef",
        "cursor": {
          "ref": "0f7afa09-5e2f-48df-8f47-e991ae56816f",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "91c82c19-c74b-4b12-9f4f-88e69ae06911"
        },
        "item": {
          "id": "43743435-7733-4c92-a3f1-bf0f422558ef",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "b067136a-776b-40eb-8ea8-8c0fccc6aae5",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "3da2ef78-3599-4cb5-8624-93f8ec10e10c",
        "cursor": {
          "ref": "2698c588-a105-40ce-9d88-e90b9114f26d",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "a4d28e31-6353-45c7-90b0-85951cdc3aca"
        },
        "item": {
          "id": "3da2ef78-3599-4cb5-8624-93f8ec10e10c",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "92e69239-2a3d-4a83-a898-a861f97d1681",
          "status": "Created",
          "code": 201,
          "responseTime": 234,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "df719d00-1fa7-4f71-96ce-a84946f4f06e",
        "cursor": {
          "ref": "cb85e8bb-83de-4546-90ad-5425d39d6c0a",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "e80ae1da-657e-440a-9d0f-98e321d83c45"
        },
        "item": {
          "id": "df719d00-1fa7-4f71-96ce-a84946f4f06e",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "b7cf4ad1-65a1-462b-b526-ad41e21faffa",
          "status": "Created",
          "code": 201,
          "responseTime": 243,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-10-03T00:45:22.731Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-10-03T00:45:22.731Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "28f9b27e-e853-41fd-8f49-a6736ee476da",
        "cursor": {
          "ref": "ba711e7f-5c97-427c-afc4-49cf3afc9531",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "5d49846c-89a1-4142-9064-ccca16b6d64c"
        },
        "item": {
          "id": "28f9b27e-e853-41fd-8f49-a6736ee476da",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "bb11ce9b-9f47-437e-86bd-27742e986491",
          "status": "Created",
          "code": 201,
          "responseTime": 236,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c5898f3-6fc8-47f2-82c6-d96d84547045",
        "cursor": {
          "ref": "900a7de1-10b5-42a7-a7d6-ac0795ce3492",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "8de47a18-f5df-4f48-bec6-2d7a32befd5c"
        },
        "item": {
          "id": "6c5898f3-6fc8-47f2-82c6-d96d84547045",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "e9a99a67-a830-43a3-b5ef-4fec4059fea7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "8e990945-dc2d-40e2-82bd-32a405a8dd8d",
        "cursor": {
          "ref": "2bfa954c-ed98-41f5-afa7-58008bba3baf",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "0768091d-bbc6-49e2-9870-5a280180b4b1"
        },
        "item": {
          "id": "8e990945-dc2d-40e2-82bd-32a405a8dd8d",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "7d970c2c-fc17-453e-beb0-0c4b4c5766e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "5971df76-be3e-4fa6-ade2-39269326a838",
        "cursor": {
          "ref": "b3aafd23-d5d8-4f40-81fe-87aea9cf8e34",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "4965dd53-8ddc-4615-8c20-c4ecb916ddef"
        },
        "item": {
          "id": "5971df76-be3e-4fa6-ade2-39269326a838",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "a64ef40e-4ce7-4aab-a267-b0b27b16abae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "e2db050f-4928-4a12-aaf8-66eb54393695",
        "cursor": {
          "ref": "27b542ef-fda1-4106-a6d4-756c8a21d2ea",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "ba27d707-e88c-4e2b-b8ac-7d18255b3ccc"
        },
        "item": {
          "id": "e2db050f-4928-4a12-aaf8-66eb54393695",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "02f0b220-49f8-469d-a365-81e859c263dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "bd810e9e-5da1-41c2-af06-6658e274247b",
        "cursor": {
          "ref": "59c99637-0319-4e6a-815d-3aa7e2de78aa",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "33c5cd13-8059-48f0-bef8-b394d6528fd5"
        },
        "item": {
          "id": "bd810e9e-5da1-41c2-af06-6658e274247b",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "63657fce-5cd0-4b5b-a833-5ea337334a02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "1fce22b6-192a-4593-b5d3-06d18c4a0342",
        "cursor": {
          "ref": "5759ab95-004f-42ff-8ee7-98380b5a788d",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "f62ed393-3357-45ee-88f2-38687a053d11"
        },
        "item": {
          "id": "1fce22b6-192a-4593-b5d3-06d18c4a0342",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "65027a49-1ae7-45a2-b98f-15e12ff297ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "04fc5085-6842-4d0c-b32c-651cf8655a7b",
        "cursor": {
          "ref": "7bb273b9-d2db-4be7-8d28-f304fea34e82",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "50e78671-30d6-47e9-b6fb-4ea356cde5d2"
        },
        "item": {
          "id": "04fc5085-6842-4d0c-b32c-651cf8655a7b",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "18cb5e77-a12a-4dd9-b1d6-10559092dc56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 140
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "7a3dd490-d389-4c11-a90b-122a4b810091",
        "cursor": {
          "ref": "856df00c-4618-476c-b7b1-2ac1ae5d51e9",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "96c31b78-a858-423e-9b50-5b483c365f22"
        },
        "item": {
          "id": "7a3dd490-d389-4c11-a90b-122a4b810091",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "afd2aeb6-8a38-4c3c-b5f5-49cc678e228e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "98a299bb-e1ce-4ea8-92f5-c7d1e9537e2a",
        "cursor": {
          "ref": "36ac6518-3f37-409e-be21-0bab1546a784",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "e9fe1dc7-7917-4a69-9a89-bf26f724d590"
        },
        "item": {
          "id": "98a299bb-e1ce-4ea8-92f5-c7d1e9537e2a",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "ad2c7ea0-ce76-4608-9411-0151456a0d99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "5367962c-60e3-4afc-a79b-ecb8c34a40fe",
        "cursor": {
          "ref": "42753b27-97bd-4646-896b-b3a8f5962b52",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "7a256a48-5d83-4f95-aa38-b95112046f00"
        },
        "item": {
          "id": "5367962c-60e3-4afc-a79b-ecb8c34a40fe",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "5892da41-ae5d-4a47-8bb6-a3eee92d5b99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "dbf1eee6-50ca-4150-9f57-07848558130b",
        "cursor": {
          "ref": "1b8f84b9-a52c-4e40-9de8-c5e5005a023f",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "0fbdc447-8f38-4a9b-9ed4-4b95268ab4cb"
        },
        "item": {
          "id": "dbf1eee6-50ca-4150-9f57-07848558130b",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "191051c8-6a88-481f-b50c-e4c769505376",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 118
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "4247aba4-1e46-4643-914f-e9b6bd528464",
        "cursor": {
          "ref": "b12cd31e-be69-484e-a57e-20573b3a9007",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "4bc913f4-0eef-4080-979e-7cb88310b8aa"
        },
        "item": {
          "id": "4247aba4-1e46-4643-914f-e9b6bd528464",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "c59b713d-8b68-4083-b91c-319fde6b9d0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "dd14460d-b78f-422b-b20d-1ac75eafa163",
        "cursor": {
          "ref": "59fc0343-07d4-45d4-a549-17aea48578f0",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "d395bd85-d503-4fe0-a417-37d90e9f9330"
        },
        "item": {
          "id": "dd14460d-b78f-422b-b20d-1ac75eafa163",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "44aa462c-6e7c-4419-821b-bc991890c8d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 188
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "39507245-8812-4a4e-bd88-78c8d484aed4",
        "cursor": {
          "ref": "b2f156fc-3571-41b4-a54c-3348ceb80efa",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "4ce0c623-54b9-48e5-9386-8f7d77b7b1fa"
        },
        "item": {
          "id": "39507245-8812-4a4e-bd88-78c8d484aed4",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "f7e986bf-5c7c-4105-9b0a-f259c081a7c6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 45,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "7cf4f0ab-4ba9-44c9-a5e2-5d1c508ec5c7",
        "cursor": {
          "ref": "5ba8d2f5-9b10-4fc8-83c7-d66b8ac692be",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "92ffb531-95ea-45bd-bddb-4fbb59197487"
        },
        "item": {
          "id": "7cf4f0ab-4ba9-44c9-a5e2-5d1c508ec5c7",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "162f782f-f00f-4aa0-b09d-42523e8859bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "724bc034-44be-48cb-8f01-72ff46e730c6",
        "cursor": {
          "ref": "38c72200-4bcd-4a6e-a0a4-90a2a587dfe3",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "3b587d7c-dd1b-431a-ab69-5a79e5ecd05d"
        },
        "item": {
          "id": "724bc034-44be-48cb-8f01-72ff46e730c6",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "6e8f367c-8a44-4cad-bcb9-065de06f1248",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "28071730-e3a6-4410-9f8b-81638f4ca8eb",
        "cursor": {
          "ref": "7d096bb1-b938-4182-8186-24d6778bfd00",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "2854abd1-7485-4259-9359-eb2febcfc09c"
        },
        "item": {
          "id": "28071730-e3a6-4410-9f8b-81638f4ca8eb",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "55b1a67e-1478-4f52-b1cc-1d598c1c1ba8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "2102add5-c5e4-47ae-91fe-7bf6494412bd",
        "cursor": {
          "ref": "4545390f-033f-4526-9808-fc9062f667e2",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "ca917d69-648b-4b64-a07f-390f9ee4f184"
        },
        "item": {
          "id": "2102add5-c5e4-47ae-91fe-7bf6494412bd",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "03fb9ae3-9cd4-4e42-b5ce-a880fb142cc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "57736cb0-38e0-4932-997a-55c47e1b6137",
        "cursor": {
          "ref": "1cbdc1cc-b7df-4fa4-80b1-9047684043c6",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "7862ffef-c85b-4961-a309-e0377a12c683"
        },
        "item": {
          "id": "57736cb0-38e0-4932-997a-55c47e1b6137",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "2d78c29c-3c8d-4ac8-9b71-e07e8b7d83b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "bb02b674-eb96-4d79-96a6-bc310bad14ee",
        "cursor": {
          "ref": "991e8a90-a56d-43d3-b7f3-36c61ac18ac1",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "b1341bae-da06-442d-9ad9-939e185daaed"
        },
        "item": {
          "id": "bb02b674-eb96-4d79-96a6-bc310bad14ee",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "33d2e5a3-d17e-4aa5-87f5-a8cb1cbc4459",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "5f3b7977-6b9e-41bf-a9bb-d8460e102420",
        "cursor": {
          "ref": "a5cc074f-cbda-4c7f-9291-5d8741b5c042",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "79b73b2b-ca4b-4882-b9e4-8031f5182305"
        },
        "item": {
          "id": "5f3b7977-6b9e-41bf-a9bb-d8460e102420",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "afd74ebd-41b4-42ae-8560-9baaeb376910",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "57a797cd-2dc4-43c8-a210-1cc87a6f8517",
        "cursor": {
          "ref": "2928fbc8-0e29-4ead-ae96-b1e69b94ebf0",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "b8f6aaf4-8508-4ef1-961d-1675551b93fb"
        },
        "item": {
          "id": "57a797cd-2dc4-43c8-a210-1cc87a6f8517",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "aa6e6fbe-bfe6-4692-99b9-f5b3b3a31191",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "f370bff0-424b-4387-89b0-673da4f17263",
        "cursor": {
          "ref": "3b9e7b14-10c4-4f23-8098-9f063e0f2055",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "1552d913-5e94-44d8-a990-f461b235a378"
        },
        "item": {
          "id": "f370bff0-424b-4387-89b0-673da4f17263",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "568e91aa-a736-491a-9db9-085e28136349",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "b1ed935a-6694-4955-b3bd-9408f487033f",
        "cursor": {
          "ref": "078dbd46-69a0-4838-8959-872948e2634d",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "39cb09b3-1622-4c1a-8139-0083895eb333"
        },
        "item": {
          "id": "b1ed935a-6694-4955-b3bd-9408f487033f",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "140f1ead-5ffd-4bb9-b09a-74f6b3691766",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "7d9fc6fd-84ce-4e2c-ae50-bd10403bf86f",
        "cursor": {
          "ref": "bf8e0e69-86ac-473f-a50a-0270a0bd1d7f",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "b198a324-1032-4807-90f3-4c79eb74ae0f"
        },
        "item": {
          "id": "7d9fc6fd-84ce-4e2c-ae50-bd10403bf86f",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "c8d2d101-4924-4b94-9106-0fa1e4652122",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "8073dd73-0f97-4170-b6ef-735d4abbd60b",
        "cursor": {
          "ref": "255c2c97-c361-484a-ac03-1f604d062696",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "c13d11de-7ab6-4b3c-b5a7-b4336cb04692"
        },
        "item": {
          "id": "8073dd73-0f97-4170-b6ef-735d4abbd60b",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "d2e0c339-ea6b-4353-89e6-63ca59d12718",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "fe17cb4c-44e2-4686-b49d-2f2d7486a957",
        "cursor": {
          "ref": "dc3908fe-27f0-4450-a481-9987a196deb8",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "142686e2-31de-4d33-91ce-38250961ca6d"
        },
        "item": {
          "id": "fe17cb4c-44e2-4686-b49d-2f2d7486a957",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "55e95bb9-c506-40ee-8625-83cfbb652691",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "fdb40fd7-73b3-4004-8045-e6bc555bb5c7",
        "cursor": {
          "ref": "ab5e86c0-591d-4d7d-a6d2-b2a224d473df",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "217491f1-b50d-42ba-9dfd-a0d09b633f1c"
        },
        "item": {
          "id": "fdb40fd7-73b3-4004-8045-e6bc555bb5c7",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "71b06137-c986-49e1-99fa-5279866d3ed6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "7d32b414-cfae-4f7a-973f-f39908a957c9",
        "cursor": {
          "ref": "bfe2342b-59aa-483c-a94e-ce0fc85182fc",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "e7e21eca-1353-4943-93ab-b3d3d61fd7c0"
        },
        "item": {
          "id": "7d32b414-cfae-4f7a-973f-f39908a957c9",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "0eb84310-a393-45e6-888f-45cd3d6d786d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "f8cb2f60-eade-48fc-a129-807d0dd0b05e",
        "cursor": {
          "ref": "1137c2ab-c9b8-44d9-aaf2-f839e1d5ffe4",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "4ab8395e-f031-4b7e-b73b-4cd802908b08"
        },
        "item": {
          "id": "f8cb2f60-eade-48fc-a129-807d0dd0b05e",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "814df93e-d2a4-4161-9c8a-e5da2c0eec9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "f9d763f3-2363-4e71-b1bc-d50d709d6e1b",
        "cursor": {
          "ref": "f87bfba2-b42f-4f10-a1d5-11f7e972d342",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "def601f9-1c15-4bd5-88e6-df550651e274"
        },
        "item": {
          "id": "f9d763f3-2363-4e71-b1bc-d50d709d6e1b",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "f0b30ae3-ed8f-4ae5-9989-c5570fb04026",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "a4581df0-98d9-4daa-9933-b9e68acd18ab",
        "cursor": {
          "ref": "bbefb9be-1f63-429a-b9f6-20e6574321f2",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "4cef0718-f33b-4346-b02b-fb5625219c8a"
        },
        "item": {
          "id": "a4581df0-98d9-4daa-9933-b9e68acd18ab",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "ab9a67de-0bf9-4709-98da-87dd6a1e695f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "e9dde1c8-b99d-4b30-af87-1d0fe6dda954",
        "cursor": {
          "ref": "0f34e959-1759-41e5-9e64-cf1efeac149a",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "2ab70759-cbb3-4703-a8b1-a71098184960"
        },
        "item": {
          "id": "e9dde1c8-b99d-4b30-af87-1d0fe6dda954",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "6ca11598-e264-44f0-8c1e-4d859cfaa581",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "754bce27-b6f2-4b26-b8f0-9697906fece5",
        "cursor": {
          "ref": "a15037ca-7e42-49d5-bfe0-96ffe40b912f",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "5b6087c0-77ef-4774-b766-7a5827ead82f"
        },
        "item": {
          "id": "754bce27-b6f2-4b26-b8f0-9697906fece5",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "449af1ea-51a3-4f8f-b61f-8ab63ad0034c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "75e868ab-f2c5-4a2f-9764-e30e8af6c45b",
        "cursor": {
          "ref": "cd431338-af97-4c5f-96f7-eee7eda3487e",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "8e15ee0f-875b-4908-8257-b90df5db359d"
        },
        "item": {
          "id": "75e868ab-f2c5-4a2f-9764-e30e8af6c45b",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "da922756-36d0-4a1b-a8fe-e077bc120841",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "788fb187-4f94-4d1a-bfa6-e946a9045eb4",
        "cursor": {
          "ref": "6e6aba06-47f6-4337-ad40-7b4d5a3c3617",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "d85520f9-3bd7-40ff-9772-659004054a85"
        },
        "item": {
          "id": "788fb187-4f94-4d1a-bfa6-e946a9045eb4",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "b747660a-3731-4849-ae37-71a7b97c6a45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "8053a837-e2ba-49e1-97f6-2f2a98636aeb",
        "cursor": {
          "ref": "bf522ebf-23a4-4732-9bff-fc14889184d3",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "1ba2297b-4fbb-4535-9ae3-23942782b208"
        },
        "item": {
          "id": "8053a837-e2ba-49e1-97f6-2f2a98636aeb",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "8932465a-833d-463f-8c9b-d0251a2fa0c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "bc513e11-8e8d-469c-bcfe-4597e0ca2809",
        "cursor": {
          "ref": "63d0bccc-61f7-44d0-b1a7-1524a71ca44e",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "94ea6478-4d1c-44fb-9060-7d2b0fc31f23"
        },
        "item": {
          "id": "bc513e11-8e8d-469c-bcfe-4597e0ca2809",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "15c263bd-d149-436e-a0ed-47344628b2de",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2c22961-996f-491f-ba54-29fd0bf31ff0",
        "cursor": {
          "ref": "17bd4064-3846-458c-94e9-3fc158dacb3e",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "d0386333-1241-4d77-8c19-c0fcfcc57872"
        },
        "item": {
          "id": "e2c22961-996f-491f-ba54-29fd0bf31ff0",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "deae65e9-3086-4c3b-81a9-cdd6c00dbb93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "829bfe10-8be8-4017-a374-2e31747d8d4e",
        "cursor": {
          "ref": "8a4fa7bb-76b1-42d2-82ad-e050e89e6622",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "b1966d12-1489-42de-8489-f9fa87687d39"
        },
        "item": {
          "id": "829bfe10-8be8-4017-a374-2e31747d8d4e",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "bdbc2613-f25f-4b6e-8b3c-52f524084e58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "3bc3b797-1b4e-49e7-8974-54ac59b6d59c",
        "cursor": {
          "ref": "a6b460e5-5f8b-4139-bb3c-4f343d715dd4",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "2fe19ab2-8c9e-4060-a6ac-4f4a7c4d7fda"
        },
        "item": {
          "id": "3bc3b797-1b4e-49e7-8974-54ac59b6d59c",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "2ae2685b-40ce-4a01-bf6f-01fc0f668269",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "979b590e-d0f6-4387-9682-bee81419887a",
        "cursor": {
          "ref": "189b96bd-0fa6-496d-99a8-df3c6208309b",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "4837a3e4-213d-42f2-8c75-62909a116c24"
        },
        "item": {
          "id": "979b590e-d0f6-4387-9682-bee81419887a",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "1d5ab763-b3ea-4799-b706-90f93b4d780b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "6d1c306b-36dc-41be-aff7-159401e09411",
        "cursor": {
          "ref": "41daa92f-d6c4-42e8-a029-4d68fc93c94c",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "420a5062-9253-48bb-b9ca-48aa7eb0105e"
        },
        "item": {
          "id": "6d1c306b-36dc-41be-aff7-159401e09411",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "42f351f7-26cb-42bc-9073-8c9a0dc8a2fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "f4778f75-e148-4601-aaa0-5bc56377e61d",
        "cursor": {
          "ref": "25ca8b92-046b-4cf1-94ca-9e5a3133a216",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "af9d01c1-4916-4570-a14a-f3522b4e1f6b"
        },
        "item": {
          "id": "f4778f75-e148-4601-aaa0-5bc56377e61d",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "509d29b0-79eb-48d7-ae4e-1166f72df366",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "05b9a838-0356-471a-8077-25815df60983",
        "cursor": {
          "ref": "0475fd2e-2ba7-4ec0-a56a-e491fef74899",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "53a2de1f-30e2-4d42-9686-bdc7a6e398cd"
        },
        "item": {
          "id": "05b9a838-0356-471a-8077-25815df60983",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "2d877cc7-3b67-44ef-89aa-9ea4fbc1ad68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "a9c1606a-70a8-42b7-9741-0615f11f778c",
        "cursor": {
          "ref": "63baa2a6-62d7-4423-9ba6-4702700b4173",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "306b15d7-d758-42e0-a84e-2785e5b55408"
        },
        "item": {
          "id": "a9c1606a-70a8-42b7-9741-0615f11f778c",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "b2414970-04d7-4aa2-83a6-d3c037271619",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "d48d85d6-4a38-4597-b3c6-c50b15217578",
        "cursor": {
          "ref": "e53b13d3-ef5b-47ac-b360-f5ec7c5365c1",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "c0d1bbfc-ff4b-4eeb-9502-8ee0917e8303"
        },
        "item": {
          "id": "d48d85d6-4a38-4597-b3c6-c50b15217578",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "3f350e37-be43-4fe1-841c-efac0652991e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "7fdaa5c7-b64b-4530-8f09-93f522677643",
        "cursor": {
          "ref": "3bdcf7cf-e395-4a96-a4d9-255c8dd805a2",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "f6f00489-0d51-4c8d-9f1b-f49366f7e435"
        },
        "item": {
          "id": "7fdaa5c7-b64b-4530-8f09-93f522677643",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "107ecc4c-11ae-4cc5-b606-0954f128d3e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "a1c07e0d-45b0-41fc-94b9-27f5eb8bfdf2",
        "cursor": {
          "ref": "dca41416-4001-411e-bb50-38979751f229",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "d7437dc4-8592-4140-a169-9dda3cb784e3"
        },
        "item": {
          "id": "a1c07e0d-45b0-41fc-94b9-27f5eb8bfdf2",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "e38fcb65-bb72-4aa9-a9d4-e05365e2f256",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "b7c05326-8e39-4eaa-95fa-a4b2235abb6e",
        "cursor": {
          "ref": "32eea26c-5799-4215-967f-207e9e09a63c",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "203f9882-4fd4-4502-b0b1-8fc25ede5fbf"
        },
        "item": {
          "id": "b7c05326-8e39-4eaa-95fa-a4b2235abb6e",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "2fef5562-da62-4ece-8045-56dbe79c0ab9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "3dd16677-ed4e-4a1c-9d8e-af83f9ca0e0e",
        "cursor": {
          "ref": "7f721c82-50e9-4526-9fa1-234092a82ede",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "51c80ad1-e323-4bab-b6ba-ed40df6184ea"
        },
        "item": {
          "id": "3dd16677-ed4e-4a1c-9d8e-af83f9ca0e0e",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "ac96a252-38a8-4edc-9a06-b552210d24d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "ac13e381-e8fb-4c90-a162-90df0c8fbbfa",
        "cursor": {
          "ref": "43f7a876-2ae1-48bc-8916-27c7dd4a4606",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "5b86e0f4-f18d-489a-b6ee-84dcf297cac5"
        },
        "item": {
          "id": "ac13e381-e8fb-4c90-a162-90df0c8fbbfa",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "36d68339-e3d4-463d-b309-82f9875a40ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "c4e234bb-1604-4d01-a3a4-2be26baecab1",
        "cursor": {
          "ref": "a8d1907b-45ef-4233-9a64-9873703a7736",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "62c06671-c1a6-4e48-92c1-4cf7621f1aca"
        },
        "item": {
          "id": "c4e234bb-1604-4d01-a3a4-2be26baecab1",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "bcc89256-a8f0-4714-b204-5a0982440c38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "b7c38284-1fb8-4654-9fca-89de74f4a4c4",
        "cursor": {
          "ref": "feec335a-099b-4713-972b-d4f7a7cf21b2",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "2c4fac57-4c79-4e4c-b4e9-9a7c69f61ff8"
        },
        "item": {
          "id": "b7c38284-1fb8-4654-9fca-89de74f4a4c4",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "fc3298c1-6d60-4306-9e1b-b51e1a20215a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "8eb33263-9d9a-46b0-bc0c-bbd5658bd6a2",
        "cursor": {
          "ref": "8fbe7152-c647-49b3-9938-0c0cdb265c63",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "3635b1d9-782a-483f-85b0-045e62dd8e40"
        },
        "item": {
          "id": "8eb33263-9d9a-46b0-bc0c-bbd5658bd6a2",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "46819309-ffc8-43e6-bf3f-334049bd863c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "8a443ff0-230b-4026-a351-bfeca54037e0",
        "cursor": {
          "ref": "81bcaecb-13e0-4953-be98-0abe7218c1ef",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "3c5f1ed9-813d-412b-b3ec-93fa4af6161d"
        },
        "item": {
          "id": "8a443ff0-230b-4026-a351-bfeca54037e0",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "7cdef7e7-7899-4680-80bc-bc8b59983eae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "78cd1302-f8fd-493a-b7cf-7e9d54a1f392",
        "cursor": {
          "ref": "85b8a3cc-a981-40bd-984f-8b02c72bb086",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "886c9d3e-a5e3-4c0c-8128-01fca7eeafc7"
        },
        "item": {
          "id": "78cd1302-f8fd-493a-b7cf-7e9d54a1f392",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "4833c420-6f7d-474d-a54a-a5321f66d990",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "3a719661-d3a6-49ba-ae13-b2209c8a1457",
        "cursor": {
          "ref": "1049175b-8762-4c4f-a5cc-22616a34ffc2",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "25849cae-bf90-4b57-92da-4409cf52e0ab"
        },
        "item": {
          "id": "3a719661-d3a6-49ba-ae13-b2209c8a1457",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "0b99cfa9-6bf1-49c1-8eb3-827702b9f90f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "e969edf6-8ef8-4b6c-ac3b-880239d45d64",
        "cursor": {
          "ref": "430cec7a-07c0-45ed-91aa-f6ccea8aab42",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "68ab384d-b3f4-464d-956e-f2ff674408e8"
        },
        "item": {
          "id": "e969edf6-8ef8-4b6c-ac3b-880239d45d64",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "1d5399a6-098e-4125-84df-98ae2e4215dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "b5f0ec6e-e265-490d-8561-0efb01028545",
        "cursor": {
          "ref": "f67a6c0b-9929-4398-8a90-5c6ca0462aa1",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "6ff412b3-4276-40ed-a4bc-7ba761671d9b"
        },
        "item": {
          "id": "b5f0ec6e-e265-490d-8561-0efb01028545",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "71b1bbdd-a977-4bbb-80de-53936ed6f437",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "ebca6eac-5ebd-49ce-8015-3f04aaa80db3",
        "cursor": {
          "ref": "49a3add3-3142-44ec-b4f8-3c1086d3938b",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "555dc656-5da6-478e-9cbe-86441f4429b6"
        },
        "item": {
          "id": "ebca6eac-5ebd-49ce-8015-3f04aaa80db3",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "5fb60d16-3492-4cba-b77e-f272e6a7f393",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "725948c7-e8eb-417b-bbff-66f750049c29",
        "cursor": {
          "ref": "c3646f5e-a952-4adb-b193-76d39d73e1a5",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "1d0b5f8d-51ed-4c92-b2bc-3f3cd0fc6978"
        },
        "item": {
          "id": "725948c7-e8eb-417b-bbff-66f750049c29",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "0c442d6c-e514-4344-a704-0ad1177dd921",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "f549a5d6-6b4f-45d5-980c-ed2c1816e500",
        "cursor": {
          "ref": "87ebeaa4-14c7-4958-88a9-5ec38fd0c6cf",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "e90d8f6c-d13a-4c7a-bc2c-965a18cf69cf"
        },
        "item": {
          "id": "f549a5d6-6b4f-45d5-980c-ed2c1816e500",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "857f1150-75c1-49b8-9436-d29bb56146d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "d6e8c050-ef02-436b-9534-efa83f0a5354",
        "cursor": {
          "ref": "95c08954-4422-4124-9914-2f0191b0c4e4",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "0368119c-c898-42f6-a04f-369777325f12"
        },
        "item": {
          "id": "d6e8c050-ef02-436b-9534-efa83f0a5354",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "5ccff543-ee6a-4a68-97a3-09d8ee7d8bdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "ae5b6035-3f53-47ca-9b8a-6a713d97816f",
        "cursor": {
          "ref": "895ef89e-9f3c-4807-8d85-7297b1d5e825",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "1f61371a-e99c-464a-8d61-225c3958e860"
        },
        "item": {
          "id": "ae5b6035-3f53-47ca-9b8a-6a713d97816f",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "cef4b1dd-5628-478b-95f4-914854a185ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "04b373c6-c98a-44f1-ba13-00c1a80820b0",
        "cursor": {
          "ref": "196b04f0-e7cc-4b3b-a048-daba480c2564",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "b20f6d4d-a8d1-4dff-8a4b-88a7f18cea9c"
        },
        "item": {
          "id": "04b373c6-c98a-44f1-ba13-00c1a80820b0",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "9ef9b5d0-b497-4213-bba2-e5ccfd632564",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "bf054e46-63e7-429c-a98f-2fb918f9a789",
        "cursor": {
          "ref": "2a8f97dd-2d23-41ef-9042-218ae89459a0",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "52d967b4-1b55-41f6-8989-8c8841eabdf4"
        },
        "item": {
          "id": "bf054e46-63e7-429c-a98f-2fb918f9a789",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "af778de5-de57-4163-8e48-a16917c7cc9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "bb24c7d4-dcde-4793-8c52-ece65fe84e67",
        "cursor": {
          "ref": "403fbeab-25f2-4fca-b161-77c9ab8fb6fa",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "27030d5c-ba29-4f8d-a123-4f7455ce23f5"
        },
        "item": {
          "id": "bb24c7d4-dcde-4793-8c52-ece65fe84e67",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "706f7a59-9bac-4cbb-bebe-27ad54bc00fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "1e426a9a-b630-48ce-b760-a116b07bd3d4",
        "cursor": {
          "ref": "450c8513-2551-4663-8264-fc3f892400ad",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "a27afd96-8837-4dca-b959-85fea2f53e11"
        },
        "item": {
          "id": "1e426a9a-b630-48ce-b760-a116b07bd3d4",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "8264be45-ee4c-4542-9530-c931007f148f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "6439217a-561a-4376-8105-054e54d96381",
        "cursor": {
          "ref": "b631611b-39c9-47c8-a2d9-1bf0b4b981a3",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "3ac5ee96-2d82-4d8c-bddb-492e79d79872"
        },
        "item": {
          "id": "6439217a-561a-4376-8105-054e54d96381",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "7dbc17c9-d056-4867-86b5-da07d0ab452f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "9284dc08-a3d4-4862-8dd6-ef0c0d80a6ce",
        "cursor": {
          "ref": "4b1d8398-327e-4506-9b55-c57b5802cb77",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "7eac7a12-8789-476b-8e13-7732d39b400d"
        },
        "item": {
          "id": "9284dc08-a3d4-4862-8dd6-ef0c0d80a6ce",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "bd4310fa-7e1e-4f77-bcf1-a25e328daeb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "944f309d-899d-414c-936e-0e8846c4d665",
        "cursor": {
          "ref": "d1f318ef-c968-4927-8661-2b7d7a6aeef4",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "9116378e-3721-40fd-875a-f3e63d21dcbe"
        },
        "item": {
          "id": "944f309d-899d-414c-936e-0e8846c4d665",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "3be4b2e8-8372-4d84-a235-e54bb686c602",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "f395f2cb-d8cf-4977-9432-b168e8a298b6",
        "cursor": {
          "ref": "78de6c8c-574c-4051-8111-43a1074b9a38",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "7ab840fd-b498-4765-9b7c-17d338523984"
        },
        "item": {
          "id": "f395f2cb-d8cf-4977-9432-b168e8a298b6",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "394d4d28-d60f-4cf0-b890-ea6750303b9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 102
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "a723da3e-eb5c-4bf3-a0a9-3d40a9f82949",
        "cursor": {
          "ref": "cc3b7c9e-f6b2-4494-8c0f-900bbadfc5bb",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "73867e80-3dd3-4d61-b26e-93105f8ab95b"
        },
        "item": {
          "id": "a723da3e-eb5c-4bf3-a0a9-3d40a9f82949",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "ebd00ca8-cbc2-468b-8aff-272ce9dfb8a0",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "1cc5a55f-e162-4309-9aa3-d40a337863d5",
        "cursor": {
          "ref": "b203a334-06d9-43ed-91f2-0d010227d358",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "620fb118-2f35-47a5-92d2-2c6468e9c822"
        },
        "item": {
          "id": "1cc5a55f-e162-4309-9aa3-d40a337863d5",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "27f3fbb0-ff64-4078-b6e1-dfc763542b7f",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "8a17bf4e-ff70-414b-9f27-c1d29a203ce3",
        "cursor": {
          "ref": "3697347d-07d3-46b7-908d-b397d40809dd",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "526d644c-25f0-424d-8659-167f6f300bcc"
        },
        "item": {
          "id": "8a17bf4e-ff70-414b-9f27-c1d29a203ce3",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "78a646d2-1d7f-44d7-8ca5-3fe00406362a",
          "status": "OK",
          "code": 200,
          "responseTime": 62,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "484967a1-38b8-4e83-931a-4be18905e390",
        "cursor": {
          "ref": "eefd8bd1-6911-411e-9e18-aa88fc26b928",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "19931ab8-6c05-4501-a78b-acb0e87b632c"
        },
        "item": {
          "id": "484967a1-38b8-4e83-931a-4be18905e390",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "35395618-71bd-4690-89d8-9fd8bea2015c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 102
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "316a452b-d18e-451a-92b8-83be953a0cfc",
        "cursor": {
          "ref": "a3b62e2a-f76a-4988-8e79-e87b90a1c7a5",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "90e185a6-b82e-42bb-a1ed-1969c32b9953"
        },
        "item": {
          "id": "316a452b-d18e-451a-92b8-83be953a0cfc",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "ba50eb2c-4f60-4dbc-a351-c6ebfdea8482",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "80f42549-5bf3-46f4-a172-568c6f2ca6f6",
        "cursor": {
          "ref": "371ea283-95fa-4c3a-ab71-86602790ee7d",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "3651b91c-fb0b-4dc1-b2fe-465479a5b049"
        },
        "item": {
          "id": "80f42549-5bf3-46f4-a172-568c6f2ca6f6",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "e6a511ab-c5fa-42bd-b021-7aedeeefa46f",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "b7aff66f-63e7-4b4b-bacd-d8ee6526250b",
        "cursor": {
          "ref": "c10395df-d9e9-426f-a8c7-40590c8ef916",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "0a627741-7030-4826-a889-2265a7f88666"
        },
        "item": {
          "id": "b7aff66f-63e7-4b4b-bacd-d8ee6526250b",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "09d8acb7-d36a-425c-81ca-f9959a879c85",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "df7b8a31-89c8-480c-9193-43dac3d203bb",
        "cursor": {
          "ref": "51fa7cf6-e09d-41da-bac0-a082d1c26e1b",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "1acb9339-af2f-40e4-8762-a0e3c2fdf069"
        },
        "item": {
          "id": "df7b8a31-89c8-480c-9193-43dac3d203bb",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "2b3114f2-5aab-4a9a-b5c1-da24d831d350",
          "status": "OK",
          "code": 200,
          "responseTime": 60,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "ac8c2599-ba15-40d5-9d23-490e97730663",
        "cursor": {
          "ref": "ec217d6c-0760-42ea-b02e-c96f05322f63",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "0aabc498-5b1c-4a9e-a8fa-04a087227522"
        },
        "item": {
          "id": "ac8c2599-ba15-40d5-9d23-490e97730663",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "10ac79e4-f000-4e98-9a60-f8adf03ad254",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "0342a571-a21b-46f1-9dba-886b5b5e4873",
        "cursor": {
          "ref": "c3290767-02ae-415e-aad2-ae5aee4293ab",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "d595371e-6c4e-4ada-b2b0-4634662c6d51"
        },
        "item": {
          "id": "0342a571-a21b-46f1-9dba-886b5b5e4873",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "6c878cd2-18b9-4c28-9bd7-90a044582e15",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "15ce8f06-c50f-48b4-b1ab-0c3f3151d9b2",
        "cursor": {
          "ref": "90c0f18d-9b13-4e08-b971-8d8791039055",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "5e339705-bcb6-43b3-9524-76333dff30c7"
        },
        "item": {
          "id": "15ce8f06-c50f-48b4-b1ab-0c3f3151d9b2",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "5334f927-7a2b-43c2-bf5e-060a2328429a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "5b294dfe-45a5-4b63-8760-5311ac6593b2",
        "cursor": {
          "ref": "4fda6140-baef-46b3-971f-27815dc63ccb",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "68cfe70b-29f5-4ac0-91af-7a26c858f666"
        },
        "item": {
          "id": "5b294dfe-45a5-4b63-8760-5311ac6593b2",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "20c1b3b1-b824-4c0e-9fe4-3e80a6adc7d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "e1086857-fbda-448d-9942-3e1eab9cc286",
        "cursor": {
          "ref": "bed88d4a-4fab-470d-8080-77b1cd68ed12",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "f70a6268-b36f-4892-9bd9-cd0ee70c5b52"
        },
        "item": {
          "id": "e1086857-fbda-448d-9942-3e1eab9cc286",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "bf6ee2f5-da42-461b-b008-85124ef382c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "a3bf9eee-dd94-4d90-b221-94da0089b655",
        "cursor": {
          "ref": "31030f3f-0b3b-468d-a16c-d49a0a69ce0e",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "cc390b9a-8fbe-46c6-93d5-cf07e8514e26"
        },
        "item": {
          "id": "a3bf9eee-dd94-4d90-b221-94da0089b655",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "49157bde-3173-4f5f-b375-330f7425ff9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "aee73478-0999-41c1-b9ea-f594dfbeda94",
        "cursor": {
          "ref": "c370946c-b9bc-4760-a04a-a11ded1bc906",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "00a237c9-561c-4e4d-a09b-cc1be8a24b06"
        },
        "item": {
          "id": "aee73478-0999-41c1-b9ea-f594dfbeda94",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "b91af4c3-db29-49e3-986b-358f726ee376",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "5bdbd7ee-6e7c-4675-b40e-f0c718165f32",
        "cursor": {
          "ref": "e2b88403-6dd2-44e0-9a0a-6360123af7aa",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "e6e84e67-874a-4d9d-b2a5-4afd6265d8d0"
        },
        "item": {
          "id": "5bdbd7ee-6e7c-4675-b40e-f0c718165f32",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "9f62e8c3-625b-4969-acd7-61004055d80c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "7669b77e-79cb-40af-ad68-f2471f9c3c07",
        "cursor": {
          "ref": "f8116220-35cf-4dc7-a07b-1be9f28d3262",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "34daa083-2ccc-4720-8bd9-2da18beff3fd"
        },
        "item": {
          "id": "7669b77e-79cb-40af-ad68-f2471f9c3c07",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "c4c11cd1-4399-4c35-b9f2-c2b6ac7652b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "0309210b-6294-4696-9576-e65b508dcf15",
        "cursor": {
          "ref": "75419f45-2876-48c8-935c-3152d7f927c8",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "5b8c604f-c7b5-4aee-820b-0fa671365b5e"
        },
        "item": {
          "id": "0309210b-6294-4696-9576-e65b508dcf15",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "0834efa8-4dbc-47d9-a212-07e1b00c1ef7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "6a1d373e-c01b-4fa5-992f-c58520419476",
        "cursor": {
          "ref": "5d1b3b98-00aa-498e-83c7-4f9f77f14bb0",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "6d6bc1ac-3dd6-4296-b2e4-10452fbcf856"
        },
        "item": {
          "id": "6a1d373e-c01b-4fa5-992f-c58520419476",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "9f359c5a-7ba9-44b9-ba05-fc037a9e4475",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "4c5af7a7-a940-4b16-a385-d90b21be5766",
        "cursor": {
          "ref": "b9aff212-ee06-478a-9867-43963734a2cb",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "89369a42-7014-4ff7-b2fb-7e3e36f5ce58"
        },
        "item": {
          "id": "4c5af7a7-a940-4b16-a385-d90b21be5766",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "afac1929-00aa-4866-8ebf-b06844aee287",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 199
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "3f0c9d5e-b83f-4ee4-b6b2-8283ab4cc9d6",
        "cursor": {
          "ref": "c3d1b6b0-5314-4fdd-997e-d85f2650c352",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "75a26e75-06a7-4068-b0ce-04a81761369c"
        },
        "item": {
          "id": "3f0c9d5e-b83f-4ee4-b6b2-8283ab4cc9d6",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "7a06d236-3878-4159-82d4-65e87065b6d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 199
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "e39d035c-11c2-471b-a4c1-5e2983fd301e",
        "cursor": {
          "ref": "85d80106-bb79-4a09-877f-ca221d9f2eea",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "6c554940-5aab-4bf6-8fa0-964ebef9d36b"
        },
        "item": {
          "id": "e39d035c-11c2-471b-a4c1-5e2983fd301e",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "a21d8a34-c486-4989-abf0-fb9dd04a4261",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 260
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "48dc43f8-d7dd-462f-8568-b7ede323aaaa",
        "cursor": {
          "ref": "f8486944-908e-4c7d-860d-446f35137b32",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "276d10b7-2846-42ab-aa92-ff9e17902c83"
        },
        "item": {
          "id": "48dc43f8-d7dd-462f-8568-b7ede323aaaa",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "0ab74505-49ad-4b32-bdd0-f801a7399abc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 199
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "2b286683-123c-4257-95a4-1fa27040f716",
        "cursor": {
          "ref": "ab5fd61a-d8ba-4450-809b-67d38470113c",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "d306de11-f8df-4025-aa5d-6c39ad5547d1"
        },
        "item": {
          "id": "2b286683-123c-4257-95a4-1fa27040f716",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "2b8b9c7a-fa9a-409e-9c11-12cec1f4c994",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "a8a727e1-f2db-43b4-a59f-727bddc1837d",
        "cursor": {
          "ref": "ad24397b-6cdd-47da-85a2-8d69cb2d8001",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "776f347e-ea23-41ad-ba9d-add21cc292fc"
        },
        "item": {
          "id": "a8a727e1-f2db-43b4-a59f-727bddc1837d",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "555bbfa8-cc54-4794-8c40-cc3017d04797",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "63cbf75c-18aa-4389-89da-af0172bb5908",
        "cursor": {
          "ref": "cd209359-37b8-464f-8337-36d02c1588d2",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "1b0c8d60-e5ed-46d1-bb93-4ce46c8a7ab2"
        },
        "item": {
          "id": "63cbf75c-18aa-4389-89da-af0172bb5908",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "88e1ba33-219c-46ae-91aa-616944268da4",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "ac7ed485-7f72-4397-84cc-71f46a68c49d",
        "cursor": {
          "ref": "d8fc7507-8a6a-461e-a5b8-9900dc6d1591",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "3c3fa349-cba4-4c9f-a986-974c26602c6b"
        },
        "item": {
          "id": "ac7ed485-7f72-4397-84cc-71f46a68c49d",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "0ffe80dd-89ed-441a-a1a0-c9168fdcee98",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "8fc7270c-953e-4527-aecf-c3b8f620eda9",
        "cursor": {
          "ref": "1d4f4b67-ba27-4ab2-9e41-fb351c6e7cdb",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "3b04da98-45d7-4430-a9a4-a10f75f81a70"
        },
        "item": {
          "id": "8fc7270c-953e-4527-aecf-c3b8f620eda9",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "c73d7b5b-c2e3-448c-8af5-b2144449d213",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "4aee32d7-41b9-42c2-b3f1-77a36afd966b",
        "cursor": {
          "ref": "0ff2efe1-ed52-4b33-91ec-f2b139187eec",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "c006fbd4-c085-4b40-b538-39795979fe2c"
        },
        "item": {
          "id": "4aee32d7-41b9-42c2-b3f1-77a36afd966b",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "d80df5b0-6e91-4aa0-8b9e-a41018d7b751",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "e43b446d-595b-4278-bbdb-e538fd25084d",
        "cursor": {
          "ref": "0c34bbd6-6b3f-4f36-b5f9-be3c3c7b9985",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "e259f75e-5562-464f-b966-65c04c0e84e9"
        },
        "item": {
          "id": "e43b446d-595b-4278-bbdb-e538fd25084d",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "dbf55573-e788-442f-beb8-c284cff6ee7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "7420e645-e2e4-4113-b129-463affbfc591",
        "cursor": {
          "ref": "afc29bff-7ffb-4692-ab25-e0beda3b4dbf",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "ee37e129-543e-4fe9-8f11-2abc4cc9d637"
        },
        "item": {
          "id": "7420e645-e2e4-4113-b129-463affbfc591",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "898a9608-1c9f-43a5-9bd9-68f18ef8122f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 236
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "b6351d9f-79cd-4da3-ad2d-07e4a51eb2eb",
        "cursor": {
          "ref": "adef369b-da32-4e2a-91f8-0c556c943397",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "73ac7abc-98e8-4df0-b542-339f86f188f5"
        },
        "item": {
          "id": "b6351d9f-79cd-4da3-ad2d-07e4a51eb2eb",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "13015c8e-1fe9-4ef4-bdc6-4b41e45af25d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 236
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "32aa9bea-1cea-4f9e-87e9-c70971fbaa32",
        "cursor": {
          "ref": "92e8a3f1-f491-41d8-a415-c2f093adc4f2",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "23db071c-3b03-46e4-acef-db5d622a5b9b"
        },
        "item": {
          "id": "32aa9bea-1cea-4f9e-87e9-c70971fbaa32",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "1d8b7bb8-e536-49eb-9b37-1ca290042579",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "b77e78e3-ff1f-4bcc-91f2-3b37f61c77ff",
        "cursor": {
          "ref": "495b65f5-bc49-409f-966a-668dfaae32d9",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "1981e111-a24b-4cd0-8298-ae7c6b15b5b7"
        },
        "item": {
          "id": "b77e78e3-ff1f-4bcc-91f2-3b37f61c77ff",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "5365ebed-7ef7-4a7f-b639-b3b3921ec96f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 236
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "8b02fbe0-a638-459a-a94f-7a3f2df6a7f9",
        "cursor": {
          "ref": "155e52b9-d403-4f3a-ac78-9890e3382257",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "30264a72-d3ad-454e-8fce-cd55754873ca"
        },
        "item": {
          "id": "8b02fbe0-a638-459a-a94f-7a3f2df6a7f9",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "8be9a3b0-c133-4594-baa0-b390a74b83fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 337
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "d6fc0e16-2422-4eb5-8bdd-c8835f209991",
        "cursor": {
          "ref": "21ed387b-2ee5-4431-b4cc-1282bbc275f2",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "922b57e4-a931-4dfc-9c4c-eeda3be05f35"
        },
        "item": {
          "id": "d6fc0e16-2422-4eb5-8bdd-c8835f209991",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "ee298e47-65d6-4a37-ac9e-d2b0336701e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "1bba85b1-7181-4286-b877-8eabe60520ed",
        "cursor": {
          "ref": "64cd2832-22c8-4eb8-92c3-0c70de757180",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "15faa957-eba7-46c2-92e1-8373d7cfb7e2"
        },
        "item": {
          "id": "1bba85b1-7181-4286-b877-8eabe60520ed",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "fd35c841-2233-4cb3-a350-f7858d644922",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "cdd64352-f988-4a57-bc68-df284c63d1af",
        "cursor": {
          "ref": "5d634b48-90bb-468d-97b0-f515a24b0320",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "4f448116-4647-4bea-9aa6-c0e1295ed56b"
        },
        "item": {
          "id": "cdd64352-f988-4a57-bc68-df284c63d1af",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "f74733ab-6579-41c5-9afb-10d65849ae18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "0f23abf9-7815-4c20-9474-4b30df3d5b83",
        "cursor": {
          "ref": "4370f947-6eb6-44b1-8446-f743039bc26a",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "d75780aa-897f-4655-b2cf-2f6655edddc9"
        },
        "item": {
          "id": "0f23abf9-7815-4c20-9474-4b30df3d5b83",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "38cdb13e-a979-4627-b4f1-c72ab6f19d83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 337
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "493d96e5-d8d9-4fdd-9457-8cc028cc1327",
        "cursor": {
          "ref": "6cdc509c-d356-4c95-8c02-abc012fa7bf9",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "ca5b583c-66eb-4716-88c1-b361255bf46d"
        },
        "item": {
          "id": "493d96e5-d8d9-4fdd-9457-8cc028cc1327",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "670bc7e6-a101-4e47-86c1-4834f3b92c3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "c46e5f36-5ec3-4888-b6d7-c311ed6e2105",
        "cursor": {
          "ref": "fcadeb98-2587-400d-b649-d4e6f11c1c8f",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "b62a5fe5-e8f1-4178-86be-17c74937859b"
        },
        "item": {
          "id": "c46e5f36-5ec3-4888-b6d7-c311ed6e2105",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "b7b3860f-6fe9-43c8-9e70-bec513c29e26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "2e10ba37-d998-4756-bd40-33b16ce561e5",
        "cursor": {
          "ref": "3ca4e7f0-f157-4be3-8683-92a7b05ffbd2",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "b7462795-bef7-4cf6-aae3-89b135f6db5d"
        },
        "item": {
          "id": "2e10ba37-d998-4756-bd40-33b16ce561e5",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "37fc4d38-a26d-426c-972b-2a885126e1ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "4c049a4c-ff24-4f0c-8ec1-c2b2068b99d7",
        "cursor": {
          "ref": "f0cb4baf-6bae-4173-8983-c74191917505",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "141659cb-9f2e-4908-8c56-725f7d3cb3fa"
        },
        "item": {
          "id": "4c049a4c-ff24-4f0c-8ec1-c2b2068b99d7",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "049171ad-3083-499f-a6f2-c72fba466b7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "115060f9-a733-4119-8609-a38078cd2516",
        "cursor": {
          "ref": "a98200a8-a95d-408a-986c-5936b0319fb6",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "5d1857d3-7d2f-4f37-99e4-936b1cac77eb"
        },
        "item": {
          "id": "115060f9-a733-4119-8609-a38078cd2516",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "10c31b12-5b0c-478b-86d3-859e9fef3494",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "c945457f-b805-4f81-aad3-a33c76b5f2d4",
        "cursor": {
          "ref": "6ae00ad7-4278-408f-8e26-9adddf832392",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "690016b8-236b-4dbb-bf04-346617b2e529"
        },
        "item": {
          "id": "c945457f-b805-4f81-aad3-a33c76b5f2d4",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "f258a04b-7322-47be-bcf8-4b013b2420da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "f924ad3a-1d1d-4f1f-8109-1884b0f045b1",
        "cursor": {
          "ref": "b4fa2cb6-82b2-4ff4-8778-6f0e62110c95",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "90726eed-5ea0-49a2-9550-0b44c8f29c17"
        },
        "item": {
          "id": "f924ad3a-1d1d-4f1f-8109-1884b0f045b1",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "9e3bb473-574d-497c-9c92-c50c71092901",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "0ce5aac2-8080-4f21-9cd9-daddcc1b11de",
        "cursor": {
          "ref": "316e81da-ac1b-49b3-abd8-431c512937eb",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "e3a1ee2d-555c-4f8b-b796-ea6c626989e6"
        },
        "item": {
          "id": "0ce5aac2-8080-4f21-9cd9-daddcc1b11de",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "d812fb34-5b95-4211-ae71-1a4ac3ef8ab2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "4b9fea36-74d7-4656-97a5-2a886b38946f",
        "cursor": {
          "ref": "cbf002a6-f931-4835-99de-825602615657",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "fc5226c4-cab9-4017-8276-ca98b2e06cf5"
        },
        "item": {
          "id": "4b9fea36-74d7-4656-97a5-2a886b38946f",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "c3dacc71-33eb-4504-968f-c55edbc8ef18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "aedaabe6-16ae-4066-96da-b4a020448720",
        "cursor": {
          "ref": "293aaa1a-dc39-4e8c-ace7-3c4bbce47787",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "8e0f5bdb-1179-46bb-8aa5-8c2b0a80e462"
        },
        "item": {
          "id": "aedaabe6-16ae-4066-96da-b4a020448720",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "fa6c4ff5-0d25-416b-ab64-189641a91b6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "d554d1fa-c256-4296-addb-fffcd1f11d32",
        "cursor": {
          "ref": "27056110-3a4c-4ff1-a260-d1737fc53186",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "a3e787d7-d288-496d-9839-c54c744e119b"
        },
        "item": {
          "id": "d554d1fa-c256-4296-addb-fffcd1f11d32",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "f1c049dc-1234-465a-95ea-a33f39b518ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "81d06c4c-d822-41ed-ba53-f0d690c25295",
        "cursor": {
          "ref": "4506e411-fb53-47ee-9c11-2512f0e130f6",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "140ef6c5-4ecb-4143-a9a7-ce0a777abb5e"
        },
        "item": {
          "id": "81d06c4c-d822-41ed-ba53-f0d690c25295",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "34e00a7c-321c-4abb-ac1c-80bb0645d534",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "9e1feba8-1dc1-4ebf-a75e-a96679ee93ff",
        "cursor": {
          "ref": "37b5cd00-e493-421b-8bbc-d7d88dba4168",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "5937965f-6f99-41ff-9406-143512d25d76"
        },
        "item": {
          "id": "9e1feba8-1dc1-4ebf-a75e-a96679ee93ff",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "e3803e20-e43c-4556-bb42-003b14486038",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "797c4ff5-66ca-49c6-a7b5-43681417e3c1",
        "cursor": {
          "ref": "2f1402a1-438a-4351-af00-d767d79dd004",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "85395a5f-0033-4db1-8aa0-abeb3d9dc865"
        },
        "item": {
          "id": "797c4ff5-66ca-49c6-a7b5-43681417e3c1",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "04d3674c-9165-45a3-bcad-58cb99e0a7d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "5e9ab6bb-b11c-434d-ab7d-0d411fa41d4c",
        "cursor": {
          "ref": "c6158a8e-b9a2-4e44-8cba-cc85c9cfa2b0",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "3e99898d-8456-49ee-bc8d-bc7a2ea08536"
        },
        "item": {
          "id": "5e9ab6bb-b11c-434d-ab7d-0d411fa41d4c",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "3de03101-d638-450f-a1f2-9afe6fb24e62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "8d746130-7ffc-4e94-97cd-26d641dc86db",
        "cursor": {
          "ref": "d776917c-b49f-4bcb-9c70-9451bc491eed",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "56c2ef67-036a-4392-81ed-f31a09faf2e1"
        },
        "item": {
          "id": "8d746130-7ffc-4e94-97cd-26d641dc86db",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "1d5430ad-3451-47d6-9d7a-1e2528b5b5c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "566b150f-a6f6-4a14-9ce1-515cef1065bf",
        "cursor": {
          "ref": "6f192d04-0172-4ef3-a3ea-4fbb45d48162",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "1e40e633-38d5-4655-b5a1-33f449f00108"
        },
        "item": {
          "id": "566b150f-a6f6-4a14-9ce1-515cef1065bf",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "99976f75-3a5e-42d4-a737-604b12e8830b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "e3d8038e-50ae-4e7f-862c-68f04fb1d485",
        "cursor": {
          "ref": "f51bb196-70b9-4987-8ce9-00414e44d9ef",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "53574324-cce5-4ac6-ab66-956a6402d575"
        },
        "item": {
          "id": "e3d8038e-50ae-4e7f-862c-68f04fb1d485",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "ae80a0f3-d1b6-457f-a427-3f7bdd816565",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "5dc316b5-a985-4577-8605-f96548c8e2c0",
        "cursor": {
          "ref": "452adac3-7db1-4d70-9c8b-1b1ee343cbdf",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "6aa52fec-a70f-4da4-bbd7-eb36203cb64d"
        },
        "item": {
          "id": "5dc316b5-a985-4577-8605-f96548c8e2c0",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "6e77ce3e-fa93-4af3-adab-8403e7260999",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "33b3e75f-f31c-401f-ac5b-83f2c6364f87",
        "cursor": {
          "ref": "34f7b51b-be10-4acc-b373-27c335c66ac4",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "75e9fbd7-d060-4898-a6d3-84cce72a6c47"
        },
        "item": {
          "id": "33b3e75f-f31c-401f-ac5b-83f2c6364f87",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "6ea079e3-791f-4fb0-a80c-2047d6d6ea91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "ca048a2d-ce0f-497a-8b32-1362747a4491",
        "cursor": {
          "ref": "09d2a69a-d5d0-4897-b5d3-c55e4f24f866",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "6a959d6c-3d3c-489c-9f46-68494efd382e"
        },
        "item": {
          "id": "ca048a2d-ce0f-497a-8b32-1362747a4491",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "0848e62b-1dfd-4955-8be9-ec4651adb8b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "374d489f-ddc6-40c5-a982-9744f8b6f4b2",
        "cursor": {
          "ref": "f2c209af-6240-4ccf-8403-d0d1298f265a",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "a4047c51-2004-49c1-8426-ea4a9d05a233"
        },
        "item": {
          "id": "374d489f-ddc6-40c5-a982-9744f8b6f4b2",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "c085724d-df2b-4bec-82e6-94329a58145e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "42560234-1820-47f5-b0bd-a3f1de61d47c",
        "cursor": {
          "ref": "6e6247ec-89b3-4442-a723-766240f8e781",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "94f22568-677e-4eee-b659-7b723d8ca0e1"
        },
        "item": {
          "id": "42560234-1820-47f5-b0bd-a3f1de61d47c",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "7f747554-3474-4e0b-8c28-82660e31b758",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "022b2f9b-c2ba-41a0-93fd-635a5d1a4a3e",
        "cursor": {
          "ref": "426d1887-de85-44c0-9682-9d3bdf2d56ad",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "bcf0f1f5-7b0b-41ff-8e45-1c3625438527"
        },
        "item": {
          "id": "022b2f9b-c2ba-41a0-93fd-635a5d1a4a3e",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "1b776903-2d7b-4d42-bebc-bd67e26a5821",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf666c42-f6e4-4758-9c1b-d04e821a5861",
        "cursor": {
          "ref": "497afa1e-2363-4106-933f-a1626e54fe30",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "891da892-5b21-4559-a5dd-caa24850c5bf"
        },
        "item": {
          "id": "bf666c42-f6e4-4758-9c1b-d04e821a5861",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "f127955c-6089-4d30-b5da-902dbbf2352f",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "39a5cd67-b408-4066-b9ae-09dc00fd5982",
        "cursor": {
          "ref": "0368b392-c86d-49aa-b6ba-4aed9f505c85",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "8daddab7-84cb-4b6b-b61f-51a17f61840d"
        },
        "item": {
          "id": "39a5cd67-b408-4066-b9ae-09dc00fd5982",
          "name": "credentials_verify"
        },
        "response": {
          "id": "6a59b5a3-4824-4c88-8411-c910640b5fbe",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce215dfb-c5f5-4170-a225-df14492491c8",
        "cursor": {
          "ref": "719265a5-a020-4033-a180-7d976999e00b",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "ad139730-c95b-45e4-a1fc-a3715a99051f"
        },
        "item": {
          "id": "ce215dfb-c5f5-4170-a225-df14492491c8",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "c563c723-d708-45ca-9496-253809f603d4",
          "status": "OK",
          "code": 200,
          "responseTime": 61,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "8489a759-d12d-47d4-b5c8-fd20058c9df2",
        "cursor": {
          "ref": "c41c2c5e-e5e6-4802-872b-147f0e16bbc7",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "74685269-7bb6-4442-a122-9716e95b2969"
        },
        "item": {
          "id": "8489a759-d12d-47d4-b5c8-fd20058c9df2",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "a040c757-7ce9-46a9-aacd-28df92a81450",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8489a759-d12d-47d4-b5c8-fd20058c9df2",
        "cursor": {
          "ref": "c41c2c5e-e5e6-4802-872b-147f0e16bbc7",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "74685269-7bb6-4442-a122-9716e95b2969"
        },
        "item": {
          "id": "8489a759-d12d-47d4-b5c8-fd20058c9df2",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "a040c757-7ce9-46a9-aacd-28df92a81450",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c927ba0f-ea54-49ab-a03f-011b58971d66",
        "cursor": {
          "ref": "73f51d68-6be9-433d-9e1d-a14b5b4408d2",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "8932c29b-fce0-4a83-80cb-5dfe1a04954b"
        },
        "item": {
          "id": "c927ba0f-ea54-49ab-a03f-011b58971d66",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "12b4a2c6-cbb6-418e-a61e-7747aaa3adf4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5e21308-b1ac-4923-8c63-e4a3f306e798",
        "cursor": {
          "ref": "97bd6a6b-b51e-4753-9015-6e477dc2b9ff",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "4a52e28b-6106-41f1-b6d3-5dfbfc933621"
        },
        "item": {
          "id": "d5e21308-b1ac-4923-8c63-e4a3f306e798",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "b7a52898-dfc8-44f7-b833-cdc150a11718",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}