{
  "collection": {
    "info": {
      "_postman_id": "faa02ea8-9433-45af-b9a7-893a98130da9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "d222eea8-cd5e-4c9b-8243-cbacc180241e",
        "name": "Clear Cache",
        "item": [
          {
            "id": "b5a5579b-f8e2-44b5-ab56-898e7ee89fa1",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5d946c25-6d97-4513-94b8-cc9eedf70677",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "be699f67-bea6-4b69-8b00-7d4cb4d2b015"
                }
              }
            ]
          },
          {
            "id": "84245dd8-1dc6-4536-90f9-036112248f6b",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cb6ece43-e379-48ed-bc16-3c1b18c5ecfe",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "9432b8b3-d718-483a-b6e0-4244a5fa05e3"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "b78b009c-4c1b-474a-a742-86a9758757ae",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "29dbe93e-f796-4267-8f9a-d094e08ae191",
            "name": "Positive Testing",
            "item": [
              {
                "id": "65b8026f-3d10-4684-b566-d6691b693e00",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b1a16a3c-f60c-40ff-95a4-7cf4b44cc266",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5f06b4ce-26ae-4247-8e4d-6e5ce4f66960"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c155fcb5-9652-414f-bc70-8da3dea236c4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "58d3c89f-e4c2-4383-bf45-f7d54c34931f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "99c111d6-323a-4ec0-9aaa-bfae3a6896aa",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5bec78ca-1512-41dd-a080-75b342296f65"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "652d5752-e763-45bc-a3a1-ca5c8f020a93",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "11e043c0-47d7-4e8e-a304-439007fa5cc0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "904bd63d-1bfb-469e-acd7-4a6a79e6799a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6ec9ebfb-1bde-4247-a592-6f1049de14c8"
            }
          }
        ]
      },
      {
        "id": "669d52cf-d228-451e-b929-e56ac1ac8c7b",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "f2e98d36-1c35-4148-9910-cf2c0e2ea50d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "56bfcb4a-112b-4c29-b1ec-b8064bec0878",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "dca9de2d-6dd2-418e-a93d-318ff83d5fbc",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25c621cc-8298-4f8c-9d7e-cee1d541351c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3ccd7511-c10f-491c-a36a-6ee9a7489257"
                        }
                      }
                    ]
                  },
                  {
                    "id": "000b1bcb-3ae4-43ac-8720-98b14e3882d9",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87a70fd8-d19a-4c45-a084-d68b6967fc04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a283ba6c-0d9a-4034-80b8-5c8e296fcd77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3bc3272-3dbb-4263-bba4-02593744160a",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39086c7b-980e-4c41-9930-ea8481ef980a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b3def9c4-d69f-4674-96ac-fcbf38679be6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "03607767-edbb-449d-86d0-8df0fb59a3a3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7c90e8fb-0e0f-4e94-91ba-5da29ec56b9a",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a186f48-b5bd-49ff-acd6-8817b143b9cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "29abae0d-e3b9-4eb9-ae33-284804b7f8be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37fd3d1d-9637-493d-8501-376fc7e65022",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c183f646-99cf-4cd3-bf1a-026c6f49bf88"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "5d6f7c2a-dade-433a-870f-41d646a78355",
            "name": "Positive Testing",
            "item": [
              {
                "id": "77f52231-9971-4ada-b000-31c64ba134eb",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "40cef9de-5063-497d-b59b-5d5917414992",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "054c934e-0d12-42ae-ad37-92c8069a7d9d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4175f676-295b-4e6f-afe7-306a3e610e81",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "530d73fa-a469-40d6-9e98-e340f6a6aa3e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d3235917-1ca7-4c37-98e4-1c9cea06221f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "63acc7e9-eebd-4ae0-8156-8a52d259d1cc"
            }
          }
        ]
      },
      {
        "id": "d6906bf5-35ac-4e4a-953a-5bb280ad7610",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "b908f2de-dbce-486f-bf74-664a02fde852",
            "name": "Negative Testing",
            "item": [
              {
                "id": "03ff07c9-d30f-4476-974b-007fa54802cf",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "70384bf4-768e-4ff2-8cd1-23d3c7dd1ee4",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55ea8e76-43b0-45d2-a105-5b2c8bc4915f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3a030d5-70b1-4875-bea3-7af3115e7955"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c09bec26-831e-4244-8086-1d07d2220a5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2f8e24e4-ad91-4d5f-82aa-53e665417c81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5355cb28-11cc-4306-bc61-2d7b718d4927",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f967d743-6c3f-4fe7-902c-785c0c6e4657",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91f6b6f2-ebe5-40ca-8e03-24bbb31069ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf0236d1-2f8e-4b8e-b16e-9d73763ca952",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c4779337-5bd5-4cd9-a129-4f753812920d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "354f45ad-e1d4-4d2f-beb3-9f869ab9efbf",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d079b9a0-345d-441d-a318-9617838ecdc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb377c48-de31-43c3-a8e6-82c4bc9ddffa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcea7c9b-bf40-489a-b702-d758e2fa77da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d3ba1b5b-7205-44a4-a5ff-9d9f876a8336"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e6739de-3456-42e6-b48a-359085c6f6e6",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dec38b4-f089-472e-8903-ed5bd8095784",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "378699b4-6be0-4ff6-9d91-25d0aed2373f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f39af85-aa02-4f9d-abe6-c9ae9944c4ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ad0e7ab6-6cf6-4fc8-88b9-e50eeb4a6b96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfff9804-3467-4913-a67f-3313494ad68a",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfc36614-0644-4cd9-9f9d-69e3906abf6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f22ab186-6e6b-4542-b7c7-f767929dfddf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdbfaa30-2558-4e75-9c6d-7f5ce5e72177",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a750f54b-c925-4bb0-a54b-86dddf07e5f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6450fa9e-cb44-4aad-8286-d6043c9f9e0b",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59f578ed-9cfa-451c-869c-2f6b308a9c63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c919dfce-0955-44c3-b678-cf66551e65dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08202d19-9eac-4824-8240-af7a6980acb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "35733900-d9e4-4628-af67-2926331ec983"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b768b12-53f5-452e-bfcf-6bf7fdc47aeb",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e50ccd9-5a30-4c22-b87b-3c0db656967b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54b113c6-816e-4825-9f38-35f5cfdd7cfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b378fa08-798b-4a03-a421-acf4334f6dfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "24a3f676-918b-4c5a-9e04-8b2a2e2496fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "716af5be-48e2-414c-bc79-f4e496bfb59b",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a344a99a-7fa5-47c9-b9da-3347edcf0dae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11988245-f4f2-444c-860d-fff5e178eb8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd576912-b5e6-4783-8307-a9d3b86e45ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "48efe015-82e9-4601-a4e8-609dd85188d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19289c98-bb6d-4f6d-b334-5d1405b19e95",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c5ec293-7638-4f7c-93ce-1e9eb67efac1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3025f7fc-cc2b-41f7-9159-847c8c0c3e2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7886accf-93f3-4030-a110-df307fc8442b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "94cffd5f-050f-419a-9f98-e49bc6abafe6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0e85afc-c64a-43b4-85ae-0a3a1e19eab1",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23b82f35-57bd-4176-bbb4-364d59451377",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df9137e8-8023-4595-8969-5630b5bd5ed4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b426aea6-f2d3-41a1-8f6b-2304ee474c04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bb16d2bb-eb3d-4213-b122-24aced8db775"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32ce8742-e6fd-4363-a4c6-850f773869b3",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "419148d1-859f-4a70-a4a0-9729bb37ca7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56e19466-8659-48da-89f3-6812aa88fb5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39c7f509-3333-4796-9fae-b366a56a7696",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f34460a9-09ee-461a-997f-b639321f24fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b23ccc05-3811-4c19-97cf-92771125563b",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c86c60b3-213d-4dc0-9eeb-4f10b81c82d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9040018-16ff-4342-b60c-13da0e4a470c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65cb377f-dc04-49e3-ba31-04e2f9d9bf9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "975c916f-5ea4-4344-a097-1a2b5096e99d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "037545fb-031e-4333-96ff-81afd536a9e8",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffdfce86-bfd3-42a9-b8b4-bac0d8f93e8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fd3e11a-0669-45cb-8957-7db02d9d0ba8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1affa0b0-5ff0-4fd7-967e-ab908d395807",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "79b64c86-555b-4464-8436-4ff9dd3c2d2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1445257-166b-4484-bd42-503433493e36",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b59e250-4ccd-46d7-9946-605d57787019",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "707e8adb-ad33-4745-a5c0-d021e1b2b976"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf495b66-1c2a-4ba5-986f-07c74e09dc0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8659e226-e7eb-4a8b-9152-76ba9b2d772f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9c7d86e-e2a5-44a7-b47f-f8e06c75f23b",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d11ce6b4-f682-4b98-83ae-73841a69d216",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ac881ac-e447-4080-b88e-214cca9e1c95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa9b9d3f-2e23-4d20-8e3f-f811fd766b88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8b4ad93e-286f-44aa-8bd4-7f06bbd03a70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83741298-c14e-4bf8-b464-3312fb919c12",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7919f19a-19f2-4f91-9e8a-175838a55e44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "836c7fa6-ac01-4ede-96cb-af396e57d1a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4908d09f-86d6-4a54-b425-09efe7437b2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "65e084d4-9f0a-4d66-8762-67d6426db18b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "083dbc9f-f520-43f1-bb78-6ced6f55be8c",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9780e4eb-4133-4e83-bc5c-ef30d6f37844",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0b96ede-6fa6-4ccf-955d-07bd3215129c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e10e648-843f-4b01-8320-6831e9737471",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "667c9367-26f0-443b-ba36-a4a6ae82b467"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e9e2170-5157-4797-a862-bbe7ada300b9",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54958360-8fe8-4124-833c-6cecb3ed86cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5eda8fb1-3960-48d5-b0a1-0fdaf4d19018"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31229faa-9c67-411f-b8f5-1b1e2a9e012b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c82ec9b-202d-4d2b-8e11-585f87611dbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38bb269f-1251-41c3-b179-00f84a383848",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26761552-0b38-494b-a53c-905847b15eda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23ec5d36-90b5-4b5b-a3a2-2c8d4ae7b2f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee08ba74-846d-4695-978f-d7492e65ec5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d85968c2-079b-4d28-875f-d4b88056f673"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11fd9a43-bd08-43af-bb14-2c5e2c9356b6",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98d98df4-53d0-48cc-9276-9cda7bc2bc36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b4972c2-ce12-4ebf-8750-d6770ad9c4ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec2c6905-5fe8-40e7-abb8-eca5d8dba9b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "256470b2-5c52-49fa-a905-9c1cfae25103"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be5fc66c-76de-4161-a682-b2fd4f4fb368",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb23f8d2-d1f5-4ad8-90e4-d599da8ef7a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab95f484-9ff8-4c86-9947-b60878c9cc1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f64674c-fa1d-4aa8-9ced-56c0092b79b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "678c0298-7007-4609-b744-5656a68a8b2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b0dc34c-9c1f-45e1-ba98-3a3c7546ed91",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec5ffcad-cc9d-4ab4-a2f0-720b136969e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6da3c975-3c41-42d9-a23f-294703d3e60e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4e144de-1514-4613-bf3e-0668f6cab87f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9486dfb7-0f2b-493b-bdef-c33a69648a0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11a025cd-7131-41ea-b776-38d63a0cc9db",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7017f793-d7b7-43f5-a45a-b858509824c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b6ca742-5aa0-486f-9070-2afb6b64505a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "393bfb54-4e2d-4767-b02e-db05313623a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a5a4a479-1780-4595-ac73-0953fe29d325"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2f16796-8d08-4272-bdde-b39ef83b8448",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72d199bc-eb54-492f-a49f-daea165d4eab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0491570c-ecb7-4f7f-b706-4822e4214d94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9786d68-9d5f-438e-968d-b9120c693272",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "169013ee-2213-4f78-9539-373018565c0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38a81897-3e82-4a0b-9944-d0277ba52b4a",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87e61068-7a2a-4b6f-ac1b-838da92f5c2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e067f36-ae12-4fbc-981c-2272f6341c0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbc8c57c-c1ee-4edb-963d-1dad0089decc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd12b649-2cc8-4288-9a1e-e68c51b6eb56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a842253-3032-48e5-8a0b-32dc7e29c313",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "545fa1df-7e37-4555-993e-9fffca2dab58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cb4d0b4-846d-4226-bf2e-cae76467bfb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a27ecffb-4ed8-44d8-9719-e13b4adfde69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "56461a16-e1f6-41ab-9b95-7e9f142e42e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7541ff20-1ee0-4198-acc6-f0517680b837",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "438981aa-9321-49fa-a89c-b307034ff9f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e625b57c-d9b0-4599-b47f-717d1b96244a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fac3400b-1e5b-4b85-9690-0a197f3b478a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "46cc9bdf-3afb-4977-9fee-101713fb4f4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1925ec6b-2f9c-4560-8e53-b6b5612b1919",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68c4198d-1373-40bd-9964-a37ecd695a3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c32c448-2feb-409d-afeb-f6efb99ca127"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1e64352-f8d4-419c-9bcc-a20602e37a52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d619d489-5375-4d7a-b309-c69d930416de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2637c93b-df3e-4245-8b91-2c970ac10edb",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb429f9e-3dad-4cfc-b095-06328970b4bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dca25a8-3f3a-43ff-8b7e-718d1f33c56c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c04237ec-68a8-4c7e-a121-481c7af0ef06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4144ee0-b53d-4b0a-8183-3bc5ca63d425"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c22d4d12-fa3b-4718-a62b-33407554223a",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5538412-67b0-4b0c-b1b2-ff712a533429",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "122f547d-7c4b-4318-a003-64ed53b22cd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a153538f-0e1e-4214-a1eb-a59f3dc86f50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "8df097e5-4961-4487-a160-56a1a4bbb70f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57852acd-a765-4e02-a708-9a12a40cc77c",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a47110cf-5522-48a3-81aa-2d4353ae1d83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "481d5354-a5e2-4598-abee-fbf1d0ec43df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc57a655-b32c-492c-b63a-5d6cc7c2df8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3599bc7f-a12b-4f02-99bd-bee3a907f1d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4531abec-1f4c-4aa8-ba67-91509fd5a54c",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "671c0913-9981-43f5-ae06-b4a510b60b59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5b778af-153c-48c2-b7ec-a46aec77714c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07819f84-89c1-4313-b753-aae2315d4350",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5eeb477e-7d8b-41ad-86c1-6cb496ecd571"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71c474d4-5411-4f8e-bec7-d0b2e18b4744",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1152f311-9c99-4861-97ea-74bb8086205a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08bc1c0a-8551-4eec-b944-8348427cce15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8cea716-3673-4b71-b32e-7cfbadf3cc3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a9c00b6-ab51-4c8f-94cf-5267713e9b28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7710a7f-ca15-492c-936e-d73c30c413d4",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30157575-9b7b-4f66-8db8-80f53cf25ed8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1347c644-007e-4e02-be4f-90e867e02126"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5efe699c-f0c3-4252-b152-f41233fe5bb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b997d71-8f5d-40b1-a1d2-4892aa44aa2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ad144ce-26a1-4142-bf2a-811badb306ea",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f80aeb4a-9c89-4007-a6ad-4289ff27e2bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8416922a-755f-41cd-9639-2101900c62cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef0577c1-c043-4da7-a9ab-f436cbb81957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "ce1d631e-add1-4dcc-9ef8-0433b40eb83b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa84a833-cb96-4644-b908-9c81baef7151",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "905d3640-05e9-4a57-9b1c-d385f99d77f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d005bc1c-a359-4457-a3a5-e70b08ad23b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2860cd3-d9fb-43cd-9c03-f828446a6dfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "98c2ad07-a638-40d0-9dcd-e82b23a9316b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1335009-6c54-4522-a1b3-dd368f231f29",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a13c54f0-1217-491f-b038-1f522d7547e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef672601-436a-43dd-89dd-d73a63518dc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdaaaeb8-ab88-48d3-be33-09599f118431",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3d0d1129-5c9b-4c0e-ba10-50814e7060a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aea31ffa-ceb6-47e0-b42a-2805eeff4889",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b00854a-9646-49dc-82ea-194c4da698c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09cabe0a-b827-40c0-b577-736bc727467d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbf755a3-5540-4fe7-936a-de49e67291c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b8779cf5-0141-4b1b-bfca-e8b6db3ea029"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2c0242c-a662-4039-9b75-4fd2fedd6646",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5245211d-be91-426a-88ca-0610db543b1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1d0262d-75ef-4cdd-b51b-967283fb1fc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff53e454-d9fa-4ba9-bb18-90f58531e030",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a4d0d936-41ee-45ff-af27-769b5716d695"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c3834c4-4f1a-4a4e-b183-214d091d831a",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2601ce11-a9be-4ced-829b-99d9cec6114a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af5cf36f-40db-4804-b854-de135bb03790"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1050758a-b59a-4c72-9e3c-e71b71d43c3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "093ec831-acdb-427a-a0e7-ab92d50c5a8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8998f002-f0b7-43f2-89e5-b42a9ed1a863",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c155ac3-45e3-4cec-9f1b-c96821e84392",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24856f2f-94fa-45d2-b86e-649d7eb94c93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1718bf6a-67c0-464e-911a-50f1ce84748b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "af8d57c5-bc69-417d-8e30-fa27a10c084b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcdaeac0-d996-4cc2-b543-6dd8119cbcd3",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f966ce8c-38a7-4d17-a99a-97c773bcaa51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28ccc5bc-13b4-4cef-892b-064db98c95b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f255b32-f4ca-4ad1-8f04-8d2283ffb425",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "7751aae3-76b8-484b-9771-09c8e9c6d30f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9f4cd9a-1f0e-4470-a0a8-f86ca22a289e",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df085a25-bdb8-4ed5-9311-fb582137d2d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca696aef-2c4b-4561-ac6d-3357bade7eee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0c2590a-c69c-4f33-958d-f82af9516dc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "472709a4-80f8-4b06-b4a2-40d7e9464d0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52b27099-ddce-4cb7-87d6-cf18aa693627",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36bfe1f6-30ff-4d2c-9e5d-68afac735ccd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4899f99d-3353-4bf1-aa42-91f29a932cc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1179b606-a8fc-45cc-9f66-179ded934a63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "b1022bfd-eccd-4b56-bbec-241ab01c11d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "029eb333-d5a2-4a3f-90eb-9d2b2252d2cb",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9388cf90-663c-48c4-a047-cf6e681baeab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cc21be6-56a2-4df2-9cdd-306b336716bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc3a5173-ddf3-402d-8aa2-8588908664e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "82b131c8-f624-4e59-bcbd-c244f65d16fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30afa189-c276-4567-b46c-0f7954f5326f",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "909772e9-fb32-42ea-842b-9b364bf84e33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a3c3cd2-87be-43be-8fd2-88d52b79f4d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fe2492a-e67d-4e7e-90fe-ebbcdbaea3a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba51ab42-3eda-4b56-977c-a006c9d668ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b67bcba4-e2bc-4476-af7e-8a587286a042",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42e9c159-8c9f-458f-8b6c-47f63f158584",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfd6c296-ac5f-4c94-adb3-6cb57090bfba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85b57e07-ecb1-401c-9ae3-e08beccff4c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b2919e18-98b6-4fb5-a593-92df1d044319"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61798856-7ef5-4f58-9b08-bc28b4a7e670",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b3cdc98-24a5-4c50-90d0-6f8095a19108",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33e29b6a-4ebb-472d-a2e1-18d8fc598549"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8ab0c80-c8c9-47a2-b963-f7442547cbce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "be010b01-b25e-4a83-9a4d-f2096f6cba15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62593898-f36b-4909-8c3d-ec820f43fc10",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a82b6c45-6afd-4c82-9f87-b69412d4b939",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdfe6502-89ae-461c-b117-a8eb9fcd4b3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f16629d1-9c0e-4824-afa2-5982404879e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "de9883c7-b4d3-4b6e-9f2a-f11096f320d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a59a5408-da7c-4e81-841f-eec562b50b92",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67382e69-cecc-4272-ba2e-230cf176d516",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d849732d-461c-4ce9-80e5-dc91f1ef649b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "661c0fae-8441-41f1-bfa3-5807494a9df1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b8136e15-6d1b-4a2f-a397-2ced6515e88e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c389ef4-05b8-4d37-be63-0bfc812615eb",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "183e4f3e-a6b9-4cb3-863e-268400d2ab0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d2d9bf4-2ceb-4fc0-8718-d8912d4717a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b17568b-ef34-4ed7-9921-4ab34de3c7f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "b1752111-665c-4aa7-a484-c9a787ebe7cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0835298c-9200-433a-91dc-9b22abfa52d9",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88eb65fb-75f1-4b3b-89db-205927bb4ede",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd399d97-fe2e-4e7d-a962-6c46b8245dc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce3b04d6-84ba-4d79-9f72-4557569096ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a49423dc-b981-48bd-b0c1-b269d6050d0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71fc1fd9-a6a6-4b8d-8347-7be5199c4faf",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4d72e4b-9dcc-46f8-8354-5b9e7f531ca4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b27ca851-9780-4407-863e-40e828f4117b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56b95f83-effb-4a05-b769-139edb753e52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9bc04baa-0379-4f29-b3f3-116f85478e6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6736b961-9c65-457d-94f0-78d7b6988add",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34b38cc5-72fb-4f15-a8a2-f68c7b0258a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c04ee92f-4859-459b-a507-f411ceb5330d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aaf82e2-513b-4841-aef3-c2452e1a98b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e0b49d1c-186d-45c3-bce4-b0de695d5be1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32139ed0-574f-4ece-b688-63daf8ae5da7",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3944a6e9-08f7-42a1-b554-c3530270e6e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07af4838-3609-4a0f-841e-98b4cdea4393"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99cbd7be-8e98-4e2c-a99b-37ec4a9cf647",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "92bcdae1-4ff5-414a-b02a-ae197191f7b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eccf14d2-cde1-4614-8589-4ff003c75628",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33a7f846-b8eb-4893-b2c5-76dc4774010f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46cf95e6-b96c-4c3e-bedd-b44ffaa490d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34336656-5834-4d2a-9c91-263b6d2e8fd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "7a1315ad-4143-4481-aa3a-a241a6377a12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "528d5a5f-86d3-4ddf-b476-a2b048804447",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5436677-1a9e-4b0f-b778-86e267d3b9a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed0bba1f-e4a7-4949-8a09-40d7adff99df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f5d1c05-12b7-496e-85ec-450ecb6a720a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "00674b92-07d6-4ac1-a14b-eca4cd78a27e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3592e53f-812f-4c29-b0a1-0d0cbc6d1054",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61108c86-459e-4919-baa0-94ee18a461c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2de6fab2-30bc-4240-8d8b-52dcee2570a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9177b6e-2440-4f4e-8652-8159178b9948",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "bb19c0d3-4856-483b-a73c-d67eace99f2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "852b32e5-3aaa-4359-baf9-62d107706a36",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae2f6402-2bc1-40fe-8a45-a0a4217c7a13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6826fbeb-2e12-40aa-854d-5726112f35e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1523cc8-4e0b-4b09-ba8d-779d1d010aa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2467d555-13b2-4014-bee5-5f64cc2dca5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e67c3527-cc0e-406c-9dcc-f1324c5032ff",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cd79adb-c8c7-448a-878d-dc446015ec1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5e81aaf-3f7d-4365-b0e4-13e1e99701b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5be3e5df-169f-4163-89c7-66a392479726",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e5dbff16-cd42-4fbf-8261-8d0942b49a00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fff8254-d3d8-4e62-9108-14e7c868b1f9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce3c42cb-a4e7-4215-9105-3706b533d51f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10c9085b-7c97-46a6-a2d4-572d69b30daa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b8e6f7b-01be-437b-be06-80e9cebed6ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "b1dd34e7-37a8-4d51-9a47-bbb25bfdf542"
                        }
                      }
                    ]
                  },
                  {
                    "id": "def2e86b-e969-40a1-a479-9414fb69bb92",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "322f39fc-4091-4cc9-84c2-ee5cf705206c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8788bc16-50fa-4e31-b269-a20ecf5a89dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf34038d-5326-4866-ba64-9bb880d2cba8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f328b36-dfa7-4d5d-a4fc-781c7cf121b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f75a328-42fb-43fe-b3e1-e6249360ae71",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de3ddbf6-dca7-484a-803e-9bff562aebef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95656bf4-ab44-44df-b4e3-f406fae3c8e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1adeb50-07e7-4e37-816b-89a652a67476",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "266b5486-ac58-4c86-ac61-245f102d3f97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22f68f47-943c-4ff0-93ee-bbdc1be16de7",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afd49983-5d56-49ea-868c-8908ccdc0de5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9252cc4-b736-4656-b70a-b14888862f7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9568420f-2d20-4094-badd-d9ba76d32e19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d57b0ecf-8363-4173-975b-e9b82b315f81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df861c88-0388-4457-a84c-efb4837fd03e",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8d48b4f-b65f-44e1-99ce-870c2c0dd405",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf341ae1-07f8-4625-b211-b9f67888247e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40a6e8db-4110-4d03-9075-da8dda1f6570",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "85cfe62a-6200-445a-8826-572fff8aee95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17779976-223e-423d-b8ee-f79238c9f927",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd846eed-56aa-46b6-a238-c14dcad90e6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86ca9763-b234-4a57-a7bd-2c1eb403a388"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ff78cf8-2a0a-4a54-9db2-9c2bdc3d60f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "80e3b52a-be70-4b4b-b27f-9a218f514967"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e5a7368-d4bc-491a-9197-04193b89447e",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b300a0c0-bc0d-4d53-bc1b-2c756cb973ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "070778c2-e371-42e6-8991-e4068f190f3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f7a6ab4-134c-461c-96ed-9d3f521c43ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "25be0c81-5af0-4a4e-b872-ad332079a795"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f8308d8-2e84-4d10-a13f-accf7fe0d86d",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c61f065-512b-44a5-9d25-cd670d5b7842",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d22d2d4f-9297-4d4c-a897-e5ec806ddeeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f59274d4-261d-4dcb-8073-bb2fe71c5f21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "f102b1b5-c21c-4ffd-93f0-828f7ecc4eb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc2a39cc-716b-4d12-a94d-cb62a02d1a23",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fdf092e-0228-4120-9289-dee7472ab926",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09685853-01db-42c2-910a-7b2de39f0d44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d225fd97-7d7d-45f4-bf4d-12083c9757a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "2aaa5fa2-ebef-43b0-b596-49028cde029b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77fd20b5-232f-4bfd-8803-b09851f26c27",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a378c5a7-9cc1-4c4f-83ec-01745bbedb2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffb44310-7c2b-4d0e-a1ce-b5340baf4cc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc8a5eb9-ef58-4eff-9ba3-60d7310e0196",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a6762ca3-0beb-4d36-ae1b-d4c504afb2cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3c69600-0033-40bc-ba03-2677f4c24ff8",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25d1e877-3705-434f-8e78-1f1e74226498",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3402b2ad-b322-4c8a-9d9d-a7b725e08ba5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1051d53-7283-453c-8454-4ddb36e0a0d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4008cbc3-05e5-4d0a-a8a5-d7d4b8641d6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d329490-3136-47cc-91fd-15b885d57f14",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17311735-1c54-43b2-95f9-e92e9dda9ab6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e98fa9a-0b69-41f3-9f5f-5bc1e7de7613"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "841380cb-588b-42ce-87ef-26a5bc366003",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7732e649-ea08-4255-9895-6a03dce4fe71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9efbc674-f89d-4e66-8613-76a01ee6130c",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9e5a4e9-5f1d-4c5c-ae0c-092f4b54f356",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dee6b3a6-d97a-4056-ac06-3522c6d9d919"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "007a1802-d08f-460f-820a-54b08e8bbb83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ddcf7e9f-bae0-45f0-abd2-ae8d4ff1e044"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9adf9a5c-20f5-47b9-9da7-f9d6d35ffe55",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78fcc309-3969-4cb3-9363-2f4b7fb9e9bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ae6585b-cf53-4603-91d1-29b91a320e78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08e02994-3857-4904-b8d2-8b0893da73c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5cb44fba-edd2-45b7-a0a8-f6d5724cf628"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5324d52-2a94-4055-be62-9b91bf6079a8",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "813adede-ac1f-45e5-93bc-9593c7c043d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a83c79b-aa28-4c94-bc5f-b2a8566c3cfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8909538b-3a2a-4d85-a68e-fa1b399fae06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae30194a-a742-437e-b88c-599ad45d0dd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7afdcba6-3032-4876-83ff-cd880c5d30c3",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc357b52-9f2e-4a9c-b9b5-75f98063b7ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ecf9d26-a4cf-4d7f-adc6-1ed9663bd7d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12c36fd7-6d61-4c75-8dc4-c80a87037888",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "aef1f1f2-6570-410f-ac7b-584a5edfe93e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38309644-dcf7-42ad-a271-29d26c7005b9",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f0cf8fb-4d3d-45c1-8ced-78fdcaa04b22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5478200-2a7b-4a20-bcf2-b7060bc7310d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a51f0aed-5a51-4ce0-9bd8-cbe7b22490c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d20ee90-0dc3-4871-8aa7-18703fdd720f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3debddb3-cac6-4cb3-9601-5fa8e59b5b10",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7bc15f9-1f56-443a-98a7-24e4dc44d93f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1150d3f5-10de-4ffd-a087-cd477cd3b932"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee5ac080-ae1b-4dd5-9e1a-959f44b592d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "01bb9236-925f-402f-8108-3f1b3579de9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e8b556f-e742-40e1-b4d7-85879fe16805",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce1a1417-a287-456b-89e1-a6b745b10707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96bb4252-5381-403f-8fa8-1b7135b21a32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aba91b0-ce3d-4bb3-8a9e-3ea6a7881cff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8f364c05-a884-4452-bfda-163926a73638"
                        }
                      }
                    ]
                  },
                  {
                    "id": "875c8a75-b66a-4a90-89f7-b66f4a719b67",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09e11969-c5df-4afa-8c0b-fb00395958de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a4ba57f-4039-4bc4-93a6-8d1a94627070"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f55101b1-6cc6-45a9-9a91-32be3147da1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8f5a535e-2b3a-402c-860b-3778b0a0054a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc694219-8d39-408a-a7bd-40886c0fc045",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a9edf8d-b8d3-4c88-b4cd-754418c0869c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be35c738-8579-4724-b6fa-73497ddb5dd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1507aea0-fa7d-4898-b5d2-4630f6fae97e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea70ebd9-2a9f-4d7e-a798-730b727cadf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a250648c-c34e-4952-a07f-847ccff15802",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af4ebf31-e8bc-448f-8f65-ff369e00a8a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e441cdcc-9716-438e-bd44-d6e9014a78c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa8ccd3a-9ea0-417b-a2ab-a4b57b793d43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ab06149-2d1b-43cc-bf24-3f7b5d534a54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51926364-e3b3-4a76-bd57-452288371657",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b312191-3824-4792-9832-b63d5a963487",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cce7e77e-115c-4ee9-b77b-99ff0855cbb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96cdab02-4b6b-4ae9-87e6-4e92ee878512",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c1800f80-0ecb-450a-9d82-8d44a4f612cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a2cd196-18ad-4d91-a8e9-2f8fb5780a08",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "742511bf-44a5-4774-aba1-6986be63ee48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "443c2bab-7ccf-4b56-bdc4-cb1821d1b707"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff834c6f-795d-4bb3-a354-d8cf0ddf1b19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "00ed6f58-4f9b-4ecb-8c09-6fbb620cfc06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6ba5c65-ac33-4da1-8c26-7154fed7713a",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d350e04-2f23-4839-a60c-832093dd93cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba51f3f3-fc35-4787-95a2-7bae59d7e0c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48c8899b-fd69-4d9e-9135-b35e49a7af2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8972aded-9428-4c29-8637-3de7cd25ae28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0c4d124-1ed3-481d-97bf-8367279fc652",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5146c8c3-27cd-4c17-9cb7-6f20bbe4483f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a114dd5-a7a8-43ac-94ee-d4e31c757256"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2ace09b-9656-43eb-80cd-c042798465ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4168b621-0924-4729-a492-8d8c803fb8c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ee71fc0-c908-4531-950e-49c452586e5b",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ad5056c-1df3-4e63-ab9f-13f5032894da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a150fa1-e5fc-4516-9194-8ca54aef34ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2584bda-3422-4512-8440-c73f0dbaf2f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ca4cb65b-faff-4188-9751-e254c2d100bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf6888d0-d720-410e-9f22-755790766dd9",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a5c3721-fd67-4096-82e4-a6e741a3a19d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d47750e-ca82-4427-8380-a0b65e839c89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c766bffe-a880-452f-954c-d400aeb87e86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "838cf334-c43a-4d92-8378-442a90c688df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caa5610c-9cd3-49d4-920b-39e477ee618c",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1774f9d9-59c8-4841-bccb-0634368c1e83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe7d3de1-5396-491d-b65e-ae12e7786f98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc71802a-98c4-482a-8a61-38153d722fa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "4e17aef9-8d10-4702-91c1-a320432aa465"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf1e50af-822d-4048-945e-9f9dfdcd6dd2",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3140e4bd-5ca8-4665-b484-a87ec27ee9dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90acecd8-6509-40bf-92bf-603a79a10ead"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b58eb90-ebfd-4c63-971b-66a090c60fa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7f039a1f-f2d7-4708-b3df-621523e39cdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "093cd9bd-9768-469a-9a2f-fee3d96045c1",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c276ac1d-19b6-4fa9-bc98-aef89029ad2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30acfa57-b4f6-4550-962c-46cd1e224beb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69db956e-4b47-48c5-b486-14d86e26ece1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "6c2f3022-efe5-4149-9e6c-5cbd52c86788"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd6550f4-e6da-45a5-8f98-378e515c21b3",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d25d77d-781b-4892-9a5d-d16f3dbe9431",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "495c2162-afbe-4768-9abe-60177b84d86b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14fefb02-c3d9-42b5-9c83-02493a593291",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "9784dc19-c5ae-4f8b-89ec-4b7f4d38db8f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "44fd31e5-402e-499a-b30e-84ca2c5fcc58",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "af32af2a-1a51-48fc-8038-25710e0bbf2f",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d07c674c-133c-47bd-b6a6-1db2071ecfe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c9dac455-5bb3-4e6b-b866-02d95d31de98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1d8e112-f6fc-4e43-b9ea-f68530939e3f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "75f90201-2c18-42ad-8f7a-6f547f0c23a7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "51de0786-488b-47a7-bbda-f17e977879b5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c9d25068-8f7e-4e3f-866b-96066bb815a6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "737bf05c-a4a1-4b2d-b2b7-0febd444f646",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "20e75604-03d0-434b-abd2-f3545b0e3b05"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d07c90f3-6ed3-4418-b0f8-e89391695171",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1861114a-e849-4310-9547-4997bc3968ae"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1dc7d90e-c204-41c5-be61-b484b2c53e63",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "38178caa-3052-45bf-817e-d57bbf77c0e6"
                }
              }
            ]
          },
          {
            "id": "2d64d8b3-9253-49ee-82bc-a577cabc20db",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2969427c-8fa6-442e-96f4-2de239e42d79",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "974fc5e0-ddd5-4b65-a3f0-5d180153a447",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c8e835a8-e930-4517-a049-030326189e85"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5d6cf7f7-da63-473f-a028-0d93e90883cc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "19033354-6e15-4eb4-9758-056e450c1609"
                    }
                  }
                ]
              },
              {
                "id": "535e8cd4-9065-449f-95c9-aeaee860cc6f",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ed57df34-c855-4254-ae43-079532a1367f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e847051e-07fc-4e1c-a07e-da8de0710c95"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3efc51dc-d10f-42bb-baf4-2689cc36495d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "06abd3c5-370a-4778-9036-a0b055d38e98"
                    }
                  }
                ]
              },
              {
                "id": "e447ecf3-ca82-432f-8fe4-609e3fd25c9e",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "23a88a95-6af2-45cc-b759-efe9ec2ed8d7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d0809361-f249-4908-8aa4-5b4b56e0b9ab"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fee34697-f062-45b8-a406-e47745f3061a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9c76e685-4fac-4878-89bf-3e91503514a1"
                    }
                  }
                ]
              },
              {
                "id": "142daf83-bad2-42e2-a38e-119d9aa4b826",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "df13e261-6756-4667-890a-db3f2112bf09",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "578a7764-ed80-4f7c-aa7b-923e07b4dd41"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ce3259dc-af6e-4907-a0b0-fdc4f7478b57",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "3ad78903-43da-4f0f-9b25-789573be9d72"
                    }
                  }
                ]
              },
              {
                "id": "741fea56-d53a-4f32-a79e-573ee3e4ce84",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "929d1167-33a9-431c-9ccf-065aac99cd62",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3fc064b8-e487-4a1e-ab73-561476c4127f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8db67f30-0670-44d9-a9f1-c22d3f5d766c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "18ebd3d7-4b6a-4e0d-a6a8-af528f1ac8a1"
                    }
                  }
                ]
              },
              {
                "id": "192bbf41-db63-4c6c-a798-86bb10875cd0",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7dba93f4-e1b4-4fff-a943-3785192ebf71",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "527b0b93-7713-4153-845d-ca4d1297e0e8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "978b1376-10eb-4b4e-9db6-fea4f80483a0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a380ca66-4c40-4d9a-9aae-ef15ea0d8023"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e2627007-b203-4bbe-b452-1ff17d75b842",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "eb2b8126-1374-4e74-9874-079b06cb8669"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d8ed8121-bba4-4ba1-aaef-e9b15726472e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "29f42de3-7e69-4582-aa2a-12b8819faf74"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2c12109c-7b22-4a08-8140-ed3347d33fe0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "daafdb4f-b9f1-4b69-964e-2bf61dd88b7f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4fa15dc7-600e-4a4e-908e-10e357dbd83d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "de66b5d0-09f4-46ee-832e-abdb5702136f"
            }
          }
        ]
      },
      {
        "id": "b32f4a69-9466-46d3-bcda-df71b5d480b0",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "272adde3-9871-4cd5-9d0a-ca71c153c7ca",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4c0df6e3-1466-4c85-b700-d511e76d4cdd",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c95147a4-7eb8-44f0-a6e2-d8e1ef68d4c2",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33af1b3d-c74d-4d3c-9786-cf5cb05bc054",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78e1f915-676e-4ec9-93d3-e36ea812a108"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "128346c1-c2e7-46a4-be9c-8806429881af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "aeb12a6d-6490-4291-a28e-a58acbfb45a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f715874-b42f-4c07-b2d1-cc11ffac2a84",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "824cb1e4-f4c1-4be1-9592-b40649be083b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49ae16e0-126f-4bd2-b1ed-a311872deda3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9814564e-480b-4b56-a578-a44c5e4f4de4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a19678b3-19e7-4ff6-9a7d-228806365142"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d387c011-824e-4d1e-b384-94b5ce57e323",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc1db5f4-0176-473c-bba1-6a98da202e6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dfa3464-37ad-4b23-83ab-d5acd7c7d037"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b620620f-1635-4527-bd44-47014b2ead87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4067291a-153b-4436-bcf5-cd47b909ffbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63d656dc-5807-4f6d-976e-bb7a7ef8110b",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1748fa2-e064-4c93-a836-53f01cacc782",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a44f76d-0490-4710-95c7-bf25b290c14a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ac942ce-5e2e-46b9-912d-1078bb880f98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2f48a7a0-7e2d-4528-ad7d-09e6bc6cfa69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1f03609-789e-4c81-9bcc-b6512bbc7e87",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fec15081-96bb-4866-b2a3-742e20639895",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85581721-5e80-481d-aa8b-7eb3f1c83492"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9b67a48-14b1-478c-9776-d6baa6e7ebcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "313e02bd-36a4-4367-bad5-b4f31a51dfce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23942e5b-16ea-4b66-ac72-d128deba8af8",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9561691-36ff-4ad5-bb9f-52cca452fa87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "618b64c9-1dbd-4f3b-8e3e-511d01d01645"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82b4b86c-9a43-4d6d-aebf-9b66010ad928",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8f62e588-bf61-4bb1-8840-8336c564ad1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44a5bac7-9ded-4fda-8efc-5866d181d039",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "704f272d-c6a3-466a-8bd6-feb5dcad105c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b266f51-e82d-4a22-b70f-4b69cb4bba6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ede94722-735b-4c40-8d78-0122f4d220cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "a609b9f7-7a10-460f-978d-4553585d8866"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8068e52b-43bb-4bef-aeff-a381b972b897",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f30d2091-1561-49ff-a9a5-1b618bcc2d97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4211fa15-90e4-4341-b03f-e9610aa384dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acfc11f2-b293-4ce3-91d6-19a7c9588859",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b562a1f-b18b-4ac8-9eaa-8ef4d6e9db2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c81f732-b569-440f-8137-96c6121887bd",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d863bc6d-fa2e-48fa-adca-fe128119b8db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1ec0202-b258-4301-ac6e-f9a53890536b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e557e8ec-2dcf-43a9-b483-a1c5f5b43517",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "76fecdfb-a4a4-4ab8-a0de-b8b3a9a4e461"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0566993a-4d2d-4147-a2a6-e2ba388dd56d",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2c0b489-1640-4305-a1f2-19391251c2f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ae38c05-bbd1-40bf-b045-b02db524ee43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44e79113-5b2c-4068-80af-ba848c894dcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "da949b2a-ca94-43bf-a207-0673648ba8a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55d39c3a-13ef-4ff8-a4a9-8ab6e5679a97",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be9875c4-b7fc-46df-b5d7-38b06dc49bea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5214778-87ff-42c1-8f7e-b6e52348d0ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b108d51-d307-4592-a0af-75b2a5ab3f45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "f503f1f3-0035-4980-9d65-597820991b3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd697599-81c6-4e66-845c-a553ae33bea7",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d643ab4-2833-4db0-8e82-1719475de0ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7892341c-dac7-433b-9b67-2af6915c5200"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41ce3872-71a2-4f8e-a97a-128cc0d97df6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "758871b5-3c30-459a-8eb5-69d0d1858a33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73f23000-dd49-4135-9cf9-9d1aa5e49856",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2edc772-25cd-43f3-b643-cfee98ac626e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "848b45e3-cf16-42e3-81c9-8e058e207be9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78e479de-b3fa-4294-b852-097396a4c363",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d98fed1-c7fc-47a5-99c8-16d30e38b431"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e04f8bc3-aa3c-4253-aff8-b10382f165c9",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bca4964a-7f6a-4b00-a108-57f22a5f42ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9361706e-1790-4709-895e-61010006e317"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "780cc3bd-1609-479f-a715-dba524463c27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea08c399-21b5-471b-8782-68c33e0249ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f84dbfce-036a-4c0b-bfd9-38ce0ce74156",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b075742-538e-467c-8335-5609bc70e01e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0c3bf1c-0906-443f-9cc8-a0880be8309a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29244bf7-c6eb-47ec-96b9-fb8d9f9ef1ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5735541-839d-4838-bc50-83d0b06184ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0cdc93e-eb41-406c-ad1c-f3c1330796fa",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df06f11a-a3b5-4fc9-82a2-c7c599b88181",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14d05796-5b9a-42be-95c8-23c686c01c2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3231003b-fc6e-48c8-a7d3-4e28a095397f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "5af9888d-7a6f-4d7b-ad89-a453c101c1a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04a22f4e-3d7d-4a83-b4de-4d239b9e29c9",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41d99cfe-be77-4939-b273-e79f52dc3826",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5947e4b7-f1be-4bc0-ab1b-ae4a2a4d838c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1160a00a-ed58-4b70-9ad4-be557e168f0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe698b36-f46c-4c24-b49b-8850333ee065"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ba95119-d7b1-41f4-9643-42560c0fc26a",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afe42c0c-05be-4150-9c56-a411ff3db5b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07684ce0-2538-4596-bc21-02829260119b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4890498-049d-494b-ba6c-ca4dc831c8fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f64016c9-434a-41af-9578-492e42de22fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "710f6109-1dee-427e-b203-2f4b6e257099",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73d5a550-50a0-441d-8298-666fd4fe444d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a1f3cee-fd9d-461f-8374-364e7e5e8328"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9bba2e7-a1fb-41cf-98bc-b97cdcf39cf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "24109b1e-47ed-4a6b-bd8c-19e7a042a0c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4be14f93-5e9f-47a2-bdf6-48451cbe30dd",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd7f7663-7904-45fa-98b3-49b0a42d96e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd56b803-74a4-4f49-89de-154ecb8e0843"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9b7bd76-1e8d-4e0a-871b-65e1c1c1ef78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8104b67e-1e8d-433a-b49c-fbd254610873"
                        }
                      }
                    ]
                  },
                  {
                    "id": "774c136d-77ea-4900-85cd-3c8a53883f7b",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6bdf2ad-87cd-496f-b808-491e1f915edd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d422334-2350-4307-961f-20eef3082b34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "678f9569-9ca0-407b-9a41-005867eb1d95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d70a5ad-82ab-48d2-946a-077320f5b58a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d786b45-b7e2-48a5-8a03-792f6f6a5bfe",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa22cf65-cc31-448c-9c8c-43fb3c40083c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a6b6419-77ef-4026-bc03-cd3243d1633a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd017aa9-9d54-4f01-bdce-052bb1a1ee52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "46c76127-da84-448b-ab4e-611637cbb116"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11a19361-29db-4c2f-aa5f-330d23f7299e",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0468061-4d68-4cbe-bcf5-34778cc73017",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ba6bc6f-d0a0-43aa-81c2-9b8b676a23b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08d65b98-527c-4a91-9a42-7791afa0101e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "edb77428-2d8c-4ab9-aa27-618f8ed1fbeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3f0fcd2-79cd-4cba-a9fe-b8c1a4a93a44",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f67a829-a642-462d-a0d6-8a2648644103",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9251f7df-318d-4ae3-acb5-eac464cd1fec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c4f74b7-053a-4bc7-b4e2-fe6892b87908",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d590671a-43e3-4ad2-ac3d-2119464f3981"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37095c04-ba09-4d10-ba56-a1d60f40a538",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41190f2a-8706-4a79-9703-45ab65d3088e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98ce6569-9094-4140-b133-6735d214060c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9f56465-75b1-41f9-9b79-2efbf4d92941",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "41f2ba3d-b7dc-45e6-9a90-05f51935da6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cec88fd-b753-4cad-a29d-201bdcf996bd",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abd12b3b-2019-4898-9a21-d3007617b3a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d585a2a-22b4-4681-ab90-2d2c08fcc741"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5019ac4a-4c07-4b7c-8952-575afe37fafc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "af29ea89-8f7d-4d95-a34b-a0d7e49247ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2448409-9645-4f3c-8d46-251c83987c51",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2343ff4-95c4-4c22-a443-2b0279b7fb0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "925f000d-18f5-4173-be48-d784a354bf4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be57952a-fe1b-4aad-801c-ec53f8c687a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a432431b-5a2a-4b9b-9838-2cba05149f1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1172e17-c399-46fc-9168-a899da784c96",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f0e9d96-4766-47a2-8b36-ee992251e559",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0d6e36d-9178-4109-8efd-626ecca9ffdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24de5775-80a2-4135-93f9-a80a4ec36f7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9aa305d-cf08-4717-a74e-2f00595b28dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d54a311f-0578-45b6-9780-117597596709",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d650861-687c-4f19-bc3c-5f8ec1c0b5ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e001dd0-6377-4bf3-a48e-9da33f8069ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b59532d-b567-4daf-8568-c199ae4b6bd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad0b5da4-6f76-459c-bf04-f54a208a4706"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42ca9465-0311-4d7c-956d-15fbaeae8fb9",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99701de4-b8c1-487f-9b04-f7cc58061ad5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b781c326-010d-4593-b21e-79d9dd78790e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5db2989-ac81-479a-b801-08054b409c8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5f64dfe-4963-4928-ad9d-0bf333c29116"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48cfb503-95a2-49a4-a772-2a492d95e5d3",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "225759ea-3eda-4b04-af90-62e1a602065a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccef8b4f-b8cc-47ad-af1a-5365649e7052"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba8039f5-02cf-4198-b85f-da6b56b78718",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e088fb1-567f-422d-8923-68e5eddb9cfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "909b6aa0-17ca-4cb7-833f-9aa9f5ed6640",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c4e2159-cf69-4b28-85ec-8b0b640722ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09ba3669-f009-4a57-b204-f47d7859df21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caa31535-ab4d-4c84-90ba-1a0bff8f595a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3352442-4299-4b7b-969b-a695cc692086"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ebbbf926-e329-43a2-9242-6699f8d477c9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7604af20-222f-4563-a0f2-db5918c3666d",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d4f9b77-7647-4045-b3eb-d456cff10384",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "58b27a5d-6638-4279-b5ee-670e74f2bc5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba6b4365-59ca-41fa-827e-59a0a93c17dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b80a2c29-fe30-4c75-84c2-dfbd69f192ec"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "62b6d47a-72e1-4af0-85f6-88669bf695a0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c1de4270-b93d-4092-bdf4-5edfdd912e66"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b8112df5-896e-40ad-80dd-7fed06ce6749",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b4810a5e-abd7-4540-b810-0874b907fe25"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1cea6ec2-2701-4ad1-96ab-170d28a3c066",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a2ed93df-6034-4ee7-a02a-ed5af1285fec"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a5eaab6e-4f3e-4870-a298-a50643aa3dbe",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f59eb4e0-6467-4a92-9eff-54ab8245a2e6"
            }
          }
        ]
      },
      {
        "id": "779092a8-9a83-431d-8bea-08355183876c",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "901137d4-1f12-4f94-ae80-25c475fa55a5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5c52a43c-9d4c-43ee-a51e-3f0d30769211",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e2076561-d1c0-4e76-b470-449e70ca0afb",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56d97892-8cd6-4ed7-8a34-3d47c908e698",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c48474d-bb90-4865-bb23-fc711b599607"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b1ba973-4747-4c5c-82a7-5e86c724aea1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "9463c041-1d37-445d-bc93-a4a6cd79e67b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "949cd820-e510-420c-9fd2-4cbca63e4e39",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08132646-84ce-4978-a906-2975110ec489",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aaf8e0b5-d0ec-4225-85e7-4da1396e3208"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f2dafd6-3b75-49bf-8998-b8b36431ef25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d85ee33c-46fd-4939-95ff-fe08ef57baca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ee59945-120b-41f3-b9e5-8b1723c58569",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "089721a5-c3ed-46d2-9d2f-35ea0501468c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81a2e9e6-9ea3-4169-90dd-a1cf6e7283ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1916208-1f29-4b06-af76-4254bb8bc7e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "872f1943-123b-4a02-996e-e8bd655e7909"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73d8f91b-1272-4d79-8d5d-6f2702b40ed6",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "374e20e0-0730-4d6e-8d78-42b30d59383f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "618146f8-4014-42e0-9971-102c6efa2c18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ebc5b3c-11ef-42a7-8bfc-5c88f4f7ea51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e0fd080-6d6f-42e1-ada9-1d926b643c35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8acffe50-2d07-4945-9459-6afb5f5bd7e6",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d94f6e76-17ec-40a5-a14d-56e7bf669a53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5633921d-cdb2-409c-89a1-28b813418483"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e84d3580-d901-44a5-a82a-1f3fabf75b3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7630ba6d-ec12-497a-b5dc-c28061894a1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4598f429-4b95-41a5-b77d-e4f745c5d7ab",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97847ec9-f2b0-46a5-9e81-a88d81099058",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5afdd67e-9169-4538-9e72-9f2336e56803"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce338025-bb3c-4f8c-aee7-ff89acbf6edf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "78cfd25f-59a7-4a8a-85c2-a8936e2ca657"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c8f239c-2513-472e-bbdd-c896ee904010",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a8e173a-c619-4888-af3b-5a99c2f5e1e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7faa0e03-a371-4968-a7f4-207f112716f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99ed9412-aa4f-407c-9bc4-d42eeeec4324",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "09913d83-5a3d-4044-bcf4-19a30313e6d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "501ae5d1-9910-416f-9fcc-45981753544a",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6f94ab7-fec0-446e-8e4a-5662c95b1ba5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85696d27-8230-42d9-b435-9827a30a765e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f471487-b8f8-40c9-93ac-ed8ec0c23668",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f5b8084-6373-463f-b2ce-a87c959776fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd49b6ce-2576-4ad1-b876-938140334c00",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d737db08-c5b6-4b6c-97bf-3cde0e7ee97d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0a1ccc1-6972-4daf-b93f-2b223ac0d42a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73181d87-3216-4217-977e-e5ed1dedf31e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ccd723be-cd7b-4999-8390-d4db5180bd73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcde74a5-3ba4-4aaf-899e-b82107d3bfac",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f114d588-69db-4acf-a6fa-da51b46ae387",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "934b2ad8-c134-49a5-b62b-4a8a83b415a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ee2d9c8-09d7-4a49-b783-08c98b8acd5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "89db23b2-e67f-4e5e-9819-7d97a62eda97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70e409c4-6cce-451d-8145-c4c0e83dc719",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14b7a556-1712-4ccc-98cb-76f22473bc8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45a9e789-6723-49dd-b9bb-3733ff99f116"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eedcdfad-8f45-480b-b342-dd59ea8f28b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "448e3fe6-70fd-42b2-85b3-71e4c8a83266"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b604f687-7f6c-48de-9a2e-1102894fbc1d",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6443ffbb-fac3-49ff-a04d-71ba8a836e76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2529e8cd-c69b-44a5-8b22-356ae844259d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a4bbdea-65d1-41c6-9b31-03ab77e7c6dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ddc5dfd9-4162-41d6-a101-f8260610e023"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1020cd96-1b09-4378-8fdf-44ecd43400d1",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d62d984-2a4f-4330-87fb-a34e810d8476",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c3ec34e-b711-4e91-8070-9c482a72005a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4a02c45-0bc2-4b0d-941d-e9885b0b91e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a156487c-413a-42f9-a341-49f321609149"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28c61c67-0d1b-46d9-ba75-0176c6982bcd",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5aa28a9-8651-41ec-8c3d-315916537a2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86ef2226-2ad6-4f40-a2e3-5b12ba504582"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "529a2b9f-4b20-4ab6-a8cf-60b6a44faa2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "98ab91ea-0c80-4ef5-af6e-5eb168d597af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c829e85-829e-4724-b48f-526009612b1b",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d51600ce-d96e-40c0-b40b-6100776684c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c167b4e1-fe8d-4aa0-a71a-5c697bd48153"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b02d2b2-cf37-4f4f-8819-011fed370f12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "88edb99d-fd0b-4b76-9c1c-dd2e44cf6a6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f3143a9-ba5f-4df0-b637-1ed9c850bad0",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d185f529-fc27-47a0-97f3-2848e0aac819",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "732f4e10-7586-417b-b910-4f2e3358dc1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e6f121e-9f14-4f93-914e-2c1b344cd788",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3b65075-d6b2-4462-b5ae-0bf34c34b8c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44a7011e-a057-42a6-ac29-8a1c6f82cd2a",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba8b67a0-5a09-4745-8a64-96406a68b6eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddea6d8e-367b-40ca-b13b-3a381db46032"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c36b8fa-e443-4437-bfb9-6d7df3d92604",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "571496f0-0403-450e-92fb-27a7ef516d4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e4a7305-1d2e-4ecf-916c-24c2b917c443",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3888cccb-2c27-483b-89cf-db072338d38d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d40e014-f141-4668-a543-c4224c2138d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a9e1d7f-1077-484a-923e-098dfa98a66b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ddfed4c-786f-4371-bd9c-8f00e01ce31e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55d5b93d-ebde-4812-82ba-7614bca1c4c0",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84c80d09-1fbc-49b0-842d-4a75080cc732",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46ed46fa-82fa-4213-a3d5-c9fda3384bf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd77ed35-5f03-492c-9dc5-f9a77919806f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ff7b2c0-690c-4565-a5b4-1684347c9a7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "829fa7f2-2674-4a67-9236-1db3af6f6981",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfbb3e38-a82c-4cc2-b32b-e3762f723d4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d6d0bd7-a0f2-40ff-a50e-ccce6bcb5f78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fb39d68-7be8-45b5-a81f-03a8e6d3d147",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4439c13-36ea-4d5b-81a5-a5d249211a58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0251ca5d-9d9c-4cdb-b7f6-03a4185a2346",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "743784f8-1efb-4250-a595-cac6c12344b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2747a781-e928-407a-b3ad-4079072b3815"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd962f90-7546-477f-8adf-1da07dcbb3e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "081674b9-3adc-4250-ae3f-4634a06d050c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac92df9f-bf48-481c-9fd9-58992e3d1a7c",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a6a3742-7a60-45dd-b1ed-ddd69d00b686",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6db6841-28d8-415d-905c-6d08b6e8b49c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb9d1fa3-1fac-4654-adbd-a38fe7c99517",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c23265a-02ae-44be-81eb-9d0275798381"
                        }
                      }
                    ]
                  },
                  {
                    "id": "382bfbaf-9ca1-48c3-9d38-cb77a7404d0f",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cf0a1f8-52c6-42ea-8c30-91626feb42a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3fea77c-efd3-4bb8-8c8f-cde6f3e5b32d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc6ffa57-ea1b-40b8-9011-6add1e705d9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1bbc6253-08da-4cc8-9c48-975657ec5744"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bebe476-ca8f-4e41-b474-4e6bcc691900",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfc5e692-45a2-48f1-9955-b548bfddb891",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21e4b6f9-b3e8-41e0-a0ec-ff452def31ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdd347c0-471f-4741-9dcf-e15704258995",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e571e2d-13de-46cf-9cf3-7e94eeda2e7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3fe2da9-4fbf-47ac-9462-714b97b6214e",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60397503-8490-40fa-9f2b-fd2e023dda6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42f37241-59e5-473c-b893-99579ca8a78b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2091df49-db69-46ad-90d8-ea042eeec5fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0538519f-7e5a-41b6-9f6c-b1c7b430b7fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c19590f1-d3f2-4cb2-b63f-a85bcef870d1",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "588e6128-acfa-494a-af94-0f94b373dbf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28ab2b22-29df-477b-a219-7ae2f76a2557"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87485133-bfc3-40c6-b94f-831847cbad52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "acabcc2d-fe55-4f18-8994-25bc2b78be79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56ae966e-7f13-489d-bbff-0917a0133db8",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b983345-1bb0-4fbd-8634-fa725c61fa08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76b9d51f-ff97-47b1-a407-3d85411b1b7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4843f29-b8a2-4c69-9cb5-914bc60b6882",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cbaefa24-4cd4-4756-b211-d40d9de9e062"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc20caf8-ba9d-463b-8c9c-fdd4dbe0bac4",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7ca7d9d-989f-457f-b0fa-a8b77ae4f78c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df9767cb-7ba4-4c47-bc60-1e68152526cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34e86aec-31d0-448a-b112-cb751ea4c0a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b7e80c7-a2db-4b17-a1ba-fad527841059"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3a05bcb-448d-4e72-b636-4a246dc149d4",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "412dc0ea-2dd1-4c9d-aa6a-52cce8bded50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9335e8f7-5e26-482e-a439-36e7905cdc5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d612cff-a00f-4456-b22c-e7b3705df3cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b854589c-9c4b-48fc-90e2-b9b44e21a93c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53c20baf-610f-42a1-a0a8-c04652f4dd90",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3ef225f-d2a9-4512-817d-6aa6ceb6194d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "891a20de-419b-4be4-8487-94ef04154744"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85f4569c-24fe-432f-a4ce-714a6de05b9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "87e0914f-9581-4af9-9ce1-5594b864fcad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de8740cb-92a6-4faa-a03b-87ca75e5139c",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc98d6e4-df59-486f-815d-905eb01855be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "934cbd7d-20d4-4457-a20a-5d793173c53e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9125ef09-a910-4b13-ad8a-0573dde38239",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7482db02-8b68-4369-a1d0-d74023fbb62c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "383bc047-7e15-4aad-8fca-15f4384936cd",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f90091d3-d81f-4b75-bbcb-e76c3aaa46d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24030aac-c451-41d6-b84b-540a8a18e813"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43923744-f806-42dd-83f7-ef6b8c726468",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a11c6ff2-fbc4-4af3-9715-14338a876eff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af8361e9-64d1-40ec-b8fa-0e6ae0c8681e",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec775611-7690-4da0-a740-38b0d4c992e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d14727a6-9dc6-48bc-899e-35d2142eaa96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "985315f6-34d2-4e2e-a19a-9b6ddbb0df0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6335755-4f73-41d5-8bf7-77189d60368a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7b8dc2d-3ed7-4cb0-b0ff-60985c985bf1",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca428839-73e5-4da4-9fc9-ba5034bb6001",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8de7c75b-1e22-4f9a-a31c-f29f633b5702"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95db182f-28ca-4304-a9cd-1d6d565a5661",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "396bd59b-90b6-4432-9131-2943ee2883d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7066cfdc-9bda-45e1-b299-f4da3c3ea16c",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04464923-3bc8-4d73-9210-3a2fdb50a9db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ac213b7-876b-48c0-96ae-6de304f7a0dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abb406f2-888f-47a4-83e6-e42d90eb0d5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8eb65fa-1fe8-4e70-971d-d676f9b90350"
                        }
                      }
                    ]
                  },
                  {
                    "id": "500b52f3-c920-4819-a146-f20d21e0c62a",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33f164a7-cd19-4d24-a12d-5fdc135ee48f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0054456e-6789-4a5f-b75c-e24502635e6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e05d677d-acf2-4186-96ca-e16e88c67e49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc8e6141-3763-44f9-9c03-4c4c4c502fee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bf548ec-571b-4a40-a3e4-345cb48e98a3",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57d1ba9d-ed86-4bde-bb66-2658a52479d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a780f63-bbd8-4f47-89ca-9af722f0ac6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc9edb16-2472-4453-8bb6-b16987c79a63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba671987-75a8-4b83-9228-fdad773693b2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "065ba5e3-7fd0-4533-b710-efb3179c090e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "71dad17d-10b6-47c4-954e-549caffed48c",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3419a3f9-2a8f-4436-9828-c7fac76d75d0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "ebbdea0b-f3be-43cc-afd6-2ec378504bed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4843d33-8db7-429d-8f44-ff0042ec2fa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9e820fe6-2468-43db-924d-607eddb11733"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d979ba24-36e6-4ef8-99c1-64ef8cf9f95f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "03677fb5-950a-49e3-80b7-61ee249725d2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8e6de14f-e165-437b-a898-76f8cdb86496",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d90f78d3-5573-45b0-b225-f0139e2c837b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "13e2128d-cdde-4bc0-b3cb-13c8cd8067b8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c75fad32-8f91-445f-b97c-aafe6f5e6ba5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "abcae7bf-0828-45fb-b250-0a3050d6a526",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c90ebba0-5992-44f4-bc0e-ae6f82b62791"
            }
          }
        ]
      },
      {
        "id": "48556770-fbf6-4fcb-bb7a-7d5c3db323c1",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "b02f460e-bb79-461c-8834-5a9b99c5a196",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b943ef3c-012a-45e7-bec6-66bc7004f599",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6942881e-17f5-4c44-8da0-ce3c6b47b0c1",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa0b757d-5bd9-41a9-812e-1ce08cb50512",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91711c80-1b51-48a7-9975-bc15adf185c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa33bbf2-66b8-48ef-bc79-3ef6111a0f6f",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e882a8c-d7f4-4e6c-8cb8-6403d29ef55d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "836931b3-f148-4e99-9b58-b2bdb7a65d8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e16c54cf-76bd-40c9-9728-e199474973c2",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fc36955-fe60-4f07-b7f9-e14beb92e86d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e64595b-160b-44b0-a582-1f87e0be63df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97312db3-1105-4881-8cb3-1ad9d91beb2e",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "910945a7-b868-4aef-bdc1-6dd2db91a9c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7e5a5c4-f6b5-4e73-b448-9b730ffea67a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec526c01-d305-4daa-bd4c-aaf1b4484cf1",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "164e31b8-3166-400a-8746-aad8b63a403c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d47a77c9-5779-4cb6-8c80-6fa8c46b62b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5d92057-4898-4cae-b0ec-76fd7203cfa9",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b541518-0936-446f-969f-8e82591e3d31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "722f2d58-b8c4-41f4-905e-06dc365e9c57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b748d732-ccf3-4933-81c8-8d0af4eb38f4",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f28b10b5-0bac-418d-bfc4-51b6ec23c203",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1aae16a1-d387-4cce-9f4d-682efd83afce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c551f0b-e00e-496d-8233-f3e5849d3fb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af97fcab-e7bb-478b-b098-715a990a892b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b085087-9cbf-4556-9fdf-fa65a5d041a6",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96394039-64d5-4ef8-8cbb-be94e3b2b2e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1ff17a5-fb95-44c3-8ef3-75e7ff21b262"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2046296-b605-49df-b3a8-262b79bbfada",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0ae21ef-296b-4471-9eaf-4019118632ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1e69f26-9c3e-4294-bde3-fecf51b95162",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5aa5f39-f0b9-4627-b1f9-537b093e404d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "814c774f-4cb3-486f-b727-4881bef9d8d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c481bc2-0cde-44a4-978f-4b2e10fe6f10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2891bb8d-b641-42da-aeec-4c95c10a8876"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c70c2752-228a-483e-a41f-793eab11128c",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89599444-220e-4a2c-9668-cf7431f8f737",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a46b69e-dfb1-4e0c-b638-a534b3da5555"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c792e3cf-3333-4b6f-bdcb-f4153878056e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe403e47-f7dc-4cd5-90da-80e71b077f5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "776bfc19-595f-4748-a1ab-347643e25a82",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "420b896f-94a0-40f7-86e0-14c096b6f7c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdcc97cb-b944-4794-8a92-f7cdc85105cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba8bd508-b0be-4a66-a362-11cfcf2bfbc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afd0c899-b621-424c-88a0-7dbd98d73a38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc290cff-8006-46e3-9d77-783fd9b7aba1",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02219aff-126b-4adb-9447-1b61d723ad34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16f882b0-74b9-453f-bc67-9c0cfe3f1cb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4edf57e-0d18-416c-a1d8-f01a19495a58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b7f2451-f785-4e3d-8cb6-5f1e795ac50d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86775f5d-32dc-4c39-958b-82a13e4dd5a6",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c9a9bb9-aea3-43f1-80c2-c59d1c86e31c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9462a7f-68f6-45cc-a6ed-5aa2b497cf76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "448d2df4-3123-4f56-948b-c924eb10cadd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13ec1f9f-ec84-49a0-bbdb-d720ce68f589"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ab670e2-a33e-4eea-ab9a-c446970585a1",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b16d3f86-e603-4ae7-a859-0e696fb0b28f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30eaa766-3786-4c34-807f-e80b8d68a424"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87b9eb07-4557-4b28-8297-73136b8b8899",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a62eb91-d0f5-468b-b214-ed2e11b3bdf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de18f53e-8f69-482f-bf39-2d1c112823ed",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3ff5595-723c-4ed6-a218-6adb88485302",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a638be3-f620-4bff-811d-72f78a0f4db6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fb44403-cbf2-4295-95ba-3449e92d3938",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "372ab2ee-6d77-43f8-a91d-e89d10402360"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3be40c8f-484b-427d-839b-ea92d33d375d",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dcfc566-eea5-4831-81ae-bdef8e5747b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31c2e1ce-89f4-4430-80af-6b3349b1ae17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38c94c9a-9c4a-4c91-8b9f-ee709d255aaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09d5e3cd-2613-408a-b3c9-4eb125c25098"
                        }
                      }
                    ]
                  },
                  {
                    "id": "affc075e-1089-4b5f-9fd0-ab0f92024a7b",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f1eb879-ed2b-44de-bc35-bd747baf9eb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dba3f045-0a41-4623-abf0-88a902fa05ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cef8dfe2-5b44-43de-965e-ef39050e5398",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94ba13f5-9e22-499c-95d6-6d933138c623"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bca82d3-9ea1-4d0e-b7e4-10275f14a5df",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83695144-5a3e-4dc5-8116-8f982aa3e3a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de812f68-73ff-4c7a-b899-648576766957"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6df6f050-0a96-45f6-b2df-0453684f1aff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2465cfe8-f59f-4a08-b7c8-0f86e0ad9218"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e4e97df-303c-46cc-b05c-ffb666b48438",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64fc93d5-6301-4af8-8ade-d53c7e023039",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69294bab-243c-458b-9606-503f2202d570"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e1f550b-043d-4fce-bfec-1471ffecdc25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a457022-ff14-48d0-9a5b-0a31782b4cd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e107cf8-34e4-43b7-9226-4657e7e12c56",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea10a53c-f896-44b9-a7c0-f0273c0b24a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dd23cfe-e578-423e-87ea-72df05098e7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "642b62ce-38b5-48ab-8594-3cac0c8bdd51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8539a43e-0e51-4dac-9c27-7cd194c3f4d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da21fe3b-c065-4240-8439-3a6dc5fe3cf8",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c73ff1fa-fb5c-431b-9797-047d9b932802",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a15cde84-0bf5-45f8-99b3-4f73e6b09212"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afc43941-2a24-43d4-bb51-41ba70fe1565",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a89dc286-1974-4349-a4ae-bb636b0e94d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c93197ac-b2cb-4eb3-ac4e-f59ea7355edf",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92aff299-b3ed-454b-bf80-b73f1730d076",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72e0b691-1ae9-4b0a-85b8-6db338bc20e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c39a9339-6ca3-471c-bf8b-ec22463f7696",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b520392-a35d-41a2-91a6-b8f18f8d2b5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70944d95-a0ee-43b5-9525-f44fb6488036",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7737585a-542c-42e3-ba90-60a526a55258",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d01bd37f-d73b-43f4-8a2d-ae9f9b5ba3d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f130534-057d-460b-bf2b-86f2130d78fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46f9fec2-0028-4575-8d66-2c061a484275"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7084c30b-4ad4-47b1-80d4-cddc660e63aa",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12176a22-4825-4b06-ae95-aef10deb0c39",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7542003d-2df1-42fa-80a3-af6e29f0704d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d892791-9f72-4b9f-997d-3389c1d117d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff327e14-92c1-4853-8264-c7a1c30357b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f95ba04-1517-432b-ae82-46d5f4a068ee",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59cac560-5fef-4cb4-9a15-1253f05a94da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79a374ca-ebd5-4d97-9232-e5c2db2375e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fa5343c-8c49-40cd-81b1-c73c87f9c783",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab28dfe7-92a6-4dba-851b-cab6d4415828"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f4ff0f7-f0ed-4178-82f2-068c51a56e13",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "505266d8-a7dd-415c-b444-711091a8d4e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "181a2e16-c12c-499b-bd02-a7f0eba23194"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c0e48bd-ddbe-42fc-8237-01f30733ef2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f05fc4f5-1692-4649-b994-23508ad43ae9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c6a73d0-e10b-4b73-af3a-432d3e557448",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "091609bd-64fd-4100-9920-74ac4505b79e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac94e10c-241e-4275-9f37-15f0f9a5e327"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f363b16-2885-491e-8c61-6d804407edf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58deb0a3-643f-4f87-ad3d-81170130e514"
                        }
                      }
                    ]
                  },
                  {
                    "id": "495fba29-8c87-405a-bf9d-6486828e0547",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3101a74c-c9a2-4fc9-b314-6f4f20450937",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42e82316-b433-409a-b9b0-f91c604a2cd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b444de5-6fe1-4657-a05d-52dc04b88823",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8e6c811-45de-44a0-8e7e-fc2c64a6f4e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9cbe083-1d7a-49ec-90f8-fb1f2c8f39bc",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b2564eb-28ea-4b88-b83e-e741907e468d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5a533cb-3ddb-4a18-9722-2450c1a3fdfb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82f5e983-5639-4477-97c5-25da86a9a441",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adc5c40d-9ee1-4909-8cf7-78e468df9444"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dcbb613-4899-47aa-95aa-5b7b324fd474",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5080cc7-a8ac-4327-bfe8-023ab031d0ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9a28669-b880-4a35-8301-7c0822dda1b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62f5618a-616f-4350-9211-3323254371c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f54895d5-7ba6-44df-b9f0-9f9298863555"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b87d2a87-519b-4a15-b8ea-7d4fec3a6ff6",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af346dae-4a87-4104-8e24-8262d2b4bc3d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a0f893c-012d-4a7b-a3fd-f7eed6db7021"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bff8cbb1-7141-491a-b615-2dc01d79ae82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48936301-907f-455a-af3c-f3c873f730d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfb00edf-4520-487b-98df-c65e22b1a775",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "301953ef-6ba1-4133-8246-f7f3d9a0ddfd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d7438fe-3324-4501-b959-a06e742a4700"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b07940f3-07c0-4542-a130-c500dab6d492",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c323addd-cf3a-4cbf-b405-450a8317cb20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f6e8d6d-2db7-4513-8b5d-d4936ba46186",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0737fd36-611d-4dde-baba-2559ac6ff1a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa38cf04-d4b7-4580-b439-b7b9883065b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07dd7d19-cae4-4c38-b21f-e3852e039464",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "008cd136-b6be-4362-b016-2cc96b2d3ed6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "972a76c9-b4e6-4774-8ae1-114e208e6487",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdefa92e-1aab-4cf5-81c3-bf2ab9b38c50",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e99c5fbd-5711-4fc4-a972-2cecab63c76c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6fe74c7-d3ef-4bb0-96b5-20d5aa877cc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "988cd7d0-bfe6-4e71-8c65-6bad9e27e7e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74090bd7-6d36-4342-8c04-f9dfa71c24c9",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2fa23b0-ac2e-40b2-a2bc-3d82a90b27f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3097bc4-3782-4044-b871-56548d1664d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd6d2478-8ba2-4dda-b442-671b773ef70d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57871717-8a14-4033-bcc2-b310b730eb24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22eb8ab3-cde2-4e68-8b47-d33603cbcee8",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b00a5161-de00-4b3f-9988-6d35cd725839",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d3eba03-4f2e-4d39-94c8-c8cfce6b2b76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67984eea-e89c-478b-808e-0687c9fbf9ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e68021b1-8d4d-4026-8c7a-873b108fec97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f1c93ce-54db-4d11-839c-2a4761b455e6",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d076987d-3f4d-4bc6-99e7-e6da65949126",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9245803-bab2-41f0-a1c8-fc743550f1cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4abb1f8a-2a65-41fc-ab8c-158dea02d565",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b270b096-666a-4ba1-bdaf-9cd203e861cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65be37b1-7e43-484a-9e3f-65e0fe43a843",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6ab4d45-b342-4f28-a8fc-ae2e54da692c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49b2ab54-e336-42e2-9fa1-735473614d08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1ab7120-aa09-4519-b313-7ac8fb0f0379",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0826f249-d91d-4156-b09b-d2cc7a778113"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66922d88-5fbf-4c75-8c88-f9363816d75f",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0716a45-2ba0-495b-9772-8ecc1e692402",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "720cdf87-44fe-4992-8c7f-9b5f84a1421b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "799f8bbf-b8cb-4b4a-8ce1-f758a91d3942",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2cf0ba0-26e8-4015-949d-eb1c496ef0a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9685566b-bd4d-4958-935b-772c092ac357",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a639aac8-96cb-4a3c-a3e0-186b577d2521",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c110a3e-a31c-4c80-addd-77606d47bfd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b28adb03-3a8e-4d9c-b53a-af04a98056bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bb10700-34db-478b-b36b-10b9f0326400"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da960b69-aac8-4362-94eb-ab39f97660f3",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d99f373a-67fc-4738-919e-77ea0ce2d126",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39858100-0997-40d8-8c3a-6f5136c74ec2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "394f31b5-b994-44f4-8923-30fcfad711d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cba89f9-9f62-4d33-91df-d851a912f6cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "011182b6-3e67-44f1-a102-06937ee5da49",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0debff41-a3eb-49fe-acee-b0ee263d24c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e58e59f-b692-4d47-b76b-2c59007d0016"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95a44809-025e-43a2-b160-cedad27830d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67c0b107-b791-4929-800e-029f3024e574"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5b42cfc-e106-4190-9396-66ef83e6f72f",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81bd2b99-88c4-42d6-a72b-3cbfebd42315",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64555dc4-1c6a-4435-b042-53ba2a31b316"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41d8bce2-4f41-46da-8f7a-1d95fbfdf74a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5221e27f-3d17-4db3-b741-0926da4c940e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06e85a6d-d099-4ca2-acb7-f8dfd9a48b24",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ebe44d0-443b-4b53-a3b1-ad2e8049870a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1eca03c-5126-449a-bb06-33f0db248028"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f50b9ec-53da-4d58-bc1b-81e340ee66d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "202807f0-72ad-4928-927d-39b382193a91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa08d5bc-6885-4c26-9f0e-ab4eba34dbb2",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "840b5465-797a-48cd-b47c-731064fcd5d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9617676c-7649-412c-8e27-10d92e7bf917"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d06ddd8-1c37-40aa-a3f9-7148ef95fbcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb843d2e-535f-46e0-b30d-59c0bdd3f7e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c08027c1-bbcf-42ed-b3f8-744cfbdbbda7",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48ab635d-ccba-4d68-90c9-66c5da699995",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f9aa6a1-049c-42fd-b130-3af69045a2a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74825d78-7b4c-43d1-8272-279523e92ca7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0740609-e1b8-4649-a869-ef7d5211477a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e4f65ce-cf13-4e32-a665-8879773b52bb",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8cde61e-48ba-498e-98b0-2246de0e743a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f10ce27-27d1-41aa-8670-76044b90dde6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88af64ee-62bc-4e31-a141-b811c24358f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3582340-8914-4468-b2ea-c5a6ab65c22e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f37817f6-3c4b-405c-bf32-bccd6c9d8c62",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3143caa5-76db-422c-a6d5-dc0515dc4bc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2422907e-7aa0-4a75-9818-824b21247242"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08762bf0-d027-40df-8caf-f37de5129717",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a6415e5-ac93-4dc7-a6cd-3bbe2304c5bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80dff221-dd87-4432-bb28-86f03b034d1f",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed1157dc-c8ec-45ee-a289-0f029b83660b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "095e4736-36d9-473a-9127-06174d395e8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6966e91-d9b4-4346-a041-8752f79f13f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58c66c9e-0c7c-43f9-b693-0d6a613355eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ee45d50-5c94-4f6c-bbbd-8e523d3a4332",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c14269b3-912d-47ce-9d26-8a91baf5c933",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c1ed240-9053-4533-bb78-d236c477b8e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c62b434c-165b-4d3e-be0b-38304a84daed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3461f01-fc03-4797-9a48-4767dbbe6c04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b276e712-0466-4922-90a5-a5a1dd4f1e5e",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a15a9416-dd1c-4947-9dfb-d5e21c9899d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "700ab086-3ca0-46d5-838d-7d0c255e5cc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7906b935-7255-4642-bb38-e8e9c86b2602",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a2f33bb-c646-4be0-8c69-bfed92bfe94b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e94a85f7-ed5a-49c8-8c4d-ef79b8f63e44",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfb47f11-c7e1-4c64-b5d3-e4dea7242b34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cad9fc4d-2872-4148-9dce-7cd1937c8827"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cc1b63c-574b-44a3-aef0-52cbcf1a7216",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "249379cf-5765-4deb-b9f1-ba36376f77aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "548fc861-494e-416f-933c-cfad8ab0cc08",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1117d086-8a2e-4226-b995-1cc7109a7d68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5e541b3-ad80-4b25-b24d-0732b33f64f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48abfb3d-38fe-49ba-99de-9ec1cb9a20c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33cbe3ba-b0cd-4690-b876-5ed13a815c1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "076f391e-1fb8-4e7c-a6b7-926f7d5216a3",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55d6d7f0-bf39-4b04-bb88-0a27cf2e40bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74620851-f2a9-4c27-a107-d417b33a71c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed82be10-446c-4e7f-8520-cdabfb19a940",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3493392d-f38c-411d-a6dd-01a57ca986bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "649b1186-daf2-402c-93b8-6448bd4ee938",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47da48e0-d1e7-48f2-94d5-f1aff9bbcfe0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57d655ba-1be1-4a4f-95c5-474649d2953b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f64831f-b782-4f6b-b85c-cd2fe7319ea2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af76518f-6c92-4439-b963-c5e66251b301"
                        }
                      }
                    ]
                  },
                  {
                    "id": "952c3ff7-e2c0-4c9e-b7a4-53701314647f",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f70f35f-f72e-4e8b-a989-2f9388df1e6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9599836e-aac3-4c28-815b-03d10eda1a12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "606add74-bc3f-4a25-a31e-06f17611cf7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce2de1c9-b9ab-4990-8f3a-23ff04135657"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c6155ef-b1d1-45cb-8945-7a6c17431ba6",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76441fd1-a07f-45a2-b282-21cd1bd2b0cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed456630-bc5b-4926-88c7-4eaf858bf842"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be0a66cb-8065-4289-9d89-93ba08de659e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd3c9155-df16-4f25-b6dd-f353945b372f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56704dc1-f29f-4969-8317-524b5b389a33",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77680441-e719-43d2-b7fc-66529319d622",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3541b822-21c9-42cf-87f1-000fb4af61fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cacf29d-9be7-47a4-a69f-d558eae8b6cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09b6baff-1ead-4144-afa2-eb97332d3643"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a62b074-0ce5-45a7-93f1-1e1c51b4647d",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03fd1005-9c07-4957-a9c9-7f04e709b28b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1eed0dc2-07a6-461c-984e-e8d06109947e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2152e9da-43c8-4238-9a8d-269f070f16b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd359a95-61c6-4dd2-85d8-4104ab88e6ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0fe15f7-9bb7-422c-9e9b-3d2ae699f6a5",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0520f8f0-6c84-440b-b637-d76c74919167",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84f46b21-7b97-4f3a-a171-08b5972246af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ccc7e45-7af2-498f-a5a9-a1397388a0e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04ede1b1-a796-4c82-ac75-1e972586a3f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39704a71-be64-4499-a07d-e2f146496fec",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f31d25e4-732a-463b-bbe9-fc571b323997",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b885cf47-bc22-4cac-abb9-1fe59cdc3252"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d31dd91c-0e48-4f10-aaff-4ada120ca283",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e021715a-81f6-4de7-a854-d14c57c9120a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "725682ad-95b0-4cc7-9618-48e15bdd687c",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0900939e-9270-42cd-8dd4-630ab2ef597d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afc171d0-d9df-4bb2-8d6b-99f058320c85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0788211e-ca8d-447c-b9ae-3c797bf789fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33882648-a60e-43b7-bfda-18718962480e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd805be4-2d46-46ed-9649-81125b94dfe8",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9dca8b3-e40f-476b-9581-eb28cbf5512c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2b1facb-cde2-4052-89a9-5721d4c03a0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "728310a2-886c-49e8-bf24-ac451fc3cab2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "531f7d9b-3c6d-4720-a373-ba38cf32cbd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec985938-95ed-434a-8a52-a041b5dceb91",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67c0781c-7f52-4cdd-984f-8d48f0976992",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2dee466a-a3e0-4576-8a5e-4a69c1c16909"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba1977fa-f971-4b9a-b88f-c10d9eeffdeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60fd047f-e27a-4552-8e6a-ade5d87b077e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3323e1f-2a9e-476a-ac8f-e95ab8d374a4",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8072f777-c692-4740-b86c-7fbcfd438bff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "825f1d9d-12cb-424c-843a-94434ffbb789"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ba5243b-5eba-474a-9d5e-701847a5255b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4190a429-de21-4c99-98d0-0b882f8f46b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "466916e3-383a-4b69-a74b-8690fd82ba90",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b6d58e2-2966-4e45-852e-ab02875bebc1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6fa3f36c-fd0b-4fd3-a431-7135628ec2dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6fed260-c8aa-49fa-8d71-59039bae03af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de8c9651-c2f9-4706-82d8-583e4466ceb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b09216a-9dc0-43ea-9db8-04bff9f7de8c",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66692917-86fe-47ce-b230-5e4333e734c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6959bc36-4b1e-41b3-b9a4-abb275716842"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ebb8987-345b-4e28-b2c2-d617366e0d58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "542b9c75-c136-4370-8e84-0108f82eb651"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15e5f7a2-d731-46d3-ad56-c81c4b6d7712",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da7385f0-9d19-48c8-b00d-07bd3626f2b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4109eab-cb59-4381-8eb1-b33c3d3407b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1941e251-96e2-4fb8-9d7d-5b845796a0a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e432b14-e4e4-4cea-8833-786e12ebe39f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e96083fa-f5ae-4028-958d-08cb6f8e590f",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edad7e78-33da-4330-9a2b-2bb07d100802",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42782de1-1726-4daf-92d7-70431cddd7dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c765e58-2c2d-4251-8819-ff965c28fc07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94cec883-fdde-4d91-8be4-bdbdeb305891"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebfdeb79-50cd-480b-b329-60a20652ae03",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ba67678-bce1-4918-8e79-e3410c15d070",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c12a70c-06c3-4765-a7cf-8b4015780e2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26b4dc8d-5fbe-42c4-a1c9-2382f4e6848b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d86d23f7-c974-402e-98c0-4569d285704a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44733b65-72d5-428d-871d-ce67b5188f6e",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "765da02f-5e81-4a46-8507-e3c0682a1de3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e229d5ce-7031-4795-9bfd-a3756e470357"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ff90ccd-adbc-4737-8a1c-fd56093081c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ce3abc4-35f9-43e8-88ed-57ac87352cef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eeb55e2-3744-40c2-b590-d883050974db",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ab16680-306f-4271-9444-9fe337597929",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "223faf86-ce2d-4f81-8623-7f67fd1558a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf15a865-1927-4ee7-9a22-c74b97d59b44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee97ceae-72b0-4610-918b-9d16dbaff6f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7a73ea1-2004-44a9-aa5e-21f2f819fb37",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "417a94c6-c006-4f3d-b4d7-43ad62470234",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e75b49c8-a0b3-4d2b-9614-5cd1978292a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55208660-850d-4ab8-b8fd-89ae9d3b8192",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae41466e-c6ba-42f5-8838-07e014be4f63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4983d5b4-64c0-4808-94d9-454fd0d966e2",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77c3e770-27c0-4df9-83c4-8f53c803ebca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "540c5509-835c-4011-bdd7-e015204fbcdb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3e98b73-b0d6-4c15-b48a-bf5073330569",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e30069ba-07c0-43d3-b53e-5eac3595a4d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27c9dbb8-1192-4c89-a11b-e78bb62107af",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb24c933-939d-44e2-9e84-0b804c73b131",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e02967e9-39af-4174-9eb6-ddddfba5215f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a7382a3-80e9-47c6-a535-41fe5bbc415c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a06798eb-7196-4431-a211-5b640551ec6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cf6f647-91ee-4a87-b518-85c5f6fff25f",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1861c34b-4a6e-49f8-851b-767c2328d457",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05362c11-b34d-4ccd-ada9-a875e39d069c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fb4ac56-7c0e-494b-ae94-4d338dfb610a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c65d4064-2a41-4a95-86da-b27878f0a0bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d7d93f5-6ac3-405c-9f39-23d05c027e0b",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35294510-2272-448f-bebc-26f5cf8fc6c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c802cc94-965d-4150-a238-84a7a372b00d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66bfa926-1355-4674-be33-52a99e0cfe76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41719957-cad2-4477-88fb-4cab8fe43f92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e76c397a-fada-497a-b915-1ef04c7bdc0d",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6750bfa-4d5b-4adc-a59c-c53bcbbc33f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d671eb8-4ea5-4a6a-a74f-23dcacb99db1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1ff2de1-6f0f-46ed-87a2-f2cdc2a0bbb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "334f9431-7903-4272-84e4-efccab62599b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "297ff755-b6e2-429b-8ff2-37338a941e4b",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e462ea3-431c-4743-9672-691fc0c763e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "caa000de-f134-430a-a4eb-e92dc9329d50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1670e7f3-1a40-42d2-b1c7-b59c9c8d3c76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e1e9fdd-5e8b-4d59-a471-b2dd5a747bf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d63164a9-6b56-4d2f-bd2c-a41d74a6d768",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "402bcbc6-5c8c-497f-a698-0c2f57b53f80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b8090a8-5db9-4575-8c0e-38dc4745216c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "471b4eec-d658-4038-bcd8-f13c9d19c5c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ef24634-822f-40d4-b314-8c6ee7aef2c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90563d29-b509-42fb-b63f-9ddaec4156a9",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd967505-03c5-44ba-9fbf-87e4bbead9b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e414a22-aa5f-4f70-901b-1099d21e1577"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d93d639-0938-45d5-8bc2-a7044bc4295c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a0d2609-7b86-4a97-b814-f900a6888e2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "227c9117-6aea-404e-9f1d-8bcc09e5a5e7",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff4ec614-65f2-4cfb-8495-ac4d4731e8cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05ac120f-abed-4392-a754-90673b4daa89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4b62308-7520-4751-9558-8d692d7beec5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11a5c615-3365-4a75-88af-30b4107759d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49947a57-730a-4937-9c04-5f84cf285296",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23513b87-b121-4404-a55f-e245f71e19ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78752697-d863-405d-8cb2-ad9bab4a7c73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f0ceadf-afc8-4baf-9447-1e110722008b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4efae4b3-3d28-49b5-af97-9254f1bd0f88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c66b97e-baf0-4687-990e-62e6afc30c41",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a50a2df3-a133-4c94-bbe5-a209c3506219",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71d70a45-8fd3-4f4e-9abf-4a14ebdbe86c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fab20fd-b7c8-48c9-8553-12b29b0203dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69eb70c4-13ca-4144-ab85-51bee0ce95c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab061fdb-5a77-4722-af26-500d38177487",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5480ea2c-2d80-4fc5-aea8-18cef8b21ee1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e54565c-acf2-4182-b3b4-5fb3fb13cd19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "270d0b34-bfa5-431c-a4dc-e96166cc87be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ae44ab0-18a1-4551-984a-d29f70013a7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eefca200-d785-4560-ba95-34b29569a032",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "411a2fd6-fedc-4fb8-880e-c1bf53ace575",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4463034-b297-4ea1-afa5-98a6bea781c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cef6e8f7-8bb3-49fc-802f-9e6c0f0324df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f52b919d-ad72-4af1-a1d0-22d9a547e62c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc211a47-b3ba-406c-af15-0681c282759b",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54cfdb09-5f2b-4a6c-b163-f6f5823bc0be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02a0648c-df86-4c47-9a64-9d383f477e9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93b7d250-e14f-42b0-93bb-f51f66503471",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71b0fbad-1318-4857-9bdf-7dd5c5941be1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f595806f-e110-403d-b29d-0af993640173",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19f48350-d6e4-46b4-a330-67ab9af92c30",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "463acfe7-b6d1-4de3-8c08-76cbc5af56d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62037a1a-714c-452d-9b44-58a6b6a69151",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07821ce9-0694-412f-94b0-82e3c8e5c9b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25dc7aa1-d3d4-464d-9b51-d06a4fd185f6",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29809f81-69bc-406f-96c1-a62de44923ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e3d9fc5-6496-4565-b36e-e716fd644468"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43a927c6-e310-4f47-96ed-037854fe2207",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e12d9c6-c899-49d5-856c-8209b646ec60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce983976-c2af-48bb-8a0e-2af0506343e1",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "696d58f3-a93e-439d-92ab-ba5aa794cb0b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab429cad-d378-4ddb-9a18-505b61f906cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6729ffb-966b-4c84-9bda-43a9cbae8ea4",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66e4d8b4-bba6-4017-a02a-6b5deb5fc7e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afd22beb-b9f2-4b15-b0d7-83993452a3f1",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8256b7c7-fc1d-402e-bd18-b2ba5ce35b48",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6393040-1479-4d10-b8ea-1159788cb428"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07afdea1-56ae-40d1-9e6a-ebbc57e26896",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "503aff9a-c6d5-43a3-8641-538b21ac631c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79147dad-da0a-4a7b-8b91-cb44429e848a",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc7c3c69-49c5-4b32-8814-75f88e81d8a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d22fd74-f727-44c5-93b1-576fa72aa6ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efb2d7ae-258b-42bf-88ff-560b42e0eb26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3ef0b12-f341-4d71-95f8-565fdd23efcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34f41e63-1ee3-4067-b7a5-30e8e1d814ea",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65d11283-890d-4a04-bdde-a2fb8af1292a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8187c676-d301-4fb5-9503-209f1219c082"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3fea066-a993-4fb7-8407-44bee7eaf0f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "812ea470-f05e-45b1-80f3-10faf1cbb48c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1d1b4b6-8460-4e7c-963f-cb9d32710985",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acdbf632-65ed-462a-a07c-915c0e9f86d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1d4d1a5-1a1e-492b-8ac5-014db3a50f1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc266876-47b0-4084-8790-a86eb4889caa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbabb870-05b6-4128-a457-c506dc9dba38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "387662d3-ba7f-4d06-a19c-73e65e14fb82",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67588bfb-738a-4542-8426-673584988ca8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f882bb9-0ae6-4966-a8b2-1e112e25fff4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69993194-76cd-47ce-b9f8-b016af88900c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14a4ce95-9725-40de-8597-33a3e709699e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80861819-b7c5-47b7-8a52-e145e4023718",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3078a05e-963d-4dc5-b58a-58d1709671d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d66ff8e-d4b5-4cef-83ce-5769e96953d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad50cb48-8a9b-4ff6-86c5-8dfa15a614be",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8265e0b-c28d-43c8-ac27-1321b0f5bad5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21cb3139-2574-4ee2-ad61-aeb7857e051e",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ce7b648-50ac-4ffd-a955-dabcbe1665f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e14a6f68-49cf-449c-887f-37cfc0dc10c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d0f4b10-4302-4099-991e-6ba6ac5a8379",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5da13d46-e4d8-4399-9bff-d30cd474f8ca"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ab8f1756-31d5-4e14-830b-f2947306730c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e7f2db12-792c-4708-8a39-1b57db9350d8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "444e8a26-4bd3-450b-8646-e3dbc13f830d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f53d134c-c9cf-44b1-9e50-cc240f2d0a0b"
                    }
                  }
                ]
              },
              {
                "id": "d7fc0d75-6bbc-445b-8c24-3677ce896c66",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b57c7aba-243d-468c-ae3b-ee047af90fd3",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0792aedf-a1b1-4f48-858f-c6db10b8602b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "2d251278-c3b2-4d64-acbc-483d26996194"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d4954cc-8a47-47ba-80e5-1b9bc9b11cf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "47baec95-435b-49ab-9c8c-51438a0fb90a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7336abd0-1d36-4428-9958-33c2bf16658a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6b921f7f-3e5b-4c3a-88a7-dab98ff4c0b5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "14a2ecef-9df5-4aab-b733-702824c4cdc3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6a6f29fe-9de7-47bf-adeb-a1e1f10b10e4"
                    }
                  }
                ]
              },
              {
                "id": "67310f01-8c0d-4b3c-bc28-9eead5a3a136",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "6564906b-156f-48c6-94c6-550119ad3cc8",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3484f57-4643-4fbe-9032-3112c78f8a7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "a2ffd43c-7d7c-4c41-ba8a-e2eb14e4f2e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1d1b213-809b-4fc7-913d-bd887d9a112d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1202653a-81c3-45b3-b8cf-b58a20058ccb"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "c51e88cf-264e-4954-b927-6b09d3dbe67d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a7ef30e7-b889-4a39-aef8-62da26b7928e",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a12db840-9b16-4bdc-b5da-1e85eb57fdf0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "bf92d0de-8832-4182-a50e-66d74a871d27"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cd832c6d-c6a6-4a83-aa63-c3ff283fdbc6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f92e8d23-1774-4c88-b303-92ca8f49cf2a"
                    }
                  }
                ]
              },
              {
                "id": "581be375-00af-473e-9f7b-303c5c3e31dd",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d5dbc3dd-2088-46ae-9a28-f2e47d9a749f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "5896ac10-e4da-4ac4-986e-f4f68e3f989a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b8bfa29a-363f-4943-80d1-36dbda7bf36e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "94a469bc-e9e7-48ac-98aa-76ca65bcbb06"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f93791d1-2240-41d2-86bd-2510d83b6ca9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "ce50cd4d-67f3-4c73-9331-1a8baee53dc1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7b49fdbc-d84d-4c63-894e-bf288b504951",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5f95f9f3-46ab-48ea-aa5c-f668e82adc61"
            }
          }
        ]
      },
      {
        "id": "fc2cf10d-93cc-434d-a40a-dc1347be0521",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "01074e5c-25b1-406b-8641-8a1bb14b694b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "51d229ce-1906-4a29-a50f-b40096554e0c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "077db7f8-5c21-4ea6-b724-12204b31f908",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82c682cd-ccd3-4b54-9c2e-41222ed59d63",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "6355440b-666a-4740-8361-ac770fa534fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a16ec8b7-4121-40ec-9bc8-c7bb4313aea2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "34a659ec-a24b-4abc-835e-0bbe310d78e0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "70213ac3-9ab5-47f6-aa25-1d553110fd93",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ab2e6b13-ac99-4f1c-bb99-00861a5746d7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d104b382-19c4-494b-83e5-c363fccf4086",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5b6c40cf-8a5a-41ee-a32c-454cb0958858"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6e346653-aefa-4ea7-90f2-ff053237621e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "3e6a5197-d659-45ea-bb6d-2ce5a3f8bba8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "458ffeaf-b1b1-48ab-aec3-aa54590bd6a0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f2cd4ae0-d9e3-4d2b-92a7-dc125701a441"
            }
          }
        ]
      },
      {
        "id": "9a6585a5-24ec-464f-b049-4f31e70bdfc7",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "1f815d0a-8757-4862-8bd7-da70f13c7cc4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "df855bd8-6abd-4bff-b96c-346126d8b878",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "69216125-4e87-4650-a5fd-5199ef9d51de",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a9a6088-680a-4b6e-b082-b06bba4f38a2",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fea17903-32f6-435c-9581-dad243de4831"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d5c6f84-480d-4873-9352-e614e83d5878",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4bbc9ab2-9248-4733-968d-7d86e843b574"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6024f24d-f57e-4956-8e85-98936c332d3e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "48ba3485-088d-4018-8b87-c048487546cf"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d04877e0-371d-4eba-b645-1bd8783158b0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d4d31944-bd00-4d0c-9aa2-074703e3cfbd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "408aabdb-62d6-42cf-9677-31f25ad9c998",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "6cbd5d4a-605f-48d1-8c30-a2f8ace5dd44"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c7601235-3f2f-42fa-9799-ceb00048126e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "110f66fe-3cea-4b1f-b7e7-9e8560853ac1"
            }
          }
        ]
      },
      {
        "id": "9f89087c-026b-4879-91f9-63288687100f",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "4713f200-f44f-45c3-b122-8e9d62168966",
            "name": "Negative Testing",
            "item": [
              {
                "id": "78588db0-3e02-4005-ade6-7fab74d05d03",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7da5a307-c591-4f80-a82e-cba5d96f19f5",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c27ae509-7316-444a-9c65-6baffdd9d229",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1db0b064-88ef-4054-b527-8f1680a6e30b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d60636b5-dad0-4279-990d-c0e866a87d8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "64c83288-6d12-42f6-92d5-53383aa566cc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f43f9c1f-40a6-4615-8a35-1e6fcc4a8634",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "16d275e9-81e9-498b-ab9d-89116572cbf3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6b3c6539-7f08-45a3-bf11-b9ce9a98ecb0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b6ab8d79-58ca-4bd3-895e-5551fc006894"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4e5d7a8f-f267-4fdb-9770-e570e698d0e6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "357c0654-20ad-4293-b4cb-b6811da09616"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d9637201-ec10-4656-809d-02633c58736a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "23be3ccd-9533-4992-adb4-3bf0236dcc1f"
            }
          }
        ]
      },
      {
        "id": "23d098fb-0e59-43bb-b3c7-d3aeb0cce35f",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "64e3800b-1bee-4644-9235-f94760f30b01",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1682e33d-0798-4c6b-a6ed-7cc27dcd13e1",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "b25c3754-9f58-4720-b34f-7d510feb821f",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5560d2bb-cbe2-47ce-abe1-f0405a1be00d",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "328dcf68-104f-417d-8d82-4bb0e9da3e0d",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 87
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 108.19718309859154,
      "responseMin": 6,
      "responseMax": 1856,
      "responseSd": 247.65799451175846,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1691541604606,
      "completed": 1691541647702
    },
    "executions": [
      {
        "id": "b5a5579b-f8e2-44b5-ab56-898e7ee89fa1",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "324a5401-09c9-466c-84d6-eed3859b95ca",
          "httpRequestId": "ac775fae-4ad7-41f4-842b-9b940e631712"
        },
        "item": {
          "id": "b5a5579b-f8e2-44b5-ab56-898e7ee89fa1",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "f06ede40-b8ff-4dd5-a336-ebf182da8624",
          "status": "OK",
          "code": 200,
          "responseTime": 61,
          "responseSize": 0
        }
      },
      {
        "id": "84245dd8-1dc6-4536-90f9-036112248f6b",
        "cursor": {
          "ref": "593346e2-668a-4045-9735-7e467e2954fd",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "a806e93d-34cf-432d-8875-dd5de781116c"
        },
        "item": {
          "id": "84245dd8-1dc6-4536-90f9-036112248f6b",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "c2a7a720-a751-46b8-b90a-87a0c20fc1a8",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "65b8026f-3d10-4684-b566-d6691b693e00",
        "cursor": {
          "ref": "69f7834c-808d-4a45-9f3f-ecb18900ce14",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "baa98b72-68da-474a-8b47-3aa828150729"
        },
        "item": {
          "id": "65b8026f-3d10-4684-b566-d6691b693e00",
          "name": "did_json"
        },
        "response": {
          "id": "f779e111-f227-400b-b569-a48ba24f48da",
          "status": "OK",
          "code": 200,
          "responseTime": 287,
          "responseSize": 1102
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dca9de2d-6dd2-418e-a93d-318ff83d5fbc",
        "cursor": {
          "ref": "ff107e11-71fa-4589-a284-b5a0bbd183fb",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a9ceb635-102d-42f6-bb9e-0d9496a70c31"
        },
        "item": {
          "id": "dca9de2d-6dd2-418e-a93d-318ff83d5fbc",
          "name": "did:invalid"
        },
        "response": {
          "id": "af6f8d7d-d110-437d-bbfa-c4413423c7f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dca9de2d-6dd2-418e-a93d-318ff83d5fbc",
        "cursor": {
          "ref": "ff107e11-71fa-4589-a284-b5a0bbd183fb",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a9ceb635-102d-42f6-bb9e-0d9496a70c31"
        },
        "item": {
          "id": "dca9de2d-6dd2-418e-a93d-318ff83d5fbc",
          "name": "did:invalid"
        },
        "response": {
          "id": "af6f8d7d-d110-437d-bbfa-c4413423c7f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "000b1bcb-3ae4-43ac-8720-98b14e3882d9",
        "cursor": {
          "ref": "e7bee3bf-a91d-4875-bf7d-7516055b4766",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "ac83ce2a-e278-4666-9b24-44aa9cb49fa8"
        },
        "item": {
          "id": "000b1bcb-3ae4-43ac-8720-98b14e3882d9",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "b271c4b8-2ab6-48ac-9c4f-7ef350aa3657",
          "status": "Not Found",
          "code": 404,
          "responseTime": 108,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3bc3272-3dbb-4263-bba4-02593744160a",
        "cursor": {
          "ref": "aa971198-4943-448c-9896-d61aa6037d76",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "9741396b-03d2-4a8f-a65e-243c5da6e43a"
        },
        "item": {
          "id": "f3bc3272-3dbb-4263-bba4-02593744160a",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "d0835fbf-892c-42e7-b0bf-7d0e86c12b67",
          "status": "Not Found",
          "code": 404,
          "responseTime": 36,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c90e8fb-0e0f-4e94-91ba-5da29ec56b9a",
        "cursor": {
          "ref": "c87405f3-a2a3-46c9-99f6-86d64d50e374",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "eab253d5-2c44-44bd-8411-a0a57287f25f"
        },
        "item": {
          "id": "7c90e8fb-0e0f-4e94-91ba-5da29ec56b9a",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "07ec496b-3c98-4bc5-beff-41df314ef784",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77f52231-9971-4ada-b000-31c64ba134eb",
        "cursor": {
          "ref": "aa1d8716-6402-4908-bc8f-cbae19486293",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "3c5cce61-a8a1-4b5b-8ec9-4aabf604b2e2"
        },
        "item": {
          "id": "77f52231-9971-4ada-b000-31c64ba134eb",
          "name": "identifiers"
        },
        "response": {
          "id": "5593d04d-193c-460c-a237-448529aee895",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 1118
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70384bf4-768e-4ff2-8cd1-23d3c7dd1ee4",
        "cursor": {
          "ref": "8c779331-c21b-4e4d-8d3a-8d8d2039b209",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "18fda422-31f4-4fde-b984-728a8103b251"
        },
        "item": {
          "id": "70384bf4-768e-4ff2-8cd1-23d3c7dd1ee4",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "8dd92672-f648-4978-824a-955787a9dd23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5355cb28-11cc-4306-bc61-2d7b718d4927",
        "cursor": {
          "ref": "36c7d0cc-6e42-43c8-a073-28d26159d441",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ef282370-f037-42b8-b296-0039a8a5b878"
        },
        "item": {
          "id": "5355cb28-11cc-4306-bc61-2d7b718d4927",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "dcc75b9d-2854-496d-b712-7befd5143846",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "354f45ad-e1d4-4d2f-beb3-9f869ab9efbf",
        "cursor": {
          "ref": "2a507e6e-7093-4276-b2b5-211623351985",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "8a2e4400-7c47-4ca9-8f3c-e764ad6d9a0f"
        },
        "item": {
          "id": "354f45ad-e1d4-4d2f-beb3-9f869ab9efbf",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "637933ff-a67a-4153-be3e-44664b0ea9f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e6739de-3456-42e6-b48a-359085c6f6e6",
        "cursor": {
          "ref": "d6f59ee5-5bb0-47b4-b981-522d76080cf6",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "137f26c9-d163-4bd8-b48e-7ddaedd55179"
        },
        "item": {
          "id": "9e6739de-3456-42e6-b48a-359085c6f6e6",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "c1b72e68-4e05-41d4-b9d4-25340c1b8e45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfff9804-3467-4913-a67f-3313494ad68a",
        "cursor": {
          "ref": "7ee86391-daa2-43b3-8d80-1f68a01a8ce3",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "4be22cf0-d049-4cbc-98d6-fdd4a2a7ec22"
        },
        "item": {
          "id": "dfff9804-3467-4913-a67f-3313494ad68a",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "29818f9c-c141-4dd6-83aa-dc9be069cd03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6450fa9e-cb44-4aad-8286-d6043c9f9e0b",
        "cursor": {
          "ref": "d83067ac-aee1-40e4-986e-99ddd942238f",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "8eca6023-05f7-4255-9413-60e94c0a4340"
        },
        "item": {
          "id": "6450fa9e-cb44-4aad-8286-d6043c9f9e0b",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "98014cf7-ad61-4163-8775-d13ac8caef85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b768b12-53f5-452e-bfcf-6bf7fdc47aeb",
        "cursor": {
          "ref": "eae2c40e-05ef-4d39-864e-25772fa064ce",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "64c4f615-63bc-4811-bf28-75c787d9f77b"
        },
        "item": {
          "id": "0b768b12-53f5-452e-bfcf-6bf7fdc47aeb",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "8c54c535-dc39-4ff2-a8e9-8bc56a02ffb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "716af5be-48e2-414c-bc79-f4e496bfb59b",
        "cursor": {
          "ref": "a5dab1c1-70b7-45e6-88d0-49f41e95d23a",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "81587f60-f5d4-4ab2-b861-efd4d523e020"
        },
        "item": {
          "id": "716af5be-48e2-414c-bc79-f4e496bfb59b",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "0323eb47-29c2-42de-80b3-919d8d4a94d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19289c98-bb6d-4f6d-b334-5d1405b19e95",
        "cursor": {
          "ref": "4d6707ce-a129-461b-ae1a-f1ae66082fc7",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "377ae96c-c5e7-4f1f-9095-5b9a7bea5921"
        },
        "item": {
          "id": "19289c98-bb6d-4f6d-b334-5d1405b19e95",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "8ce2c317-f68e-4b8e-8ef3-9f6902b132bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0e85afc-c64a-43b4-85ae-0a3a1e19eab1",
        "cursor": {
          "ref": "7db91713-a2f2-4e5b-95ef-a110ec553c18",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "c00de98a-0b31-428a-8dbc-5fbf51c2a9c6"
        },
        "item": {
          "id": "f0e85afc-c64a-43b4-85ae-0a3a1e19eab1",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "68caa111-d136-4b6b-9682-75728671edb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32ce8742-e6fd-4363-a4c6-850f773869b3",
        "cursor": {
          "ref": "fe704754-8067-4cca-b086-a088473117fb",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "52f62aa3-f465-409f-acc0-df3a8a1d621e"
        },
        "item": {
          "id": "32ce8742-e6fd-4363-a4c6-850f773869b3",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "4da9ab8e-2183-4281-afd2-21cbe3ea5728",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b23ccc05-3811-4c19-97cf-92771125563b",
        "cursor": {
          "ref": "d0e8645b-32de-4f39-8f13-c9d63538beb1",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "85a433ab-29e5-4ef5-8a27-25d00980b640"
        },
        "item": {
          "id": "b23ccc05-3811-4c19-97cf-92771125563b",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "b0a9a533-de13-41a1-b0fe-dd535bbeb2ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "037545fb-031e-4333-96ff-81afd536a9e8",
        "cursor": {
          "ref": "465a1605-ee39-43eb-b180-3fbf5af05d95",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "f8d9852b-050a-4608-86c3-763558f82c51"
        },
        "item": {
          "id": "037545fb-031e-4333-96ff-81afd536a9e8",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "d6360e06-ee09-402a-9536-aa6026187a29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1445257-166b-4484-bd42-503433493e36",
        "cursor": {
          "ref": "6fe3975a-7096-40bb-8fc2-700cf330d245",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "fb27da90-e84d-4fa1-af16-7f7b0254f428"
        },
        "item": {
          "id": "f1445257-166b-4484-bd42-503433493e36",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "eb83d900-6ea4-4f2f-8d4a-fff544d5e181",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9c7d86e-e2a5-44a7-b47f-f8e06c75f23b",
        "cursor": {
          "ref": "c4a28370-a1c6-4b63-918e-8fe77c9b3bf1",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "7674f89d-b367-4268-9e33-b585b92ac0cd"
        },
        "item": {
          "id": "f9c7d86e-e2a5-44a7-b47f-f8e06c75f23b",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "3a833f1f-e56d-49e3-b9a7-16dee686e7d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83741298-c14e-4bf8-b464-3312fb919c12",
        "cursor": {
          "ref": "7a84bf81-01d0-4fd5-af8a-b63d9f3cf95d",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "432981b9-0720-4247-aa33-e343e145f70e"
        },
        "item": {
          "id": "83741298-c14e-4bf8-b464-3312fb919c12",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "cab4e9c2-b8b7-45b7-b3c7-c1d68b07a01d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "083dbc9f-f520-43f1-bb78-6ced6f55be8c",
        "cursor": {
          "ref": "7defc5b6-d65a-437a-ae07-8f77995b047f",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "854bfdab-0fd6-4408-8039-48796b32f1de"
        },
        "item": {
          "id": "083dbc9f-f520-43f1-bb78-6ced6f55be8c",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "7bc6b3c6-7488-4d82-a197-26b5aa1205db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e9e2170-5157-4797-a862-bbe7ada300b9",
        "cursor": {
          "ref": "032ab8f7-12ff-493c-8f4b-9768c5f4ef85",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "ce8fe7af-339f-44c9-8af4-2bd272badaa1"
        },
        "item": {
          "id": "4e9e2170-5157-4797-a862-bbe7ada300b9",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "cd91588e-7d34-4c09-8df8-4a6c911ec7ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38bb269f-1251-41c3-b179-00f84a383848",
        "cursor": {
          "ref": "ac0a4c9f-3fd6-4189-9d30-b968788fd8c1",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "f1ab12d0-2c9d-44fd-aac6-9ddf319465d5"
        },
        "item": {
          "id": "38bb269f-1251-41c3-b179-00f84a383848",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "fb86ac4a-4442-4578-bebd-66e48ba43fc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11fd9a43-bd08-43af-bb14-2c5e2c9356b6",
        "cursor": {
          "ref": "146d7010-5343-45eb-a281-aae6dcf2f4e7",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "06360cc7-34ee-49b9-ac4d-7dbd729c37ae"
        },
        "item": {
          "id": "11fd9a43-bd08-43af-bb14-2c5e2c9356b6",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "96584e26-10d9-475d-8596-2bfc24f024f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be5fc66c-76de-4161-a682-b2fd4f4fb368",
        "cursor": {
          "ref": "ce09f3aa-8b2e-4338-952d-11f1b36bcbe0",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "38489f8e-8461-4600-951b-474d1717e478"
        },
        "item": {
          "id": "be5fc66c-76de-4161-a682-b2fd4f4fb368",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "e1f6854f-ed0a-45b2-b31b-d69cadc2d265",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b0dc34c-9c1f-45e1-ba98-3a3c7546ed91",
        "cursor": {
          "ref": "ee21d799-a35c-47d1-ac0c-3769dbfa9e44",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "b264fdb8-7081-4829-8abc-1b1a4b4ffa39"
        },
        "item": {
          "id": "3b0dc34c-9c1f-45e1-ba98-3a3c7546ed91",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "3de66ace-eda2-41a7-b970-9e31f563296a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11a025cd-7131-41ea-b776-38d63a0cc9db",
        "cursor": {
          "ref": "ffa2b358-5b5b-4779-b0f3-e018c2ce78a2",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "d08f6c71-750b-41d2-a18e-acb627ecc73f"
        },
        "item": {
          "id": "11a025cd-7131-41ea-b776-38d63a0cc9db",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "99ed335f-713d-4ba7-8f90-dbbba4eeecdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2f16796-8d08-4272-bdde-b39ef83b8448",
        "cursor": {
          "ref": "9c7b8ed0-e9d8-47ac-8a38-546334ee211b",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "04e9226c-d662-4317-8ae9-c1917318f6cd"
        },
        "item": {
          "id": "e2f16796-8d08-4272-bdde-b39ef83b8448",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "50e169fb-d445-45b8-a347-1ec3e82f243d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38a81897-3e82-4a0b-9944-d0277ba52b4a",
        "cursor": {
          "ref": "0bd60a0f-75b3-4341-b27b-2e4dc4999570",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "380d8879-2eb0-40d2-a410-e596feeec32c"
        },
        "item": {
          "id": "38a81897-3e82-4a0b-9944-d0277ba52b4a",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "dd3701ee-64f7-400e-80a0-1b2cd67f93b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a842253-3032-48e5-8a0b-32dc7e29c313",
        "cursor": {
          "ref": "ec280870-3f71-448c-9a04-a2b34fa555db",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "686590e5-a4bf-47f9-a51b-992a5290a16e"
        },
        "item": {
          "id": "6a842253-3032-48e5-8a0b-32dc7e29c313",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "2b9bd490-92bb-49e4-a564-a4a24817b175",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7541ff20-1ee0-4198-acc6-f0517680b837",
        "cursor": {
          "ref": "74457812-11f9-4353-ae3b-50fce934f6ea",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "14845b67-1a2c-4851-8592-acb11f9f43cb"
        },
        "item": {
          "id": "7541ff20-1ee0-4198-acc6-f0517680b837",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "7c919a3e-05e1-4e70-b8fe-2118cbe1c795",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1925ec6b-2f9c-4560-8e53-b6b5612b1919",
        "cursor": {
          "ref": "4efa3f19-af27-4954-aa18-06a715df6229",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "5cfbb236-b684-4a78-9925-ad7cc075a238"
        },
        "item": {
          "id": "1925ec6b-2f9c-4560-8e53-b6b5612b1919",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "7f18ce88-6040-40cd-b43a-ef8b112211dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2637c93b-df3e-4245-8b91-2c970ac10edb",
        "cursor": {
          "ref": "23ac65f2-7efa-4486-8763-e16a1e1778a7",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "cecb279a-73f7-4064-bb2a-f3853994dc8f"
        },
        "item": {
          "id": "2637c93b-df3e-4245-8b91-2c970ac10edb",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "9b67a243-489f-466a-b0d7-95d1dd07e402",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c22d4d12-fa3b-4718-a62b-33407554223a",
        "cursor": {
          "ref": "be3ea91e-aa23-4a4a-85a6-ed00cf94b6c7",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "125ca0c9-58e0-4b1d-a240-8822688710da"
        },
        "item": {
          "id": "c22d4d12-fa3b-4718-a62b-33407554223a",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "5dcb1f41-6225-46bf-b604-ec8ea050624c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57852acd-a765-4e02-a708-9a12a40cc77c",
        "cursor": {
          "ref": "340e3e87-ba2c-4cf4-b5bf-ed4f89139efa",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "72361838-4207-4656-9b2f-d2711cdfd66e"
        },
        "item": {
          "id": "57852acd-a765-4e02-a708-9a12a40cc77c",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "81141bf3-e170-4597-b18e-a971976d5f45",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "4531abec-1f4c-4aa8-ba67-91509fd5a54c",
        "cursor": {
          "ref": "12c04efe-6b07-404b-bff3-b5f37a6195a5",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "850da3cb-419f-4be7-a1b6-a421dbdf6500"
        },
        "item": {
          "id": "4531abec-1f4c-4aa8-ba67-91509fd5a54c",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "2d70ee79-11ef-4524-9673-64090711c535",
          "status": "Created",
          "code": 201,
          "responseTime": 1856,
          "responseSize": 774
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "71c474d4-5411-4f8e-bec7-d0b2e18b4744",
        "cursor": {
          "ref": "db873d84-5c7a-4399-8c52-a5e50a8dfec0",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "d05b5ff3-e5d7-4ec4-a2a4-4578b019c6e1"
        },
        "item": {
          "id": "71c474d4-5411-4f8e-bec7-d0b2e18b4744",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "859da193-940b-4612-91ed-21c0f88ab957",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 41,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "a7710a7f-ca15-492c-936e-d73c30c413d4",
        "cursor": {
          "ref": "2ab7acb5-239d-4534-a375-11f2bd29399a",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "587e1dc1-2837-45ca-89d6-32c1044f6723"
        },
        "item": {
          "id": "a7710a7f-ca15-492c-936e-d73c30c413d4",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "fcaeaef0-f31d-43d3-9695-432527bdb1d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ad144ce-26a1-4142-bf2a-811badb306ea",
        "cursor": {
          "ref": "ea081e51-599d-4494-be51-466d9a1c129a",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "e1029072-1ff8-475a-887a-229fd9041589"
        },
        "item": {
          "id": "6ad144ce-26a1-4142-bf2a-811badb306ea",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "6cf3bb64-7bff-47f7-bcde-5205886a081d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "fa84a833-cb96-4644-b908-9c81baef7151",
        "cursor": {
          "ref": "83ca58a2-6fc3-4e29-abd8-5cb85a438b77",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "c62d8072-0d98-457e-aad2-bdde7ec617ce"
        },
        "item": {
          "id": "fa84a833-cb96-4644-b908-9c81baef7151",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "7c69aa00-c997-4597-87e3-96b212d36a46",
          "status": "Created",
          "code": 201,
          "responseTime": 1350,
          "responseSize": 763
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "e1335009-6c54-4522-a1b3-dd368f231f29",
        "cursor": {
          "ref": "03125e72-8824-4437-84ce-b500463e6dfd",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "89aeb7c0-34d7-452d-9e29-492a3abb972c"
        },
        "item": {
          "id": "e1335009-6c54-4522-a1b3-dd368f231f29",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "dc36547f-438b-4043-b999-9904ddd2b5c6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 38,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "aea31ffa-ceb6-47e0-b42a-2805eeff4889",
        "cursor": {
          "ref": "562a17ca-544a-4195-ac17-abe335a6c6a7",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "bd19e84b-1903-4ebc-bcba-1bc697f25023"
        },
        "item": {
          "id": "aea31ffa-ceb6-47e0-b42a-2805eeff4889",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "c0db8399-13a7-428f-9d3a-810bac684a3d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 692,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "e2c0242c-a662-4039-9b75-4fd2fedd6646",
        "cursor": {
          "ref": "1e373e05-687a-4538-bceb-8b2d2884526f",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "3f5172b2-0666-4d12-8145-be273c07bf70"
        },
        "item": {
          "id": "e2c0242c-a662-4039-9b75-4fd2fedd6646",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "8f5948ce-f66d-4b8a-8fa9-dfac977f80e9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 31,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "7c3834c4-4f1a-4a4e-b183-214d091d831a",
        "cursor": {
          "ref": "3b0f691a-b75f-4d69-b463-f2095c76bc9c",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "1bc7a9a6-64a3-4683-b090-6df591aa4e7d"
        },
        "item": {
          "id": "7c3834c4-4f1a-4a4e-b183-214d091d831a",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "7b679de3-1b0f-433b-85a5-67d8b913bb5c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 37,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "8998f002-f0b7-43f2-89e5-b42a9ed1a863",
        "cursor": {
          "ref": "b5243ccc-8ee7-44f3-81f8-02130329da9d",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "38537569-f153-488f-acd7-5b6865f12a6a"
        },
        "item": {
          "id": "8998f002-f0b7-43f2-89e5-b42a9ed1a863",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "e803ce1c-7567-4a9c-96b9-ec95eda9c226",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 31,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "bcdaeac0-d996-4cc2-b543-6dd8119cbcd3",
        "cursor": {
          "ref": "298718a2-0d41-4023-a62d-5eb6deafc1a4",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "49c76d72-f62a-4813-82fe-bd90520a8792"
        },
        "item": {
          "id": "bcdaeac0-d996-4cc2-b543-6dd8119cbcd3",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "b2c9b7e4-cedf-4a81-9bdc-89f720b46989",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 41,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "b9f4cd9a-1f0e-4470-a0a8-f86ca22a289e",
        "cursor": {
          "ref": "95d2105e-9817-4ca5-adae-eb677d53cdcb",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "7d7d5a55-64ad-4436-922e-65b9a6dfabd2"
        },
        "item": {
          "id": "b9f4cd9a-1f0e-4470-a0a8-f86ca22a289e",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "88fb54b4-d384-4473-967a-69c4931c7b7a",
          "status": "Created",
          "code": 201,
          "responseTime": 850,
          "responseSize": 770
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "52b27099-ddce-4cb7-87d6-cf18aa693627",
        "cursor": {
          "ref": "b7d4d02b-dfcc-4ac3-8361-893b5769f962",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "b06ac464-2518-433e-9920-7c7248f0596f"
        },
        "item": {
          "id": "52b27099-ddce-4cb7-87d6-cf18aa693627",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "5fd0e2f7-935f-4039-be9f-886ad013621e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "029eb333-d5a2-4a3f-90eb-9d2b2252d2cb",
        "cursor": {
          "ref": "e9657540-60c3-469d-96e1-4b39f471bdc0",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "645ed33d-4e96-4041-8039-442a88e5ba62"
        },
        "item": {
          "id": "029eb333-d5a2-4a3f-90eb-9d2b2252d2cb",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "c0a397e3-d12c-4db9-87bd-ac6cff3d57ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30afa189-c276-4567-b46c-0f7954f5326f",
        "cursor": {
          "ref": "6fc192bf-934f-48ae-9b3f-a49c43b5d225",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "7886296f-4745-4d35-bb16-01ebb2d0a9d6"
        },
        "item": {
          "id": "30afa189-c276-4567-b46c-0f7954f5326f",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "4c9b9c53-b8b2-4fba-ad6e-f92bf67c6573",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b67bcba4-e2bc-4476-af7e-8a587286a042",
        "cursor": {
          "ref": "04e3d4a4-91e3-47e9-b28e-2cd3e308c017",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "9785dc5a-1fe3-49bc-b8f2-857bb916ce76"
        },
        "item": {
          "id": "b67bcba4-e2bc-4476-af7e-8a587286a042",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "824930b3-7837-455a-ba11-356c43c4f2fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61798856-7ef5-4f58-9b08-bc28b4a7e670",
        "cursor": {
          "ref": "4894b972-7de4-4188-94df-d6314bcab0ac",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "3ebebdfb-5b32-45ad-b7b3-64348c23db06"
        },
        "item": {
          "id": "61798856-7ef5-4f58-9b08-bc28b4a7e670",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "21d65364-8efc-42cb-8fe6-3ebd35876120",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62593898-f36b-4909-8c3d-ec820f43fc10",
        "cursor": {
          "ref": "61a9d444-66f4-4d42-825a-226571062b94",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "a1fc872b-3054-4fd1-888a-e44704726124"
        },
        "item": {
          "id": "62593898-f36b-4909-8c3d-ec820f43fc10",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "9a16e430-b715-4a1a-9571-f30b01db7b53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a59a5408-da7c-4e81-841f-eec562b50b92",
        "cursor": {
          "ref": "da62aed8-9ae3-4c0c-bcef-975b95322b7c",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "328c2cd1-4ee4-4f9a-9c21-1f1cd463da99"
        },
        "item": {
          "id": "a59a5408-da7c-4e81-841f-eec562b50b92",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "e54f2315-efad-4ec1-b7a4-930ecabb6b44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c389ef4-05b8-4d37-be63-0bfc812615eb",
        "cursor": {
          "ref": "61f54b05-0448-4c3c-8698-f67efe614491",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "c8f6c0ff-c24d-4aea-8bbf-af8ebc6459ce"
        },
        "item": {
          "id": "9c389ef4-05b8-4d37-be63-0bfc812615eb",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "6ec3f648-dd38-4cdc-b02a-429745d47490",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0835298c-9200-433a-91dc-9b22abfa52d9",
        "cursor": {
          "ref": "a7299554-c6f8-4c66-b5a9-284079b65850",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "83cf3fe4-6e42-4f1d-9648-b41dab7d5c3f"
        },
        "item": {
          "id": "0835298c-9200-433a-91dc-9b22abfa52d9",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "74023153-1281-45ae-b1af-f7580c14977e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71fc1fd9-a6a6-4b8d-8347-7be5199c4faf",
        "cursor": {
          "ref": "900176b8-ff9f-47a7-b539-7fb56fd6df80",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "8f201ba7-6eea-4741-aec2-22b8f22aed6d"
        },
        "item": {
          "id": "71fc1fd9-a6a6-4b8d-8347-7be5199c4faf",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "f6e1941d-e03c-4d48-be49-bb7cfc79c966",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6736b961-9c65-457d-94f0-78d7b6988add",
        "cursor": {
          "ref": "5151d7da-b337-445c-9ac8-f1f2ad893965",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "6fc1a5b0-c30b-4fef-88dd-4bbe31d7049a"
        },
        "item": {
          "id": "6736b961-9c65-457d-94f0-78d7b6988add",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "89af2c7f-ac8e-4d6a-8c71-d03171de3caf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32139ed0-574f-4ece-b688-63daf8ae5da7",
        "cursor": {
          "ref": "56634128-747a-45ec-8e63-79650fcdb415",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "e01730c6-0963-4adc-aba3-87c652a57a39"
        },
        "item": {
          "id": "32139ed0-574f-4ece-b688-63daf8ae5da7",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "da9d21e2-6378-4275-88a8-1982e0b6e058",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eccf14d2-cde1-4614-8589-4ff003c75628",
        "cursor": {
          "ref": "dc8cd4b6-7ff3-40cc-a9a9-f83c05be452b",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "717856d0-2c46-46b2-b7b9-70be21561b8b"
        },
        "item": {
          "id": "eccf14d2-cde1-4614-8589-4ff003c75628",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "2b6ebb8e-38f1-4f84-a374-8fd536533c48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "528d5a5f-86d3-4ddf-b476-a2b048804447",
        "cursor": {
          "ref": "cbdbecb8-0a88-414a-a16c-d8afc96944a9",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "360d3457-03bb-4a01-acf2-275e84a87ed3"
        },
        "item": {
          "id": "528d5a5f-86d3-4ddf-b476-a2b048804447",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "045f361f-1da2-4252-bb55-3f2a3f34203a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 650,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "3592e53f-812f-4c29-b0a1-0d0cbc6d1054",
        "cursor": {
          "ref": "f95f4e9b-0f50-4d11-9fb8-50fe7529dbe8",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "16096d11-ae4f-4c15-81b6-421318a75b29"
        },
        "item": {
          "id": "3592e53f-812f-4c29-b0a1-0d0cbc6d1054",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "965f359b-1de4-42bd-963d-44c2bcc127c1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 741,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "852b32e5-3aaa-4359-baf9-62d107706a36",
        "cursor": {
          "ref": "232c0621-2ca2-45b8-a6fe-db2b16362e74",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "b6405802-a7e7-4c6a-ac6b-a41634ab8749"
        },
        "item": {
          "id": "852b32e5-3aaa-4359-baf9-62d107706a36",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "9c17b336-6979-45b5-b4c1-9378adf6fa6c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "e67c3527-cc0e-406c-9dcc-f1324c5032ff",
        "cursor": {
          "ref": "bd1fd02e-5c0c-4f9b-9bbd-0d64a433195c",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "49d9a0eb-c305-4afd-99c7-76720cc9c4fd"
        },
        "item": {
          "id": "e67c3527-cc0e-406c-9dcc-f1324c5032ff",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "7e58cc5e-c779-485f-b9f3-6b7593484195",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 734,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "3fff8254-d3d8-4e62-9108-14e7c868b1f9",
        "cursor": {
          "ref": "9b01678e-0365-4f40-9c8b-38f505148c00",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "571a791b-b670-4286-b9a1-58fa75232639"
        },
        "item": {
          "id": "3fff8254-d3d8-4e62-9108-14e7c868b1f9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "08a29427-09c9-4329-859e-05ad4338c149",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 37,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "def2e86b-e969-40a1-a479-9414fb69bb92",
        "cursor": {
          "ref": "551529bb-ede9-40e0-8723-43396f8c77d8",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "a7786d0e-e027-432f-ae96-af04a3bc0a34"
        },
        "item": {
          "id": "def2e86b-e969-40a1-a479-9414fb69bb92",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "a629bc6b-dc47-4627-b973-83b3bcdb974a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f75a328-42fb-43fe-b3e1-e6249360ae71",
        "cursor": {
          "ref": "c914de8c-44a0-4d84-a13d-f086272eaa4b",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "f2943a99-931a-44df-98bf-a45eea876813"
        },
        "item": {
          "id": "8f75a328-42fb-43fe-b3e1-e6249360ae71",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "9296884d-bfb3-47ab-a62b-ae457fbac183",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22f68f47-943c-4ff0-93ee-bbdc1be16de7",
        "cursor": {
          "ref": "387ba1dd-2768-44ab-93a3-8c9571dbfe23",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "01c80e5c-b50f-41b7-87f2-3d0aaa6951ef"
        },
        "item": {
          "id": "22f68f47-943c-4ff0-93ee-bbdc1be16de7",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "685a1d95-3d21-4aae-a0c4-1d662a615af0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df861c88-0388-4457-a84c-efb4837fd03e",
        "cursor": {
          "ref": "e46bf678-3c44-46e8-98f7-1a7b68274954",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "9061e700-2ae7-49da-a62a-a53521abf006"
        },
        "item": {
          "id": "df861c88-0388-4457-a84c-efb4837fd03e",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "ad0a3dd5-8d33-4051-a300-7b8b4bc51218",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17779976-223e-423d-b8ee-f79238c9f927",
        "cursor": {
          "ref": "833d5402-f66e-4459-a03f-c9798d0f0e0b",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "f72d9660-e8bd-4bfa-95fd-90abae71bd5e"
        },
        "item": {
          "id": "17779976-223e-423d-b8ee-f79238c9f927",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "9f48ac46-25e9-4ef7-9bad-81055c1f8e07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e5a7368-d4bc-491a-9197-04193b89447e",
        "cursor": {
          "ref": "43f61b40-f70c-44bb-9524-df6c6bbf5214",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "4fbe3695-fd08-4b66-97f4-b1eeb29a1377"
        },
        "item": {
          "id": "8e5a7368-d4bc-491a-9197-04193b89447e",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "a9a80602-6f8f-47ee-8283-53d453cf300a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f8308d8-2e84-4d10-a13f-accf7fe0d86d",
        "cursor": {
          "ref": "74dd15f4-720d-41c2-85eb-139018d94358",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "baa24913-bca3-4cba-a75c-b952ceb0bae5"
        },
        "item": {
          "id": "2f8308d8-2e84-4d10-a13f-accf7fe0d86d",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "7ad1e510-1ad2-431f-b073-1d8e3d2d4f30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc2a39cc-716b-4d12-a94d-cb62a02d1a23",
        "cursor": {
          "ref": "841500d7-ec7f-4f73-9f40-873203597c44",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "2436eb78-c3ce-441c-85d1-abfc47a559aa"
        },
        "item": {
          "id": "dc2a39cc-716b-4d12-a94d-cb62a02d1a23",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "26729dea-c3c9-420c-b140-9add2ae1e259",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77fd20b5-232f-4bfd-8803-b09851f26c27",
        "cursor": {
          "ref": "14ade41b-2300-4f9c-bc49-0096bd707017",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "94bed3e9-b18a-4a73-8935-07c453379ac1"
        },
        "item": {
          "id": "77fd20b5-232f-4bfd-8803-b09851f26c27",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "e60718b4-4578-4300-a30a-b656537c383a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3c69600-0033-40bc-ba03-2677f4c24ff8",
        "cursor": {
          "ref": "9c434483-88f9-4d7c-acf1-4518031a2193",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "52b70104-5697-449e-8108-84c453b4c84b"
        },
        "item": {
          "id": "d3c69600-0033-40bc-ba03-2677f4c24ff8",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "29aeb180-6ee3-40af-b565-d611c8a1281c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d329490-3136-47cc-91fd-15b885d57f14",
        "cursor": {
          "ref": "28beed4f-6e8c-4e06-8fcb-78a536394e52",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "a90bc493-77ed-4321-b2d2-5921f1be5f65"
        },
        "item": {
          "id": "5d329490-3136-47cc-91fd-15b885d57f14",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "2303fef7-6663-41ec-905c-401448750a31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9efbc674-f89d-4e66-8613-76a01ee6130c",
        "cursor": {
          "ref": "8592a4d6-a465-41a4-b797-41951cdf2592",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "7ae9212e-cfb3-4460-ad41-02e238602d6f"
        },
        "item": {
          "id": "9efbc674-f89d-4e66-8613-76a01ee6130c",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "dbfc2f71-f89f-4df5-8601-c9f319923b83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9adf9a5c-20f5-47b9-9da7-f9d6d35ffe55",
        "cursor": {
          "ref": "bef9f858-a1b4-4b6a-a876-e14b02a30d76",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "8e1dae53-e894-451e-8646-4cac02730cc3"
        },
        "item": {
          "id": "9adf9a5c-20f5-47b9-9da7-f9d6d35ffe55",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "7d948b90-9f86-4258-babf-e40e1b44992a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5324d52-2a94-4055-be62-9b91bf6079a8",
        "cursor": {
          "ref": "5235b5d6-e099-4228-ba18-8e4b385eba7d",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "c873a8e0-6d3e-4431-8564-3d09e077eaec"
        },
        "item": {
          "id": "c5324d52-2a94-4055-be62-9b91bf6079a8",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "da96efe8-a9c1-40f0-93fc-3326b02fcb3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7afdcba6-3032-4876-83ff-cd880c5d30c3",
        "cursor": {
          "ref": "a48ac16d-da57-49d5-bc45-48a8eac8307b",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "03c8f76e-388e-4587-a078-7e76cc8d85c9"
        },
        "item": {
          "id": "7afdcba6-3032-4876-83ff-cd880c5d30c3",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "5f51b0c2-f521-4293-97fb-816b81076522",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38309644-dcf7-42ad-a271-29d26c7005b9",
        "cursor": {
          "ref": "d84b0515-1daa-4e8f-8dec-8760f5e77d3d",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "b4ec86b9-b836-40a4-82d9-608528b47216"
        },
        "item": {
          "id": "38309644-dcf7-42ad-a271-29d26c7005b9",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "7a769026-54a2-409b-bbca-fdd15572e9e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3debddb3-cac6-4cb3-9601-5fa8e59b5b10",
        "cursor": {
          "ref": "9d1e6468-83fb-448b-8ba4-0c9bbc2e253d",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "c930828e-6e5f-4344-a3f5-ce50363c3e8c"
        },
        "item": {
          "id": "3debddb3-cac6-4cb3-9601-5fa8e59b5b10",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "c90cf4a0-2864-459f-bc57-b09ebaba8e47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e8b556f-e742-40e1-b4d7-85879fe16805",
        "cursor": {
          "ref": "7362a718-7da6-435f-96b6-5ef1a2357657",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "9ad794bf-4e64-4fb3-880f-bf599619e431"
        },
        "item": {
          "id": "2e8b556f-e742-40e1-b4d7-85879fe16805",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "81443439-850d-4d63-90d6-2ce14b2549a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "875c8a75-b66a-4a90-89f7-b66f4a719b67",
        "cursor": {
          "ref": "3209b1f2-f2fe-4eb5-a72e-4258922c700f",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "0e164fa4-eb7f-401c-953f-1cfbecbc9811"
        },
        "item": {
          "id": "875c8a75-b66a-4a90-89f7-b66f4a719b67",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "e1228e1f-81b4-4455-8dca-9204cd2e81e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc694219-8d39-408a-a7bd-40886c0fc045",
        "cursor": {
          "ref": "e3c35cc2-41d9-4455-a299-c45f0049d145",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "5fab07b3-48ac-4c22-ad4a-d31c4c13f833"
        },
        "item": {
          "id": "bc694219-8d39-408a-a7bd-40886c0fc045",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "d545a125-80b3-417e-a74c-f0528b3871ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a250648c-c34e-4952-a07f-847ccff15802",
        "cursor": {
          "ref": "33b89693-a9b8-4df9-bcc5-164f23720a72",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "fd8724ca-18f5-44cb-9432-56e07ff13436"
        },
        "item": {
          "id": "a250648c-c34e-4952-a07f-847ccff15802",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "4b0d47da-20fe-4d49-ba71-14fe37e9953f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51926364-e3b3-4a76-bd57-452288371657",
        "cursor": {
          "ref": "55623fc3-bbd2-4c8d-9c1f-a878d40b7847",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "f60bee4d-b040-4daa-abca-77da7b130105"
        },
        "item": {
          "id": "51926364-e3b3-4a76-bd57-452288371657",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "2e9cfc95-93f5-4563-be07-6cb1e408f329",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a2cd196-18ad-4d91-a8e9-2f8fb5780a08",
        "cursor": {
          "ref": "3abff9ee-bff0-4a31-9106-3be4f1fc0beb",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "9f9e3fb2-8449-4bf5-8331-0e88f8d85a4a"
        },
        "item": {
          "id": "6a2cd196-18ad-4d91-a8e9-2f8fb5780a08",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "34a12aa7-1d62-4fe7-b06d-528a143aa9fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6ba5c65-ac33-4da1-8c26-7154fed7713a",
        "cursor": {
          "ref": "3d593220-e578-4ba0-a4b6-9528c4535bb3",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "0af1ea9d-0069-4c12-9c0b-2db9fdc13f61"
        },
        "item": {
          "id": "c6ba5c65-ac33-4da1-8c26-7154fed7713a",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "f6d313e9-2d1a-45e3-93af-83de631f489a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0c4d124-1ed3-481d-97bf-8367279fc652",
        "cursor": {
          "ref": "9e428814-e8f0-4838-8b91-2ac70ab6dc43",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "86e43698-2122-44bc-bd63-5f93cb2edbe2"
        },
        "item": {
          "id": "e0c4d124-1ed3-481d-97bf-8367279fc652",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "fc347a74-1d88-46b2-ac68-b60fd373487b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ee71fc0-c908-4531-950e-49c452586e5b",
        "cursor": {
          "ref": "3a1d486c-77b7-428a-a1fc-a1627fcf3ea5",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "35d5ebba-002d-4378-a1b2-c3037f35a3f1"
        },
        "item": {
          "id": "8ee71fc0-c908-4531-950e-49c452586e5b",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "95c92e2a-f60d-4501-8212-1631f1990372",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf6888d0-d720-410e-9f22-755790766dd9",
        "cursor": {
          "ref": "f0dede06-7bdd-4a91-9ba9-fa50d05ba18e",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "45d8060d-1ae2-48c6-aa63-4ca5370064ef"
        },
        "item": {
          "id": "cf6888d0-d720-410e-9f22-755790766dd9",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "aede7a85-a395-45ef-977b-e1aba721d076",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caa5610c-9cd3-49d4-920b-39e477ee618c",
        "cursor": {
          "ref": "39906cda-926d-4513-802e-59d23609e317",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "2e87b979-6227-4d24-9849-15060f2cb9c6"
        },
        "item": {
          "id": "caa5610c-9cd3-49d4-920b-39e477ee618c",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "d02be989-dcc8-4f13-a80e-27948dc65ba5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf1e50af-822d-4048-945e-9f9dfdcd6dd2",
        "cursor": {
          "ref": "273a3807-4db3-4045-ac24-12efeb53a9bf",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "5d3f8f95-91d5-4323-a9b3-962d8dae2a41"
        },
        "item": {
          "id": "bf1e50af-822d-4048-945e-9f9dfdcd6dd2",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "c051565c-e759-4a32-9d53-6c0ccb6bdcdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "093cd9bd-9768-469a-9a2f-fee3d96045c1",
        "cursor": {
          "ref": "708253e5-0a85-4414-b7e6-f030f616b1b8",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "a604afdc-f24e-457c-8ade-e29ca335f89b"
        },
        "item": {
          "id": "093cd9bd-9768-469a-9a2f-fee3d96045c1",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "986b0bdc-0061-4d7a-9986-dccaf5b18864",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd6550f4-e6da-45a5-8f98-378e515c21b3",
        "cursor": {
          "ref": "fa23f7a1-2042-4ccf-9126-28c158fe46a9",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "142317e2-43f3-431a-a3f3-9237fdeb78f7"
        },
        "item": {
          "id": "dd6550f4-e6da-45a5-8f98-378e515c21b3",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "6c473669-572e-48ce-a750-27a6c945e65a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af32af2a-1a51-48fc-8038-25710e0bbf2f",
        "cursor": {
          "ref": "cfe7856d-354a-4363-bb70-960b26be1c0a",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "eb38f32a-b7b5-4f88-b7a1-86ae5b731c72"
        },
        "item": {
          "id": "af32af2a-1a51-48fc-8038-25710e0bbf2f",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "e421e240-b8a1-444a-815b-6f4df35be07b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2969427c-8fa6-442e-96f4-2de239e42d79",
        "cursor": {
          "ref": "f30d2854-d922-475d-bac8-8e4ec120b1ec",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "d40cb1c4-7287-481e-a405-e364e711bdf7"
        },
        "item": {
          "id": "2969427c-8fa6-442e-96f4-2de239e42d79",
          "name": "credentials_issue"
        },
        "response": {
          "id": "9ae4ae16-ce41-43ee-89e9-0f0f04972c75",
          "status": "Created",
          "code": 201,
          "responseTime": 1450,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "535e8cd4-9065-449f-95c9-aeaee860cc6f",
        "cursor": {
          "ref": "a142cc68-0334-4d56-b4fe-5b8f4d56df45",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "af7021ca-3ce6-4bde-aed9-996853c5b0a4"
        },
        "item": {
          "id": "535e8cd4-9065-449f-95c9-aeaee860cc6f",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "d295d4bf-5488-4c64-9731-2563b3cf6cf3",
          "status": "Created",
          "code": 201,
          "responseTime": 850,
          "responseSize": 714
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "e447ecf3-ca82-432f-8fe4-609e3fd25c9e",
        "cursor": {
          "ref": "01d18e4f-8936-4841-9e9a-88190dd72255",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "d9619fdb-eff3-475a-9487-1ea0401e76b8"
        },
        "item": {
          "id": "e447ecf3-ca82-432f-8fe4-609e3fd25c9e",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "08070c88-5c73-4faa-953c-f96efcf1c644",
          "status": "Created",
          "code": 201,
          "responseTime": 850,
          "responseSize": 767
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "142daf83-bad2-42e2-a38e-119d9aa4b826",
        "cursor": {
          "ref": "cb4740fd-99b3-4dd0-a468-696f5d38bacc",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "d8ba5de2-545e-4c80-9666-6faa0c81e39a"
        },
        "item": {
          "id": "142daf83-bad2-42e2-a38e-119d9aa4b826",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "7fbf81d5-bf6e-45a7-9a9d-4e713ddafd2c",
          "status": "Created",
          "code": 201,
          "responseTime": 885,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "741fea56-d53a-4f32-a79e-573ee3e4ce84",
        "cursor": {
          "ref": "0a3d23cb-cc6c-4733-bada-697d7470592d",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "a80b1e58-f10d-4073-ac3e-93989833c86b"
        },
        "item": {
          "id": "741fea56-d53a-4f32-a79e-573ee3e4ce84",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "14933e1e-5d38-4d12-9607-239996f20978",
          "status": "Created",
          "code": 201,
          "responseTime": 863,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "192bbf41-db63-4c6c-a798-86bb10875cd0",
        "cursor": {
          "ref": "a8ae9a56-bd0c-4cc1-a5b2-78e56463b7f4",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "8e41ecbf-bcff-488f-9638-fb9a64190c35"
        },
        "item": {
          "id": "192bbf41-db63-4c6c-a798-86bb10875cd0",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "7baf588a-e0c1-4d70-8c91-25e107c9a5e3",
          "status": "Created",
          "code": 201,
          "responseTime": 934,
          "responseSize": 1093
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c95147a4-7eb8-44f0-a6e2-d8e1ef68d4c2",
        "cursor": {
          "ref": "bde712ee-82a2-4d4d-8257-9ef156d9dc26",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "13cf3637-fe1d-4b93-8f44-1f768c2ecc22"
        },
        "item": {
          "id": "c95147a4-7eb8-44f0-a6e2-d8e1ef68d4c2",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "c8c34c2a-5920-4fbf-9b6b-02f8b958e1b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f715874-b42f-4c07-b2d1-cc11ffac2a84",
        "cursor": {
          "ref": "e8d27ad8-c9c0-41d7-9a15-ec0a4138ab7b",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "df478d8c-0905-4eb0-9e54-7158a8907ed7"
        },
        "item": {
          "id": "0f715874-b42f-4c07-b2d1-cc11ffac2a84",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "433bb14c-d49d-4fff-a857-f1096a7a2869",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d387c011-824e-4d1e-b384-94b5ce57e323",
        "cursor": {
          "ref": "43345c34-50a0-4689-a834-51ae8fb9f94b",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "26b07523-6bb0-4e51-8150-f1038008879d"
        },
        "item": {
          "id": "d387c011-824e-4d1e-b384-94b5ce57e323",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "4122f11d-19ae-4fd5-b3a1-1f4a03206264",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63d656dc-5807-4f6d-976e-bb7a7ef8110b",
        "cursor": {
          "ref": "f2f8003c-e427-42f9-a1e7-beb031a636ec",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "0845d4c1-4d9b-4400-8992-d1d43d77d74c"
        },
        "item": {
          "id": "63d656dc-5807-4f6d-976e-bb7a7ef8110b",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "cb4dae25-76a1-4912-be07-90257e93e143",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1f03609-789e-4c81-9bcc-b6512bbc7e87",
        "cursor": {
          "ref": "e11f85ea-2153-40fe-baca-53bfd54616d6",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "bc8ec672-c743-4103-8ea5-dd0d3af3f5f1"
        },
        "item": {
          "id": "b1f03609-789e-4c81-9bcc-b6512bbc7e87",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "e0d475ee-333c-4c43-8964-3c9fa00c29d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23942e5b-16ea-4b66-ac72-d128deba8af8",
        "cursor": {
          "ref": "1da67ab5-1637-42d2-8588-91160b1cc7bf",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "4fd77e6c-aaa0-4133-ad60-671400c1797f"
        },
        "item": {
          "id": "23942e5b-16ea-4b66-ac72-d128deba8af8",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "e566dcef-7268-42e1-9965-554f2b67d033",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44a5bac7-9ded-4fda-8efc-5866d181d039",
        "cursor": {
          "ref": "0077a9e1-967f-40f6-a3db-e9612f6b7eac",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "cb83f3cc-282f-467e-b307-b4e159ef6c18"
        },
        "item": {
          "id": "44a5bac7-9ded-4fda-8efc-5866d181d039",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "fff55d29-4456-43e3-ad78-db1fac1bfa63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8068e52b-43bb-4bef-aeff-a381b972b897",
        "cursor": {
          "ref": "c9649350-5de0-47fc-9fd6-025720489ec9",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "2072df2c-8ed7-44f8-9380-20090124c600"
        },
        "item": {
          "id": "8068e52b-43bb-4bef-aeff-a381b972b897",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "608baba3-5768-41fd-af13-0b4e3a064827",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c81f732-b569-440f-8137-96c6121887bd",
        "cursor": {
          "ref": "ddfc32a2-75fa-4f69-8f32-d02afe3f1e4f",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "11ea8ef3-bb1a-496e-82ca-0c6e52956bcd"
        },
        "item": {
          "id": "9c81f732-b569-440f-8137-96c6121887bd",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "ca1b6b31-2e5d-4a0d-8654-43d67094b25d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0566993a-4d2d-4147-a2a6-e2ba388dd56d",
        "cursor": {
          "ref": "4596a5fa-1fa2-42d9-acba-da892e2ab658",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "3e25a7c9-9018-4248-b4eb-7e710cda8bd4"
        },
        "item": {
          "id": "0566993a-4d2d-4147-a2a6-e2ba388dd56d",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "2c71a25f-db1f-425e-acd4-57159b6d7899",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55d39c3a-13ef-4ff8-a4a9-8ab6e5679a97",
        "cursor": {
          "ref": "af53d3e4-ecee-4628-aa50-6a795e163e54",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "470da7e5-e82e-4cd7-9bde-208f67940b61"
        },
        "item": {
          "id": "55d39c3a-13ef-4ff8-a4a9-8ab6e5679a97",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "59665cf6-48be-47e9-be79-5894cc9de55d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd697599-81c6-4e66-845c-a553ae33bea7",
        "cursor": {
          "ref": "b9a6fceb-ec4c-4727-be41-c2f5d7d1fccd",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "5811df5a-e8b8-448c-a841-d10e2663621c"
        },
        "item": {
          "id": "fd697599-81c6-4e66-845c-a553ae33bea7",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "53e59a19-28f8-4ff3-bebf-bf3028a0fb06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73f23000-dd49-4135-9cf9-9d1aa5e49856",
        "cursor": {
          "ref": "cc8bcf7c-acc0-43a2-bbea-297b689b97ae",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "252c86f7-b50c-4b3b-a435-b563cee5c5d4"
        },
        "item": {
          "id": "73f23000-dd49-4135-9cf9-9d1aa5e49856",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "0b1bf064-665f-44ab-bae9-00e6f89c46d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e04f8bc3-aa3c-4253-aff8-b10382f165c9",
        "cursor": {
          "ref": "ac0f6fda-dbaa-4565-ad34-6d4dfbb62ca4",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "d4d1dcf9-ded1-4059-8957-f196a5c8ff1a"
        },
        "item": {
          "id": "e04f8bc3-aa3c-4253-aff8-b10382f165c9",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "78a3aa72-a2d1-44a7-8639-0aa72305492f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f84dbfce-036a-4c0b-bfd9-38ce0ce74156",
        "cursor": {
          "ref": "d16058de-ac78-424e-b8c5-0d62783b9055",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "d88812e3-e7b9-4676-91f1-0a85406936c4"
        },
        "item": {
          "id": "f84dbfce-036a-4c0b-bfd9-38ce0ce74156",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "3b5924c7-bf78-4476-9d66-4fd56672b951",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0cdc93e-eb41-406c-ad1c-f3c1330796fa",
        "cursor": {
          "ref": "d0c00824-9879-41a7-9e3e-30ce4f882456",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "dea73d80-e00e-487a-be5a-824946719ee4"
        },
        "item": {
          "id": "b0cdc93e-eb41-406c-ad1c-f3c1330796fa",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "25e5678b-be88-4c6b-93b4-1566faaeff89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04a22f4e-3d7d-4a83-b4de-4d239b9e29c9",
        "cursor": {
          "ref": "0cc4cf7e-9696-4c4f-9328-b76e7fed0012",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "6e46f83f-d9ec-4a0c-bef0-238f3e43ae32"
        },
        "item": {
          "id": "04a22f4e-3d7d-4a83-b4de-4d239b9e29c9",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "40f5a5a3-aeac-4fec-aa75-73ba1abba641",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ba95119-d7b1-41f4-9643-42560c0fc26a",
        "cursor": {
          "ref": "ab7f22b4-fb60-4723-ac74-673edbcaa677",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "9ed25ec5-6ff1-48c6-92c6-be1c5db8d3cc"
        },
        "item": {
          "id": "1ba95119-d7b1-41f4-9643-42560c0fc26a",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "35c5ec92-cf12-4258-b141-6c610d1c2c33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "710f6109-1dee-427e-b203-2f4b6e257099",
        "cursor": {
          "ref": "e9065057-a2ea-45f3-a556-c07e0950e87a",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "cca649ce-c1f5-4aa8-9962-65a0a0447ac6"
        },
        "item": {
          "id": "710f6109-1dee-427e-b203-2f4b6e257099",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "bd0b4e89-8b07-4405-860d-4bf81331f9a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4be14f93-5e9f-47a2-bdf6-48451cbe30dd",
        "cursor": {
          "ref": "fa56f57d-d3a4-40f4-b844-8182ab8a2226",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "7f4536f8-0bb6-4473-aa52-3e43402bef84"
        },
        "item": {
          "id": "4be14f93-5e9f-47a2-bdf6-48451cbe30dd",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "b5c75476-b24e-47ad-9e41-4a5d4208e064",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "774c136d-77ea-4900-85cd-3c8a53883f7b",
        "cursor": {
          "ref": "a4891479-50ac-443a-8581-ef4321ba4c3a",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "39ec7541-4b3b-45b3-be47-6006905309dd"
        },
        "item": {
          "id": "774c136d-77ea-4900-85cd-3c8a53883f7b",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "c1e8ba02-ffaa-457c-ad35-902619532e12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d786b45-b7e2-48a5-8a03-792f6f6a5bfe",
        "cursor": {
          "ref": "9582f54b-0f5b-4c5a-8d11-1ef1f492da7f",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "fbcc62d5-7041-414a-b69f-cab18f063377"
        },
        "item": {
          "id": "1d786b45-b7e2-48a5-8a03-792f6f6a5bfe",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "48cb8349-585d-4016-bbac-7eb246549645",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11a19361-29db-4c2f-aa5f-330d23f7299e",
        "cursor": {
          "ref": "15301e0e-638d-4a91-b073-8e60032330e3",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "fc1496bf-2d10-460f-ac16-7ede480ff262"
        },
        "item": {
          "id": "11a19361-29db-4c2f-aa5f-330d23f7299e",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "3448948b-a5e4-4577-a71a-f03fd1d9d598",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3f0fcd2-79cd-4cba-a9fe-b8c1a4a93a44",
        "cursor": {
          "ref": "b83c7605-7046-4f35-aa35-fa588dec1996",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "237f1f3d-d356-43bd-927b-b4103e584adf"
        },
        "item": {
          "id": "c3f0fcd2-79cd-4cba-a9fe-b8c1a4a93a44",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "bd8893ab-5761-4006-b571-7707058ecdfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37095c04-ba09-4d10-ba56-a1d60f40a538",
        "cursor": {
          "ref": "9a9220fa-b95f-4903-911f-2a4f974c28ba",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "769ec56c-90ae-4e65-9991-af85cde59fff"
        },
        "item": {
          "id": "37095c04-ba09-4d10-ba56-a1d60f40a538",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "4c84a022-a8b3-4b9d-ab19-7a287d097b81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cec88fd-b753-4cad-a29d-201bdcf996bd",
        "cursor": {
          "ref": "8bb62b9f-7c2b-48e7-83db-a68c1bda26c3",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "7f82cd7b-a2af-4018-9059-2409a5881193"
        },
        "item": {
          "id": "3cec88fd-b753-4cad-a29d-201bdcf996bd",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "950020f4-83c5-407d-af4b-693a5344bb28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2448409-9645-4f3c-8d46-251c83987c51",
        "cursor": {
          "ref": "586d4cd8-1007-4445-bfcf-4fd23ea5e751",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "41274fbd-f537-461f-a47b-cef6ecc88012"
        },
        "item": {
          "id": "a2448409-9645-4f3c-8d46-251c83987c51",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "28be16ee-e67a-4f53-bd62-d9c81403971b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1172e17-c399-46fc-9168-a899da784c96",
        "cursor": {
          "ref": "0faf459a-260f-44a3-9083-10795f28032d",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "a46a561c-3666-44d1-bd5f-182dc9724a84"
        },
        "item": {
          "id": "f1172e17-c399-46fc-9168-a899da784c96",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "a2a7a1bd-edc4-4d18-8fea-5d1743875c9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d54a311f-0578-45b6-9780-117597596709",
        "cursor": {
          "ref": "f9e15f40-8ae0-418b-8e6f-d6978d8acfdd",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "acc71fc1-be7f-48c2-9140-64345cee7239"
        },
        "item": {
          "id": "d54a311f-0578-45b6-9780-117597596709",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "00bc2dfe-a255-41ab-b9a1-421a739a0d03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42ca9465-0311-4d7c-956d-15fbaeae8fb9",
        "cursor": {
          "ref": "cc2487fa-7b93-4e47-a03a-9b85c2f996e4",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "130caf4a-fb7e-459e-ac51-ae9240ef9ba7"
        },
        "item": {
          "id": "42ca9465-0311-4d7c-956d-15fbaeae8fb9",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "3d8c1277-f686-4589-9d6d-50be9c1ba39b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48cfb503-95a2-49a4-a772-2a492d95e5d3",
        "cursor": {
          "ref": "2e0c1153-ffac-4644-83c3-bc8a08f8e0ee",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "d5c8f73f-30c0-4a8b-bee8-45ffb88857d3"
        },
        "item": {
          "id": "48cfb503-95a2-49a4-a772-2a492d95e5d3",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "2e8b79f8-7aaf-4be2-9975-1f6788705332",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "909b6aa0-17ca-4cb7-833f-9aa9f5ed6640",
        "cursor": {
          "ref": "6c4ec5f9-498d-4c55-8590-5a4aebdaec4d",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "6f3ebef4-bcd3-4a5f-9456-530d9cce9d56"
        },
        "item": {
          "id": "909b6aa0-17ca-4cb7-833f-9aa9f5ed6640",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "c2a59b96-c2e5-408d-8fd2-391f0cd1071f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7604af20-222f-4563-a0f2-db5918c3666d",
        "cursor": {
          "ref": "be0f83e9-ed33-463f-ab61-ba1c1adc9881",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "63fa2bcf-43c5-486a-81a3-4cd884802a83"
        },
        "item": {
          "id": "7604af20-222f-4563-a0f2-db5918c3666d",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "1a084fe1-54da-4470-bc19-910c524ef599",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2076561-d1c0-4e76-b470-449e70ca0afb",
        "cursor": {
          "ref": "a6417171-249b-4de2-84d9-f2030be3cf13",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "05ae6d44-fa99-4940-adf9-e8c00b7ab61d"
        },
        "item": {
          "id": "e2076561-d1c0-4e76-b470-449e70ca0afb",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "15126cf8-7030-44c3-8224-4d655aeb5a89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "949cd820-e510-420c-9fd2-4cbca63e4e39",
        "cursor": {
          "ref": "5f2b3063-789d-40ea-9f58-8d08c9875622",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "8ee13670-2967-4bd4-a7bd-589f21fcddb5"
        },
        "item": {
          "id": "949cd820-e510-420c-9fd2-4cbca63e4e39",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "7936f67a-3e5f-4984-8f2f-3493c5823f55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ee59945-120b-41f3-b9e5-8b1723c58569",
        "cursor": {
          "ref": "05f795dc-458c-4b38-b189-a1786334c3e3",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "57c29acc-d83e-48b2-87a0-075e2579df1f"
        },
        "item": {
          "id": "0ee59945-120b-41f3-b9e5-8b1723c58569",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "56e5f352-053b-4f8c-ae28-6866a1f88ade",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73d8f91b-1272-4d79-8d5d-6f2702b40ed6",
        "cursor": {
          "ref": "e8033343-52ca-4e00-b7b0-ce1506bacbcf",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "425e18a1-799a-4f61-94cb-adbd58dcd71d"
        },
        "item": {
          "id": "73d8f91b-1272-4d79-8d5d-6f2702b40ed6",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "c7b7792e-e082-4086-b3b3-3612ae62e0d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8acffe50-2d07-4945-9459-6afb5f5bd7e6",
        "cursor": {
          "ref": "9261f1ec-ece0-4916-bc21-c8e68da584d8",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "cbdec3af-98a0-4836-b983-fc274d0be78d"
        },
        "item": {
          "id": "8acffe50-2d07-4945-9459-6afb5f5bd7e6",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "51541080-88c0-4cf5-b39b-bf5d3007a6df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4598f429-4b95-41a5-b77d-e4f745c5d7ab",
        "cursor": {
          "ref": "0ffbb860-09ce-4ae3-a611-f2619d837209",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "9360d0da-825d-4431-9a14-b37073cc9392"
        },
        "item": {
          "id": "4598f429-4b95-41a5-b77d-e4f745c5d7ab",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "889a1d82-2232-40fa-bc49-a77a6ba5782e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c8f239c-2513-472e-bbdd-c896ee904010",
        "cursor": {
          "ref": "fb2f90b3-fdda-4824-93d6-4efdb4268955",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "f690344e-d266-415f-a079-09d2e48d8670"
        },
        "item": {
          "id": "9c8f239c-2513-472e-bbdd-c896ee904010",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "4b42c194-6ea7-4505-8341-5f2ae51e23f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "501ae5d1-9910-416f-9fcc-45981753544a",
        "cursor": {
          "ref": "a112445a-b038-4275-9cd2-7e460522b158",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "3d631d0c-9396-41a4-b0fa-3eba479ee88c"
        },
        "item": {
          "id": "501ae5d1-9910-416f-9fcc-45981753544a",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "5d50907c-f070-47c4-8cce-c3cb7b231386",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd49b6ce-2576-4ad1-b876-938140334c00",
        "cursor": {
          "ref": "00013243-d26e-4c14-9d92-a90c87aa4d49",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "0dc1a2d2-22dc-45cc-8f5a-e35f08f8f63e"
        },
        "item": {
          "id": "bd49b6ce-2576-4ad1-b876-938140334c00",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "d232ef0e-045f-4f09-9885-e2970b34eb6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcde74a5-3ba4-4aaf-899e-b82107d3bfac",
        "cursor": {
          "ref": "00a86196-bf92-48ff-8f28-eae376f3f21a",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "c0b185c5-e57d-43f7-8e5d-b79252b5bd08"
        },
        "item": {
          "id": "dcde74a5-3ba4-4aaf-899e-b82107d3bfac",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "b8f91f1b-1699-437d-a254-e77815b26e7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70e409c4-6cce-451d-8145-c4c0e83dc719",
        "cursor": {
          "ref": "4edf5cb2-7d1d-49ea-99f9-57a87d10dca1",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "80affe6f-d6b3-4473-8584-2ba9f55e3525"
        },
        "item": {
          "id": "70e409c4-6cce-451d-8145-c4c0e83dc719",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "98d741ce-d2b2-4224-8695-345551baaf9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b604f687-7f6c-48de-9a2e-1102894fbc1d",
        "cursor": {
          "ref": "31c4b6d4-fc04-4f5c-8548-1dade70426ef",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "100ad9d0-2816-4cce-b969-d2e4598ae30c"
        },
        "item": {
          "id": "b604f687-7f6c-48de-9a2e-1102894fbc1d",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "c77d9e25-d541-47d7-974c-2e61ccede482",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1020cd96-1b09-4378-8fdf-44ecd43400d1",
        "cursor": {
          "ref": "fe563fc0-499a-4c22-a653-d4c1a80480c2",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "b115b18a-39b5-4cb6-b902-a09513ac6a57"
        },
        "item": {
          "id": "1020cd96-1b09-4378-8fdf-44ecd43400d1",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "aabfbc3f-e76f-49ee-8c99-6fb13390bc23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28c61c67-0d1b-46d9-ba75-0176c6982bcd",
        "cursor": {
          "ref": "d7797503-b42e-4345-9d68-1b2081385918",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "8da133d7-2145-4b63-bf8f-583edbab156e"
        },
        "item": {
          "id": "28c61c67-0d1b-46d9-ba75-0176c6982bcd",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "4f6175af-6140-4093-8575-2e1eaf8c1c82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c829e85-829e-4724-b48f-526009612b1b",
        "cursor": {
          "ref": "8d1f393b-82b7-4112-ba33-1db705ea8c97",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "4e9d6fd5-73d9-4dec-b484-799cec7f91b3"
        },
        "item": {
          "id": "2c829e85-829e-4724-b48f-526009612b1b",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "406108b3-2132-4ff2-b3de-380813b5bdab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f3143a9-ba5f-4df0-b637-1ed9c850bad0",
        "cursor": {
          "ref": "f7dfd202-a58c-4f68-bb83-f3745cd51cfc",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "d57502eb-1139-4c20-a4ea-9d38e456cd54"
        },
        "item": {
          "id": "8f3143a9-ba5f-4df0-b637-1ed9c850bad0",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "af9bba5c-594e-4d3f-a30e-dc3eaed343ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44a7011e-a057-42a6-ac29-8a1c6f82cd2a",
        "cursor": {
          "ref": "d13e4135-c23a-4b07-b8c4-518dbf3af9d2",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "3986ec3c-d4b4-4d82-ba15-1dcfdde6cb48"
        },
        "item": {
          "id": "44a7011e-a057-42a6-ac29-8a1c6f82cd2a",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "77caa815-8177-4151-b863-59a85af631b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e4a7305-1d2e-4ecf-916c-24c2b917c443",
        "cursor": {
          "ref": "8fe36d34-ea8f-469e-9072-66c7f6ee6851",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "229446c9-793a-40bd-82f8-c4b9a74facdc"
        },
        "item": {
          "id": "5e4a7305-1d2e-4ecf-916c-24c2b917c443",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "ac7a3e9b-5272-44e8-acf6-1fbfcb46c6b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55d5b93d-ebde-4812-82ba-7614bca1c4c0",
        "cursor": {
          "ref": "f61c68a4-5985-4a24-b053-b799fbf64eed",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "427b2ea7-062b-4679-aff4-d559c931fe9b"
        },
        "item": {
          "id": "55d5b93d-ebde-4812-82ba-7614bca1c4c0",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "68376753-973e-4c0d-b41f-199c82f42f04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "829fa7f2-2674-4a67-9236-1db3af6f6981",
        "cursor": {
          "ref": "3e824923-2dea-43a0-9460-9c260c623257",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "27e638f0-1100-4a37-877a-6e488adc835c"
        },
        "item": {
          "id": "829fa7f2-2674-4a67-9236-1db3af6f6981",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "3b4fe802-8c1c-4911-ba29-85fa15252878",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0251ca5d-9d9c-4cdb-b7f6-03a4185a2346",
        "cursor": {
          "ref": "7388ab05-d13a-4ba5-bf93-16e60dee0b08",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "91f057b5-ee29-4125-bfa5-0d046f96cc0c"
        },
        "item": {
          "id": "0251ca5d-9d9c-4cdb-b7f6-03a4185a2346",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "b1c40160-c12e-4808-9fff-1e8728d7ca10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac92df9f-bf48-481c-9fd9-58992e3d1a7c",
        "cursor": {
          "ref": "4ab8db69-f142-4083-bfea-624909d51440",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "b831d815-6186-4e89-a7c3-6642e2503e6d"
        },
        "item": {
          "id": "ac92df9f-bf48-481c-9fd9-58992e3d1a7c",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "0eb2cc50-9c5a-4408-83a2-54f2647c1ab3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "382bfbaf-9ca1-48c3-9d38-cb77a7404d0f",
        "cursor": {
          "ref": "f517beaa-c36d-4da4-b69f-2ae3446efa3c",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "4ff79679-8026-477d-aaad-2b5ca63bdff7"
        },
        "item": {
          "id": "382bfbaf-9ca1-48c3-9d38-cb77a7404d0f",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "07d124da-65ab-4815-bb0c-46d63c494bec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bebe476-ca8f-4e41-b474-4e6bcc691900",
        "cursor": {
          "ref": "cf690ddc-7976-4e98-9c4c-c53c57672691",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "9509476d-0d2a-46c0-b29a-9ec176eb67af"
        },
        "item": {
          "id": "8bebe476-ca8f-4e41-b474-4e6bcc691900",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "2ff1ef76-77ab-4218-99b3-1ea1f0aedecc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3fe2da9-4fbf-47ac-9462-714b97b6214e",
        "cursor": {
          "ref": "db77ccad-b034-4714-994b-f61d7ff1d231",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "b4f64b0f-202d-4ea7-a562-f060d3ae0646"
        },
        "item": {
          "id": "d3fe2da9-4fbf-47ac-9462-714b97b6214e",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "7c354fc7-c2c4-4b2f-be60-89115fb252bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c19590f1-d3f2-4cb2-b63f-a85bcef870d1",
        "cursor": {
          "ref": "f77e252e-7a7b-44ec-bb31-2c58d179d69e",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "015b3924-70e5-45d6-b166-fe9da6f31c4d"
        },
        "item": {
          "id": "c19590f1-d3f2-4cb2-b63f-a85bcef870d1",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "3f87f325-cbb6-4e84-9f03-49f97b900999",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56ae966e-7f13-489d-bbff-0917a0133db8",
        "cursor": {
          "ref": "d2cdf7a7-175e-465c-909c-3952734d98c8",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "b1f45320-5f32-46a6-bd71-3e7055e36829"
        },
        "item": {
          "id": "56ae966e-7f13-489d-bbff-0917a0133db8",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "3fb27d4e-ab90-4538-a2ef-2952e607125e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc20caf8-ba9d-463b-8c9c-fdd4dbe0bac4",
        "cursor": {
          "ref": "93d6cfd4-0167-4561-abab-579e0122aca8",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "3f123971-7cdf-44a0-a656-505f9fd1a99a"
        },
        "item": {
          "id": "fc20caf8-ba9d-463b-8c9c-fdd4dbe0bac4",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "61bc877f-319e-4001-a23b-6e809441f66e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3a05bcb-448d-4e72-b636-4a246dc149d4",
        "cursor": {
          "ref": "001c2b06-3079-45ba-82bb-8e94d44fdf42",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "3f372b1c-61dd-4d5a-825d-46259c66aef0"
        },
        "item": {
          "id": "a3a05bcb-448d-4e72-b636-4a246dc149d4",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "7b1434ce-e762-4c1f-8970-c4f2972d16e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53c20baf-610f-42a1-a0a8-c04652f4dd90",
        "cursor": {
          "ref": "1200613f-3648-4530-a487-2801ea3e5e6a",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "a0fe5ec3-a46a-4749-8541-5f71a85c7488"
        },
        "item": {
          "id": "53c20baf-610f-42a1-a0a8-c04652f4dd90",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "0e3a2f01-4767-4604-b602-06675613d001",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de8740cb-92a6-4faa-a03b-87ca75e5139c",
        "cursor": {
          "ref": "82665825-f0fd-4e71-a47f-2c397391a771",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "27e6c20b-27cd-4f80-a99c-31eb95c18324"
        },
        "item": {
          "id": "de8740cb-92a6-4faa-a03b-87ca75e5139c",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "54292682-aac4-4291-bb04-94876f319172",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "383bc047-7e15-4aad-8fca-15f4384936cd",
        "cursor": {
          "ref": "3041a1f5-0f3f-4ffa-81c8-1d6e1a683f1c",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "422a28eb-d615-43a0-8eac-4ddb0206ecb8"
        },
        "item": {
          "id": "383bc047-7e15-4aad-8fca-15f4384936cd",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "2831ab0b-603b-4630-a33e-eb059f1ad6c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af8361e9-64d1-40ec-b8fa-0e6ae0c8681e",
        "cursor": {
          "ref": "fdecbbd3-c610-4500-88ec-326174be4c67",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "1edae3a3-73b9-4938-af87-7028b7ebd50a"
        },
        "item": {
          "id": "af8361e9-64d1-40ec-b8fa-0e6ae0c8681e",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "f730600d-5c9e-4761-8984-1846f6c1ba77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7b8dc2d-3ed7-4cb0-b0ff-60985c985bf1",
        "cursor": {
          "ref": "7c1941c1-800c-47c8-8ada-d67aa7dab435",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "651b2590-b80a-446b-817f-1875c2459302"
        },
        "item": {
          "id": "b7b8dc2d-3ed7-4cb0-b0ff-60985c985bf1",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "ee1ed860-1a4a-4b75-aff0-b27d683ad791",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7066cfdc-9bda-45e1-b299-f4da3c3ea16c",
        "cursor": {
          "ref": "8a9b43af-c766-422b-b900-740264dec42c",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "9c5e79fe-6756-4e96-a07f-2fc4e92b6abc"
        },
        "item": {
          "id": "7066cfdc-9bda-45e1-b299-f4da3c3ea16c",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "f1db5cbb-ae14-41e2-aacc-1bcf49f727bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "500b52f3-c920-4819-a146-f20d21e0c62a",
        "cursor": {
          "ref": "130d33bb-c8ba-4839-ba39-05e75ad18cfc",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "822a02fc-fee4-4c68-bf77-495ca023bdc1"
        },
        "item": {
          "id": "500b52f3-c920-4819-a146-f20d21e0c62a",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "2f589593-c458-4aa7-b16e-278aaadb0bab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bf548ec-571b-4a40-a3e4-345cb48e98a3",
        "cursor": {
          "ref": "5c48f163-99e2-44d5-9588-6a6844d42992",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "90f78614-bd68-4fce-9658-6b195bdd63ea"
        },
        "item": {
          "id": "3bf548ec-571b-4a40-a3e4-345cb48e98a3",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "100828d8-50d1-4613-ad98-0c5fa79f769f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71dad17d-10b6-47c4-954e-549caffed48c",
        "cursor": {
          "ref": "2a6eda11-2dad-49ac-b3ba-c9b07a158f7f",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "e792187d-1c58-40e3-b126-b78920c37271"
        },
        "item": {
          "id": "71dad17d-10b6-47c4-954e-549caffed48c",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "d6070e69-6118-4a1f-bf41-5a59cc16debc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6942881e-17f5-4c44-8da0-ce3c6b47b0c1",
        "cursor": {
          "ref": "5338cfa7-d210-45d5-8c6e-a13434edbd5b",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "1f98d5f8-d9c9-48e4-b036-d654a0368aed"
        },
        "item": {
          "id": "6942881e-17f5-4c44-8da0-ce3c6b47b0c1",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "6d228f22-fdfd-4f18-8c22-2725a5698e9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa33bbf2-66b8-48ef-bc79-3ef6111a0f6f",
        "cursor": {
          "ref": "1b461d53-c142-4bad-8628-43d6ad6aea18",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "1481d8a6-0154-42ca-bcf0-35f9e9090294"
        },
        "item": {
          "id": "fa33bbf2-66b8-48ef-bc79-3ef6111a0f6f",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "5c224dc3-4da3-4fb6-9b2b-3165f99f0493",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e16c54cf-76bd-40c9-9728-e199474973c2",
        "cursor": {
          "ref": "5eba57e1-47ef-4d6b-bd9a-a73bccde499e",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "131f3414-e92a-49fc-a968-6a1efb78c7c1"
        },
        "item": {
          "id": "e16c54cf-76bd-40c9-9728-e199474973c2",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "cbfd34a0-a671-4fbd-88ac-62000fdd4c69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97312db3-1105-4881-8cb3-1ad9d91beb2e",
        "cursor": {
          "ref": "6663dd13-02d1-4bae-bd56-857445959b1e",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "faa38987-0012-4933-9763-5bec04094b52"
        },
        "item": {
          "id": "97312db3-1105-4881-8cb3-1ad9d91beb2e",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "3b4e7d07-710e-4a64-9d97-f4669fb201cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec526c01-d305-4daa-bd4c-aaf1b4484cf1",
        "cursor": {
          "ref": "5b89dd99-cea5-4049-b9a1-096fa94c597a",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "fb178714-9574-46a8-bb7e-2fa14fbf7e3c"
        },
        "item": {
          "id": "ec526c01-d305-4daa-bd4c-aaf1b4484cf1",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "4d20de2d-27a0-4076-9a03-caa7c88efd54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5d92057-4898-4cae-b0ec-76fd7203cfa9",
        "cursor": {
          "ref": "fe0cde9c-5ed3-4949-b5d1-6a3b939bda3c",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "4e2408ec-2bab-47e9-b08f-a646fbcb9765"
        },
        "item": {
          "id": "e5d92057-4898-4cae-b0ec-76fd7203cfa9",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "d3a72d5b-da6c-4401-be29-288a3adc21c4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "b748d732-ccf3-4933-81c8-8d0af4eb38f4",
        "cursor": {
          "ref": "f29a648d-ee1a-42d8-8cf9-c1099b630623",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "8b11cbc0-c0b1-43dd-a9c0-1a93a84a515e"
        },
        "item": {
          "id": "b748d732-ccf3-4933-81c8-8d0af4eb38f4",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "f4e2a7eb-39a5-4b8c-b6c4-1068d01a614f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b085087-9cbf-4556-9fdf-fa65a5d041a6",
        "cursor": {
          "ref": "397f1dfc-2c5d-4620-9efa-604dd1bf6de6",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "906af4de-ab4e-430a-ba47-ef7396b94b26"
        },
        "item": {
          "id": "0b085087-9cbf-4556-9fdf-fa65a5d041a6",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "ccfc5e04-5a67-4d97-8292-07edd70c567b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1e69f26-9c3e-4294-bde3-fecf51b95162",
        "cursor": {
          "ref": "f1987dc9-4e40-4b13-905a-e5d94a1bb16c",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "31ac6ff3-6b22-4d77-a6ea-2da81e7e16ce"
        },
        "item": {
          "id": "b1e69f26-9c3e-4294-bde3-fecf51b95162",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "d509dd43-9736-4573-b074-5402a07cd9d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c70c2752-228a-483e-a41f-793eab11128c",
        "cursor": {
          "ref": "15ba7322-336d-48c7-b32a-71d502071d2c",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "10d9e904-2ade-4cb5-98af-6986c24d9b5d"
        },
        "item": {
          "id": "c70c2752-228a-483e-a41f-793eab11128c",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "72b1d2fc-a333-440e-a243-727ec6bf0fe9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "776bfc19-595f-4748-a1ab-347643e25a82",
        "cursor": {
          "ref": "33d9aa09-4bdb-45f3-b5c6-97d41af89925",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "01bde4b5-d9b5-4fe3-a98c-327ac319f5ed"
        },
        "item": {
          "id": "776bfc19-595f-4748-a1ab-347643e25a82",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "6a7049af-d730-41b1-953d-0c9abee5903f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc290cff-8006-46e3-9d77-783fd9b7aba1",
        "cursor": {
          "ref": "1272a162-9630-41f8-9057-1e40ca3ef8b0",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "31c7dc31-2fbe-4205-8a7e-e71b766ebd55"
        },
        "item": {
          "id": "dc290cff-8006-46e3-9d77-783fd9b7aba1",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "7e3ffc09-eec0-480f-8a7b-65a1762a6229",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86775f5d-32dc-4c39-958b-82a13e4dd5a6",
        "cursor": {
          "ref": "d423e9e1-c115-4b45-88ab-fb6ca6664779",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "044d21ae-ae3a-4002-9232-c2c6283c510e"
        },
        "item": {
          "id": "86775f5d-32dc-4c39-958b-82a13e4dd5a6",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "f466d28b-7c05-4b75-b108-e2f40b1d6080",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ab670e2-a33e-4eea-ab9a-c446970585a1",
        "cursor": {
          "ref": "a513f825-ec37-4e64-ad2e-14fc3ce1c4af",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "42602e01-d6d4-4f16-93ea-abf327564d80"
        },
        "item": {
          "id": "2ab670e2-a33e-4eea-ab9a-c446970585a1",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "ecf0a4e2-744f-48bb-aa7b-fe987e83e552",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de18f53e-8f69-482f-bf39-2d1c112823ed",
        "cursor": {
          "ref": "285004b6-8951-454d-8a3c-0e1026f407ed",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "89995da8-ef21-435c-87f8-38a19024cbc4"
        },
        "item": {
          "id": "de18f53e-8f69-482f-bf39-2d1c112823ed",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "6028484c-2e4f-4501-9647-79e4bdda2b28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3be40c8f-484b-427d-839b-ea92d33d375d",
        "cursor": {
          "ref": "9566e161-0d9d-4143-8ec2-8fd06d4cfd5b",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "11d00a94-40b7-4398-b8c3-cc03f9dd258b"
        },
        "item": {
          "id": "3be40c8f-484b-427d-839b-ea92d33d375d",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "c7962354-139d-4e2c-9af1-1a19bba83712",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "affc075e-1089-4b5f-9fd0-ab0f92024a7b",
        "cursor": {
          "ref": "45acee9b-99d0-4eea-95a5-0ddde7281a58",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "425ab458-839b-48b4-90a8-3c7011e2cb87"
        },
        "item": {
          "id": "affc075e-1089-4b5f-9fd0-ab0f92024a7b",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "82dbfb86-7fad-493c-ac05-b86ff2e5e7f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bca82d3-9ea1-4d0e-b7e4-10275f14a5df",
        "cursor": {
          "ref": "73b7c3cd-fb99-4a43-b53d-6b2694a972cf",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "d123b5f6-10fc-459f-a10c-282643ce07c5"
        },
        "item": {
          "id": "6bca82d3-9ea1-4d0e-b7e4-10275f14a5df",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "5f440f3f-76b6-4b6b-9b60-10ae9e33cb3c",
          "status": "OK",
          "code": 200,
          "responseTime": 1096,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "9e4e97df-303c-46cc-b05c-ffb666b48438",
        "cursor": {
          "ref": "c1f19960-2064-4e47-80e1-7beb4aba7023",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "40226272-6406-4cd3-b730-7c72d59c7b49"
        },
        "item": {
          "id": "9e4e97df-303c-46cc-b05c-ffb666b48438",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "31dc1843-7210-4c07-9a42-455ec2c013d4",
          "status": "OK",
          "code": 200,
          "responseTime": 650,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "5e107cf8-34e4-43b7-9226-4657e7e12c56",
        "cursor": {
          "ref": "c95d1563-97a7-4f21-bb63-0d728a023048",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "b4be6944-56f0-433f-81d7-35b8f6475d58"
        },
        "item": {
          "id": "5e107cf8-34e4-43b7-9226-4657e7e12c56",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "897223ea-fa0a-4af2-b7f5-4f3828f95c60",
          "status": "OK",
          "code": 200,
          "responseTime": 661,
          "responseSize": 131
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "da21fe3b-c065-4240-8439-3a6dc5fe3cf8",
        "cursor": {
          "ref": "068d21fd-d626-4b06-8376-a5130a73eba0",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "9d04c1b5-a8ae-4453-a9f4-19d00ae4c608"
        },
        "item": {
          "id": "da21fe3b-c065-4240-8439-3a6dc5fe3cf8",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "da41732f-e5d9-4d9a-ba9b-1f68354cb719",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 102
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c93197ac-b2cb-4eb3-ac4e-f59ea7355edf",
        "cursor": {
          "ref": "3b2b7748-80d1-4f30-9261-263daf036b3f",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "e3ac4e76-9773-4e42-a4f1-7fec7601447f"
        },
        "item": {
          "id": "c93197ac-b2cb-4eb3-ac4e-f59ea7355edf",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "f8cd1132-69db-4450-b29d-ace7662364cd",
          "status": "OK",
          "code": 200,
          "responseTime": 619,
          "responseSize": 183
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "70944d95-a0ee-43b5-9525-f44fb6488036",
        "cursor": {
          "ref": "1edfa374-93b3-4815-8873-be21c869e82b",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "aadd2a7f-b02f-4364-8da2-6f4a06d38db9"
        },
        "item": {
          "id": "70944d95-a0ee-43b5-9525-f44fb6488036",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "4006c133-a37f-4808-b732-c70704317237",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7084c30b-4ad4-47b1-80d4-cddc660e63aa",
        "cursor": {
          "ref": "3e6afec6-ddeb-4935-8147-99b0222689c3",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "45304f25-6f98-4583-b1fa-2b9558295d2f"
        },
        "item": {
          "id": "7084c30b-4ad4-47b1-80d4-cddc660e63aa",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "770e640b-82eb-47f0-b681-71bd80265fe4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f95ba04-1517-432b-ae82-46d5f4a068ee",
        "cursor": {
          "ref": "fb9f48f9-76b9-464c-bedd-bf5c7ce202dc",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "1bf678ff-d684-40a6-a563-b0f5b722db3c"
        },
        "item": {
          "id": "4f95ba04-1517-432b-ae82-46d5f4a068ee",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "9b80e06c-b06a-4cfb-8183-5dae939a6acc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f4ff0f7-f0ed-4178-82f2-068c51a56e13",
        "cursor": {
          "ref": "9f6bfac3-c461-4d04-97c1-7afbab3eec0f",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "e806f5b5-595f-4fa0-aeb8-123b1c88e321"
        },
        "item": {
          "id": "6f4ff0f7-f0ed-4178-82f2-068c51a56e13",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "81475d95-e40d-4f72-8621-8f54706992a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c6a73d0-e10b-4b73-af3a-432d3e557448",
        "cursor": {
          "ref": "25fbb810-d355-4089-af6f-0efff7e6d2c9",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "3080b49b-70a8-434d-b9fc-555df6a4dc4f"
        },
        "item": {
          "id": "7c6a73d0-e10b-4b73-af3a-432d3e557448",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "89d544e1-716d-4335-875a-b30018f4b81f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "495fba29-8c87-405a-bf9d-6486828e0547",
        "cursor": {
          "ref": "e3adfee5-daa8-4679-9cfa-2d60015a1526",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "7db91f06-ad72-480e-975d-fcdabb3b34c1"
        },
        "item": {
          "id": "495fba29-8c87-405a-bf9d-6486828e0547",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "d7c3c758-c9c8-4f3e-8666-062513a5e94c",
          "status": "OK",
          "code": 200,
          "responseTime": 665,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "d9cbe083-1d7a-49ec-90f8-fb1f2c8f39bc",
        "cursor": {
          "ref": "dfd46517-b868-41ca-a131-1fd76a36524d",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "a7e91dec-08d6-49db-9eda-db24d9286c36"
        },
        "item": {
          "id": "d9cbe083-1d7a-49ec-90f8-fb1f2c8f39bc",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "473e3023-bcd0-4c44-9a1c-2176c80d241b",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "8dcbb613-4899-47aa-95aa-5b7b324fd474",
        "cursor": {
          "ref": "969f4bfe-1775-42cd-a93d-2af46a617287",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "70d1ac83-d4da-47b2-9dc0-770fbca82298"
        },
        "item": {
          "id": "8dcbb613-4899-47aa-95aa-5b7b324fd474",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "750d6b14-6fde-433b-a456-9daaf49b2e29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b87d2a87-519b-4a15-b8ea-7d4fec3a6ff6",
        "cursor": {
          "ref": "527981ad-2806-4efc-91b5-eb8aaf71aabc",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "8b25abed-e847-4f2e-8405-34244994d923"
        },
        "item": {
          "id": "b87d2a87-519b-4a15-b8ea-7d4fec3a6ff6",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "e261e52b-f655-4430-9c2e-dc4758e44f62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfb00edf-4520-487b-98df-c65e22b1a775",
        "cursor": {
          "ref": "32d52c59-0955-4fc7-8132-49eeede6daba",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "0b553414-d3c4-48b5-bb98-07a1aec94b8d"
        },
        "item": {
          "id": "dfb00edf-4520-487b-98df-c65e22b1a775",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "f1578b43-d7b8-4595-9a0f-34b669f3f088",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f6e8d6d-2db7-4513-8b5d-d4936ba46186",
        "cursor": {
          "ref": "5cb3e9c1-beae-4618-88cd-2713cb2d1166",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "0b949f66-a78c-42f2-a674-b9457f2072c9"
        },
        "item": {
          "id": "4f6e8d6d-2db7-4513-8b5d-d4936ba46186",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "a50feeda-46f9-4a95-8838-1733d89417cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "972a76c9-b4e6-4774-8ae1-114e208e6487",
        "cursor": {
          "ref": "6936252b-0ac6-47f2-9e3b-8d4e22647863",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "ac089417-b28a-40be-b743-53aa8fe18314"
        },
        "item": {
          "id": "972a76c9-b4e6-4774-8ae1-114e208e6487",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "3f10eca4-6d11-4bb1-a937-f275fa9bf2b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74090bd7-6d36-4342-8c04-f9dfa71c24c9",
        "cursor": {
          "ref": "f019654f-3a23-4f4e-96cc-6542640230e4",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "272f82bd-5892-4201-8e80-8e7dcdd2b22e"
        },
        "item": {
          "id": "74090bd7-6d36-4342-8c04-f9dfa71c24c9",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "a6dc4786-94c7-4782-a989-e56ddaf87512",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22eb8ab3-cde2-4e68-8b47-d33603cbcee8",
        "cursor": {
          "ref": "fd1445f8-7a26-4f75-8370-e396fec236a0",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "3edd4bb2-e070-47bb-89bd-a66dfb750aee"
        },
        "item": {
          "id": "22eb8ab3-cde2-4e68-8b47-d33603cbcee8",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "f68e9643-ef98-4381-9ef1-98be1b8a26e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f1c93ce-54db-4d11-839c-2a4761b455e6",
        "cursor": {
          "ref": "9485ceed-458b-4176-8168-26f55b9e1748",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "119fc94a-bc5a-4656-84a6-6a2dc0f97b7f"
        },
        "item": {
          "id": "1f1c93ce-54db-4d11-839c-2a4761b455e6",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "655fb4c1-fb1c-48a7-8109-5602112ccc6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65be37b1-7e43-484a-9e3f-65e0fe43a843",
        "cursor": {
          "ref": "4301011e-0e2e-4781-a601-d511f4f44fbd",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "b3560ec7-c5a8-4a73-828a-b9e339fb67e3"
        },
        "item": {
          "id": "65be37b1-7e43-484a-9e3f-65e0fe43a843",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "5d8546f3-89db-4833-bb73-c861ea9b4bdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66922d88-5fbf-4c75-8c88-f9363816d75f",
        "cursor": {
          "ref": "7fb3120c-43b1-4c5d-8a9d-0e4a62665170",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "8b61509c-9172-4ade-bfb2-110b87b9baf6"
        },
        "item": {
          "id": "66922d88-5fbf-4c75-8c88-f9363816d75f",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "37cca71e-1193-4730-9f13-7706f647bfbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9685566b-bd4d-4958-935b-772c092ac357",
        "cursor": {
          "ref": "755c209b-e395-4bb0-beca-e49e32acf81a",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "db9345ef-f0a9-455e-ac75-81219727b633"
        },
        "item": {
          "id": "9685566b-bd4d-4958-935b-772c092ac357",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "f4791e22-2b5d-4312-9e03-c2e0b756e68e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da960b69-aac8-4362-94eb-ab39f97660f3",
        "cursor": {
          "ref": "fa754f6b-d504-4eca-997e-09a5b953bd38",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "c369c731-64a3-4325-82b4-137d7c3397ff"
        },
        "item": {
          "id": "da960b69-aac8-4362-94eb-ab39f97660f3",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "9682acb8-e4d2-4154-b7f2-b4e3cb2179cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "011182b6-3e67-44f1-a102-06937ee5da49",
        "cursor": {
          "ref": "dea2fb93-b379-41d4-8c54-f89ca9ae3ba6",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "2fb81c2b-3d7c-4d62-9f94-662a97dd2cdc"
        },
        "item": {
          "id": "011182b6-3e67-44f1-a102-06937ee5da49",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "c9dd15d6-2f33-404c-9bf6-739d2a9eefb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5b42cfc-e106-4190-9396-66ef83e6f72f",
        "cursor": {
          "ref": "102bca52-f5c2-4812-96df-01424381b304",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "75d03adb-c8f7-4870-bf45-b87aeaa3821e"
        },
        "item": {
          "id": "f5b42cfc-e106-4190-9396-66ef83e6f72f",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "2858a36b-f445-48c3-9929-2b35129c0a53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06e85a6d-d099-4ca2-acb7-f8dfd9a48b24",
        "cursor": {
          "ref": "9cc0ddb4-d111-4437-b884-0bfbd93c8e92",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "4eae0a2f-318d-4e25-8777-78a77cf3e514"
        },
        "item": {
          "id": "06e85a6d-d099-4ca2-acb7-f8dfd9a48b24",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "a7613a05-ee7b-4539-9c09-f9589d60f258",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa08d5bc-6885-4c26-9f0e-ab4eba34dbb2",
        "cursor": {
          "ref": "63ef23de-e013-43fe-ae3e-a57676e2bf01",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "470e7821-23d0-4035-96ac-6c2c9c9f72c1"
        },
        "item": {
          "id": "fa08d5bc-6885-4c26-9f0e-ab4eba34dbb2",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "3b85f4a8-8f28-4d26-b75f-eaabd9fa01a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c08027c1-bbcf-42ed-b3f8-744cfbdbbda7",
        "cursor": {
          "ref": "64c3ae4f-47bd-46db-b5e5-b89213d263b1",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "db017f76-7a0b-43e1-8239-1846b23ef3fb"
        },
        "item": {
          "id": "c08027c1-bbcf-42ed-b3f8-744cfbdbbda7",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "81e07169-fc4f-4c63-a46d-5d6449cf8fc2",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "1e4f65ce-cf13-4e32-a665-8879773b52bb",
        "cursor": {
          "ref": "5626e351-3e08-4e4c-aec9-7540cc363332",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "4bc1a26f-c0ef-408e-b200-cd89f56c3852"
        },
        "item": {
          "id": "1e4f65ce-cf13-4e32-a665-8879773b52bb",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "205f9193-f68c-4f3d-b7c9-bcb1a49f89b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f37817f6-3c4b-405c-bf32-bccd6c9d8c62",
        "cursor": {
          "ref": "60036aea-8c6c-43c5-93a4-b61acc02d3a1",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "9cc67809-0fee-45f9-b3ec-3a40a2d51858"
        },
        "item": {
          "id": "f37817f6-3c4b-405c-bf32-bccd6c9d8c62",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "50e6d1f7-c934-4474-b181-d7379b7242e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80dff221-dd87-4432-bb28-86f03b034d1f",
        "cursor": {
          "ref": "1348ccc1-1948-47cd-b8bf-5c91f474f65b",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "abf1fbe9-ffac-4c06-994a-511436652502"
        },
        "item": {
          "id": "80dff221-dd87-4432-bb28-86f03b034d1f",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "e699d04e-1e13-4897-ba08-0ac676558317",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ee45d50-5c94-4f6c-bbbd-8e523d3a4332",
        "cursor": {
          "ref": "e78e54d1-c6c9-43e1-b2f1-1f4d561b94e0",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "4a58a99a-f72b-4514-baa0-967b1c9d8335"
        },
        "item": {
          "id": "1ee45d50-5c94-4f6c-bbbd-8e523d3a4332",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "97825424-25e2-428f-b5b4-334584d33696",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "b276e712-0466-4922-90a5-a5a1dd4f1e5e",
        "cursor": {
          "ref": "96750128-f0aa-47a6-9d59-90c127ae6718",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "1807e774-4cb3-4baf-9721-18cb2d92666e"
        },
        "item": {
          "id": "b276e712-0466-4922-90a5-a5a1dd4f1e5e",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "2033e7a8-01b3-406c-b9a7-aa60ed6551cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e94a85f7-ed5a-49c8-8c4d-ef79b8f63e44",
        "cursor": {
          "ref": "95f829ff-d580-4a12-8bed-e4b0f69514bb",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "3e46729a-eea1-45aa-81e4-02a2d1fa05ae"
        },
        "item": {
          "id": "e94a85f7-ed5a-49c8-8c4d-ef79b8f63e44",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "747bd8f4-0f02-45a6-b5b4-1c8cc6f04422",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "548fc861-494e-416f-933c-cfad8ab0cc08",
        "cursor": {
          "ref": "455ea0fd-4977-4432-b1a8-6a6709fec887",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "9baf8d4b-f331-41cc-b8ea-2a839ad6b144"
        },
        "item": {
          "id": "548fc861-494e-416f-933c-cfad8ab0cc08",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "bd962cbd-f0d6-4acc-be1d-543f24065666",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "076f391e-1fb8-4e7c-a6b7-926f7d5216a3",
        "cursor": {
          "ref": "ec6dc91c-a219-47af-9175-8d93a887c4f0",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "fc7d33ec-e9cd-4fba-aa80-914a433774c3"
        },
        "item": {
          "id": "076f391e-1fb8-4e7c-a6b7-926f7d5216a3",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "4e9e9961-92b1-44c5-bfe2-aadbe71e4df3",
          "status": "OK",
          "code": 200,
          "responseTime": 655,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "649b1186-daf2-402c-93b8-6448bd4ee938",
        "cursor": {
          "ref": "012a38ba-b01e-4993-a74b-ea650240a1b4",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "c391bf69-ad35-40a0-a83b-cf2e9bac0ecb"
        },
        "item": {
          "id": "649b1186-daf2-402c-93b8-6448bd4ee938",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "c280d4d8-e7ba-4967-aecc-f02f0410e0bb",
          "status": "OK",
          "code": 200,
          "responseTime": 149,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "952c3ff7-e2c0-4c9e-b7a4-53701314647f",
        "cursor": {
          "ref": "e2f17188-8e50-44c1-91d3-59b1a84f3efe",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "1e99697c-89d7-4a0e-836a-60d54c8ec8ba"
        },
        "item": {
          "id": "952c3ff7-e2c0-4c9e-b7a4-53701314647f",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "8676e502-4304-416e-b237-364419481db9",
          "status": "OK",
          "code": 200,
          "responseTime": 793,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "6c6155ef-b1d1-45cb-8945-7a6c17431ba6",
        "cursor": {
          "ref": "c64e3df3-fbb0-45a6-b86c-4f1b2ba1c847",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "00964742-8bff-4036-8c29-12849a42c251"
        },
        "item": {
          "id": "6c6155ef-b1d1-45cb-8945-7a6c17431ba6",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "777628c9-5170-45cd-b1b8-f7f1b1e79980",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56704dc1-f29f-4969-8317-524b5b389a33",
        "cursor": {
          "ref": "06312c1a-2549-495d-b060-6a71cfb7e281",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "f6bbbde4-0342-485d-9390-95eecb646ed7"
        },
        "item": {
          "id": "56704dc1-f29f-4969-8317-524b5b389a33",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "0ea61fe2-1b59-4ec8-938b-962fb5ac3419",
          "status": "OK",
          "code": 200,
          "responseTime": 669,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "4a62b074-0ce5-45a7-93f1-1e1c51b4647d",
        "cursor": {
          "ref": "9bc89a25-1a78-4e97-afcf-4ef0f9c09c15",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "5ca7fde9-23b8-4b0e-8e05-2abc8b9da3b1"
        },
        "item": {
          "id": "4a62b074-0ce5-45a7-93f1-1e1c51b4647d",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "b7d673d9-2eca-41bf-914f-9383c7499d3f",
          "status": "OK",
          "code": 200,
          "responseTime": 650,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "a0fe15f7-9bb7-422c-9e9b-3d2ae699f6a5",
        "cursor": {
          "ref": "02fe4521-3eff-4c83-b7ea-95585fc38b10",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "1851b8c0-0151-4d94-9554-f067ee1bdfde"
        },
        "item": {
          "id": "a0fe15f7-9bb7-422c-9e9b-3d2ae699f6a5",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "45075e44-1bb6-440d-85cd-5c7450c0c266",
          "status": "OK",
          "code": 200,
          "responseTime": 662,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "39704a71-be64-4499-a07d-e2f146496fec",
        "cursor": {
          "ref": "501f5b4c-58db-494b-a725-aadf6f716bb3",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "d161798e-8926-4a56-b0c5-f0e718ba701f"
        },
        "item": {
          "id": "39704a71-be64-4499-a07d-e2f146496fec",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "da5e165a-6f41-4942-8506-80c08e2a501f",
          "status": "OK",
          "code": 200,
          "responseTime": 29,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "725682ad-95b0-4cc7-9618-48e15bdd687c",
        "cursor": {
          "ref": "880fdfc7-6f5e-42da-a718-e5a078bdd0f3",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "6f25fb6d-72dc-4c0a-a198-320eb33c9cf1"
        },
        "item": {
          "id": "725682ad-95b0-4cc7-9618-48e15bdd687c",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "5f7a3930-e5d9-4cd2-918b-f56ed5d756ad",
          "status": "OK",
          "code": 200,
          "responseTime": 670,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "fd805be4-2d46-46ed-9649-81125b94dfe8",
        "cursor": {
          "ref": "68d85d57-b437-4338-b76a-9d75db71d82c",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "735d9f00-812d-4661-880c-97e3a85af730"
        },
        "item": {
          "id": "fd805be4-2d46-46ed-9649-81125b94dfe8",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "65589db8-7ae6-4767-b5cd-e2fbf9ee35b9",
          "status": "OK",
          "code": 200,
          "responseTime": 340,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "ec985938-95ed-434a-8a52-a041b5dceb91",
        "cursor": {
          "ref": "f76c96bc-f095-4f7c-9dea-77cffd9292e6",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "885eb8b7-67a8-4778-bec2-8fa0d1a9753a"
        },
        "item": {
          "id": "ec985938-95ed-434a-8a52-a041b5dceb91",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "971a2712-e137-4dd8-ba78-b17b577ef5b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3323e1f-2a9e-476a-ac8f-e95ab8d374a4",
        "cursor": {
          "ref": "b16b55d3-5777-41df-af23-5014c995f440",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "5e18be1b-f615-4a75-b4d9-c916c02f4cba"
        },
        "item": {
          "id": "e3323e1f-2a9e-476a-ac8f-e95ab8d374a4",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "c3a240a9-a5e2-42c9-a984-e350bccf85da",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "466916e3-383a-4b69-a74b-8690fd82ba90",
        "cursor": {
          "ref": "98d5507d-ef20-40bb-abd5-9524d7b98ee8",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "a504f0e4-c57d-489c-8ae7-a492bd9b569e"
        },
        "item": {
          "id": "466916e3-383a-4b69-a74b-8690fd82ba90",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "5d6489ef-36c9-46d8-8754-4988aa826501",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b09216a-9dc0-43ea-9db8-04bff9f7de8c",
        "cursor": {
          "ref": "3f1ae7ba-8ad7-4167-8243-abd2f40b8d19",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "1983e8ed-d8f2-48bb-9992-d0870883dc74"
        },
        "item": {
          "id": "9b09216a-9dc0-43ea-9db8-04bff9f7de8c",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "55ce647f-5d2a-4679-a8da-84be2ede342b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15e5f7a2-d731-46d3-ad56-c81c4b6d7712",
        "cursor": {
          "ref": "932f434b-70c5-4067-b735-0d45312695b3",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "a75fbb0a-d382-4f1a-9649-d0724779bb54"
        },
        "item": {
          "id": "15e5f7a2-d731-46d3-ad56-c81c4b6d7712",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "03fc2d2c-77fc-4e98-a2eb-4096291a23b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 183
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e96083fa-f5ae-4028-958d-08cb6f8e590f",
        "cursor": {
          "ref": "f7a91eb3-9f46-4e9d-968c-61f536b59b98",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "bcbb562f-b07b-4786-8623-9de91465ffaf"
        },
        "item": {
          "id": "e96083fa-f5ae-4028-958d-08cb6f8e590f",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "33c9f2c2-f776-4a16-b5dd-6cbeeb66e0f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebfdeb79-50cd-480b-b329-60a20652ae03",
        "cursor": {
          "ref": "a129c7c7-4c77-4e9e-b9cc-5bd0a0296e4a",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "8ff30120-d837-4f9f-822e-8add656fc30e"
        },
        "item": {
          "id": "ebfdeb79-50cd-480b-b329-60a20652ae03",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "13e981af-7aaf-4e92-a687-fe6b3f0bd112",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 579
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44733b65-72d5-428d-871d-ce67b5188f6e",
        "cursor": {
          "ref": "a82748e4-c838-47e8-877c-4d94f7085eea",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "517b815d-fd83-4c1c-be5f-2ce6e38e5f3c"
        },
        "item": {
          "id": "44733b65-72d5-428d-871d-ce67b5188f6e",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "87bf8b08-a06a-4123-a00c-2a50cd594ab4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8eeb55e2-3744-40c2-b590-d883050974db",
        "cursor": {
          "ref": "85352777-9101-4784-8040-c2ed585364e1",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "3b096dbf-60a7-49fb-a46c-155ce00e7973"
        },
        "item": {
          "id": "8eeb55e2-3744-40c2-b590-d883050974db",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "4ec51add-a57e-482b-9ad4-895aad3800cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7a73ea1-2004-44a9-aa5e-21f2f819fb37",
        "cursor": {
          "ref": "732c3b34-498a-406e-82b5-005cc1e7dbcf",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "36f684a6-13f2-4fba-910a-e32310535103"
        },
        "item": {
          "id": "e7a73ea1-2004-44a9-aa5e-21f2f819fb37",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "72ec3e8d-3301-495f-84da-6de599fc8e26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4983d5b4-64c0-4808-94d9-454fd0d966e2",
        "cursor": {
          "ref": "f413b3d8-0f31-4422-a671-0a020f751777",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "e8bc521a-277a-4759-a7b7-aaf908175874"
        },
        "item": {
          "id": "4983d5b4-64c0-4808-94d9-454fd0d966e2",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "357568df-7cdf-4f17-b758-603603d578f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 579
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27c9dbb8-1192-4c89-a11b-e78bb62107af",
        "cursor": {
          "ref": "e8b90465-0fee-472b-8177-24192405ca34",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "a93d441f-714a-4cd1-97e8-e9dcd793669b"
        },
        "item": {
          "id": "27c9dbb8-1192-4c89-a11b-e78bb62107af",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "54443670-29a1-4d0c-8930-8ab89adecbe1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cf6f647-91ee-4a87-b518-85c5f6fff25f",
        "cursor": {
          "ref": "cc8b1e33-4b5b-4583-aa5d-a747a118cd21",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "6918e64d-dc8b-4300-b783-b1dad9a92f60"
        },
        "item": {
          "id": "4cf6f647-91ee-4a87-b518-85c5f6fff25f",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "2962dfd6-d4a2-439b-b266-65814f09af66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d7d93f5-6ac3-405c-9f39-23d05c027e0b",
        "cursor": {
          "ref": "2a9186bf-eb79-4c47-a021-08fb78a01e49",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "1d163c6f-a03c-4e79-b655-24823f4c5089"
        },
        "item": {
          "id": "7d7d93f5-6ac3-405c-9f39-23d05c027e0b",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "2f15c5f3-8d8c-45af-ba2f-969a86e68e6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e76c397a-fada-497a-b915-1ef04c7bdc0d",
        "cursor": {
          "ref": "d918bb7d-5eb6-4c92-9753-e7131aa9e596",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "be1d9ba4-1618-46de-b3d1-6f0344018424"
        },
        "item": {
          "id": "e76c397a-fada-497a-b915-1ef04c7bdc0d",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "19a707a1-1a9f-4fc4-9eed-67b444018916",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "297ff755-b6e2-429b-8ff2-37338a941e4b",
        "cursor": {
          "ref": "204c3236-8702-4469-94f5-7babf2e190ed",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "27f4b2d1-cef3-4a40-bfe6-09ff1e8cf4e2"
        },
        "item": {
          "id": "297ff755-b6e2-429b-8ff2-37338a941e4b",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "b945bc34-d577-4a1a-8a06-c15a1ba46aa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d63164a9-6b56-4d2f-bd2c-a41d74a6d768",
        "cursor": {
          "ref": "506fb7de-ac69-4c79-a3d7-76134af44f7b",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "5c1f2fa6-5544-4427-8c01-7ccd307384ee"
        },
        "item": {
          "id": "d63164a9-6b56-4d2f-bd2c-a41d74a6d768",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "207c8255-d90e-4dc7-bc52-4176cbd6c0d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90563d29-b509-42fb-b63f-9ddaec4156a9",
        "cursor": {
          "ref": "087d2e6c-d209-4b4b-aa8b-a1ed56551500",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "c0d09f7f-025b-4884-8ae6-1fb468c44845"
        },
        "item": {
          "id": "90563d29-b509-42fb-b63f-9ddaec4156a9",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "c08b0a56-f585-48b7-9a3f-684040814158",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "227c9117-6aea-404e-9f1d-8bcc09e5a5e7",
        "cursor": {
          "ref": "c2bd185e-cbd6-46b5-ab12-94df1431121a",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "d8bb59e6-6370-4074-8b0d-e9d5700c09d7"
        },
        "item": {
          "id": "227c9117-6aea-404e-9f1d-8bcc09e5a5e7",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "37cafc89-9ad8-4f01-bd7f-4a5d1e99a396",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49947a57-730a-4937-9c04-5f84cf285296",
        "cursor": {
          "ref": "bfbac93c-8445-48ad-b0d1-0ed6ed5d5945",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "c53f15e5-d7d7-43a0-94e7-68fd2c734a8b"
        },
        "item": {
          "id": "49947a57-730a-4937-9c04-5f84cf285296",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "103f5b44-e0a6-477f-bff8-5a57b9c8205a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c66b97e-baf0-4687-990e-62e6afc30c41",
        "cursor": {
          "ref": "b06aa270-0e59-463f-9863-e4506b802e33",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "333df0c3-cde2-4986-a3da-cfac0eda406b"
        },
        "item": {
          "id": "7c66b97e-baf0-4687-990e-62e6afc30c41",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "36b986e7-06b6-460d-8dca-d7d98bc2e4f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab061fdb-5a77-4722-af26-500d38177487",
        "cursor": {
          "ref": "a818034e-2c16-49ef-91d7-49359bddcd77",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "8b364102-3146-43a5-a1e0-b329319ff486"
        },
        "item": {
          "id": "ab061fdb-5a77-4722-af26-500d38177487",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "df7f3a10-1896-4f7e-8516-961843e0948a",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:263)"
            }
          }
        ]
      },
      {
        "id": "eefca200-d785-4560-ba95-34b29569a032",
        "cursor": {
          "ref": "2f302855-e7a3-4c5b-9598-d01b8cae8811",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "ed69ea9d-a7e4-4c5d-835e-84022e0278d1"
        },
        "item": {
          "id": "eefca200-d785-4560-ba95-34b29569a032",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "18ac2b63-a03b-4029-bb69-4f17bee1c981",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc211a47-b3ba-406c-af15-0681c282759b",
        "cursor": {
          "ref": "fffcb384-cb4b-433f-b7d7-c9915c3e9194",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "55a6651b-2594-4acf-9ddf-fcf1540b6284"
        },
        "item": {
          "id": "fc211a47-b3ba-406c-af15-0681c282759b",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "04bb4392-9070-43ee-9e3c-13d6c5e4cb8e",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:265)"
            }
          }
        ]
      },
      {
        "id": "f595806f-e110-403d-b29d-0af993640173",
        "cursor": {
          "ref": "25c0dfed-7a06-4027-bcdc-63a5a0d2e1eb",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "92be9b58-b434-4c4f-9930-c9e97fd94f70"
        },
        "item": {
          "id": "f595806f-e110-403d-b29d-0af993640173",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "79c2f43c-d8d8-4672-b4fc-5431d0e08ce2",
          "status": "OK",
          "code": 200,
          "responseTime": 47,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:266)"
            }
          }
        ]
      },
      {
        "id": "25dc7aa1-d3d4-464d-9b51-d06a4fd185f6",
        "cursor": {
          "ref": "c165eaed-666e-438b-9977-e634e8e8cd10",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "3bf05dc8-dce8-41be-b608-beda0d284b4d"
        },
        "item": {
          "id": "25dc7aa1-d3d4-464d-9b51-d06a4fd185f6",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "a997675d-6da4-408b-9884-dab020dc529e",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:267)"
            }
          }
        ]
      },
      {
        "id": "ce983976-c2af-48bb-8a0e-2af0506343e1",
        "cursor": {
          "ref": "fd7a624a-053e-4b31-828e-37551a104ca9",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "cb9ee155-a0d5-4047-ae4b-95399b946cbf"
        },
        "item": {
          "id": "ce983976-c2af-48bb-8a0e-2af0506343e1",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "0f397acb-0603-4955-aefb-d4ea21e40df9",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:268)"
            }
          }
        ]
      },
      {
        "id": "afd22beb-b9f2-4b15-b0d7-83993452a3f1",
        "cursor": {
          "ref": "cc3fd92a-490f-4c08-9e9d-b2ff01f8b824",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "2b0890b2-8a63-496b-9468-08ab5f9b727a"
        },
        "item": {
          "id": "afd22beb-b9f2-4b15-b0d7-83993452a3f1",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "d318f382-691a-498d-842e-89c06efa414d",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:269)"
            }
          }
        ]
      },
      {
        "id": "79147dad-da0a-4a7b-8b91-cb44429e848a",
        "cursor": {
          "ref": "3f2eaafa-a77c-40a5-bfcf-6a756e292d34",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "a1553a47-fcf7-4359-8271-bc4e92c00d70"
        },
        "item": {
          "id": "79147dad-da0a-4a7b-8b91-cb44429e848a",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "6e7accb1-5469-41d2-92e2-e92c05974b21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34f41e63-1ee3-4067-b7a5-30e8e1d814ea",
        "cursor": {
          "ref": "0687aad3-d453-4e08-86c4-1a2e69853af7",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "7e293990-d2ad-48b1-8391-72a951b25ce8"
        },
        "item": {
          "id": "34f41e63-1ee3-4067-b7a5-30e8e1d814ea",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "93053974-d24f-4519-926d-139c316538a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1d1b4b6-8460-4e7c-963f-cb9d32710985",
        "cursor": {
          "ref": "a889cdb1-552e-44b6-88f6-4db588b76f84",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "daf439cb-b219-4993-878e-46167d04d22e"
        },
        "item": {
          "id": "c1d1b4b6-8460-4e7c-963f-cb9d32710985",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "9b72144d-1886-4a53-ac3c-0b9f34d1491c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "387662d3-ba7f-4d06-a19c-73e65e14fb82",
        "cursor": {
          "ref": "2d0944f5-f593-4370-bf13-0b18ab9736bc",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "b7aa46c3-4d48-4dc4-b916-8df7363ab3e3"
        },
        "item": {
          "id": "387662d3-ba7f-4d06-a19c-73e65e14fb82",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "b8346550-05e2-4b6c-9dca-c944c3d6ddff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80861819-b7c5-47b7-8a52-e145e4023718",
        "cursor": {
          "ref": "e28a2304-a98a-4042-ac6a-b41cfe9a27ae",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "c6fb7b91-b0d6-46df-859b-70ff509b8aad"
        },
        "item": {
          "id": "80861819-b7c5-47b7-8a52-e145e4023718",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "d0a83773-0c57-481a-9943-0d6e3f9f549f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21cb3139-2574-4ee2-ad61-aeb7857e051e",
        "cursor": {
          "ref": "714aac57-236d-417a-9103-ada7a27b7913",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "023ba15c-c119-426d-86e4-0f8775e255bc"
        },
        "item": {
          "id": "21cb3139-2574-4ee2-ad61-aeb7857e051e",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "be946d41-0b8b-4617-90a2-f56d62d5ed2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b57c7aba-243d-468c-ae3b-ee047af90fd3",
        "cursor": {
          "ref": "7e230b08-df47-45c3-bf43-193ba30302c8",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "84796a45-826a-4f65-b80e-9a5d2e68fa1b"
        },
        "item": {
          "id": "b57c7aba-243d-468c-ae3b-ee047af90fd3",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "6ce283a1-0cee-4ede-9eb6-c735193016d0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6564906b-156f-48c6-94c6-550119ad3cc8",
        "cursor": {
          "ref": "dd2440ad-f50c-4878-b80c-c35b834424ad",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "6e85e360-abba-4089-86bc-38567c62ab8b"
        },
        "item": {
          "id": "6564906b-156f-48c6-94c6-550119ad3cc8",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "d1d2909c-79ae-4aed-acd6-4aed7a1f526c",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7ef30e7-b889-4a39-aef8-62da26b7928e",
        "cursor": {
          "ref": "6c08a7fc-81c4-4b7a-b336-834770cbbf4d",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "dba78b0e-abc0-4a6e-aada-b0ecb924c7e2"
        },
        "item": {
          "id": "a7ef30e7-b889-4a39-aef8-62da26b7928e",
          "name": "credentials_verify"
        },
        "response": {
          "id": "a5d5c1e5-f5ef-4c80-8f14-d5cfef2e925d",
          "status": "OK",
          "code": 200,
          "responseTime": 741,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "581be375-00af-473e-9f7b-303c5c3e31dd",
        "cursor": {
          "ref": "9dc0d584-2f4e-4973-afbc-eec90641f0fa",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "366dd650-e85c-4ad5-90d8-3f8ba910c6c0"
        },
        "item": {
          "id": "581be375-00af-473e-9f7b-303c5c3e31dd",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "5f538493-9f19-48d4-87dc-54d20c4d547c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "077db7f8-5c21-4ea6-b724-12204b31f908",
        "cursor": {
          "ref": "de258dd7-668b-47a4-8898-6dcf15fc76c1",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "93d85066-51e5-46ad-a212-af303e81cfc9"
        },
        "item": {
          "id": "077db7f8-5c21-4ea6-b724-12204b31f908",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8ca0fb4e-4793-45c3-8f41-b888487d606f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "077db7f8-5c21-4ea6-b724-12204b31f908",
        "cursor": {
          "ref": "de258dd7-668b-47a4-8898-6dcf15fc76c1",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "93d85066-51e5-46ad-a212-af303e81cfc9"
        },
        "item": {
          "id": "077db7f8-5c21-4ea6-b724-12204b31f908",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8ca0fb4e-4793-45c3-8f41-b888487d606f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69216125-4e87-4650-a5fd-5199ef9d51de",
        "cursor": {
          "ref": "2a0ba0fc-d2b6-4008-99f8-be401f9d4694",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "bfc5b68b-7c4f-4059-9ec1-af070a508db0"
        },
        "item": {
          "id": "69216125-4e87-4650-a5fd-5199ef9d51de",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "d769445b-c01e-4423-8e3a-d8f061609862",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7da5a307-c591-4f80-a82e-cba5d96f19f5",
        "cursor": {
          "ref": "84266512-887e-4671-9691-032ef75b2e91",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "2d677e16-9144-4499-a328-6277556cfb3b"
        },
        "item": {
          "id": "7da5a307-c591-4f80-a82e-cba5d96f19f5",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "12f8b8b4-315a-4097-adac-bd5e37f2c23e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}