{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "4b5156c9-4ac5-4be6-994f-b3c92c78b0c5",
        "name": "Clear Cache",
        "item": [
          {
            "id": "fb21f537-451c-4a7e-9aaf-eebc470f694f",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "26fd56c8-7644-4214-ab0d-9957b2ae5a13",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "e46accf9-e3b3-408e-bb79-ab648fabf403"
                }
              }
            ]
          },
          {
            "id": "4276248e-e14c-40bb-adcd-65aa16a97f06",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5eb250ca-9f55-4792-bd56-177f5a3b4a8f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "5b0f6b5d-522b-4400-aeb4-5ff1c30861ed"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "eea45092-3b0f-40b8-b90c-08e2cafff48b",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "e64c414d-bbf1-4f53-b896-bfea569c5014",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d5fc7e53-355f-44b4-923c-65e5d1dc0919",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8fba2121-2f0c-49ae-bdd7-8e08f4d91fba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e1b2d112-46f3-46b0-a8ae-25cf601ac92a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "faeaca4e-412d-4dc4-badf-99a71575e2d5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7c796839-910d-4467-9f0c-7dc23dd552c2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a5c278ca-e843-4980-9ebc-244abd76215f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d4638866-dceb-4240-b2a4-d7871fd6e9d5"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7c03bca2-f78e-45b4-a09f-8a5331ac2ed7",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "d1bbfda2-3233-492d-90a2-a52798a9284e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b68b6cbb-afa9-48f4-ba1d-f2cb49e4644a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f674dc38-f1d2-4ba4-ab23-399a17aa9c74"
            }
          }
        ]
      },
      {
        "id": "0239a24a-ed3a-4286-9f06-baf98c26247a",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "1b560d3e-eace-45d9-8661-09f60f769668",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4e300a10-e519-468c-839a-223fe767baf2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "29982bad-5620-4830-9991-0f85e50b1909",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dc90c0f-0828-4e05-a9df-790dd1e86f0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d229d428-5a40-4d10-a02c-167c1386007c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb31db8e-3a92-49f9-a07d-fa1e8c7ec938",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc6c1c3f-e375-4a7d-ae76-6cf07b464c5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e6082d76-f560-48a6-bb68-337ee9af2fe5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d555263d-6ea8-4f9e-acc1-98ea0847e462",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0a3dd22-05ae-42c0-9b69-2a76473434a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "49ae94a8-f5f0-4430-86dd-a3ca48f10890"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1a3173e7-c545-418e-bd91-928501dd79ed",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fee0d0bc-a2c3-45c1-8e8d-7858ab562e6f",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d6cc35b-fcae-4541-bf15-ffdb8f79a4fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ee77e5ba-bcc9-471f-9400-7533d341d61d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "981cd583-ae7a-484e-beda-7778edb9c763",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbfc4f09-f2da-45de-9159-617640523458"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11f8a714-ee9f-4608-bee3-a5aeebd5babf",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae7bfbc3-0e3c-4039-aa47-893079a856a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6c64a37d-12d4-4f19-b3d4-7e23dbec86ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6c480fc-4b84-4167-8d82-499c7a3ec7d1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "2ad9b4d3-2a06-47e1-ab6f-68fc4b513fb8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "bf3c9703-96ff-4e86-bac8-b6ce2fe42daa",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d822694e-9f7e-4b42-afc4-506cb3561a16",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "848170ac-7813-451c-b006-c7f658a0fd0f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "c8a377ea-baae-4162-a1d6-107ac86b9342"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5e437854-e90f-4833-8143-4cc2bf82613c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "f172fbf0-aa73-4140-9877-29069cc6c209"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e5f4a963-0943-4ef4-9d9b-d540389e0a6e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a140fc82-ffac-428a-9a73-c278fdc7c3b4"
            }
          }
        ]
      },
      {
        "id": "20dbbd27-08d3-434c-b3f1-c04a4a8c5f01",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "c297e47c-7908-4637-af03-07f41545decb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3fb14940-0365-4e47-94c8-5fec2c0a945a",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "96a24738-b012-4c1b-847c-85b48943fe2d",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65d1e659-2851-46b8-b7a2-1b0ef206906c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03857608-b258-4fbb-b05c-93223df149b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8692e792-1a2a-4ca2-b74c-6a73c8f21057",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f9e3a1dc-2ef7-484c-bb9f-d7b37f278022"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fbfaabd-9c15-44e5-86be-4739fd54349d",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8d05a3d-7405-4de4-b6a8-ca7d49f624c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45f19741-2a82-45b3-91fe-f4d6426f0df7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20aa8065-05ce-4565-9f5f-14b7e9c3bde2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4a96a09e-47b8-45fd-adb7-beab3a154daf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22340faf-19c8-4155-81e9-378ea45f7bf7",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7181a392-b1d8-487f-95ac-c524b755ebed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8547d921-41e7-4584-b5ff-ff45d08fc278"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e39ba6e-deff-40cd-9981-8ca806b2244a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "784d366a-196d-4b10-a6e7-a1a55c639ed6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84518452-dd83-4689-b9e6-4d9912ccf6ae",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67db34fa-44b4-4344-b2ca-9a59bd82cb9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31baba59-529f-4fce-a0df-89f5e37191e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09e7b8a1-e38e-4488-af19-283e1a0947ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cc967608-8712-4b51-86fe-4696a308c079"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18311596-1813-4ff0-8cb9-9271a8a2900c",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bde797ed-21c9-4d7d-b936-a6c5ffa6bd1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23aeda47-972e-4c42-ba62-16331d322ede"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d5925ea-aaf1-46a5-a3c8-a381e1d6a9e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7fc3a4a9-18ca-45e1-8a0c-a9c4a8841577"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dd182b3-338d-4017-83d1-9a7f3f59140b",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "382970d9-759f-48fd-88c4-7bada68eb717",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91bec1f8-9f8b-4ecc-9a00-6fd8f16f1a08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc630bf6-44b2-424b-bf0a-50f6d5c7f2d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "afca6bc6-dac1-4dab-81e3-5a1ff4d024a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca9db2fa-1d4b-4594-a5c1-34a7f64f7c28",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc0e819b-f89c-4e58-bdba-f4c87e339ece",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c50026ec-5473-4add-9591-97880185b379"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a668c569-f10e-4f20-a302-5a4e1794089e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a351775a-6dfc-4401-a610-4d9ca8f9cea7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "331a3ab9-bab6-4639-b97e-d6888b48d380",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2dd962e-4db8-47e0-a6b3-be4a1026a797",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0864283-accb-4fb1-997a-764a94f80d09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cdc71e4-59ce-4525-bb54-e3e74a29c0d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1d2716f1-07c2-4cbc-9177-24b290bbe216"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36265760-537e-42f7-9e95-288e3ae26439",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8bd0d7f-0eef-448c-847d-9e227f052a0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3111ed56-fceb-474e-96dc-345c0388b6ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38830176-3eb1-4d2e-b845-3b189b29afb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f93d3e3e-649c-4f1e-b127-37d6245fc5f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3612b570-46e7-4a16-9a42-6eb7bc781021",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d9abc7a-3ac4-415a-8347-159f50487054",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b2cecd4-900c-4b02-b6f1-bb537b511229"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f2a8428-a641-4eda-9452-916829d43674",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "889a6e4d-e199-42d6-907a-cb45f8ceece0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cae66a9b-b343-4d0b-b288-409f58997552",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a69889ec-1534-48e6-9ca8-40c9654c0a0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "581193b6-f5d9-4b7d-8c74-c4b792bf82e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5791e0cf-419f-43da-b815-bba127a0b874",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5f3782e6-2546-4238-a8c0-db538ae58632"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a76d71b3-565b-4057-9df6-80981abeefdf",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf94e716-12d8-478c-a038-8b1ec454c5f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f11689ab-7bc9-49c8-abbd-d51a261e6695"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6601e3c1-c4c7-413e-9bc7-d4ed8bb54ee4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d9191b4c-af20-4b11-b91b-862749a07e53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d5ffb3d-983b-4380-a3e1-577cfa140b69",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7c2343f-06f7-4440-899f-ecddbf829006",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a290b86e-23f8-4a90-a851-049bb736ae36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c63066dc-1362-44cd-b8a3-3e5ea9ecb738",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "409b06c5-79ff-4591-8fe8-5204e22e6e96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa0b9aed-ed89-4f44-8ac3-96c30c9d5dab",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b3091a7-75ae-4cf8-85c0-f82d2e0f3be0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f927a90-cde4-435e-a9ad-b52c2ff347fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3954da0d-3c81-4c4c-943c-56ed64ad9d8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7dc3dab1-2445-4b27-a5ff-a7cc62eac9f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f438c99-e52b-4b0c-92ab-845cb061bd5c",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1077b1e-ada1-4648-99e3-f8f965ab8ed8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d965e1b0-666f-41f9-a47a-490722667f72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "393f6c8f-3592-448a-8c73-b118341013f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "070211b0-a002-46e1-8225-2b10363caf96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce645f7b-edfb-4d10-8480-cd7646902dba",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a5745e0-a215-44e3-9712-d0cba84972a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bfd7931-b442-4a6b-b172-c48494289ded"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4269f375-3dc4-48cf-8a6c-01232b3a5204",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7c98e002-28f7-46d4-95b8-774a289a1bad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d15440bd-f3fa-4172-8da0-9b504babbabe",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d21a07a-d225-438e-9b4d-bd7dd1c57327",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60b7ded4-885a-42c8-be29-918aa21280df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc850c49-215d-4da7-abed-c2fced0f0df0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "337502c2-1bf0-4fa1-993d-145f96e46422"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e021bc3-bdfe-4e24-8dd1-968f9f6af92d",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13e42104-31f0-48ce-841f-6fd12cfa4765",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dc24567-e8cf-4099-b345-c854092612b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb665031-1178-4742-8e34-dff08e198bb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb6785bf-13fc-43a3-9f50-f677d19222e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "196897a3-9848-440d-bd4b-b6df9c424a9d",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c3979da-0aa8-473b-bea7-0f5a91e049fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e92499cb-7449-4ed2-b66a-15ad5fde760c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70e92a19-2853-4483-91a5-ded09f2ddbf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c76195c3-c374-4713-b774-30670dd4a29b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53f758e8-c391-4121-8242-3f1c7eba1967",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c0932fa-d1c2-41b1-b317-e3063fc949dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f32858a4-1f5b-453e-9bc8-d2da809db24a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ae3a282-c83c-478f-8316-65148962a1c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0912841c-a07b-4795-989f-5ec67a265c44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d122a158-e3fe-4675-b76d-b96e50a801d6",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7932bc6-7066-488b-a5c2-d8a0d56d0990",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97a80d5b-2acf-42d8-ad45-1d10c64c7d5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98325cd5-b897-407a-9c38-7480ebdcf75d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "759bf3dd-5308-485c-837b-2941b103520b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e1cc5c4-9e94-41d3-a7a1-3e06c9284af1",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19d4baac-7a00-41c8-bc2c-9f59d3d9c216",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00fe1bc9-a832-43d6-b387-58452d8c7e98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b3670c0-4d67-4e32-be6a-ca746eea04ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3c97acf5-0abd-4714-b58f-45ef3e92e157"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76205596-00c6-45b5-9673-c9a3a62d9b93",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f10ae3c-dfba-4443-b1b7-0960f67985b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5e0704b-133a-4569-ae6b-d7758f8532c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe13b8a5-08d9-4f5e-9e95-8ba2d8824e89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4b0ddc8a-f9ab-4d3d-bac7-7f76684fc3f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56137103-1e29-4782-926c-88627f041bd5",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc25420d-9566-4f70-9a8f-47853deeecfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "054bceb5-d45e-4cee-b8d3-09082fdbbd19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ed2bf82-a1af-4796-8a76-d48cb7b024b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "449bbd72-6d22-40a1-a2cd-d9c764d38dc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e5857c5-4ae0-4261-9184-a0feaa0d2771",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7108593d-fd3c-4de8-a34a-a976b0a75d35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e55000f-643f-4438-8481-1aa26a17ead4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cef8eeb8-e7ae-45a3-b77d-91bd60576a8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e6f3cd9-18ec-4f84-81e1-8e7f2c63dcb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5561902b-1b65-42f8-b411-e9eb95dbeece",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e0ddac9-7e43-4c96-a6b6-360496e11bda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b8ac49b-aaff-4da3-92e7-8e48bd2e68cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc25914b-815d-4b31-ba50-d79208923c06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3716243-b7f0-4f8d-acc2-ff9ad7e3f336"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a93ef9b-d71a-4953-b73a-43dff7a0c62d",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc9780a2-957e-41d7-9281-351f90590ecc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "add61011-b8d1-4dad-996f-257f18270ff7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ea99d64-99f7-41d3-ae17-e1c74807acaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "66c7a25f-b2c3-4f3d-b3f6-d1121eefbec9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da500269-5d6e-4f7d-8c36-485d0faa9b25",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a78a721-4412-4c5f-b7fe-e2c3a5f83c2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4ae3852-71e2-46ef-b8cd-50635c836ffc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ed0cf1c-d4bb-44dd-8ef2-3dcd430aa0f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "822b1e66-d8ea-4ab8-b15d-114524cfd421"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2586708-9792-4de3-8322-ae13c3e1385e",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac3108eb-af17-4807-abce-5d8a9b926315",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47811bd6-c506-497b-bb12-64d415af9f56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15851a37-8b80-4ce7-b2ae-bf68f76b8889",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f8a6dbd-86b7-4989-a4e9-a5d4b644fd68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d75f7a83-45ca-4899-851c-76f389918a8f",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "063546bc-7e61-45ac-ab4a-43ac71d9015e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f6ec25c-c8b3-4a20-bfde-40d17a5271cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd77c57d-d8ce-4590-b9e1-899e66846ec7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "b750898a-3f2a-4321-a20b-dabbedf94bd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78231dcb-f6b3-44bb-b631-6157fba0bddd",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f289a1e2-204c-4228-9215-c8f5796abf43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4ffe3b3-e4d0-4818-8e9a-3dbf56768ea0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4527557-c617-44cd-a91c-b0668a73a7a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "09914d8d-2554-4062-9d5b-4f36c9788a2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74b20e8b-cccf-456b-9eb4-7791d91da7ee",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc11c058-7135-4536-b9d9-1df185ce9cfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dbc6c03-652f-44ef-b5fb-5a51aec098f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fc67de8-5fb7-4f45-ad25-89b1876fe5e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "38918174-acbf-41fe-b68a-8139d32ae704"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b341367-47ce-4686-a0a3-e8f06d701caf",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5df8eee3-8c58-4e54-a90b-03a0e81b21d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f777d95-de32-40c1-af07-0918ee79692c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69893b9d-7ecd-4bc2-89ac-e1d2df29537d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae42c30f-0d8c-4dcf-b127-d0836afe90fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "642e4daa-7f69-4852-b79d-382d0bb2065d",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e953ce3e-82f5-40ab-b848-d1c59c0b3f9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "283abd63-f637-4f1f-b57a-0f992cb80779"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8deff44e-0baf-4dcb-b5a1-bd81f7c11fec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "63456a30-96f9-4fd6-88db-15b8fd30b2ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2356896-6eb0-4c7a-a6db-368ba92377a7",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14e0f574-3def-4395-9022-7477f91208c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d1b9d32-f43b-4939-9989-0ced9dc93c34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5d90b68-3278-4932-835e-9d9b1fc8d536",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "1d4ce8e4-6ba2-40f2-93c9-d08157b67058"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b60fbf79-30de-4188-99da-954a4333ee82",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a031ad54-c433-4ad6-be6d-6869a736c671",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "78df666c-2c5f-4b1a-ae5f-28aa047d070f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5398ca7-5adb-4fc8-8016-382a53826650",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ba3d94aa-a8ff-4b01-896d-01cfd41a9ba7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d10bcc1-4475-4e74-a7d6-80c678961c8d",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d980a40-1c8f-4b0c-a9ae-41b47c04bd2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1febdf6-1314-4dff-bcaa-35b40c5bb295"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fe549a9-712a-4eee-8884-25b81b91fbe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f29b8bdc-6cfe-4cb8-a0c0-541f4ffbc8e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38fa42f6-1d5a-4ec2-b319-2a145d0a05ab",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8445401c-a132-45d6-b2f3-a563206f82a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b26045b9-2dc2-492f-8715-cb61d982baa7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ec9fcac-b4df-4825-beec-883cad62088c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4f68a6d0-7566-4aa9-b12b-30e96435a8b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3088cfa6-dfc3-44da-8f91-3fd589feb708",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2d80e5e-ee8c-4c68-913d-62947546dd08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7229d139-ed9a-48ea-95cf-2569d0a9f044"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5118476-29a2-4544-a6cc-750cc0ccce78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c8f74d66-51fe-4ed6-bd17-c35f074b64a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ab7e76f-34eb-4978-8022-f77a164286a1",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b98a698b-2720-4b15-93b5-a4fc618d810c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3863e9ce-6dce-444a-b3f0-22642b73cd6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09547fba-944a-4990-a84d-13075df62f1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d93c39bb-024a-4ed7-bd11-008d89de35ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e1e460d-32b0-4135-91a9-72ed03d5e9a1",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ddd0b18-3803-4bc7-92a5-3af0552fa88c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd437f66-2089-4c38-b880-85b7d754dd08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a33e0927-d5b8-4c00-96e7-eac758bec3ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b370e2cc-9c34-4d1a-a838-0b8ba4c9242f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bcd75d5-cc36-4c3f-9df7-2df7c004db5d",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e7ffa8f-e39c-4364-9de1-7f3cfd5aeb94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58163604-5e28-4521-958c-362d58681cb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00f0d12d-730d-46be-aea8-ce4848d41dc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "d8fd777a-0ee1-45c2-ac2a-ce7fe87a5358"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a639bda7-4ab9-452b-b553-bb003a385a3f",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe916247-dc54-4c6e-8bdf-e92335e554c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f25726dd-4767-492b-85c3-9ff1c2f030a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0573cc0-624a-4748-9600-cc8cd5cf91e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "aabd4139-e1f7-46a7-9437-29b92c466574"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ab6dd04-aa20-400e-a2eb-d732dd37d724",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5fb4ed1-8e77-468e-9f84-159c0c88cc3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b168bec-fc44-4317-8a18-e8de0c7e959e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b411ab1a-2eb1-4029-ad76-2b19d660057e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "433fc72c-e336-4864-8b1e-4eb80c0e1eb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87492c7d-84f5-41a9-9fcd-4cdc8e0e448c",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c0e666c-34e0-4a57-a741-89edf1beb8c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "871c1955-a6de-4d96-9c97-7b5742c6b942"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df148122-a48e-4445-9939-d146a0607a2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2df46c85-4741-4259-9fde-a43a029456a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f45fe97-14ce-4c0a-89ee-17d5f7ee1140",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa3a163b-6b13-4967-bbe4-5674f7a0bc71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df33caa6-6ebd-44b4-92b3-e4741e1728a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94907c25-0b1c-4fbd-b2d1-e1cb3c5d5645",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2231ffe7-98e7-4b58-99e3-09b27174aeeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acd0ed88-673e-4a1b-be72-5faa170bbd23",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eb3ad10-0c13-415e-94a1-3b04ec07c143",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ad32cfa-43b4-473c-810c-68e839505d01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70e69278-83d5-49d3-ada7-fb1268cc8442",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab9632b3-07fe-440e-9386-101f8b9a282c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a49fc7ac-d699-42c2-8298-45f83014194e",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7ec7ba6-fc6e-476f-8823-ec2ff938e2b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6e11b57-92f0-49a3-a06d-dff5c77157e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6da794d-7bde-4afd-8937-455b32b1df9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "76736f09-7154-498e-835d-64221e3004b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a988447-0112-48f9-803c-f8940919164d",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88cb5354-8629-428b-9f0a-5c23942d52ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ab2ecc4-a2aa-439b-b0e3-927e6ca7d24d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94e896be-a192-4336-8bdc-fb79b8988280",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4e0b09a2-eeee-4ffe-9f81-79f6b0e5c95b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "015fcbe7-1f7b-44b5-b1bd-cdf7277607cd",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f48352f3-bef8-4be5-bde2-bcd75fef7d04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2be00f5-00b3-48dc-94f2-ce8bf03f75d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eb9e5cc-e216-47ba-a494-94ef3cddf5e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a9f46e40-3672-4b7f-b7bb-9e86324e12e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df21ea55-7356-4c3d-8a02-18c497eab65e",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39a17e8b-506e-41c6-86f1-5ecc9deb6e03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87087d38-7989-4df2-a6ed-bd0da52edf8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2db5dc7-f28f-4270-a635-2a15bb1672d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c3a08fe-c37c-412a-ad39-e8cfae837a4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fcd643f-6a05-4ebb-af4d-5abbc7e960f4",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e228fc3-f0cf-4400-8bd3-ba1e29299d79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "969277e9-3e79-40c7-a700-1a87fa1f8b57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf63f49d-b6c7-4f3c-8181-4d5cf3e996bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "93015c32-4724-477b-98fb-7a323ddcde06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fd0398b-3b91-488f-89ea-903fb7ac330a",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b3e066c-9c96-404e-bc51-582a00f0c01d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98452f48-bf0a-4cc5-b5be-251acfc3e466"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd1b4f8b-edfe-4189-bcce-f895f8f08003",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3538daab-0279-4db1-8336-5efa6ded05b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b40a17ac-6e01-4cdf-85da-0a84e94d9dce",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "203abc5c-bd5f-474d-8230-df955ae57bc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78df51b5-e154-47e2-9726-7f7cfea96b6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d1d248f-5696-443a-a406-d9acc152f5b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c17addcb-c0c9-4430-aed9-f91552549e2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "170fe27f-7bd6-46c0-b6e7-f82230f0bb49",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8d6528a-7954-4d8a-ac79-167d3e507c94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25b19895-0fac-4175-a0b0-a280c469aa4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f4bdcf5-7eb4-4e5a-ae25-fc6995330f0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7211ca0-984a-4dea-ab8c-e3c1f8197daa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2f24f44-a495-45bd-b7a7-0210088a249e",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad03e9db-bbff-44fe-ac22-419cd4170d01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "188f7e1b-f8e0-46b6-9359-18710f95ec93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10d3f87f-9bbc-4737-a3d6-b9be6cb05232",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "beca2d48-917f-4b53-8130-386968681dc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e5ff8e0-67c7-4cf6-baa7-a43ff3e1eedf",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b20b0b3-bbf5-47c0-8b96-ba06afc60ad6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff9765b4-0d18-48c7-ac58-8ce2e4f45d0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51fe48f4-619c-4b6c-b2ca-af676322550d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "1bf801a0-9d18-450d-a8ce-54f987bf137e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51b5d9f9-94d1-415b-825b-8b00d2e6c9a6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d1910fc-c2ec-4c43-a03b-123130543adc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c16b359d-630e-49d5-8e81-f4621f9a5033"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ee869db-bcf3-4d1d-9468-0e388cee50a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7dcb7d2f-ad85-4c92-a5c9-69469396f9d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0346cf8a-ff77-44fb-b4ec-91d106f66113",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2ba53fd-8389-4caa-889a-865318737492",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c09cf5c-2b3a-4aad-9997-152ff0a29fdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e9b66fa-b8c1-4b14-a542-6df6e6f0d5a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "4207a456-39d9-4526-bc31-ef6e69755224"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8aadbadc-6df6-489c-89a1-6ccf238b2694",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7762c672-e978-4dcf-af30-15f30468b67c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7403b4dc-4c78-4ff3-816c-f8029eebd16e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "768aabb8-4897-4b5e-8e5d-20cf9a026b98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7ac9f987-5399-4cf4-9ef5-7e843d115260"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3875dd96-9805-4bc2-b778-3044f753dd88",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b63032ed-50bf-414d-9fa7-7870d305e6d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4393304e-20c8-4a09-99ba-d433d229d6f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dd29657-02a5-475e-9355-8e5d798b3cc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "c8682876-55dd-4efc-8c9c-30003d249ba2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d62aac4-6193-46c2-bc8b-290817ae563f",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22f17fe3-f339-42ce-856e-becf452821b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8d6b973-4ab4-4b3e-b49e-8548f99633d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7f954b2-8c1d-42ad-87c3-5f8fc5be7306",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0bc6e34-80f4-4f7e-842a-809c3a433e2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9b619e0-c520-4c13-a721-986a8ed5c348",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fae70027-6be6-469e-9ce9-d8d46a232b97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5ad39b3-911d-4ffb-a5fb-6f14831f6865"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea56933a-4f6e-4615-ac76-d75b2d124bfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "86f40b33-0541-4f73-85bb-6627ca9d1692"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34f3ab05-1a87-4f9c-8f26-c829a8745d1d",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb78db4c-9de6-48f8-b29d-021eea3d9130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27baffa3-3801-4f5b-b08b-6371c17f70aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9984e2f7-c50c-4326-8c02-11dacbba97d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a6fc47ea-3dbc-4d8e-a49e-ffb9acabbc00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8238376-cbdf-42fc-8828-10b71edb6d74",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "796fdead-ebbd-4e72-9e78-4cb5572bef52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec9765f8-825e-40a7-a779-14ea50599f03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af1fba71-7e5f-486c-bb38-b011b438fc0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "aff66194-c594-4a83-b6b5-7f3446e9310c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ed9aa0f-33ef-4a2d-adaf-c793bac5ec20",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28db8f62-0b1d-4502-a581-92e3c586ce7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0023f921-796a-4c5c-984e-c715d5ed46a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12adc857-5fa6-41cb-a79b-6b14643593f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a22d23b2-b99d-4a6e-a4b9-6975f714183e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cc4b847-a933-4d5e-a0f0-eda7599dd632",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6e191a3-fae6-4447-a3cc-65fffaac6735",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bf823fc-71c7-419e-b796-331c71b13efd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d95676b5-3dbe-4c33-bcfd-6e3470842522",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ae67dc30-aaf8-4044-bcd3-c909a6f7db81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cf52dbe-573c-4478-b3e6-6b4bb95b47ed",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b742973-a0fe-4ff4-af12-ad27c8c90bfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6d9c13f-3b75-4e76-83ac-3f3035e67266"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9c871c5-2de2-4b45-9c2c-10b59f5d66f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "f8c8262d-1037-4cf0-b56a-6c6ecfcb6636"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f22c3470-d3f6-459f-92d2-48a7e2502f2e",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbe98691-397a-4757-a5c9-f4bf833ae668",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80e46f29-3903-4b96-9bf5-b8f943b64d49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b95b5170-de14-44f1-a2ed-2373abd77b4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec7a5fd6-d272-4a82-8932-c32140ed74f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d239eed-be3e-441a-b9a6-140b529fe051",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba14e11d-b592-42eb-9dfa-e67ae9df6d93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb72012c-4539-4ba5-aed7-0bfc556a35ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea4dbb0b-d17f-4648-84d0-078befa417f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd6d518a-84ab-4261-b7a7-8658a93abca3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1575b519-5dd1-4f69-a709-a43ba66237ad",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6b4efa4-aa96-4eaa-a5c3-4db33f8949fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "186ee24f-e16b-4425-9f81-7b1cadea72e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61faf8bb-2b05-4532-b037-8931fcfc5000",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "28bab9b4-8dc5-4828-bd1f-74c3187ea9ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2c58eec-3e7b-4b9b-a254-522becd2feaf",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f92626f-20dc-4c86-8c9c-904634b64325",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04851a6a-15da-4271-9df7-4cc68314a2b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab318f1e-c6a6-4268-81e5-cdf5163d39e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8abf0e8f-d6d8-42a6-b033-23fe2bc0c65f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d149de7e-7293-44ef-aea9-47e71882a75c",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8183d598-37c0-4c10-90a1-47ac997264d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d45569c3-ac7e-4032-bbd6-eef7d550b8e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28112a4e-bfe0-47ec-88a1-3637d88e8948",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8bab3d32-8444-4c55-ba6f-dc7bcb2ab7a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b4b40b5-f041-454d-aedc-37292fbfc1ca",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ec9672d-aeaa-40f8-9d4a-d58c2fe6da26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be10ee64-79f2-4297-807d-66e9748b3e13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9e8a728-51f0-480b-9f99-88c4aa0cd355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1576458c-cb38-4568-bcf8-49edb737536d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a357b726-69bf-4d21-aa26-fb8b131dd241",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d47271db-7b9a-416c-a61b-72df8ec5c2cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e69ede00-73d2-4d01-b371-34cb44492309"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b0bc72a-c624-4166-a0b5-73c501177979",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2328ddd-188c-4887-8658-d44804caff15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f6348a6-215b-4e8a-9400-2e2d2d83b701",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d435e6c3-825c-4ef6-a2ff-159677f93b7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62235c0b-4fa5-4634-88e2-747a9b4c684b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09aa9414-d076-4955-8310-b468556f8b98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "84295c55-781a-4160-9d00-7b46fd978fd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3ff6986-4b93-4d5f-8b3f-fefa16074eaf",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acc0ffe2-60b4-4f0b-9213-de83d111b7d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "458c1d5f-e2d0-46bf-9c5b-7897355c7c92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ec89982-0dbc-49e6-8894-b1eeb2bbe095",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e7174f8-2491-407b-99d3-1a7d28a5eb43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1444f779-92cc-435c-8e88-f532cf6f5e1e",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2259674d-a3c7-451e-8ea3-6861644646fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72ea5e1e-1f6d-4935-a66b-3a424ca87a6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2647cae-27b1-481b-8d18-8341b0e19e9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fead5529-634e-46d6-bff1-71e99b73efb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28a26075-6429-4dc2-95cd-5a4ae49b9d89",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88b6e9f1-5f1f-4799-b3d9-7ac26a1caf50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ace0cc71-b6f8-459f-934d-6bbac509fc45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca41fa2a-0a1c-48dd-a0d8-d20d3fc5646c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d22f233f-9585-471c-9df1-691e8d1712e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45d2d4f9-33af-4602-b16a-9d0f13020502",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "349711c4-121a-4ac5-ac05-0f86e9a1375d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cd57bc1-03c8-4231-b404-fd4b3feb25a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fc06220-ffdc-486d-b2c2-4ec093e9f5cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8fad92ee-72b4-4424-b752-1dc45c745c2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c91273c-3034-4311-b84a-20e45371bfb9",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9735ca76-cd25-49b6-9a83-7c91cc319b06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d4ed618-97a1-4630-8d8e-06423abf91d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6134003d-35d2-48ae-ab3c-8e5ae54ac903",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "918e15d6-eee0-449d-b6e4-59366fa41a54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a71de12d-c3cb-4120-91f3-7319b23199dd",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26c0353a-f81d-4dbe-bf8c-fab5a2ecf27e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f81cdfc7-c1b9-4c0a-a4d9-fe4c0b04a454"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7170c409-80a7-4502-8a0b-0e4e4dfc23eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e796c2a8-3cda-407f-9472-b135d8b6a56c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5a801f3-2908-409f-840d-d4cad5fa963c",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16635f59-fcf6-4cb0-b057-3103539bf619",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66411478-5e55-447b-b66c-c651545ebd4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39a40d07-26ac-47fd-b68f-4b93d62979ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4351ea53-7652-4087-bbfb-ce78914a7f89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7310894-f33e-475b-bf31-20b32bb023f6",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce6655c9-03fb-4013-af1d-2682f43f8adc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05ad603c-513b-4506-b57d-0b7f048defd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdc9e1a1-0919-47c0-a9dc-40ce8862a601",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "607804b4-b214-493e-a3fc-da4b9ce91fed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "620941b7-f921-42e4-9a65-6483de295a13",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b32905e-c802-46f6-9b85-bd9d818c0947",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0af460f-d3d5-4c59-89ce-4698c7793ade"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5a1f764-81df-4ebd-82c8-1b2c024baea7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "20aaf68b-317c-4dfb-9ee0-1e6f7904ce5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1392b977-2173-435f-afc5-166d53cb97bf",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e85b6e8b-c072-4000-99b8-e38b1678ed8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8260d42e-15cd-4bc4-b388-94fcbc8af536"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32dffc68-10cb-4b88-b97f-5d755a798dff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e6a1992c-fdbf-4515-b580-a47c18bea3e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bba2a760-e6ee-48fa-8fb7-5fe3e0b9e3cc",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f5b6434-5a3c-4ac4-8bc1-21de59dd67f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d98914aa-0d7d-4d89-a1bf-b275186e5505"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2a9cd90-337d-4162-9a5d-cea819f9cd84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a4a0f209-e7b5-455e-b2ab-552fef7ae66c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63d4c6e7-09e4-4cb6-a06c-6d52a2e128d0",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf6924e3-a905-4e0b-848b-5fa6dea23730",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd008056-447c-4d31-8a54-d62a882c051f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3af5fe3a-7b34-4f72-a79e-45bdb3530072",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f188dd1c-faab-4d84-88e9-df68d510dc10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65ffd494-af5c-46b1-b4bd-3035eac66825",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca6b1476-b1f8-4b72-95ee-c65a5bdfa85e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07861fd9-4e5f-44ef-8f40-559d41e44758"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "119e2eab-977c-49a2-95d1-87ac71d00c11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "5e3c24cd-8763-4c12-a690-a368bc776f66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8446000-2b0d-4372-b42e-9f3aaab503d5",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcb7a1f6-b57d-4817-80d0-018a4211589f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34870b09-cca9-4419-af17-ddeb82a766fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1799aeda-da3a-4921-b5b3-d1f2ba27e4df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8b6c57e9-5bd5-4229-ad13-853e3c0bf6bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e73ab5a7-366e-425b-8c0d-40f1b65c0b43",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "556dca30-8737-499f-bf94-dd76c1febfff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4d57a34-a4c8-46e0-81d7-a1d163d4c27d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7749db07-0e35-4979-ac33-94889a4b5c94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "eb286560-9c75-432b-a490-b82445ac1859"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce6ae515-e185-4b72-b43c-8cfd93480039",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d6a5850-701a-4070-b105-86f5cce0df6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "5f10eba2-6428-43c1-88df-918c0256eb8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "777a2bf2-1e86-4920-b6a7-6576d88d1b79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "afff4565-901d-4963-b103-dd6cbdfbb85c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6d8c8425-9159-412f-ba9a-5289e6d64cf6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "64db659d-48c1-4705-8ad5-a2bc0fb5b8aa",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c07d054-5019-4a5f-93ea-a2725fe43798",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cf62e872-9d3f-4330-9a53-f1d4434f4d5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e45e756d-6eca-430b-b696-688ae4826456",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6c5bd1fc-ad3f-4e4b-b07b-97d2035b95f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c37ad4ad-5804-4e2d-87ca-856fb488321b",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e808d5e2-a389-43b8-b6a1-e04e1afabf49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9d8683d9-740d-48cc-b410-95af89e5e851"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62be10d3-8902-4db7-9d30-ca396e11c1dd",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6d6d1416-609a-49be-9927-1d14f521b447"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ce18e97d-1779-430c-9616-c67ef238c987",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ec6dbe1a-d374-4f2e-b721-d0e5e8ca419b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8ef8981c-3ce3-4ab2-b566-e8a20e9d15ee",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4023c37a-3562-4646-8e42-f5c011644660"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b6669c05-4fe5-4582-8329-279fda78f3b1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bcfce4fb-c930-4f51-9426-d3be4f68fc98"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8b5938cc-40e0-4ea1-bfd9-2ff245336ead",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "14082153-d52c-41a2-90fc-301fd04719d8"
                }
              }
            ]
          },
          {
            "id": "eb330387-d7cd-4013-92dc-c83b15471e44",
            "name": "Positive Testing",
            "item": [
              {
                "id": "efd1d0a3-824f-4bd6-bff1-17dc3b12142c",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2ff366d3-40f4-4bcc-aabb-6c29888ae9ff",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1d7587ed-9cae-425c-af05-8fc23225a2ef"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5e5388ec-3c93-4328-902f-2d7ba4d871d5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e6697ead-831b-438b-aa2e-1585636f341e"
                    }
                  }
                ]
              },
              {
                "id": "05c4bb88-9d72-4865-9a9d-071438e3704d",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "122cafad-e06c-4812-bb03-2e9315853f71",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1b58ad38-9326-49bc-9697-dcbf09e96d86"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ee729fbc-194d-4018-9312-7c3dc3e839bb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a863a4a0-61b1-407c-ad8d-6bbf357c46ea"
                    }
                  }
                ]
              },
              {
                "id": "7ca63b95-aaae-440f-b9fa-8c3ae0d819a8",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c3406d1f-f862-48b0-8c5f-6ec6433746c6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "05ea7b8e-94db-40ed-bfc3-5f37abc63db4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5797d056-b483-4912-b9ab-7e4574ab8490",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "285798bb-808d-4f8c-97a0-1cda158f8eb6"
                    }
                  }
                ]
              },
              {
                "id": "ecc2faac-69d5-4571-9162-623718ef3f54",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d2b3ee73-c158-4139-8696-e2d315abed61",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0b5b948c-053b-4027-98cb-b2a6ad0f0843"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5f60b0f9-bc33-433f-a1a9-1324242676ce",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "380d5a9d-3a0a-46b5-b6c9-c48b0483e631"
                    }
                  }
                ]
              },
              {
                "id": "17b2c575-c853-4b9b-a77b-4235bfabf641",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "932072f5-f819-487f-ac92-6624a1b466dd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b10599be-6cf7-4de8-b507-f060676d1b74"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bd917662-f116-4426-8d9a-0ac9c08c044d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "ade6e611-1ea4-4ab8-b115-cb008c9329a4"
                    }
                  }
                ]
              },
              {
                "id": "7c717c34-b194-4e6c-9ede-dcb3960f9a0a",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "69ca7a65-9cdc-4621-bb50-0f8090575321",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9381e34e-2769-4965-892a-eca5faded6ed"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0595d037-4f7d-4a06-bfe7-7ec5bc8b4b6b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "36fd69a7-365b-414f-9579-70d738a3797d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4395853c-fd97-47d1-b360-395ad4c9d8b1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b7cc5876-4bcf-44f7-a3b4-29eeb566a7fd"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d42331a0-b0d0-4c91-a74e-cc88556b3546",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "adf4824c-b127-4064-bb7e-e0a499e351a5"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2f058f0b-6f84-4563-9393-f8887014e218",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "291b8414-766c-46dd-8695-e8f7f5123200"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "979139e3-b875-4e73-8d78-4be9baca6901",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7c9f15b8-ec4e-47a7-95fd-34a5f221cf5b"
            }
          }
        ]
      },
      {
        "id": "62f71954-81d8-4d9d-bba3-43166e32cd71",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "677f9c8f-09c5-43bc-9249-ca1a49042fd8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "52b8c663-98f5-4971-86bc-5c9c1a8a9f10",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "adcd303f-b292-483e-9f10-9483b186f575",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1811f885-3fa4-4311-afcd-f3d8977d5125",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6ae4730-914e-4095-bc17-d463edd0166a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1577ef3a-a87c-444d-9b75-db17c2b1ea64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "1f926aae-fd92-482e-8e77-5b8aae8e619e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82ebc130-df83-4b7a-8b5d-066ffe06b874",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97315c4c-e135-4768-bb09-c0f1ad9db58d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2e29cdf-f3ce-4477-ada3-c734ba8aed74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da31aa5d-6d71-4a13-9877-91b5d1800910",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9eafa54-40dc-4f21-b550-6ac02a4e36c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45a8fba0-8dec-4610-b28e-1f7d03338215",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1793540c-03d1-4b31-89f0-a814e66e660f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83357f24-89b6-4a59-a179-99488ba4e668"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3442aa2-2c4f-4886-8317-7e3c94383902",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fea6dc1a-a3a4-425e-9af7-200c78fe5881"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24344867-7af1-4ecd-89f7-43b4585a7a9e",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4518a367-a192-47cb-8982-4325b7f4b0ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f84938a6-c682-4af1-bd97-c134672dbada"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b4ed013-0f9f-4884-b5d2-5376702fa0fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec337177-6014-4ddc-bfc5-7a5268075e8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db116393-98d2-4d8c-abbe-a890df8c7007",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afc58ee2-3b9a-4db0-9c57-db6876724110",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db08ec96-2575-4881-996f-45e3e68246b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70924345-7811-4c0e-88b3-f9098e4d3f27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b0ade42-c33e-466a-87a6-dd1870f7a54c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b6e63a5-38b4-444d-9a94-5d47687ff738",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9883a2c-a8ce-40fa-a058-263126d48ab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93c1ef66-a984-41a6-9a08-4e6763c0aaf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89c14db5-08e4-481d-b2df-a71cd3a57344",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "acf236ff-1e9c-437c-8d21-ff1bd051f863"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be622388-eac8-447c-9084-839a191d1b1c",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27839424-a5f9-4044-bf6a-3896cd6cfef5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b088ea2-fa22-423a-8e44-eab779923079"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a390d76b-79f7-4716-9c32-c77ac9258926",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "65e7f222-116e-4fd8-a673-ab2f9262ca7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b4e085c-5164-4741-b5c6-1b32f9538e47",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "620f02f5-d5d6-4a58-82ee-3a80adf81eac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfeb5d91-46d4-44f4-8171-76efc3921fd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29aa2b9f-5788-4e7e-993d-11332bf6899a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "947afb26-e153-4895-a44c-e47d3aae0ae8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03339b7c-c2f9-4484-be8c-d0b6c9861667",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bac08315-f381-4c71-b8f1-c3ecde07050e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a132a6a-7f55-4a16-a848-80fef77d6391"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1200815-17de-4905-8f6b-8b45d2db0356",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4821444-f06d-48c5-a6c8-6d777b118564"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3552fdae-46a8-49b0-b671-a03d1553ea8c",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c249e7ad-96a2-4a93-b9ad-27db6cf89c93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb717ea7-4fdd-48a3-9a57-a4f5ad17f53a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01ad2f4c-b999-4b88-a3be-c1c48b21bdaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "58b8ef04-18c0-4165-9b3a-a4d31e20ba82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88d9c414-a2e8-4a46-a60b-11d028cd1001",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f155c435-39a2-4b84-9f7c-2fdac8d3a674",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb88cade-a47a-48c6-b39d-8304ad03dd75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27465bc9-d1f5-4b26-a6fb-8ee28a792dbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "711f0111-cb57-4537-9d6a-f32c995030ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f962a092-2a26-45eb-b9f5-88b599cf78c5",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad2faedf-cd77-4055-8d48-4c6e6cfaef67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b30038da-f053-4199-a261-22f061ba167d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5beb3b2e-b3bb-47da-bcc2-5f244d6219f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "248b7353-4d2d-442a-89f7-7a673ad809ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ab2829d-f7d6-4f2f-838a-5c966e7d8021",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "739e8bf8-04de-43a6-8e89-ff01105f4933",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d384e356-029a-4181-b663-95f55eab93e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11ae37f4-c09d-4ba7-8c0a-c3b066c18805",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "702761df-364b-4d12-9c9d-1555fdbfddb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1baaacff-0e9c-4e79-a3fb-46671b8b1a9c",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25799d35-46eb-43ea-b1d3-0a536b0adde7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37f7c86e-3b71-49b5-b5b9-5e873b6b392c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc299ead-f257-41e3-97b9-9a50b393f769",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f8ef44b-922d-4b73-847e-a9bfa342e275"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11e1d42e-f30a-4ec5-b614-74979fe84767",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e899d40-17ed-412b-9583-492d7f778de1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70261963-f4d5-4820-92c0-a3897dc8a8b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dab820e-aacb-41cc-8327-b23ec30f98fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "c7b482bc-edf8-401f-947e-1de9973db972"
                        }
                      }
                    ]
                  },
                  {
                    "id": "862232c5-2159-40e1-b8c9-8dd299f060e6",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eaa5a10-47e1-4e2a-aab4-8f9d5c0f2609",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebad3c8f-ede8-4f03-aee6-0ae55ace2f8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d13277f9-8baf-4eed-8618-82e3f57c9626",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "bcbbc63e-c663-4966-87a5-c1bbc1d69fad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c004cd26-1733-49bb-8f57-c45ff23492e1",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f31abd3d-0656-4ae2-b1be-0252b8f2d2d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19ce9c16-865d-422b-8dd0-bd34e7c3695c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "653a653b-bae8-4667-b6a2-11ee88259499",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9c45e07-8437-4fc9-90c9-32eb7a995d11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8847943-f4fe-49ea-9b03-0793cbc59fda",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6f30e05-cad2-478c-b7de-562fc0475b34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4498c092-65aa-44ad-afc3-3af19accddf4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c98fce3-5603-43b4-89d8-1d9c411a39ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7705f53-2f4e-4971-a4b8-3d9ea66434c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaf41dd8-5706-4de8-af0d-e9d3635f1755",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d592f85-51d0-417b-ab51-6bffc743fa4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99de3674-7d61-4c88-bfc2-86c149ad5fbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9a219f1-81c0-4941-90ea-23862b0b2551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "48d72b92-0613-4d28-a3ae-cf91e2f2caec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b6839de-b011-4d1a-980c-c674fb9ba5ab",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33cd2ca4-91fa-45ed-a45a-bb6b48c7a60f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8e682ad-a18d-4e52-8f56-4fe85032bfe0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d7a21ef-7d0d-4c18-b513-ca882370b57b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "798e1a6d-fd3f-494d-bb22-68b2e89a023a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c500249b-b190-492e-a8d7-6c7e62ddc813",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2e58fb6-29f9-4929-a927-8de97dea7f02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da229ebf-665e-4f9a-b652-f7a345c1e8e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c308b65-e44f-477c-8df5-855f415a1d78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "74da18d7-5403-4c67-ac97-a2a20f94b9fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0e13e9a-ffea-4a48-b34f-adaa1df366a0",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc17b55c-9236-495c-a4ed-4d49b4046de2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f575b4c6-2bcf-48f4-9f82-a9cb8536f3f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7abee317-69b7-4af2-be68-860a4a441151",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a294b6d-d354-4141-8b71-908a1369e3b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f321949-d50d-4318-8dbb-7c0464d50ab3",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f916adc1-8534-4f99-aa8b-c4c021134848",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92640be6-632a-48c8-84cb-cff6f1d21d7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1abd7b1-6033-4b5d-a1d2-dd25b3eb571b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8827f8ef-145a-46ce-8e77-80a49958f356"
                        }
                      }
                    ]
                  },
                  {
                    "id": "260e28c0-7986-4df2-9a5c-572bea7b457f",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70a14c2b-5f4c-41fa-9a57-c2bf1137fd05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8d5db19-4dd2-4364-900a-748957861aaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dcbd603-0b4f-4513-96b0-151eaa6c3ef2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ce1d6eb-ddab-41e0-a3f2-4c3374902c15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8669f03-fc55-4614-b538-45396659514b",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abdd5cd7-8eeb-4d00-b7ca-dfd14a229b3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aca4d501-eddb-4a21-9233-7fbdef78d214"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea2cc7eb-0a08-49be-8a40-b206218a2531",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "872ce7b0-4927-4cee-b429-1126827d4a07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff96d5fd-3feb-440f-8b5e-199ec86e889f",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58e6d064-e553-4610-92d0-b72e941274d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63d97d2d-c9be-4926-8346-37795846f728"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a099408-a647-4f9a-9e2e-fb2f8391bce0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "615ee319-29f3-44de-9160-a7ef6f6488aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee51b739-8302-4823-9926-48a9012403bc",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eb914ea-28bc-4a71-b983-00daafbea1da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5713a2b2-4a97-4984-ab75-fdd9336e55d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19c2f3f7-43e6-4e9e-86b3-8e055e829448",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d8d5227-e741-401f-95c5-fc200ee11ad2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b42fbb3-44ea-4a1c-adff-74bb38328611",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "327ec3cf-7784-4e9a-9f35-12adda92d62e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2fe0dbc-a1f9-49a5-858b-95a36172ad68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad1d7852-5468-49d8-9974-c34c8dc5e4eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4dca583-8365-4903-8bb4-fc4c5ff28087"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa6706da-c357-4f69-bdaf-e7e04c8a3a1b",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cdf3ee3-605e-4ae9-afcb-5f0a0f2e4818",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb970aea-ecc9-4f89-b834-21e920c725b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acd3f145-a3c4-4170-ab0e-2a20bf5f2601",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a145092-b598-43b6-a3e9-68502f4f0ce1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49059fb0-61be-4b3c-9535-03293daf4186",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8287a1bc-3b3a-4e33-84b6-eaca2139e323",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8bbe3d8-9006-4fce-836f-922091ce7de6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ff3d083-bef4-4626-9119-5be847798565",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "31ea26cb-c1e7-433a-acd1-37822400f37e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b627995-a085-4995-a6ee-da942f1a12d7",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86b347e2-c1a4-4be8-be51-ddadce6c4489",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6f4976c-536f-4131-8956-bc94c700a31a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dba62642-5f9b-4459-946a-b3784492f59a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a58ac74b-332e-4c8d-9013-c90a3fd6336e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "311a6dd9-3007-4390-8fea-4882591c540b",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a53fb52-6145-4e09-86ab-45bc3155c304",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad25d838-ad90-4e00-8b31-c54f6078c763"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff1d2bfe-28d9-4086-a5a4-ef500ea47fc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca824a0c-aafa-48b9-87fd-f90b12150f00"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4c388e4f-d1ad-409d-a30e-f48153399ea5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8180bebe-2596-46f2-8c52-7af807bc03d2",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81cb9508-c6b6-4cbd-9c5e-60fe6597ded8",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "574b550a-36a6-44c1-9589-6e6515904bde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4e38e06-60b0-4aea-a98d-9d428cec3fb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b51479e5-4d26-4eb5-a870-8e9a4696a782"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4511b265-d504-4b8a-b2ea-03b8fd45684f",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cb5d340-5de2-4ed5-b1ad-f8127d3b4a93",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "0235ce91-3c2b-46ba-b3ca-66f07313eced"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53ad0345-28af-4eec-a680-7e2134f86479",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "873e542e-1e3e-453a-b9b4-fb02bc4e7263"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "75bc74e9-d945-43f3-ae98-6d2b896220b6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e196fae8-8508-4948-95e3-48d55fdcd068"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "edfb6e7f-7bfe-4f36-9d4e-3f46c0a468f1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3d01c958-5f18-4659-a033-7832cc8570e1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c2c9fbb7-3764-4a83-837b-f4948f9d0b71",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4b439a7b-7da5-48b6-902d-6cec338b6144"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ba808c9b-7325-46fb-8e19-dbbe1e4cb486",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0332b612-a803-4eb6-8697-4c6d3bce8b9c"
            }
          }
        ]
      },
      {
        "id": "a8556770-b22d-4d3e-8b5a-faab7cc99d43",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "e98b22ea-c63a-4490-90e1-bd96b9d1e454",
            "name": "Negative Testing",
            "item": [
              {
                "id": "aa9016de-181c-45a4-99f9-1fbf30a21789",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0d05859a-9f47-460b-a700-e619beed02c1",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5b7412c-a025-4d44-a9c5-8452b2512a32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39e323d9-23d0-417a-a2f2-0284e7bd69b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf1f7d0a-db91-4234-949f-cc478d7fdb49",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdcf8bc3-156b-43e7-a25c-b65c9066cc2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b7cc303-f745-4a6c-856c-280c607e37a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c1e7324-b996-4f6b-b63d-60fa26b2c5c8",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe4f700d-2345-412f-8cde-a832c14bfa91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b7c2be4-1492-486c-b79e-98da2a295019"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aacd9a7f-0ab6-488c-b09d-e91fcff49332",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2baba6c9-6b11-41c4-8397-ed0f426dcb09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a280f1b-790a-471e-8113-f70319950b47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c508e9db-e97d-4c35-bdd0-5b0c3a9263fd",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc53944a-6c50-4ea6-a795-f94f0fac2603",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f8b275c-d0c0-4c44-a3d8-57e2371f27c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "923a16c2-6ea0-45dc-9d82-2821467c1aac",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce015bbd-a4f1-46e8-812d-a6c7d8f1bd03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7151c3cb-5f0c-4df7-96cb-33a932673570"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4ece1b1-e23f-484b-98fc-3cefbba74d5c",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9cad0d3-15f7-45bb-80f5-5ca56959cc7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a44f148e-b8c0-45d6-a572-64da84f336da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6356510-9637-4087-a821-dd2eeb4f4e8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4015f339-55e7-4423-a906-af2674c6d8bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4f13647-0709-46b5-9f5d-8217a2a78092",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5bbe07f-3ae5-4edf-a39c-410b9f23cbed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3cca3ff5-b3fb-484f-b56f-83bbee537248"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "967b3372-45f8-4e83-a669-97fec25ce399",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b95cf9a-ae45-4038-ba53-0cd0d781f557"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c5651b0-808b-4067-b3c5-a85c8116c8c1",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "111eb7df-e8ae-40b9-9f3e-22876d870f99",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5914c872-7f3f-4693-acd1-a1bf4fd536f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f98cb1fc-e88b-4936-bf1b-df3144722dcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "419f3f32-3fd9-4b0b-b10a-c18369da2fd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac5a7c35-9bbb-41d2-b3cb-7cce03b69c5f",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a39357a-45f8-4c1f-ab5f-72471b792dd2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "582f730c-af9e-4442-995e-2aad8ec9f0b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78d7ca01-3ac7-4a11-9013-12211c1787b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e207dfd8-561f-4834-933f-57ce49878754"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15e4d90c-d4b0-4751-9e91-8a52698ad9b1",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "836fa8d3-65b3-455f-ad0b-50542d7ca1a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bab28db-d7a3-4dcc-9e45-bac47fb45616"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9900674f-fca4-4fa3-8b19-240c51baef47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d652315-e113-4406-b46d-2e36bd22acec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dca935c-3e36-4bcc-8be8-4a963150677c",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71c831bc-9734-4b10-883a-a88334eeeadc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8a9f9d8-3cdd-420c-aef2-55189c3be34e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "308e8aff-7cb3-466d-93f5-f80a4f2ea345",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ef576ed-0104-4585-a6ed-a860d6fac187"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb924515-8785-4cbb-a297-9a26f170e807",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f29eec72-1fde-4b1b-a6d1-98add5590049",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6289c6b4-efb1-4d5b-bbbc-fc93b8175ebe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e08b2c4f-cb45-4cca-98e3-f433ed072ca8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b39171be-d735-481b-b3a0-a522caab154d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f3a84ea-02bf-47a7-b796-f202d70aa9d8",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a984066-ceab-4770-b3b0-c287a620e364",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae60dbfd-fe0a-4406-bbd8-c75d2bb9c31a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4925a657-0744-4b97-b63b-8f411885e88e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "615f10a5-1907-4fa9-a8bb-552701726104"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d60790c-66af-417f-93cd-0fd0a8a77d9e",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c9a30df-f840-451a-86cd-ab92bbafce06",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83edfc66-0862-4745-bc69-cb021a727914"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeeb31ed-fca0-4e10-b2ee-e8e347dd03f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc84f305-e2c5-4589-aa67-4dc4e6e36bf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "888f0406-e707-4b1f-b295-c2b5bd4afba7",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d9208b3-ecb6-4f8d-b114-38c48ff9ac42",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "037176b2-4890-4ace-9725-95050847fb3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecb3c7ef-e401-46c6-864f-bdb9abde4f1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19427de6-d298-4038-8de1-586637cdf48f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54acd6e8-8aa1-4b94-b988-689899f915e4",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d30fea6b-8b9d-4fc4-af44-5ee22feedd55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cc0e7a1-640b-4575-acf7-7156f4b5f350"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fc838a8-24b5-49ba-a007-96233d6ea3cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c615834-0aed-49f8-85b1-98a69e22f8ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbc88a59-771b-44ef-ba9d-1a638924b70e",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44772dfc-39ec-47a0-8e5f-b913272c7611",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25453626-8202-4777-85c0-294b744379e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6f217dc-6faa-4837-811e-b4511bacb01e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef741433-39d2-4567-83b7-d0dfba41d985"
                        }
                      }
                    ]
                  },
                  {
                    "id": "385a74c1-2842-4a8e-9e61-7eb0127f0144",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d46e7357-75f4-4bd5-b330-7f02574ce086",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0c73676-9d85-4ffd-906a-7acd9d8009be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d41c41c7-008c-4bf2-8fed-f91a0b29efa3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13d3ebc3-c99e-4b23-a0ba-cfbe70b56ce2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d59c747-fc45-485f-8410-d17342c33d5c",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6375c54-0340-48ef-9176-90d5c33a733f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5a6c542-db55-46d6-bb3d-fb2f3ccf80da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08175f15-223f-4a6d-a6a9-337d3e102749",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7820612-311c-4472-ac5f-2ee9f78df008"
                        }
                      }
                    ]
                  },
                  {
                    "id": "049f36c7-b12d-4ae3-b82f-7392edd4f761",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a592702-5a04-47f0-8510-94b3c2edaf8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d517b5ce-1b0b-4374-af68-d4e28d634225"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "530e4382-1b79-461a-a866-5ce2642fabdb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94cd53a4-17df-4098-80a0-13afdb28b746"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66e65312-aae1-41cf-9dd5-8bdcede2c945",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ccdde69-8677-45f6-9f0c-53a376e8f853",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6962320-3e8b-4571-a1b1-241c43b5d089"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0f349dd-9ef3-40fd-9566-b3eff0107270",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75194da7-3531-4c4a-9d40-a7ed8fb32423"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2a7fcb9-0b27-4be0-8054-c6abc173bab5",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d948de92-4e7e-4e58-bd23-31571f5e1b53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59545757-e288-4968-8037-e76e625627df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4027bd21-d268-4ad8-8064-ea61d864d822",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78d5961a-7a9b-426b-901c-5f38b579b641"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43fd3fc7-5bfe-4c71-859c-3d45f25e9840",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba7fdd25-cf9a-4090-8b7f-7a97bb1127d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d63d17de-abf0-434e-a51e-b60fc8b7b1b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80b193ed-d467-453c-b93e-8e4817e0968c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "957b4f32-fd63-4de2-94f4-c4c311b192f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c9a8bd7-2b28-4396-9744-b297e9ad636a",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a11a52ea-4e49-4c50-9f05-5d48e120ea05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da11c5e6-1941-4f50-918f-5964417da803"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f63f046e-86f7-473d-95b8-2dc9ddbbf1de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fb978c3-16e5-40b7-8bc3-de60d2759d85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e092d8fd-e370-4aa3-a0d9-f2b82776d298",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8ddc4b0-df2f-43d6-8a96-6ca6d2378000",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5215cea0-823a-437d-94bc-988223ef9795"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d19190b8-179b-4efd-ae75-6ce641c6db83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c47bfbaf-8e87-4c24-a88b-abdccbd5f54d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26b500c9-9ac0-479d-8878-16f305409e1d",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7c73605-83da-43ee-b4cd-c8af95e28393",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9fdd0e68-f0dc-404b-9fa6-ee90d02c74b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28f5fce5-f956-4318-83b9-28b67b031810",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01479404-c913-4b1d-b220-8da804aa964d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4783f9a9-4ba8-48f7-903c-fd27cac73035",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a5a12ec-83ea-4c66-ab1b-48a895da97aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2459c023-fedb-4719-bb5e-bef0895cee15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aabe804d-c391-4fc0-bbf1-a62091e0058e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb1f7de8-7f2f-4bb8-979c-7545d32f2696"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17dce54c-a7e8-499b-8ec1-0cbdbca9aeb6",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd1af16b-4131-48f1-bb93-98ae4851fbca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "712fdc74-eddd-49eb-8cc9-3d6ba068de7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71f000fb-e883-4657-b751-2baf934dad95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cd65c0d-d5ba-42d1-9ab6-f24c0e56d073"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96946cc8-59f0-459a-8470-02c916eb784f",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e11c2764-f190-4e6b-8d56-48653f213b7c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ded262fa-c924-4b7e-b3ac-c856f4ba18ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c33553f3-002b-4a69-bfba-34548b6660b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21aedbd8-f44c-4bdc-afe3-dc88b9052300"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dee8f8fa-584b-4ee1-af19-ac5432aed24e",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13ecefb7-5c62-4b24-b7e8-9fe8e1f75f47",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a4cd866-2819-49cc-be31-48bbd5d72db5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "194a1dd7-b96b-4be7-8071-1616fc2798d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67792566-9f3a-44be-94af-59fd8b1709b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4a7b8bf-1fd5-47ef-868c-968658d1cb3e",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3da0e52-7d3f-4c3f-aeb4-4afd914843ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54b3d4d3-2ebe-4f7c-8a0a-a3c29b8b7fad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d603c1f-e315-407a-92fd-7bebde1234ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1ce21c7-39e5-41c2-9dcb-d22bd7f90690"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00c1d687-7ef7-49f8-a523-5e34eb85b844",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e74ac063-d486-4790-803b-708572e7c880",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4492fb9-08f3-4687-93f5-32c39893e186"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9ccc8ff-3401-477d-b232-336b7a0d41fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68c648ec-b06b-4d81-bf80-fb2da910a10c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4579e58f-259d-4e91-9790-3dc2e3cb2e35",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4503a14-c71d-4df4-8986-4d1f5b7b5d52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff30fbc0-e9d7-4328-bf33-c29d1d1294ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65ef4a52-68c5-4c20-a51f-849404dba15b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92b675a8-a0d1-4c18-b7da-221380b79773"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68ee69f0-e565-4edc-860c-2ac57ac2283c",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e660748-00b3-4175-83bd-bc1dabd2455f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9a99666-5a9d-4fdc-b3e7-276f1843caae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dba3a50-8932-4dfb-95f0-7697ff174924",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90b51d68-c1c0-490a-9d3f-5c36e7f8a02f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a231c17d-3b6f-4ca2-bca7-23e4932e645c",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19be3cff-0251-4351-a597-82af8ccb191b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "359db7b1-27d4-42d5-96a8-2314c35062fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae7d6dbd-f05a-48cc-ade8-5f2fca435e40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0924e2ca-542d-44db-a214-ac7fe4805a33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2e83e89-e3ee-4493-b73f-76baf7f61bac",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96fdede2-34fe-4ceb-9d0e-982505469b17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0df4555d-1310-4a42-a048-c79cd2071f7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04c2f794-fb27-4638-a6de-ed7833d7be9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74fefb85-fe95-421a-b6bc-1996ac023628"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8a64da7-c998-48fb-99b5-c1e869b9d05f",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cab17f5-2c6c-41a6-8b80-bb894b9e04dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "110afdbf-c1a6-4a53-9281-1ca44f96470e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e0c36a5-6d41-4cee-ad13-08d7a08e770d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ac4051a-7839-48e7-9e5a-0b3992448e6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "282eca5e-28c0-4d91-b4bf-fca52d69e40a",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16cde377-bc6c-427f-949b-37f8fc4bc1f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "773bdcfb-b35a-42b6-8955-4a68f95dd6ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09e8db23-4a51-4fac-947b-955dc1ffe88f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d06f8e52-9388-4c49-8a8e-fdec9f35b77b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a05ffbd3-6515-4ed0-b452-7410c88f4020",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61656420-a079-4fc4-8600-acaa590d027e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65687ab9-e9de-41bc-81b8-ca2ad0c78bef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92b0886a-845f-4263-9004-5da40d844362",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "511f2daf-8a79-42bd-959a-85801a047bd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f52f081-275a-4e5e-ae43-c82b5d7be97b",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c654123e-e271-4764-af09-5148c4e4ec64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c2dd3fb-1879-44cf-8468-8a4f0923e228"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e9fac05-d659-4b68-9208-6ce63b210166",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9428998-da30-417a-8052-04793377335d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c43fc4fd-ec3f-4337-b872-0d68bee0cbbf",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ce68313-eeb2-47f1-a5e0-0d8f96d6941a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a25f16cd-be1d-4ec7-9541-cb8d5c73f72e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a05b0671-d038-4792-a42e-c2c167af45e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f78d3bd6-ec74-4823-b4a5-48c2406510ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc4a8d4a-5624-402f-ad11-61412bb3706c",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bd5cb44-9a62-4f05-8069-53a9cf32c8cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9edd9c1d-d7d7-4c2e-ba95-321dcd4db297"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5227b63-0f61-4442-b0ae-bfd4ac16fe8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3451d2e1-13c3-4207-b5ee-aa42d3e1a0f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0719ecbd-267e-4f82-aa3e-f1e4d7eba343",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef2b3302-5ca5-4c0d-a2f7-b95c9486b94e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc501150-2ab5-4763-95dd-91104f15b493"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8013120-6192-425d-8cf9-e75b0e617994",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6d605dd-9162-460d-80b4-3ee9e8004e64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e10ebab-9f3e-4afa-85ea-0d5019d94b3d",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2f8a6ff-b3de-470a-a472-f0835a437d01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fc62b21-97f8-4015-b1c0-516d672d6504"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb21cf5f-c350-4c8d-8c93-a0d8ec52c6e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dee72b15-1376-4876-bead-1778aa8e3537"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48a935c0-9338-43b8-8de8-d2afc7453748",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4463c62-3b69-4652-a9d7-70354238df4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a350986-fec7-41f2-85af-2ab36509a631"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb059186-b479-4f69-bf59-04300e1509d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "640cab96-49ac-4788-8cbe-5201499514c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e919770-6189-4226-af1c-f37b7f0cf9fc",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5347da4-db86-41a9-a21b-58b3efe05234",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5ff7455-907a-4533-a281-57f5b6fbe8ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65c7946b-a5da-4553-9149-fb12e3b22941",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0de8419a-42fd-4ece-81a4-68d1d7f699a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baddd9a0-9bac-415c-9e47-56dfcb43b126",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38b54357-81f7-449d-a42a-86d51152d202",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b20731cf-a9ab-479f-b68f-0a0ec0d99a45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "481fcbdd-83c8-427a-a2fb-0752992a58b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1f45a25-9f00-4da5-bc3a-b20876f95b71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b429cb0b-bec5-4c95-b491-1934f2b3f772",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "229c9510-de98-4f6b-9037-22e82f50f5a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a740a5dc-be44-4362-8242-355b8e424db8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf13a6e7-dc86-4b38-84cb-af47fa783ed6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4988323-8eb3-4715-b532-de579a499ea6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4d9d7c2-d6cb-4935-b69f-a0dd6805f1f7",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7693836d-3abb-45d3-981e-b675926a69c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f48399d6-cde5-4bad-8819-ed50e3d9a734"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "757eeacc-d24f-45e5-9e7b-a6fb4ac35da6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6464de1c-0879-4a10-970b-b9caad2d420c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2318c9ae-e0b5-427f-8fcb-53a2ccc86bf0",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e3648ca-c18d-4cc8-ae67-7708bd4b8ae8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f897eb2-f764-486e-9da1-3b8b72865ebf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5ea84ae-d7eb-47db-be5b-126820008ff0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff063116-2764-4068-a617-ab6215c02e2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffcb4685-527f-48ba-a831-1cce293bb4f2",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cb4a94a-f0cc-47fd-9140-906b1a6e95bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e85486d6-e2f1-4ff4-8185-cbcccfff1868"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "961feead-56b1-414f-8903-d7cbee9e7061",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa44a3f5-80b4-4310-a11d-a93dae57418b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec545fbb-1a22-4027-9f6c-44f7c43c76e0",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0224ce9e-a514-44c0-b778-a3196031ad48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b89e142-b241-4c5f-a9f2-795af4739897"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc88152d-e616-4777-a3ca-253e8ece7b07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0c51a16-fd2a-4e01-923b-7cd5c8fdb064"
                        }
                      }
                    ]
                  },
                  {
                    "id": "910622de-c8af-458f-a1cd-b642c32db039",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f33e0a74-14d7-4abe-82f2-a19894686c6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a11a7ce0-a406-49aa-84f3-855f9debb3f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "294cd4bd-4f0b-4b92-b0c8-734f70167355",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ea6e627-c9f3-4371-b80c-737ff185ba91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33228b36-6642-4c4d-a043-84e6270094c0",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b89b24e2-ba77-43f3-a919-ea1d34d791d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7660ecc-8ed9-49d3-a3d2-65fd78c64f63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e95a9cd-91a9-43af-8757-451acbf85c22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82b3ec59-e3aa-4a4f-bc7a-63b57be8639b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae9b8890-37a5-4dbc-8fcb-ae9c1d507c34",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c097c70-e2e7-4a83-b748-9cefd1db45ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15a44653-1523-406e-9d3c-73ffc6c35c24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea0628e7-8ef3-41cd-bae4-c8e9d483626a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8379c59f-a725-4c33-949e-0ed00f027c32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d0fe300-abe5-4f64-884d-3b615f804efd",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5499d1e3-b84c-42a4-819e-583f420453b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c33365eb-c8bb-404d-9e2b-6a3622b12df8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "273f6db7-a756-4111-b6ec-1e033725046f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a6ddd63-cb5d-4794-b678-fe7c894f4cac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5e6a123-637a-45aa-b927-3b02f757c0b6",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6eda9e94-8956-42e4-9619-6d8f26c98a57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c110bf3-0ded-47c7-9a13-18ccbde995cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87f117e3-cf62-40fa-b3d3-bb43896aac77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9dd1fb5-3629-4156-ac46-1b0a7dd13b34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed47e580-5bf5-4f6a-87bc-7df55d0ddd63",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d19de1cc-944c-450e-9a52-a945d338b31b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44d7616c-7b67-492f-84b0-ca8a0cccabf1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af50831e-0642-4901-bd0a-019124b993c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "229dc103-2c1e-4894-b4de-c45f7e2e9979"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fad0ed9-6c7c-4287-91a5-985fbe828672",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31339e04-f8e0-4db5-a399-ea0d80178237",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "701d9238-0ebb-4741-8c31-68d2ba925e42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "524474e9-94d2-4968-8829-557be7ea9423",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b891198-4675-45af-92ec-40883e549d38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b52b1de4-81a9-439c-8044-b77102bd750b",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c87a3b11-3f43-4ee4-93d6-21ac0d96b96d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef12835d-f4c7-47fb-857f-84492ecfe001"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "068c8b4a-1897-415d-9e77-52495a27aaef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff4f792f-175d-4809-879d-4936dbaecb13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f7302bc-17fe-489d-8682-66fa237ec345",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7621b5e4-9756-4f4b-b73c-b4df6dfd2c91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a983d79f-dd58-4e2d-87d4-7ea40db47e09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d728b587-08a0-4174-b8d4-5158a1838aff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf3ddd37-fd0a-40dc-8ee5-2d57964743b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35b00b96-de1a-46c5-a4f3-ada6ef669e33",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91660994-c6d6-4b5b-ab15-06fae25c0add",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfaa5a22-8198-4e78-9518-16fd1fdb9a4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "894178a4-1971-4be4-9802-f748badf591c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbf375c9-4e3d-4f91-a1b0-71d395d412fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b27d90b5-a18b-4c62-85b0-42f574337056",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83047fd5-5d82-4f9a-958e-373a35331b9d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "498abf99-a8dc-4090-b728-b1fcac3efdb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d6a202a-add5-4c11-b415-07452c7bdc08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81f12302-a9ef-44bd-8a93-bdc4bdd5ce95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef22b3a2-ed14-43c3-b4a0-6d19b24c90fc",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39722ee5-ffa2-483a-b92d-9cbb5d6bd18b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3310dee2-d8a8-4674-8f63-d54e3ae39e9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c51a740-6378-4bd9-bb3c-94035541ee10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d66ab159-d596-49ac-9a08-a453586d6c11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f3e1861-1b26-4e8e-a387-d1b4b5daf1c6",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9e67ca5-1db8-4eba-a708-4e2469cdfd62",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d6504a5-f38a-4133-bc9a-b2aac7eb08e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceb8246a-379e-4bd0-9edc-0e4fbe9388f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a02d113-f0cf-4825-b4f4-1c20fd79846f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "186d2ae5-c4d5-4c45-b371-4da76136741e",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c42d83d6-8ba1-4110-85f7-7487dc7b8903",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19a99c7f-571b-4f06-a8cb-b473f0ee902f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e43ff66-d5b6-4999-a7f9-148fc07fd316",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "930b51ae-4c03-4973-bc41-c3d6ec973e99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c22ecf8f-3784-47bb-ace3-af4e6e5fb5be",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5961eb4e-7133-40ab-9612-99e7061aed19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2af9e70d-613b-4634-83c7-33c74243af4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19373302-28c2-4c6a-9730-ae60f7baf81d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4d4b292-cb86-45d4-b587-6e5074cffeec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "085c4505-4ed4-465d-a7b4-c2383f616818",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a68cb52f-b21f-42ec-ae6e-6f4703deb9ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b9aa91e-5d0a-44fe-9b6f-417b6db4bdd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40707068-3788-4a67-9fa6-cd0adb0855bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f1ab295-dfff-4c4f-a1af-e04a8ba1fb91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a41834a3-dd20-4519-9915-26dffd5a73a7",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f63b47a9-ca44-4130-93bc-4ffc81ff07cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1416407a-d616-490a-8754-329410b2aa05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3103fa4e-fbdf-436b-95a9-3d462a1ac70e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c9c4f57-e963-451d-b23c-1c35d79f5c79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec082ab2-b977-4818-a683-3ba88a523abc",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d11ec8b2-68eb-4a62-a796-1cf6d5fe4cb2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88690c41-ba20-40a6-9cb7-063776a13aca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf5cf44d-e637-4ca1-8171-2420e61fd7f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f649dba-270c-44c2-99c6-ce0e66697047"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8007494b-5486-4161-8ff3-f14a31c0256e",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0605585d-5bf9-4ba2-9456-c447bc9b87eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11bb6b5f-c8e2-4b85-8891-991e44df1769"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b125f097-5075-4cc8-bcb2-057048b0a98b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54c6855e-2088-4cb8-88fc-ef8e754618ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3d7d40f-4747-4cf7-9fdf-747567b4e16f",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "980d4868-2235-4e73-87df-bedd2246926c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "abb957b4-9756-401c-94c5-4f7ace2835b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc56f521-a893-451c-b373-0dde8fb3d337",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8981bb76-5b2c-4a6f-a5d8-ff4e74471b6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "194fc659-dbcf-4913-bfc7-067ff9e153b3",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "823ed987-815f-4400-bb14-43838f4b514d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "797cc830-7653-4788-9e14-70981133bdc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6f98744-f639-4c37-bb6e-b162a2e7b10a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddba899d-612c-4eac-bdcd-deb0a4d147b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0d558fe-2812-47b0-9785-205d58d69522",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80ea7ef1-fee5-40d6-b9b6-f73c793457c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3f690dc-3c6b-4b76-b3cb-c1041e017908"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5cd5540-1f97-444c-a54c-30e11f73d41d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3607a032-fdb3-4ddd-996b-63b7978d60dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "405ac8b7-e96d-4e7e-9a2f-7b3733139575",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c8f3b85-a5f7-47ec-84b7-c56e0274b974",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21995da4-31d9-4dd8-b947-814971f3098c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0dd6a0b-f111-496a-bb6b-5d1a99e609ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d6cb049-6702-4346-9843-d63afc9dfa10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ab63c0a-3212-44af-9b50-1b87a2cfbf16",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c375e13d-9128-4b7e-94ad-a20d076e958c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5358c86-ff78-4c40-ab0d-75d85b3c1416"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3077f06-9098-4f82-ab6d-ef1d2293fead",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "604f137e-b78c-4482-a16f-50601a99e732"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78bb895b-8e51-41cc-9046-9a6be9e29600",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7a47000-48d0-45db-b8e5-238ea9cf3c5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8564e1e3-5c16-4652-a5ff-28700adad706"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "872ce121-68c8-4c9c-8161-55b6bfa76107",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c8d90b0-e58f-40da-af80-7ff7dfd26ee9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe62b47c-5830-45e3-96bd-d8fbff5ffc93",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6485bdec-538d-4a08-bab6-28ec179f4328",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6eb1e445-7056-4e49-b2d1-fd1c53511d1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc8eb5e0-fd20-42c4-8357-1f40ebf55b2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f0f6ad9-bd21-4f1c-bdfe-d3b74a3905c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "521f2202-8da3-4dd8-ada4-3ed3ae915a26",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba5437ad-1a26-43cc-99d6-69a61854d12a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f4bb08a-4f38-4f99-8ec7-a2e37e58c25d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44a9efe2-8f08-41fc-8686-dda14e98e435",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0bf58a2-9d34-4fad-8fbb-9930e16efb4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8196d665-3e94-45ef-93d2-b532e511b25f",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ddcaea9-6b73-4d3c-895b-7d37dc0209f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f547e48f-d85b-45e1-9ad5-164536a80e75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4e5340d-abce-47a8-b58f-5cd10c7a3ace",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "785d1c6a-33b5-4495-bc6b-c404c3ae93bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dd60089-0e04-44be-b14c-d593ea95274c",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41e49ec7-3e4f-4e95-b830-36d60164ca43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9ac53af-ab04-40d0-9643-35d86b8eb122"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32e24ff8-8864-41b0-9c97-fa3f43bd62be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8d19db3-f9b5-4cc4-8016-670492ab7fa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f90ba38-30be-4ffb-a0c1-41c0c2377812",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "979a0ca2-1796-4058-8ad5-b890d447758f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e151343-aafa-4e92-a41b-1270ef53df6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbdf04fd-9445-40c8-8d50-b57facf697f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff8b37ba-a96d-458f-9758-3cbc37814bc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11ec3837-dc21-47e3-aa4b-0be1db7105b2",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f57ba524-7888-4d81-b66a-155876de9127",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3176ad3b-dcc5-4e77-84f8-fd7af3b77ced"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed2e950d-5356-4adf-b9b0-224a399f8566",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db459406-5551-44ec-b4a6-80dff6a90144"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a09e72bf-a2bc-4c8b-9479-62126eb265b9",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8724a771-bc27-447b-9bbb-8378c678d693",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19c810ea-566c-4c68-84e7-b2c87470b5e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "967546b8-0efe-46d0-b4a9-878b32784d66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5725ac17-09a9-47ec-a893-7f1e0fed7b99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a69d373c-1ed3-450f-9fbf-20887dcabc7b",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e099cf2-ea1a-4ce3-a3dd-1168b0402dea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fbf4a047-6600-4520-9b46-aac51a94c123"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "109da920-db29-4a96-ab80-713b3142b959",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29916f53-cb30-4d53-9e4d-f1b74586fefe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7560d0db-e75f-47a3-979d-d0bf3695380a",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "164c58aa-8465-4a7e-83f1-a734781920bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ff8c798-0392-49b8-86fd-c6155e8eaf7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27edc414-578e-4df6-9496-5ed4940be971",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d945230-d88f-4548-b973-e349900388ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94c808d6-ae65-42d5-b9d3-e1b693f1a4ad",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8993868-febc-4a02-af06-3a0eb5e6522f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47939061-636b-4474-b785-2b6f7652b09c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be51446d-ff3a-462f-b8b1-aaf1609af1f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76f55834-d099-4259-8cbe-96792ea1a57f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2321a08f-9393-4880-ad37-e924190d4221",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9bdb6dd-bbbe-42b7-b19c-95ca44dc5b76",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1eb5108b-f28d-45e3-acf1-39ad01655120"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96fc6134-a803-4539-86bf-ef2936edd563",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3820e9be-f696-4994-80ed-611abc140615"
                        }
                      }
                    ]
                  },
                  {
                    "id": "623ae6fc-68b6-46e9-adcc-a3b643135993",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "391afc08-8f46-4153-bee7-50aa7c203a24",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b334d54-8a8d-4a3d-8cc1-4b30edd7c1df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e60046b-6381-493a-be57-194e9731fe48",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "103846c4-6424-42db-8ab3-697ebde8e006"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9aabfcbe-c3f3-4134-ac79-67f7f7cbb5b8",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50edc8f8-3b1b-47b2-ae04-cdcdecc1feaa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "516160a4-ac3c-4605-94d0-bae003c88a44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "656ce9ad-0dd8-4348-89f1-33dfdb106cf8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11025dd2-4d22-4e0a-a731-05aa21221a34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f12c27a5-a084-4148-ba05-ed401fc280c8",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceb45024-7b6d-4223-9485-fbe755f59830",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11c120c9-38a2-456e-b8f7-4d1c857706e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11ad55f8-5401-4df7-8196-ae8a41368b52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc7a4000-2b98-45ec-a0eb-2aba189f1a78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3427137d-cef3-4cba-9e09-2edf4e8f8ee1",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0fd6d16-bd89-4f4b-aed3-00f5f7b20594",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c93fc06-9210-4a88-bb00-46709cc447ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbeca007-b343-43d7-b418-d68a0e14e9cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b9f4568-7ce5-4bab-84d5-bb188c37789e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55b11895-e506-4c93-a88a-aae5aef86f98",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87aefe7c-a4ab-4120-a0af-88f689ff9423",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e7f1927-6a41-40ab-94f5-45fa4d0ab649"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33a99964-eb3b-4ba2-a920-7354aa36debf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b228b47-cbb2-44f5-bd12-54cde3aa28c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0558d6a0-4e91-4f0a-9b4a-919bd4aeedb7",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5248f11-8de9-4f7d-a2f1-226444279daa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae18feda-8f64-461a-8997-1e0914a7c501"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55aa3f0b-ccd4-4f7d-a2b7-cd3da53e5060",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb081d39-ba14-4093-931b-1a2bdf0d3d81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e79d015-7e65-4289-8aa3-2c7ed5017274",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc280694-9889-4925-8574-906dcb2e7097",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26451c2a-1afd-4c8a-b644-4f09ca027fdc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb445a96-3cae-4731-bb2e-2e8631e82558",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "792a5ab1-0d3c-4d1f-9a54-6c629f05be0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21accad6-d1ce-43ef-9ed7-fe03067a6ca8",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6accfad-ec0f-4e85-ace1-e220a980d310",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8650a37-31d2-432b-82b4-391ff1b70c1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4929dce9-9a51-4184-8756-21a20ed6614f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "626f3c25-f06b-435c-b887-b870547f1c96"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9ebcd4de-9adc-4020-896d-4f5389249eb6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8b80989b-8918-4219-bfdd-fedd2a3f55f1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d13ac6cb-fd08-4450-84c8-d924cb9ddbe1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6ec81702-9256-4153-93f3-f759c7b58d67"
                    }
                  }
                ]
              },
              {
                "id": "6d54cf61-80a2-469e-abac-e7ae8b92958a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a268e712-3ef2-4383-942c-844c42406c95",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cc0d6e6-ad97-422a-b739-75df5441a47d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "ddf49363-7446-4cfd-8e39-f3ae849393f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77faef6c-096c-4953-8992-557f61f63603",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4ebdbb62-bfdd-48fc-8829-1fcdf2a14a90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20f38fa5-31d5-4a33-a052-dca28d704ced",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d1a6583-1a88-4e30-ad7d-fddf13fbcecd",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "6fd292f3-bc1b-4a95-bc8b-d856abc7439a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b842081e-51f1-4371-be0b-372585771d3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "57e46418-6785-4bc6-b798-f602812a76c3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c38ef57d-2cbe-4a89-860d-6f062ed28113",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "36387f9a-0a25-472e-91c3-1a818c77c1d1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "40b756d8-1295-4798-a01d-1a0c2ec2d815",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d8b68753-636a-48a4-b29d-714a8d44383d"
                    }
                  }
                ]
              },
              {
                "id": "1573189a-b9dd-489a-a2ff-2c64b10866a6",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "f5682fb6-31c2-43d7-a59b-c7d352b26a60",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5188b074-e3b4-4944-929a-18c33104bac6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "aceb6a83-05d5-431f-808b-f158d80d39c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fd86bf2-ec70-446b-a381-ee6af8d22e56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15aab1e1-9028-465f-a59f-f4de6aa3e7c6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "8a4a7117-0f5f-47cb-952e-94088e9ccce2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0fe4afb9-06eb-4015-80cc-acf62ee00159",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a004b5c8-443d-4e7c-851a-565c4d9e359f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "7846158d-8863-4455-ac12-acff5f4dbb15"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7b863b14-2d63-4229-bd83-b3b49066c59a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "227f92d6-eade-45df-8e1f-9fbc38e838b0"
                    }
                  }
                ]
              },
              {
                "id": "4f37cffe-96e2-42e6-b125-83f8306affae",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ba85481d-9ff1-4cba-98d6-4c5657ba8102",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "92423ce9-72a9-461b-8b7a-d8c6aa67d35b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ec563447-bf90-4a1a-8ddd-26d5e8feef0c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1c9547ea-e1cc-4806-b3c4-d901c8dec0fa"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dc10ebde-316d-45ad-93cf-79a43120f034",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "94b58bfe-0dd1-4ce0-9db5-a51f350962e8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a4282e26-3308-4c32-ac3d-66eac4055e4d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6105a25d-5fc8-4e5b-b90d-70cbcf62c459"
            }
          }
        ]
      },
      {
        "id": "275ab26e-f0df-4020-a152-678531d39e49",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "145c84cd-2a68-44b6-a357-dfb5d81cf2fd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1264435b-7c03-419d-9cce-e76a9787303c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1facc471-686e-4321-a3e9-46400d4b3a25",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ea0ac11-8e81-4aac-98bd-ce76925546d4",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "0311f4a3-4d12-44ee-922a-b80780cd0cea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c2f6942-8bce-44ca-bd9d-85b5b284ef9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d5b0f0ac-fb5e-4b63-b30d-d198dce6327b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78d6fd6d-0184-495a-8771-1c5e28d7f8f1",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cb1aa45-fbd4-4152-b4d3-001cb0b38763",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "6d82b71f-3aaa-4b34-9a19-9929899d3785"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8504874f-5aa6-4f09-9032-189098081a5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3ba8b03a-310f-4b56-90d3-961ef84413ef"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "627e1eae-5111-4f38-a435-f824f1ddb683",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d3597d30-e9e8-4216-a5cd-ffe3de5632fd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d7666e34-2f0f-4a3c-9660-4bd08b363cf5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "31616f9a-ef7b-4c97-8f62-c928ecf4b66d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6835d317-4dcd-488f-9bce-9bba691b5857",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "b9a04ef9-9c75-48e5-bc0d-8a525f21ba04"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "86057466-b1b2-4c60-a043-0227884bb734",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "10a550b9-be91-4577-9dbf-1eca20a7d66a"
            }
          }
        ]
      },
      {
        "id": "4b9a17f6-4653-489b-8f8d-883c4ab63ff0",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "c6da7444-aa14-479e-9abe-24c66ebef3f7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a4699fb9-15f3-40d7-8c58-a97f74ff99e6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "14eb72a4-c4cf-440a-bf91-7dce78619ab3",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "724918d2-81e4-43cd-8262-22a2e09bfa55",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e78a623d-0296-420b-941d-47bae9fe6658"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27f4af12-1b73-4df7-beec-d473d2268aac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2b370f5d-8827-4858-96d7-d990379aeead"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9e5c4f3-57d0-46c1-bee7-593a3fff526c",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec55c6d5-15c9-4b7b-abbe-179c741c8528",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "5fdc3a62-14bf-4b4e-bf4c-7b1460fc2bdf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27bd5957-1c3b-41be-8836-d900f6fabe38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fc9936a7-69ed-4ecd-8890-034799e6aa04"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bf08f49d-fd7f-4157-be8d-b92bc6a28636",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "75ff14ad-bda9-4806-a12a-d6c9bd5b5516"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fcecb3fb-2810-4636-b636-2aac5329bd13",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "42aef9cb-7799-43ce-9b86-b12522661745"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "371ae3e2-2b1a-4a7c-958a-fa57d4870f3c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0d1d5386-fa6a-4361-9a6c-c9c45ffface4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "56f6be90-9e28-4f71-ab01-675c4c58fb20",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "15317d0e-7d29-456a-850d-448bceb73088"
            }
          }
        ]
      },
      {
        "id": "b49a1d39-7325-487d-af19-0b9b3e948037",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "90cf0cd9-9a4d-4525-8cde-0679d8cd9db0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "60d06f85-ce68-457e-ae01-a2c5716b3070",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "075e2c29-f480-4482-9c9b-570a25ae838b",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca5ed693-3ac8-4bc2-b966-e1e99e3dbd78",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b00dbd74-48c6-41ae-98f9-e2ddf9f7811d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d05a8dcc-1549-4823-ab0e-c35fdb9a8e31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5feb86f6-1981-4d10-9a4e-5aa569565047"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4a0400d-5349-478a-b7f2-34e549ca4f45",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "729e2fc5-44cd-45ab-b2fd-b8e1d70baa3e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "ca30e574-9b68-4a03-9137-caacbd69a684"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "813b8b8d-6305-4ed0-8532-38d421bc768d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c729fb73-1525-4913-9c59-d243d0b40219"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c0d9746a-892f-4a5d-ba65-81e183cd2b90",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a4e1e79f-59d4-4175-baa9-6ec51d17f5e8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "809124de-9214-47d3-b5ed-c66a604ca6d6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "34dc6676-647e-467c-8463-b6b0c4de85c1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c1bb3305-827a-4719-b0a9-33a965d15953",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ecd70401-b5a6-4449-909f-0aef257e640e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6b7ed37f-1c9a-4e98-b91b-2350a7d1c60f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "44bd4be3-0757-492b-918f-c1aa3daecb85"
            }
          }
        ]
      },
      {
        "id": "59936407-a745-4e1a-8169-6f3a3a4b3ec7",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "169c51ea-4b06-4803-aa12-24b55748dcdf",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "56ff5d60-9bc4-4c19-bf0b-18b7ccf6e280",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "7aaa9990-cd48-4946-be12-8134508ddff1",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "58534cf8-072b-427b-b4ca-a9e6268af46f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d4c095cf-afda-4d54-a6cf-50a9c5ca21e2",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 254.45769230769247,
      "responseMin": 11,
      "responseMax": 5252,
      "responseSd": 758.5341697455674,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1680914064842,
      "completed": 1680914141680
    },
    "executions": [
      {
        "id": "fb21f537-451c-4a7e-9aaf-eebc470f694f",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "ab2e7629-3741-47d6-ae8d-712df4d4de83",
          "httpRequestId": "cdb2eb15-8fe8-4a32-bb56-ec749d336654"
        },
        "item": {
          "id": "fb21f537-451c-4a7e-9aaf-eebc470f694f",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "a604e140-70f6-48fb-927f-cc41123c58ad",
          "status": "OK",
          "code": 200,
          "responseTime": 105,
          "responseSize": 0
        }
      },
      {
        "id": "4276248e-e14c-40bb-adcd-65aa16a97f06",
        "cursor": {
          "ref": "77454bb2-c265-4915-b1ba-925068e58340",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "605356de-e4a8-4f18-8a21-89bc23dadd0d"
        },
        "item": {
          "id": "4276248e-e14c-40bb-adcd-65aa16a97f06",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "53d5f004-e96b-4f24-8f14-8b7f2500bcfb",
          "status": "OK",
          "code": 200,
          "responseTime": 18,
          "responseSize": 0
        }
      },
      {
        "id": "d5fc7e53-355f-44b4-923c-65e5d1dc0919",
        "cursor": {
          "ref": "70731bc7-c6de-4290-906b-768beb6a28b9",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "0f161061-4fea-4feb-a66d-ae56137d2283"
        },
        "item": {
          "id": "d5fc7e53-355f-44b4-923c-65e5d1dc0919",
          "name": "did_json"
        },
        "response": {
          "id": "c853a830-f28f-4497-83fa-6fe42e36701b",
          "status": "OK",
          "code": 200,
          "responseTime": 603,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29982bad-5620-4830-9991-0f85e50b1909",
        "cursor": {
          "ref": "723b2846-8393-4835-b5e9-730bc5f0aa37",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ac403f57-df4d-43d5-ad79-21010e4b15b4"
        },
        "item": {
          "id": "29982bad-5620-4830-9991-0f85e50b1909",
          "name": "did:invalid"
        },
        "response": {
          "id": "a6ad705f-6814-43bb-9c00-ae93e2638c3c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1265,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "29982bad-5620-4830-9991-0f85e50b1909",
        "cursor": {
          "ref": "723b2846-8393-4835-b5e9-730bc5f0aa37",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ac403f57-df4d-43d5-ad79-21010e4b15b4"
        },
        "item": {
          "id": "29982bad-5620-4830-9991-0f85e50b1909",
          "name": "did:invalid"
        },
        "response": {
          "id": "a6ad705f-6814-43bb-9c00-ae93e2638c3c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1265,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "cb31db8e-3a92-49f9-a07d-fa1e8c7ec938",
        "cursor": {
          "ref": "6e8433d7-1d48-49ef-8fed-63fb3f43a1b0",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "b637a0de-3bbd-4474-ac4b-21d0646d92ba"
        },
        "item": {
          "id": "cb31db8e-3a92-49f9-a07d-fa1e8c7ec938",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "16780e3c-6f7a-4128-8f51-f9d41dd5632d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 28,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d555263d-6ea8-4f9e-acc1-98ea0847e462",
        "cursor": {
          "ref": "27712a58-c86e-45ae-b51d-06ae568338cb",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "9773ae12-9119-4e8e-b022-6bb7e6de28f6"
        },
        "item": {
          "id": "d555263d-6ea8-4f9e-acc1-98ea0847e462",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "3d68fce1-2608-4d44-af30-7233eca5b10d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 25,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fee0d0bc-a2c3-45c1-8e8d-7858ab562e6f",
        "cursor": {
          "ref": "87de1fb1-0db5-4e3e-9a0f-565dcbb85bba",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "2889144c-92fe-4cd8-bed9-d1215968a697"
        },
        "item": {
          "id": "fee0d0bc-a2c3-45c1-8e8d-7858ab562e6f",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "a8894b62-c747-4764-baca-ab3c043d1526",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 30,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "11f8a714-ee9f-4608-bee3-a5aeebd5babf",
        "cursor": {
          "ref": "20f45547-786e-44e1-9093-234f3b81d826",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "9e4c069d-8de8-4bc3-8f3a-f1cb65ab305f"
        },
        "item": {
          "id": "11f8a714-ee9f-4608-bee3-a5aeebd5babf",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "bea30b00-474d-4f81-b6a0-a24c413cdbe7",
          "status": "OK",
          "code": 200,
          "responseTime": 23,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "11f8a714-ee9f-4608-bee3-a5aeebd5babf",
        "cursor": {
          "ref": "20f45547-786e-44e1-9093-234f3b81d826",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "9e4c069d-8de8-4bc3-8f3a-f1cb65ab305f"
        },
        "item": {
          "id": "11f8a714-ee9f-4608-bee3-a5aeebd5babf",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "bea30b00-474d-4f81-b6a0-a24c413cdbe7",
          "status": "OK",
          "code": 200,
          "responseTime": 23,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "d822694e-9f7e-4b42-afc4-506cb3561a16",
        "cursor": {
          "ref": "114080bb-fbbb-4dd6-ab44-a6f347570298",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "aa1d5287-f563-459d-96a7-5ddcff8a2d26"
        },
        "item": {
          "id": "d822694e-9f7e-4b42-afc4-506cb3561a16",
          "name": "identifiers"
        },
        "response": {
          "id": "2963836e-7b15-4a0b-862a-af692b301662",
          "status": "OK",
          "code": 200,
          "responseTime": 26,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96a24738-b012-4c1b-847c-85b48943fe2d",
        "cursor": {
          "ref": "3d1fd497-7eae-4dee-9e0d-34aa348d90fb",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "04386cb3-8ce4-4b73-95b4-a50e64b8cff7"
        },
        "item": {
          "id": "96a24738-b012-4c1b-847c-85b48943fe2d",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "dfc8a01a-59ed-4cbc-b247-5ec28e5353e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96a24738-b012-4c1b-847c-85b48943fe2d",
        "cursor": {
          "ref": "3d1fd497-7eae-4dee-9e0d-34aa348d90fb",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "04386cb3-8ce4-4b73-95b4-a50e64b8cff7"
        },
        "item": {
          "id": "96a24738-b012-4c1b-847c-85b48943fe2d",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "dfc8a01a-59ed-4cbc-b247-5ec28e5353e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fbfaabd-9c15-44e5-86be-4739fd54349d",
        "cursor": {
          "ref": "74e1a21f-d0ff-46fd-a675-bd1f0746214a",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "d3fed83d-337e-4444-9ac3-b1336296dd61"
        },
        "item": {
          "id": "2fbfaabd-9c15-44e5-86be-4739fd54349d",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "4a777ec5-6529-4e53-bb9e-65afd2bde5d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22340faf-19c8-4155-81e9-378ea45f7bf7",
        "cursor": {
          "ref": "90380236-9c9c-4146-bd44-0f2ffa740c98",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "cd7824b5-3ec7-47a9-a19f-2588a4069d8e"
        },
        "item": {
          "id": "22340faf-19c8-4155-81e9-378ea45f7bf7",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "e53f67ac-f307-49fe-ac31-a4b82ead5989",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84518452-dd83-4689-b9e6-4d9912ccf6ae",
        "cursor": {
          "ref": "f38bd76f-5000-46b7-a2a8-4158026b95e8",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "8c95dcab-1c92-4dff-b2b9-b506fde66cc0"
        },
        "item": {
          "id": "84518452-dd83-4689-b9e6-4d9912ccf6ae",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "4fa2856a-44cb-4097-9c39-cb94f3ba3396",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18311596-1813-4ff0-8cb9-9271a8a2900c",
        "cursor": {
          "ref": "e67bec89-375a-4681-a9c9-c9749cabe6dd",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "b730e9a8-550d-4b33-9316-602afba1dd8b"
        },
        "item": {
          "id": "18311596-1813-4ff0-8cb9-9271a8a2900c",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "8022f070-d5f6-47bc-a699-4debc8c7371d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dd182b3-338d-4017-83d1-9a7f3f59140b",
        "cursor": {
          "ref": "bf312e5f-8c37-4d2a-a6fd-acc1801a87f4",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "3f34ac40-d6c3-4f5f-8fd8-25ee7c7039f5"
        },
        "item": {
          "id": "6dd182b3-338d-4017-83d1-9a7f3f59140b",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "5394c3c8-1f9f-46bd-8cf1-b1ec1df7251c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca9db2fa-1d4b-4594-a5c1-34a7f64f7c28",
        "cursor": {
          "ref": "ddec6954-60f2-490f-8f19-54c0ca18e6fb",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "de6a2cd3-37f9-4deb-909b-91caab3aedab"
        },
        "item": {
          "id": "ca9db2fa-1d4b-4594-a5c1-34a7f64f7c28",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "f4bf6335-147e-455c-897d-fe1d94ce9909",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "331a3ab9-bab6-4639-b97e-d6888b48d380",
        "cursor": {
          "ref": "2fca2adb-dcb8-4aa3-aa04-04fab42f8ae7",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "9f4abbe9-fcd1-4826-a434-7145230f20f8"
        },
        "item": {
          "id": "331a3ab9-bab6-4639-b97e-d6888b48d380",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "869bbdc1-93a1-42d3-b19a-008d4b0644d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36265760-537e-42f7-9e95-288e3ae26439",
        "cursor": {
          "ref": "c0e792ca-9051-42fc-ad72-b6b867434d99",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "e3693790-037b-416e-ad81-dc56ace9611f"
        },
        "item": {
          "id": "36265760-537e-42f7-9e95-288e3ae26439",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "c9ce9af4-2631-4f42-8dcb-23ea4115f8fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3612b570-46e7-4a16-9a42-6eb7bc781021",
        "cursor": {
          "ref": "74049dfd-95ee-4c62-81a2-599bdde7a9ce",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "a2dbf452-425f-49ec-903c-f73d7b1ee124"
        },
        "item": {
          "id": "3612b570-46e7-4a16-9a42-6eb7bc781021",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "48040423-a666-4ca9-a447-4ee4e04dd5a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cae66a9b-b343-4d0b-b288-409f58997552",
        "cursor": {
          "ref": "731e809e-5dd5-401a-886b-12471eff4df8",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "36f01b15-077b-441a-84ea-2182deccb1c2"
        },
        "item": {
          "id": "cae66a9b-b343-4d0b-b288-409f58997552",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "1628eb20-1401-41cb-a6f9-8c6eae922590",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a76d71b3-565b-4057-9df6-80981abeefdf",
        "cursor": {
          "ref": "6c797be1-87a0-4d29-9dcc-d2b6737b0d12",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "8785e234-ecbd-4362-b24b-328e5e1d52a7"
        },
        "item": {
          "id": "a76d71b3-565b-4057-9df6-80981abeefdf",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "18dacf40-585c-4895-96a4-705d0475e769",
          "status": "Created",
          "code": 201,
          "responseTime": 921,
          "responseSize": 981
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "4d5ffb3d-983b-4380-a3e1-577cfa140b69",
        "cursor": {
          "ref": "5861654c-ebd8-45f6-b757-66273999264d",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "90080ab4-5a9b-41d7-8ad3-f2d4234711f6"
        },
        "item": {
          "id": "4d5ffb3d-983b-4380-a3e1-577cfa140b69",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "a4bf26b1-f80f-4e6b-8cb3-253bea7263ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 145,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa0b9aed-ed89-4f44-8ac3-96c30c9d5dab",
        "cursor": {
          "ref": "00b5ac3f-54d8-4d83-90f3-edc718004626",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "e750ade0-ad02-4590-89bb-f5036e92c7f1"
        },
        "item": {
          "id": "aa0b9aed-ed89-4f44-8ac3-96c30c9d5dab",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "2617dc10-efa7-4010-ba10-174a2e22db73",
          "status": "Created",
          "code": 201,
          "responseTime": 5252,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "7f438c99-e52b-4b0c-92ab-845cb061bd5c",
        "cursor": {
          "ref": "1df34713-0077-4735-b177-75d2c31c8196",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "827cafeb-d89d-4722-a79e-4ac02b3401bf"
        },
        "item": {
          "id": "7f438c99-e52b-4b0c-92ab-845cb061bd5c",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "39727629-2a90-4ff1-8296-9a4d1ae96b96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce645f7b-edfb-4d10-8480-cd7646902dba",
        "cursor": {
          "ref": "66f73fd8-16d6-424c-91ea-58af194c5d85",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "85c0830a-319a-4e92-af4c-ee6c049c592d"
        },
        "item": {
          "id": "ce645f7b-edfb-4d10-8480-cd7646902dba",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "32908880-2103-426c-88b5-fbbec0ab11e4",
          "status": "Created",
          "code": 201,
          "responseTime": 3226,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "d15440bd-f3fa-4172-8da0-9b504babbabe",
        "cursor": {
          "ref": "d098c32d-2861-4eea-b38a-c4a3890dd1b4",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "db270391-b54c-4c0d-bfe8-065da11c20a0"
        },
        "item": {
          "id": "d15440bd-f3fa-4172-8da0-9b504babbabe",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "af5ae880-56f2-4ed9-83b7-931622ec3903",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e021bc3-bdfe-4e24-8dd1-968f9f6af92d",
        "cursor": {
          "ref": "4c12de12-b92e-4d99-ad5f-0233d5e7fd98",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "dd485b55-5a1d-4c68-90d1-9dfc93a2de22"
        },
        "item": {
          "id": "3e021bc3-bdfe-4e24-8dd1-968f9f6af92d",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "689501d8-8375-4f06-b4c6-541698296499",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 143,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "196897a3-9848-440d-bd4b-b6df9c424a9d",
        "cursor": {
          "ref": "53efab6d-196e-4852-99ba-e507c5619bd9",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "e0d11648-6aef-4d1a-a27a-4bf5cca4c40e"
        },
        "item": {
          "id": "196897a3-9848-440d-bd4b-b6df9c424a9d",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "f6a6225e-f9af-4317-94c6-eef5479078b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53f758e8-c391-4121-8242-3f1c7eba1967",
        "cursor": {
          "ref": "5f987f0e-8dbe-4cd2-8ebb-eb3bb0066348",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "023188ff-af53-4832-95f3-b71351217aa5"
        },
        "item": {
          "id": "53f758e8-c391-4121-8242-3f1c7eba1967",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "a17f6268-7594-4fe6-9eaa-d24077bffc96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d122a158-e3fe-4675-b76d-b96e50a801d6",
        "cursor": {
          "ref": "6ea32d30-a55d-4830-9fca-f34a5ac7d056",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "faa33650-8beb-478d-9ccb-ea65f87a395a"
        },
        "item": {
          "id": "d122a158-e3fe-4675-b76d-b96e50a801d6",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "23b9a72b-3edc-4f4c-90f6-4f99401de612",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e1cc5c4-9e94-41d3-a7a1-3e06c9284af1",
        "cursor": {
          "ref": "7fd507e2-00a7-46af-9435-996343c65a73",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "7c7bab49-0f65-4925-9ad4-8e3b904b16e4"
        },
        "item": {
          "id": "9e1cc5c4-9e94-41d3-a7a1-3e06c9284af1",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "6cbb4ad1-147d-4489-8dc5-5e0aeb6675c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76205596-00c6-45b5-9673-c9a3a62d9b93",
        "cursor": {
          "ref": "f22edf24-a273-43b7-acc7-12d561a7c8d1",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "c591d1b1-2587-416b-9553-4542f25e8032"
        },
        "item": {
          "id": "76205596-00c6-45b5-9673-c9a3a62d9b93",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "c4969cda-15c1-4437-9b4b-391766b37232",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56137103-1e29-4782-926c-88627f041bd5",
        "cursor": {
          "ref": "a01074f3-4a17-47b9-b224-e746c436a3b2",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "a9486682-3446-4911-bad6-22a28f4995d1"
        },
        "item": {
          "id": "56137103-1e29-4782-926c-88627f041bd5",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "8929f558-6795-4831-8b46-c5fba64cc872",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e5857c5-4ae0-4261-9184-a0feaa0d2771",
        "cursor": {
          "ref": "7ecab005-639c-491c-b96d-c7637aa4db86",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "3dfd712e-2cc5-44f7-ab14-0196a390b20c"
        },
        "item": {
          "id": "4e5857c5-4ae0-4261-9184-a0feaa0d2771",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "fe44b5e5-f1b4-4c31-917b-0b212f5c73c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5561902b-1b65-42f8-b411-e9eb95dbeece",
        "cursor": {
          "ref": "3e13de29-eefc-4606-8acf-e89c59a82984",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "bce83832-74aa-4b5a-92c9-f4131f04d189"
        },
        "item": {
          "id": "5561902b-1b65-42f8-b411-e9eb95dbeece",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "c6d67b37-9852-4a4c-bba6-4f244e3799d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a93ef9b-d71a-4953-b73a-43dff7a0c62d",
        "cursor": {
          "ref": "aa934aa4-9928-4660-b3e6-cce4eb60c4b5",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "0899a53b-9b89-4ae3-99a3-4966b33add4c"
        },
        "item": {
          "id": "3a93ef9b-d71a-4953-b73a-43dff7a0c62d",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "087859ce-5d58-49a2-873a-13352e1dc580",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da500269-5d6e-4f7d-8c36-485d0faa9b25",
        "cursor": {
          "ref": "05210676-7726-4d02-bcc3-aec13fb2560f",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "690d181d-7f97-411d-bc17-54b3c9f53063"
        },
        "item": {
          "id": "da500269-5d6e-4f7d-8c36-485d0faa9b25",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "3492f91c-8d0f-47d9-ac76-83f4b8b40954",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2586708-9792-4de3-8322-ae13c3e1385e",
        "cursor": {
          "ref": "ef01741b-9dee-44d8-b558-aea962fe5f18",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "70e439fc-0775-46c9-9f89-cdcc753bfb40"
        },
        "item": {
          "id": "a2586708-9792-4de3-8322-ae13c3e1385e",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "fab89872-715e-4db1-83af-30d32010bf96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 120,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d75f7a83-45ca-4899-851c-76f389918a8f",
        "cursor": {
          "ref": "cb70a330-e3e3-4b2e-9f5a-7b1a1d896066",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "f07d026b-5257-46cb-825e-ee6deaf988fc"
        },
        "item": {
          "id": "d75f7a83-45ca-4899-851c-76f389918a8f",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "4506bd2f-eaef-4ac3-b56c-9d06d738649d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78231dcb-f6b3-44bb-b631-6157fba0bddd",
        "cursor": {
          "ref": "f5bd5948-e0b9-4a19-a94d-10278f8f254e",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "db0a7c77-44d8-4e1e-85c4-83ce98e93b8d"
        },
        "item": {
          "id": "78231dcb-f6b3-44bb-b631-6157fba0bddd",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "6986c27e-0252-4bfa-b7e4-670a6ef58e39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74b20e8b-cccf-456b-9eb4-7791d91da7ee",
        "cursor": {
          "ref": "2b8751cc-9d89-4fc5-b277-52da6d6870e7",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "d8fe262b-fefe-4714-9c97-24e07a5eb02a"
        },
        "item": {
          "id": "74b20e8b-cccf-456b-9eb4-7791d91da7ee",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "a32fc33c-3d6a-4aad-8b29-0bd162cdcdb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b341367-47ce-4686-a0a3-e8f06d701caf",
        "cursor": {
          "ref": "5213bd6b-cf2f-46fc-b4b1-dcdae8a88def",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "e7fbab2e-e47e-4d66-84a7-28485549c03e"
        },
        "item": {
          "id": "4b341367-47ce-4686-a0a3-e8f06d701caf",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "fed47208-342e-4587-9ff6-82c8cf4ff64e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "642e4daa-7f69-4852-b79d-382d0bb2065d",
        "cursor": {
          "ref": "c83ae348-0088-41af-a733-e698e9643935",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "b2675f83-bca2-443c-b57d-3228ce39b9ee"
        },
        "item": {
          "id": "642e4daa-7f69-4852-b79d-382d0bb2065d",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "f774b927-9ef6-4b99-9de4-59c5176e8615",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2356896-6eb0-4c7a-a6db-368ba92377a7",
        "cursor": {
          "ref": "93ca9b36-c897-4532-97bf-46eb50717089",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "65e948c9-eb8b-4b16-825f-4f2c0f4fdbd6"
        },
        "item": {
          "id": "c2356896-6eb0-4c7a-a6db-368ba92377a7",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "90a87a90-30ac-4971-a463-6efef3e069a1",
          "status": "Created",
          "code": 201,
          "responseTime": 4353,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "b60fbf79-30de-4188-99da-954a4333ee82",
        "cursor": {
          "ref": "599e40e0-9fa2-4893-9bda-7e625ced7aba",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "6cb81b25-a829-44e3-9b7f-579561b0392c"
        },
        "item": {
          "id": "b60fbf79-30de-4188-99da-954a4333ee82",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "4453b5b7-b7a7-42bc-96ef-372959754435",
          "status": "Created",
          "code": 201,
          "responseTime": 2574,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "8d10bcc1-4475-4e74-a7d6-80c678961c8d",
        "cursor": {
          "ref": "70426f7a-6afd-4f0c-a8e1-b08fe9ff5f22",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "aef189e1-814b-4f6d-bb00-1d3149ffe0b9"
        },
        "item": {
          "id": "8d10bcc1-4475-4e74-a7d6-80c678961c8d",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "2a3c41c3-749f-40e3-ac36-5d70735f3005",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38fa42f6-1d5a-4ec2-b319-2a145d0a05ab",
        "cursor": {
          "ref": "0a76e3f8-b53b-4998-a78b-35494883baa0",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "d9977e08-f4b1-410d-bae0-bd9459feab03"
        },
        "item": {
          "id": "38fa42f6-1d5a-4ec2-b319-2a145d0a05ab",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "ea2b0915-71ce-4379-9cee-ee625cefa303",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3088cfa6-dfc3-44da-8f91-3fd589feb708",
        "cursor": {
          "ref": "215ec992-910b-42e8-b14d-692a36d7586f",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "cf698086-a14c-42da-ac46-fd786574fbd7"
        },
        "item": {
          "id": "3088cfa6-dfc3-44da-8f91-3fd589feb708",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "0b2e817d-e24c-411a-8b61-44c0031dd0f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ab7e76f-34eb-4978-8022-f77a164286a1",
        "cursor": {
          "ref": "4481194a-4d46-4a82-93c7-70e4cfb11028",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "10bdae8e-bc45-48b9-badc-44cf07928ec9"
        },
        "item": {
          "id": "0ab7e76f-34eb-4978-8022-f77a164286a1",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "2c7b96c9-c4c4-4af4-acf9-6d415da79cd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e1e460d-32b0-4135-91a9-72ed03d5e9a1",
        "cursor": {
          "ref": "e06e5275-dee1-4ee1-b658-d99b9fd78475",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "74a1e655-2e7e-472e-b213-65aca585fb7f"
        },
        "item": {
          "id": "7e1e460d-32b0-4135-91a9-72ed03d5e9a1",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "f89abffe-37b6-4fb7-a03d-6c6ef3eeaacf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bcd75d5-cc36-4c3f-9df7-2df7c004db5d",
        "cursor": {
          "ref": "f8e1ca0a-fc33-4056-b0bc-926185f88f96",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "b235c159-aa97-4870-8dcc-37e2b8aca955"
        },
        "item": {
          "id": "4bcd75d5-cc36-4c3f-9df7-2df7c004db5d",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "a6488418-6bf1-4ea9-99dc-7c7fb1584ac9",
          "status": "Created",
          "code": 201,
          "responseTime": 2706,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "a639bda7-4ab9-452b-b553-bb003a385a3f",
        "cursor": {
          "ref": "e84a5403-1e13-40a9-a3a6-b19a9b8c7935",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "d2feb8d3-1756-4576-89d6-684a351094b6"
        },
        "item": {
          "id": "a639bda7-4ab9-452b-b553-bb003a385a3f",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "d726c530-dec0-41b5-bdee-4e378e2e7669",
          "status": "Created",
          "code": 201,
          "responseTime": 2664,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "3ab6dd04-aa20-400e-a2eb-d732dd37d724",
        "cursor": {
          "ref": "0465c903-134f-4ab3-9d0e-ae90e67df3f1",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "f90c32e7-592d-40c0-bb43-2e101949525b"
        },
        "item": {
          "id": "3ab6dd04-aa20-400e-a2eb-d732dd37d724",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "6007b04f-a0b9-43f9-ba19-d1ea488c729f",
          "status": "Created",
          "code": 201,
          "responseTime": 2514,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "87492c7d-84f5-41a9-9fcd-4cdc8e0e448c",
        "cursor": {
          "ref": "6210412d-681b-4802-83bc-aeea7aab70d6",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "ac246bd9-c010-4522-8317-78b2d394c2cc"
        },
        "item": {
          "id": "87492c7d-84f5-41a9-9fcd-4cdc8e0e448c",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "1cc54222-5c90-40a3-b4b7-34a98128f8fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f45fe97-14ce-4c0a-89ee-17d5f7ee1140",
        "cursor": {
          "ref": "23e790d2-3b7b-4842-a811-dbc39fb40e2a",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "1c1900f0-c7da-458a-a785-2ff67307b9cc"
        },
        "item": {
          "id": "0f45fe97-14ce-4c0a-89ee-17d5f7ee1140",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "d557327e-78f0-4391-ad6d-a102cb97b4e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acd0ed88-673e-4a1b-be72-5faa170bbd23",
        "cursor": {
          "ref": "80f4ed6e-796f-4a81-8f30-693856c1c1cd",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "6ba9bc2c-6c45-4325-aabf-fe1886a80522"
        },
        "item": {
          "id": "acd0ed88-673e-4a1b-be72-5faa170bbd23",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "27e8b3dc-f1e7-41cc-babc-47e1170f5a74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a49fc7ac-d699-42c2-8298-45f83014194e",
        "cursor": {
          "ref": "5a2a7f63-73ec-46a5-aa63-77f00b67c263",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "46a6a8b3-179b-4485-98ce-5de0d7aeae21"
        },
        "item": {
          "id": "a49fc7ac-d699-42c2-8298-45f83014194e",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "7694502a-8660-4813-8642-d73c672671a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a988447-0112-48f9-803c-f8940919164d",
        "cursor": {
          "ref": "bf2ec049-4d36-4605-b195-e8753d62fa87",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "b5c50c8d-58d3-4db9-a103-1c36aa077162"
        },
        "item": {
          "id": "1a988447-0112-48f9-803c-f8940919164d",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "7519fc1e-0f02-429c-bef3-b5ac7b0444ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "015fcbe7-1f7b-44b5-b1bd-cdf7277607cd",
        "cursor": {
          "ref": "1379bb82-ac7e-495a-a11d-d391d7ae8bd7",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "b4f9e3b6-571b-4f95-835c-7ffafb3425eb"
        },
        "item": {
          "id": "015fcbe7-1f7b-44b5-b1bd-cdf7277607cd",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "4d632516-fdeb-41ed-9e09-cd00a2e55a84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df21ea55-7356-4c3d-8a02-18c497eab65e",
        "cursor": {
          "ref": "822ef6a0-d13b-4a51-985c-1042adf34ff9",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "a6ee4850-7ee9-402f-b47f-a1981cc2ad7c"
        },
        "item": {
          "id": "df21ea55-7356-4c3d-8a02-18c497eab65e",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "16541cc4-b172-4cc0-8efa-7747381492bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fcd643f-6a05-4ebb-af4d-5abbc7e960f4",
        "cursor": {
          "ref": "712bee99-8323-4a5a-821b-e8036e404c78",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "2de75581-ea1a-44e4-8402-82cbe7211f04"
        },
        "item": {
          "id": "9fcd643f-6a05-4ebb-af4d-5abbc7e960f4",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "c8ac519f-d679-4117-9c86-d5e02a8e1d46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fd0398b-3b91-488f-89ea-903fb7ac330a",
        "cursor": {
          "ref": "ad0d577b-d1f2-4853-87b7-52b2b09e73cf",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "c510cdcf-c918-400e-baf6-8345dabdd956"
        },
        "item": {
          "id": "5fd0398b-3b91-488f-89ea-903fb7ac330a",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "89344300-a7b7-436b-a5b4-7f5904bff6bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b40a17ac-6e01-4cdf-85da-0a84e94d9dce",
        "cursor": {
          "ref": "fe8cc003-61ef-4221-b778-66d99949b722",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "06e9701a-4b21-4040-a9f7-2abdf28b2a0e"
        },
        "item": {
          "id": "b40a17ac-6e01-4cdf-85da-0a84e94d9dce",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "5e27e655-6e79-4d56-9d38-533a565cc4f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "170fe27f-7bd6-46c0-b6e7-f82230f0bb49",
        "cursor": {
          "ref": "e9f79cd2-e66e-45d4-bcd4-375a1d4ad4c7",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "6294ac89-ad4b-40a1-95f3-d816d84aeb62"
        },
        "item": {
          "id": "170fe27f-7bd6-46c0-b6e7-f82230f0bb49",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "f2b51e72-a775-4ae2-87e1-8546111dc040",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2f24f44-a495-45bd-b7a7-0210088a249e",
        "cursor": {
          "ref": "c9a7047b-c0c2-4ad3-88bc-34179ee0ca6e",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "be4db3e9-09f3-4ee9-a099-580c21c01e31"
        },
        "item": {
          "id": "a2f24f44-a495-45bd-b7a7-0210088a249e",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "e75b6888-066a-4550-9f0a-e821970529ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 916,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e5ff8e0-67c7-4cf6-baa7-a43ff3e1eedf",
        "cursor": {
          "ref": "6dd917f6-cc79-451e-ac1e-e3a022e0bcc4",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "3f4f050f-a6cc-4d86-9996-39d047be5af6"
        },
        "item": {
          "id": "3e5ff8e0-67c7-4cf6-baa7-a43ff3e1eedf",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "28d33e76-f119-4c0a-8dcc-2f92940a31e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51b5d9f9-94d1-415b-825b-8b00d2e6c9a6",
        "cursor": {
          "ref": "b44af932-6ffd-46d1-9250-d05552ba5844",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "f6599172-e025-4dbd-aa77-f4c7fdb05b28"
        },
        "item": {
          "id": "51b5d9f9-94d1-415b-825b-8b00d2e6c9a6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "4d2c1032-1659-4b83-a874-fd71326645a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0346cf8a-ff77-44fb-b4ec-91d106f66113",
        "cursor": {
          "ref": "3cb0b421-8ad0-454e-b7cf-684128a4eef1",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "2790871f-ea81-45d6-b127-1d0574d5f3b6"
        },
        "item": {
          "id": "0346cf8a-ff77-44fb-b4ec-91d106f66113",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "f6cd6438-c950-4eb5-8805-74e039c3f229",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aadbadc-6df6-489c-89a1-6ccf238b2694",
        "cursor": {
          "ref": "08ce7674-50ee-4a9a-bc46-1f714b08880e",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "7589ba10-545d-4cb4-a944-0e9be9ebe7ad"
        },
        "item": {
          "id": "8aadbadc-6df6-489c-89a1-6ccf238b2694",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "77e1d731-ba21-4df8-a15d-5e433d006200",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3875dd96-9805-4bc2-b778-3044f753dd88",
        "cursor": {
          "ref": "164e27d4-a60f-4a0c-8aa2-9b6b701624ea",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "fb4b935b-99ab-4398-a751-a538d04edbd3"
        },
        "item": {
          "id": "3875dd96-9805-4bc2-b778-3044f753dd88",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "3902560d-ba1f-406d-bfd0-b2d8abf05e2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d62aac4-6193-46c2-bc8b-290817ae563f",
        "cursor": {
          "ref": "ba474eca-9513-47df-b3cf-4096a0015a86",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "c1a10daf-01a4-4f97-a1eb-b46eb7eadf62"
        },
        "item": {
          "id": "4d62aac4-6193-46c2-bc8b-290817ae563f",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "9eb022b4-2510-462c-8328-d608145ee42e",
          "status": "Created",
          "code": 201,
          "responseTime": 2380,
          "responseSize": 978
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "e9b619e0-c520-4c13-a721-986a8ed5c348",
        "cursor": {
          "ref": "d022274e-77f1-4838-9923-4aaeee3bd18c",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "35ae22a3-a58b-4bff-bbcf-f91b4d60c387"
        },
        "item": {
          "id": "e9b619e0-c520-4c13-a721-986a8ed5c348",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "0ccddec6-c3fe-4cda-90fb-8ed6a8a318fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34f3ab05-1a87-4f9c-8f26-c829a8745d1d",
        "cursor": {
          "ref": "9b017100-8a2e-4a67-a389-69bf0265aa07",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "6ead9ef5-e5ae-4c1b-89a3-47e4346bd0f5"
        },
        "item": {
          "id": "34f3ab05-1a87-4f9c-8f26-c829a8745d1d",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "46e7d2a4-0cdf-4221-86f0-5447a9779120",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8238376-cbdf-42fc-8828-10b71edb6d74",
        "cursor": {
          "ref": "eda56868-403b-4720-b8d7-96131a79dabe",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "7ff1989a-f154-43a8-9acb-546e8b5dc7c4"
        },
        "item": {
          "id": "d8238376-cbdf-42fc-8828-10b71edb6d74",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "59caff96-5b28-484b-ba6a-f15d8bb6b059",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ed9aa0f-33ef-4a2d-adaf-c793bac5ec20",
        "cursor": {
          "ref": "456805d0-2c17-4eb5-80bf-2846e22a9653",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "ce7d893a-f7f9-4c2a-ac09-6fc482b886f9"
        },
        "item": {
          "id": "8ed9aa0f-33ef-4a2d-adaf-c793bac5ec20",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "7e21879e-f762-466f-980e-5e0be511546a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 146,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cc4b847-a933-4d5e-a0f0-eda7599dd632",
        "cursor": {
          "ref": "9187312d-8026-4f57-84e0-94a644b91b1a",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "50136d33-c0b7-4f49-89c9-0b67356e0359"
        },
        "item": {
          "id": "9cc4b847-a933-4d5e-a0f0-eda7599dd632",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "5ff59e2c-f620-4e3e-9d0f-f1bcf9faa0bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cf52dbe-573c-4478-b3e6-6b4bb95b47ed",
        "cursor": {
          "ref": "29bcd213-d798-42eb-8aa7-6c74f932636f",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "decda556-5010-47d2-b414-a209e55f2528"
        },
        "item": {
          "id": "2cf52dbe-573c-4478-b3e6-6b4bb95b47ed",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "92c506d0-08e1-42d7-9c2c-031410d17a7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 127,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f22c3470-d3f6-459f-92d2-48a7e2502f2e",
        "cursor": {
          "ref": "2490e331-69f4-4711-970e-fb1b3f488da8",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "ddacd692-0b8d-4451-922f-2e92bd97e496"
        },
        "item": {
          "id": "f22c3470-d3f6-459f-92d2-48a7e2502f2e",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "5e39a753-6347-4d4b-bc13-c7ccd4faed49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d239eed-be3e-441a-b9a6-140b529fe051",
        "cursor": {
          "ref": "54f3b57f-1ab0-46ec-947d-1345f9c1595f",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "4d46e7b2-5c4f-4369-af6c-0d7f88dd31fb"
        },
        "item": {
          "id": "1d239eed-be3e-441a-b9a6-140b529fe051",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "55373116-c753-4755-b428-8e64f49361b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1575b519-5dd1-4f69-a709-a43ba66237ad",
        "cursor": {
          "ref": "e0b0faad-94fa-49c7-9dd2-38cd2ccb1133",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "1750e26e-dca5-4ffc-b75f-1d56e4942501"
        },
        "item": {
          "id": "1575b519-5dd1-4f69-a709-a43ba66237ad",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "eb139104-9282-4d65-aabc-289dffd3c205",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 668,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2c58eec-3e7b-4b9b-a254-522becd2feaf",
        "cursor": {
          "ref": "868a862f-b7ee-49fd-8616-eaf98021015c",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "7a13252d-3b1a-4af0-b926-9530ae20469a"
        },
        "item": {
          "id": "b2c58eec-3e7b-4b9b-a254-522becd2feaf",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "cc88b20f-09e8-4c60-84d8-4897276ba5b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d149de7e-7293-44ef-aea9-47e71882a75c",
        "cursor": {
          "ref": "b9addffe-c55d-4e30-bb94-a07d5197b984",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "b0fea344-6864-421f-a2ec-6774624482f8"
        },
        "item": {
          "id": "d149de7e-7293-44ef-aea9-47e71882a75c",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "1fa072eb-9d20-434c-a855-37081ab45a2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b4b40b5-f041-454d-aedc-37292fbfc1ca",
        "cursor": {
          "ref": "111928e8-d9a6-4664-bc00-fd664368af42",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "13a46a74-d75e-4b3f-aeef-58485c9ea4c7"
        },
        "item": {
          "id": "7b4b40b5-f041-454d-aedc-37292fbfc1ca",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "54e867a4-b3a7-4437-8936-c57009a512f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a357b726-69bf-4d21-aa26-fb8b131dd241",
        "cursor": {
          "ref": "64c7e9b3-ce06-4d05-90ae-8ec1cd496b30",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "c0371b35-f007-4986-b3bd-d24fa32c7558"
        },
        "item": {
          "id": "a357b726-69bf-4d21-aa26-fb8b131dd241",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "570df8ef-0d6b-4742-a887-7b86cbc3f6cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f6348a6-215b-4e8a-9400-2e2d2d83b701",
        "cursor": {
          "ref": "19ccfec5-f246-4489-8815-91efaf3f5bca",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "11f3e370-f03a-4d92-9d7e-aa26a177e0d3"
        },
        "item": {
          "id": "9f6348a6-215b-4e8a-9400-2e2d2d83b701",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "079414cd-8de6-4a92-890b-1e2edd5e9cc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3ff6986-4b93-4d5f-8b3f-fefa16074eaf",
        "cursor": {
          "ref": "3af79085-0908-466a-9358-ad41bdccc8af",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "5e05f37d-b164-4952-aa19-37cedf82b9ff"
        },
        "item": {
          "id": "b3ff6986-4b93-4d5f-8b3f-fefa16074eaf",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "4fbfc168-0c5e-46b9-aed4-4fa56dcd56da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1444f779-92cc-435c-8e88-f532cf6f5e1e",
        "cursor": {
          "ref": "8dd4406b-1fa8-4497-b6df-f4641879b550",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "e1824abf-2959-4569-88c8-71cce579a2e4"
        },
        "item": {
          "id": "1444f779-92cc-435c-8e88-f532cf6f5e1e",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "447dbc41-fa30-4212-96b9-3f859cc74bad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28a26075-6429-4dc2-95cd-5a4ae49b9d89",
        "cursor": {
          "ref": "5ec6fae0-70ef-4b25-9dce-95086c3792b6",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "38226c7c-ecd1-4439-985e-74508c78d5e9"
        },
        "item": {
          "id": "28a26075-6429-4dc2-95cd-5a4ae49b9d89",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "e6987c54-ff20-492b-af9e-2508309bc88d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45d2d4f9-33af-4602-b16a-9d0f13020502",
        "cursor": {
          "ref": "5915605a-29d6-4ce2-a9c3-3cdbb1bc77ac",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "337a01f8-87ca-4756-a65d-c9a4486b1eb5"
        },
        "item": {
          "id": "45d2d4f9-33af-4602-b16a-9d0f13020502",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "e623c6c4-f77b-4c36-95f3-7dc0f85b0c4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c91273c-3034-4311-b84a-20e45371bfb9",
        "cursor": {
          "ref": "40f54679-c5f1-4934-8296-f705625e8754",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "ea31ca95-17b7-49e7-b8ef-9be7a6a70a9a"
        },
        "item": {
          "id": "8c91273c-3034-4311-b84a-20e45371bfb9",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "9594cb20-38ba-4097-9089-edcaa88cd283",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a71de12d-c3cb-4120-91f3-7319b23199dd",
        "cursor": {
          "ref": "7dc6ff05-ea5b-4485-8729-d28e89beba1a",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "55028e9e-ebc7-442a-aa63-608e979a2f06"
        },
        "item": {
          "id": "a71de12d-c3cb-4120-91f3-7319b23199dd",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "63fde64a-989b-4a1e-b7ec-6a2785d08a14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5a801f3-2908-409f-840d-d4cad5fa963c",
        "cursor": {
          "ref": "15377d76-938e-4a74-9e00-9ce012774c37",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "a7c286b5-c1fc-44e9-bd85-df5ac308754a"
        },
        "item": {
          "id": "b5a801f3-2908-409f-840d-d4cad5fa963c",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "9f071553-e8e7-4c4b-a1f5-490de75c23f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7310894-f33e-475b-bf31-20b32bb023f6",
        "cursor": {
          "ref": "f1a68a27-b849-4484-b083-d58a77a79bb8",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "627ded4c-dc5e-49b6-9249-8a3b48e6a34d"
        },
        "item": {
          "id": "a7310894-f33e-475b-bf31-20b32bb023f6",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "69cba341-05a0-441f-a7ad-8f4ba1aea1a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "620941b7-f921-42e4-9a65-6483de295a13",
        "cursor": {
          "ref": "51da156e-5512-432c-b723-5995dbfc9532",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "d784ccff-f720-46c8-977e-7666cabbc004"
        },
        "item": {
          "id": "620941b7-f921-42e4-9a65-6483de295a13",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "a4ab46a7-1c28-49f2-9461-4ca44c175c98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1392b977-2173-435f-afc5-166d53cb97bf",
        "cursor": {
          "ref": "7aa60935-1e42-4be1-af4a-6501a2d684f1",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "dc94bd3e-44e9-463c-bb94-d8ea8fb0f588"
        },
        "item": {
          "id": "1392b977-2173-435f-afc5-166d53cb97bf",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "f275ce55-4069-4790-b52c-391e0b9365ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bba2a760-e6ee-48fa-8fb7-5fe3e0b9e3cc",
        "cursor": {
          "ref": "9421ab3d-f022-442c-b3bb-8460b996d1bb",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "25b5c62c-36fb-4e3a-8da7-7f4706d4fcc7"
        },
        "item": {
          "id": "bba2a760-e6ee-48fa-8fb7-5fe3e0b9e3cc",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "c10252a5-e079-4458-8162-9bbc8069b68f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63d4c6e7-09e4-4cb6-a06c-6d52a2e128d0",
        "cursor": {
          "ref": "e4230f67-710c-4c46-a1a7-1e17504553ee",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "512ad5ba-c17c-4757-9fcc-fdfbf6bc1bd2"
        },
        "item": {
          "id": "63d4c6e7-09e4-4cb6-a06c-6d52a2e128d0",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "af5b1909-1749-48e0-8345-e202e5a89f61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65ffd494-af5c-46b1-b4bd-3035eac66825",
        "cursor": {
          "ref": "9232647d-da9f-431f-825b-90080cb992c6",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "e9b34db5-1336-4700-a3b8-5f1c583c0638"
        },
        "item": {
          "id": "65ffd494-af5c-46b1-b4bd-3035eac66825",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "4c9b1c49-5acc-4a91-995d-59f59a23e030",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8446000-2b0d-4372-b42e-9f3aaab503d5",
        "cursor": {
          "ref": "28a58797-b456-421a-9503-0f04b7299dd5",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "b2ad354c-ab4c-4824-b286-d986fc83d807"
        },
        "item": {
          "id": "f8446000-2b0d-4372-b42e-9f3aaab503d5",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "dff1907d-8a77-4275-89d7-922db5b3f7de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e73ab5a7-366e-425b-8c0d-40f1b65c0b43",
        "cursor": {
          "ref": "74ad7998-d1a9-4ea1-9011-7cf45926a659",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "55396145-c17c-42dc-9518-8cf6eb0c6683"
        },
        "item": {
          "id": "e73ab5a7-366e-425b-8c0d-40f1b65c0b43",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "b4d04e10-089d-4231-959c-63db779adc51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce6ae515-e185-4b72-b43c-8cfd93480039",
        "cursor": {
          "ref": "0fc13b06-6b43-4b84-b83b-805a9e92b4db",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "ab62bd58-61da-43ce-b604-98c9580a281f"
        },
        "item": {
          "id": "ce6ae515-e185-4b72-b43c-8cfd93480039",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "da4b4fc7-c697-4501-b74e-02b7f115f147",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64db659d-48c1-4705-8ad5-a2bc0fb5b8aa",
        "cursor": {
          "ref": "c02654a0-3207-48e6-8b8f-f93acf9f78aa",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "b1cee4c9-71ee-4a09-be25-fd7f4303cb15"
        },
        "item": {
          "id": "64db659d-48c1-4705-8ad5-a2bc0fb5b8aa",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "793566f7-fb4d-4eb4-ab4e-d7af176fa607",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "c37ad4ad-5804-4e2d-87ca-856fb488321b",
        "cursor": {
          "ref": "e5ede118-4e88-45cc-b3e6-0ae5ff1514d6",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "a3a71003-d2b5-4843-9f5d-bbe2a3bb8b04"
        },
        "item": {
          "id": "c37ad4ad-5804-4e2d-87ca-856fb488321b",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "0d8fe5ce-c806-46c2-b85c-e54bca6c363a",
          "status": "Created",
          "code": 201,
          "responseTime": 2559,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "efd1d0a3-824f-4bd6-bff1-17dc3b12142c",
        "cursor": {
          "ref": "d5cc828f-3577-4de1-a900-c379fbc238f7",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "8d65ed83-d3e4-401e-b946-e113d4987cf9"
        },
        "item": {
          "id": "efd1d0a3-824f-4bd6-bff1-17dc3b12142c",
          "name": "credentials_issue"
        },
        "response": {
          "id": "11d98d88-f14e-4b4d-8d48-ed61579f7538",
          "status": "Created",
          "code": 201,
          "responseTime": 2310,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "05c4bb88-9d72-4865-9a9d-071438e3704d",
        "cursor": {
          "ref": "8e58185b-6156-4ca6-a89c-fb2dabe7656b",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "e4c219f5-c5dd-4e35-87e0-20b3fd0e0f75"
        },
        "item": {
          "id": "05c4bb88-9d72-4865-9a9d-071438e3704d",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "bda479bc-1995-4802-a417-71fdc15a6267",
          "status": "Created",
          "code": 201,
          "responseTime": 2350,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ca63b95-aaae-440f-b9fa-8c3ae0d819a8",
        "cursor": {
          "ref": "99bc8669-5c4d-44e5-90bb-cb940c05781f",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "85dc0e3b-adba-4473-beea-c8db26ab8c50"
        },
        "item": {
          "id": "7ca63b95-aaae-440f-b9fa-8c3ae0d819a8",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "6212cc20-afde-460b-b526-8900d366bfdd",
          "status": "Created",
          "code": 201,
          "responseTime": 4722,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecc2faac-69d5-4571-9162-623718ef3f54",
        "cursor": {
          "ref": "468340c9-9f05-4d7a-87b4-c2262734fdb7",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "bbabec82-b7ed-4da9-8e10-d2d0db558a86"
        },
        "item": {
          "id": "ecc2faac-69d5-4571-9162-623718ef3f54",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "54603165-2282-4eab-9878-be05c6f4aae8",
          "status": "Created",
          "code": 201,
          "responseTime": 2832,
          "responseSize": 993
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "17b2c575-c853-4b9b-a77b-4235bfabf641",
        "cursor": {
          "ref": "b9af7b40-a56a-4005-8805-fa9a7f4c7f7a",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "57122956-2d02-47ca-a2c8-4b524b646fd0"
        },
        "item": {
          "id": "17b2c575-c853-4b9b-a77b-4235bfabf641",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "c6496eff-4754-4483-a9a6-3705948a54b1",
          "status": "Created",
          "code": 201,
          "responseTime": 2418,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-04-08T00:35:21Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-04-08T00:35:21Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "7c717c34-b194-4e6c-9ede-dcb3960f9a0a",
        "cursor": {
          "ref": "bf0a9429-6c34-4adf-815a-4d2b1f333868",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "5beffbc1-e73f-4387-a18d-c8d5857174d2"
        },
        "item": {
          "id": "7c717c34-b194-4e6c-9ede-dcb3960f9a0a",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "30a1cdc6-5e5d-408e-ad1f-0fe90c34304c",
          "status": "Created",
          "code": 201,
          "responseTime": 2324,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adcd303f-b292-483e-9f10-9483b186f575",
        "cursor": {
          "ref": "7bff7390-d34e-4369-9714-74225f66ddff",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "19b6ba49-28ac-42d1-ad32-d413f6deb645"
        },
        "item": {
          "id": "adcd303f-b292-483e-9f10-9483b186f575",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "e7cf7dfc-173c-4baa-84f7-474c2cdf178e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 124,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adcd303f-b292-483e-9f10-9483b186f575",
        "cursor": {
          "ref": "7bff7390-d34e-4369-9714-74225f66ddff",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "19b6ba49-28ac-42d1-ad32-d413f6deb645"
        },
        "item": {
          "id": "adcd303f-b292-483e-9f10-9483b186f575",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "e7cf7dfc-173c-4baa-84f7-474c2cdf178e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 124,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82ebc130-df83-4b7a-8b5d-066ffe06b874",
        "cursor": {
          "ref": "a16cd427-59c1-4143-84ff-f5dd348a680a",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "2e999a4b-19c0-4a7a-813f-6b910b453029"
        },
        "item": {
          "id": "82ebc130-df83-4b7a-8b5d-066ffe06b874",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "1c6c2c4f-2231-4302-bea1-5ed6ab545b71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45a8fba0-8dec-4610-b28e-1f7d03338215",
        "cursor": {
          "ref": "c7e37218-9e4b-46e4-8d4e-89eb75345066",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "be7c9950-de19-4c8d-937f-96165719ca0e"
        },
        "item": {
          "id": "45a8fba0-8dec-4610-b28e-1f7d03338215",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "1ce7fcba-592d-409d-80c8-d58766682035",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24344867-7af1-4ecd-89f7-43b4585a7a9e",
        "cursor": {
          "ref": "9219b4f7-fa50-439a-97d9-ecb5530cf6b6",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "384d1c7c-c875-4f3a-b772-6673804b35c4"
        },
        "item": {
          "id": "24344867-7af1-4ecd-89f7-43b4585a7a9e",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "e214f9d3-42d4-469f-b889-93deccb0e11c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db116393-98d2-4d8c-abbe-a890df8c7007",
        "cursor": {
          "ref": "eef708fe-a2a7-4bf6-b292-1dada7b6e171",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "4a5fc94a-0d5e-4286-93de-fbe54e58e513"
        },
        "item": {
          "id": "db116393-98d2-4d8c-abbe-a890df8c7007",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "264c528b-235b-42cd-ae04-4bdf3f92d1b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b6e63a5-38b4-444d-9a94-5d47687ff738",
        "cursor": {
          "ref": "4aa58913-7f5f-4cad-84cb-423b66bc4412",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "e0f082f0-59b8-4c46-b4bf-aa89e6583a07"
        },
        "item": {
          "id": "0b6e63a5-38b4-444d-9a94-5d47687ff738",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "a75c4e08-6745-4406-b69b-bae2943c5fd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be622388-eac8-447c-9084-839a191d1b1c",
        "cursor": {
          "ref": "d2cae948-fff5-417c-b712-2f2fe52405c1",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "327fa613-8125-4b6e-a0b7-63fd826a1b84"
        },
        "item": {
          "id": "be622388-eac8-447c-9084-839a191d1b1c",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "dccbd07d-2c22-4a23-828e-2242a0ce47a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b4e085c-5164-4741-b5c6-1b32f9538e47",
        "cursor": {
          "ref": "dc8634cf-f40e-4a78-9a71-d426f010adc2",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "782806ea-a814-4db7-98a6-b14d05c70897"
        },
        "item": {
          "id": "4b4e085c-5164-4741-b5c6-1b32f9538e47",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "ec1c72b2-6983-4f5f-a4f5-5d251e5844e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03339b7c-c2f9-4484-be8c-d0b6c9861667",
        "cursor": {
          "ref": "e6d37e68-cec3-4c5e-afab-c500d638ffc2",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "c02c19a8-1c96-451b-9a40-286e5e4593ee"
        },
        "item": {
          "id": "03339b7c-c2f9-4484-be8c-d0b6c9861667",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "8c863f8e-30c7-4660-84b2-dddcf581a9dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3552fdae-46a8-49b0-b671-a03d1553ea8c",
        "cursor": {
          "ref": "9d371514-6d87-4a94-a4f3-038b4243b6ed",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "c2e9f91d-5c8b-42e5-b7e7-54ed770c5257"
        },
        "item": {
          "id": "3552fdae-46a8-49b0-b671-a03d1553ea8c",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "a315a716-0274-4289-9727-fa5a4481bc38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88d9c414-a2e8-4a46-a60b-11d028cd1001",
        "cursor": {
          "ref": "b4d69d01-9b5f-4294-8026-ea50df59c007",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "1581eee0-d283-4c76-9abf-1717164d247b"
        },
        "item": {
          "id": "88d9c414-a2e8-4a46-a60b-11d028cd1001",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "14835da6-93bd-4ca7-915f-bdff739798c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f962a092-2a26-45eb-b9f5-88b599cf78c5",
        "cursor": {
          "ref": "51f24f9a-974c-40b8-a3ef-2d97d870990c",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "58be5e0f-ccf3-46e6-ba9e-24e6ddcc6719"
        },
        "item": {
          "id": "f962a092-2a26-45eb-b9f5-88b599cf78c5",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "142f6671-597d-4f3f-bea8-a11ec0d7d251",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ab2829d-f7d6-4f2f-838a-5c966e7d8021",
        "cursor": {
          "ref": "fa4155c2-72c0-4d09-843c-eb91fad45d79",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "32c1ebd8-ab57-4f4f-8a37-a7770ff7ed96"
        },
        "item": {
          "id": "8ab2829d-f7d6-4f2f-838a-5c966e7d8021",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "2f491924-e0ac-4627-83f8-1f851a81ccf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1baaacff-0e9c-4e79-a3fb-46671b8b1a9c",
        "cursor": {
          "ref": "f3606345-4e83-4952-98cb-b51d3ee28a33",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "5525abed-f920-48ff-b1cd-85fa57bcf452"
        },
        "item": {
          "id": "1baaacff-0e9c-4e79-a3fb-46671b8b1a9c",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "fe8f3f40-83fc-45ee-b93e-039372147bb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11e1d42e-f30a-4ec5-b614-74979fe84767",
        "cursor": {
          "ref": "1d0b8e98-6585-48ab-9c72-3f55fd52de02",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "341d74eb-9d87-415e-9738-72f2cf40fe4f"
        },
        "item": {
          "id": "11e1d42e-f30a-4ec5-b614-74979fe84767",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "f8a1c2c4-fb2c-401a-b0c9-ae287fe5305c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "862232c5-2159-40e1-b8c9-8dd299f060e6",
        "cursor": {
          "ref": "44b3f58b-651d-4bd2-9afe-91c66a19666c",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "97d0e75f-8f2c-4dae-aadc-6837f272b535"
        },
        "item": {
          "id": "862232c5-2159-40e1-b8c9-8dd299f060e6",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "8b5341dc-8d29-4fb7-896c-66d221fbc3a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c004cd26-1733-49bb-8f57-c45ff23492e1",
        "cursor": {
          "ref": "1cda4928-280f-4b41-9e6c-67c98468af29",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "0f024fd8-6ed4-4fc8-a4ad-686299f58159"
        },
        "item": {
          "id": "c004cd26-1733-49bb-8f57-c45ff23492e1",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "093cb5c3-e6cb-4d31-b9d0-1ff9d787da9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8847943-f4fe-49ea-9b03-0793cbc59fda",
        "cursor": {
          "ref": "06bb9ef8-cd08-42e1-a8a2-41895661bdcb",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "a46b5265-6635-410d-8e2f-e6b5fece53bf"
        },
        "item": {
          "id": "c8847943-f4fe-49ea-9b03-0793cbc59fda",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "90cd9d18-3a3b-4d1e-9e06-f79cfcd1fc29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaf41dd8-5706-4de8-af0d-e9d3635f1755",
        "cursor": {
          "ref": "00830d94-398e-4d4b-b87f-85b0b435a340",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "36fbf800-fb06-4d65-8628-55de4000ec84"
        },
        "item": {
          "id": "aaf41dd8-5706-4de8-af0d-e9d3635f1755",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "0dc90c3d-2bb2-4fea-8062-41fd3a515b34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b6839de-b011-4d1a-980c-c674fb9ba5ab",
        "cursor": {
          "ref": "1b50a2fc-5880-4e60-979f-bef17b7e1c49",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "e3303d33-c0ab-42d8-9669-63e0a4f9a9af"
        },
        "item": {
          "id": "4b6839de-b011-4d1a-980c-c674fb9ba5ab",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "17e67dec-0c36-4635-abb2-d2942eba38c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c500249b-b190-492e-a8d7-6c7e62ddc813",
        "cursor": {
          "ref": "b5f9faea-ca59-460f-bfbd-6c4615025de9",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "a71672fc-e5d6-404a-8f98-3d263c6ecb4b"
        },
        "item": {
          "id": "c500249b-b190-492e-a8d7-6c7e62ddc813",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "005f161b-e957-4bcf-a7f5-8ee32fe68774",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0e13e9a-ffea-4a48-b34f-adaa1df366a0",
        "cursor": {
          "ref": "f3ecc5aa-2baa-4c25-b1b4-1e5fff6e984a",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "444eef07-dc78-443f-b9d9-048b2cdbf2c9"
        },
        "item": {
          "id": "c0e13e9a-ffea-4a48-b34f-adaa1df366a0",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "971d4c7b-b45e-49f4-b61a-7c68faf8984a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f321949-d50d-4318-8dbb-7c0464d50ab3",
        "cursor": {
          "ref": "d359208d-54f7-4d5c-8518-728f4878d9ca",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "b40e099e-2b6e-40d2-818f-c929904182ff"
        },
        "item": {
          "id": "5f321949-d50d-4318-8dbb-7c0464d50ab3",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "60f374e3-9c3b-4a88-89c3-ff9fe0534ca2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "260e28c0-7986-4df2-9a5c-572bea7b457f",
        "cursor": {
          "ref": "d2135128-e610-4296-b33c-48eee0992d45",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "71fb0e4d-0299-45b0-b8ad-016904047e3f"
        },
        "item": {
          "id": "260e28c0-7986-4df2-9a5c-572bea7b457f",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "329372a1-de8c-4991-b1a7-2ec51c6a1b3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8669f03-fc55-4614-b538-45396659514b",
        "cursor": {
          "ref": "a0159962-cd21-485b-8492-0d3b3a728ee4",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "c736a4ee-afd2-4e54-a737-f48b7517c4e5"
        },
        "item": {
          "id": "a8669f03-fc55-4614-b538-45396659514b",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "76b39190-cbea-491e-981c-83760c146914",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff96d5fd-3feb-440f-8b5e-199ec86e889f",
        "cursor": {
          "ref": "ca61f8d1-0727-4957-a8e7-f3fb998bd973",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "583d8228-f8b3-4f4d-8051-e1407d1e557a"
        },
        "item": {
          "id": "ff96d5fd-3feb-440f-8b5e-199ec86e889f",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "02ec3282-b9db-4654-a229-147a735866ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee51b739-8302-4823-9926-48a9012403bc",
        "cursor": {
          "ref": "dff5424e-0b38-43b4-88fd-bac3d67d0c84",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "a464074b-ff51-4f79-8814-30f02679582e"
        },
        "item": {
          "id": "ee51b739-8302-4823-9926-48a9012403bc",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "14451927-72f3-462c-b16f-f69d4e1e8c1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b42fbb3-44ea-4a1c-adff-74bb38328611",
        "cursor": {
          "ref": "ede180b4-7083-4a59-8070-af85bec15c56",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "cf046a08-99bc-46c1-a8a7-4576a2a62a28"
        },
        "item": {
          "id": "3b42fbb3-44ea-4a1c-adff-74bb38328611",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "0536db74-766a-4d2d-8935-3490199892ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa6706da-c357-4f69-bdaf-e7e04c8a3a1b",
        "cursor": {
          "ref": "dfca6eb5-6688-4e0b-b704-780a459a8de9",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "103f8901-f513-4d48-858e-5713a69c0593"
        },
        "item": {
          "id": "fa6706da-c357-4f69-bdaf-e7e04c8a3a1b",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "95a9f9f9-a424-4312-970e-f7a845e33753",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49059fb0-61be-4b3c-9535-03293daf4186",
        "cursor": {
          "ref": "dae44fc1-7303-47a9-8f7e-2384f745e316",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "1cb9def6-caf8-4b38-b003-e18cf646f1d0"
        },
        "item": {
          "id": "49059fb0-61be-4b3c-9535-03293daf4186",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "85e1427a-a50e-4dac-b77e-7ae81ac2bba8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b627995-a085-4995-a6ee-da942f1a12d7",
        "cursor": {
          "ref": "99b6b4a7-3338-486e-a5b4-7113ff3783ba",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "b28b8734-4252-450c-822d-855e6fcf99dd"
        },
        "item": {
          "id": "4b627995-a085-4995-a6ee-da942f1a12d7",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "38bd44e5-7003-4eac-80c8-c6af51d05d99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "311a6dd9-3007-4390-8fea-4882591c540b",
        "cursor": {
          "ref": "6d7a6705-7d2c-4b20-9ad9-34ba9854fc97",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "b9dbb0bb-87aa-4bc5-8c8e-0230ec4f8a87"
        },
        "item": {
          "id": "311a6dd9-3007-4390-8fea-4882591c540b",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "ddf22c61-1bbd-4a79-8d69-dad44ec2a6fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8180bebe-2596-46f2-8c52-7af807bc03d2",
        "cursor": {
          "ref": "09799b9f-6e75-40e4-855b-d9a73a5ebdfb",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "e31f2f54-8f5f-444d-b142-b4efc14952c6"
        },
        "item": {
          "id": "8180bebe-2596-46f2-8c52-7af807bc03d2",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "9686c911-a069-41a1-a806-1ed7cdb418d9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "4511b265-d504-4b8a-b2ea-03b8fd45684f",
        "cursor": {
          "ref": "615119f7-182b-48e9-978c-18d5a772f9cf",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "51152a10-a109-4a85-971f-1d9b057074ce"
        },
        "item": {
          "id": "4511b265-d504-4b8a-b2ea-03b8fd45684f",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "55a8c4f5-c24c-47bf-97a2-1ca41a9df670",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "0d05859a-9f47-460b-a700-e619beed02c1",
        "cursor": {
          "ref": "0b1502ea-259c-4e20-a8d7-c9c23e6d184d",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "a244b993-e665-46d7-b353-882c56e210bb"
        },
        "item": {
          "id": "0d05859a-9f47-460b-a700-e619beed02c1",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "c4529b77-062b-409e-8454-046c675cf981",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d05859a-9f47-460b-a700-e619beed02c1",
        "cursor": {
          "ref": "0b1502ea-259c-4e20-a8d7-c9c23e6d184d",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "a244b993-e665-46d7-b353-882c56e210bb"
        },
        "item": {
          "id": "0d05859a-9f47-460b-a700-e619beed02c1",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "c4529b77-062b-409e-8454-046c675cf981",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf1f7d0a-db91-4234-949f-cc478d7fdb49",
        "cursor": {
          "ref": "69b301f6-e7bd-4bc3-b693-999f8c8f8de6",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "f947f4c5-949c-4a6f-9fcc-163cf1b70b99"
        },
        "item": {
          "id": "bf1f7d0a-db91-4234-949f-cc478d7fdb49",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "647bc48d-35b6-4824-954c-4f1a98ca8891",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c1e7324-b996-4f6b-b63d-60fa26b2c5c8",
        "cursor": {
          "ref": "f74b6261-e679-4c0d-bace-0a42e6ed6ae7",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "ecc0c61e-e159-45dd-b171-9dac6e3bbaa7"
        },
        "item": {
          "id": "3c1e7324-b996-4f6b-b63d-60fa26b2c5c8",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "9476fcb1-388a-49af-811e-0420dd2939f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aacd9a7f-0ab6-488c-b09d-e91fcff49332",
        "cursor": {
          "ref": "092cd02e-42df-461d-b0a7-1b7c70616106",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "c17de28e-0243-4827-bd17-1933e96e437b"
        },
        "item": {
          "id": "aacd9a7f-0ab6-488c-b09d-e91fcff49332",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "e57c74e7-f675-422f-b170-c90560180c70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c508e9db-e97d-4c35-bdd0-5b0c3a9263fd",
        "cursor": {
          "ref": "04a6520d-c12f-4abb-beb9-2adef649a1fb",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "9be798dd-d6ea-457d-976f-5472e01cb1ee"
        },
        "item": {
          "id": "c508e9db-e97d-4c35-bdd0-5b0c3a9263fd",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "9f57ebf4-8b9b-4638-adcd-b5217e77a614",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "923a16c2-6ea0-45dc-9d82-2821467c1aac",
        "cursor": {
          "ref": "c9c16810-6ca5-4be0-a36a-8638b301df55",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "ed38c3d0-9363-4cca-834a-ac3f091e36f5"
        },
        "item": {
          "id": "923a16c2-6ea0-45dc-9d82-2821467c1aac",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "79984b09-ec82-4b60-8c5b-5756a6d2137b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4ece1b1-e23f-484b-98fc-3cefbba74d5c",
        "cursor": {
          "ref": "170ea21d-8b1c-48d1-b804-6a957b7ede52",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "6d261204-259b-4842-a0eb-a3026ea69627"
        },
        "item": {
          "id": "c4ece1b1-e23f-484b-98fc-3cefbba74d5c",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "1bb50651-fe67-435e-94e3-3be1c362a0bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4f13647-0709-46b5-9f5d-8217a2a78092",
        "cursor": {
          "ref": "94af0f7f-0c3e-4138-97b0-d2a30ff5c92a",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "322f371a-2b9a-484f-997a-230e235a411a"
        },
        "item": {
          "id": "c4f13647-0709-46b5-9f5d-8217a2a78092",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "a659e600-4bdb-41cd-8150-65ca0a2521be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c5651b0-808b-4067-b3c5-a85c8116c8c1",
        "cursor": {
          "ref": "0b42f1d1-9c76-4813-a176-e3ae8039ad7e",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "1223d533-ed6f-43aa-8207-b15a560fc4fc"
        },
        "item": {
          "id": "6c5651b0-808b-4067-b3c5-a85c8116c8c1",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "6ad5f141-5187-41f6-9d83-1468fd02bc0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac5a7c35-9bbb-41d2-b3cb-7cce03b69c5f",
        "cursor": {
          "ref": "4002b541-6af7-4115-bcb4-60ff9a92c357",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "c2255b78-e80d-4740-ada1-22cf96f20b79"
        },
        "item": {
          "id": "ac5a7c35-9bbb-41d2-b3cb-7cce03b69c5f",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "449a951f-7a57-473d-add5-fadfa5e9be78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15e4d90c-d4b0-4751-9e91-8a52698ad9b1",
        "cursor": {
          "ref": "5cfc2af1-b812-407b-9fa6-69fadc017ca6",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "f1917e5e-3b02-452d-8a97-47f6224738d8"
        },
        "item": {
          "id": "15e4d90c-d4b0-4751-9e91-8a52698ad9b1",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "0bb239b2-d115-4913-a962-2fff991ce5ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dca935c-3e36-4bcc-8be8-4a963150677c",
        "cursor": {
          "ref": "b28e91f4-387b-48dc-889b-c60b67e61e39",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "432a019d-8d5d-4cf4-8fb4-31642a254a8c"
        },
        "item": {
          "id": "1dca935c-3e36-4bcc-8be8-4a963150677c",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "0473ba8e-4ac1-4bcc-8da0-528886a84e33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb924515-8785-4cbb-a297-9a26f170e807",
        "cursor": {
          "ref": "6602d782-5031-498c-8866-dbf0d9dc87e9",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "910e0c42-8765-413a-9e69-65d0c1aa2bb5"
        },
        "item": {
          "id": "fb924515-8785-4cbb-a297-9a26f170e807",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "16072049-4922-4435-bf10-ad1d809f7421",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f3a84ea-02bf-47a7-b796-f202d70aa9d8",
        "cursor": {
          "ref": "09947916-9bc5-45cb-b0b2-0a7341eba361",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "1d311ddb-7258-4908-9ab2-182135d96a20"
        },
        "item": {
          "id": "4f3a84ea-02bf-47a7-b796-f202d70aa9d8",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "aafe9af3-c85e-40d1-ae70-a7895099ca22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d60790c-66af-417f-93cd-0fd0a8a77d9e",
        "cursor": {
          "ref": "2fc48c17-22e2-4743-8ba2-7f71256ac900",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "10da7d90-ca44-4c18-ae4d-8a2698f099f4"
        },
        "item": {
          "id": "9d60790c-66af-417f-93cd-0fd0a8a77d9e",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "97a6e6a5-5b5b-4b33-ab95-3f642d37950f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "888f0406-e707-4b1f-b295-c2b5bd4afba7",
        "cursor": {
          "ref": "6f5c4c28-b0b4-4416-bce8-a785fd8c9ea0",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "6cde6bb4-6b98-47ab-8ae6-bc83204e6302"
        },
        "item": {
          "id": "888f0406-e707-4b1f-b295-c2b5bd4afba7",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "fb437878-06a8-4a7d-9ce7-9af67022c8a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54acd6e8-8aa1-4b94-b988-689899f915e4",
        "cursor": {
          "ref": "4c585618-8d89-44c8-a501-a9a485e1b241",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "a712346f-9385-4659-9766-017a957fb2a8"
        },
        "item": {
          "id": "54acd6e8-8aa1-4b94-b988-689899f915e4",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "18b3463f-d156-4d46-8611-5d1f811b3087",
          "status": "OK",
          "code": 200,
          "responseTime": 456,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "bbc88a59-771b-44ef-ba9d-1a638924b70e",
        "cursor": {
          "ref": "323e5d11-6027-4786-8ceb-e86520814435",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "0df63613-5a05-4334-bb03-b554b2f9f1a3"
        },
        "item": {
          "id": "bbc88a59-771b-44ef-ba9d-1a638924b70e",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "7c82008a-4877-4440-af80-08371731f7ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "385a74c1-2842-4a8e-9e61-7eb0127f0144",
        "cursor": {
          "ref": "e3a474cd-74c1-432c-85c9-20f34f30f0f3",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "a2290099-9c69-4a33-86fd-7be3d553406e"
        },
        "item": {
          "id": "385a74c1-2842-4a8e-9e61-7eb0127f0144",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "82b1e6b0-bf8a-4668-8b37-972fd542c27b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d59c747-fc45-485f-8410-d17342c33d5c",
        "cursor": {
          "ref": "e92fe05b-f0b5-41b3-bae8-78bd8739f02b",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "5ba38168-1707-4db3-bc82-aa10e6579900"
        },
        "item": {
          "id": "4d59c747-fc45-485f-8410-d17342c33d5c",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "954ccb6f-9987-4286-bb80-b98d79ff606e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "049f36c7-b12d-4ae3-b82f-7392edd4f761",
        "cursor": {
          "ref": "60bd228d-58b2-431a-8594-35b4b65e5e7d",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "4f6a3aa9-7cd8-40c9-ab83-896bdbcfca01"
        },
        "item": {
          "id": "049f36c7-b12d-4ae3-b82f-7392edd4f761",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "9df75ad4-c8c2-49a7-bd0d-03877a4305ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66e65312-aae1-41cf-9dd5-8bdcede2c945",
        "cursor": {
          "ref": "60cd36b2-7a24-4c25-97c9-2b128aa7880d",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "057fd4cc-1e1b-4b7e-9ecb-df9216066c5e"
        },
        "item": {
          "id": "66e65312-aae1-41cf-9dd5-8bdcede2c945",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "04b57671-c470-4d51-a73d-c8bec680d130",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2a7fcb9-0b27-4be0-8054-c6abc173bab5",
        "cursor": {
          "ref": "546b5198-155a-465a-acc8-1fe0f616a9a9",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "916a4f4e-3dff-4a69-9044-ced68c0f58d8"
        },
        "item": {
          "id": "b2a7fcb9-0b27-4be0-8054-c6abc173bab5",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "b286e8c1-66be-469a-8968-1ae7466e046b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43fd3fc7-5bfe-4c71-859c-3d45f25e9840",
        "cursor": {
          "ref": "e087cb65-ad1e-4cb9-9046-a3c57cf0adfa",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "07f9c424-da82-4573-a3d7-dc8a31eb5ab3"
        },
        "item": {
          "id": "43fd3fc7-5bfe-4c71-859c-3d45f25e9840",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "ac846ff3-c3a2-41ec-97cb-ac0a065a3605",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c9a8bd7-2b28-4396-9744-b297e9ad636a",
        "cursor": {
          "ref": "7890a5d8-a8c1-471b-9939-7af2f39def86",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "836017fc-876f-4af2-9be0-da6ced326d99"
        },
        "item": {
          "id": "2c9a8bd7-2b28-4396-9744-b297e9ad636a",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "9886a672-3b28-4a08-8a78-bba31a4ee50a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e092d8fd-e370-4aa3-a0d9-f2b82776d298",
        "cursor": {
          "ref": "cb90948b-a73b-4418-a661-27e6a19ccb4d",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "4a3b217f-03da-4f6b-acd2-1ef8fd4d85c9"
        },
        "item": {
          "id": "e092d8fd-e370-4aa3-a0d9-f2b82776d298",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "de8f2b8c-60cf-46f5-a572-243cb92c6710",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26b500c9-9ac0-479d-8878-16f305409e1d",
        "cursor": {
          "ref": "dd4018ab-52ba-469d-b01c-19f8f19c81ee",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "556eb88e-8dce-4d1d-8e99-e15e9a137638"
        },
        "item": {
          "id": "26b500c9-9ac0-479d-8878-16f305409e1d",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "7a363cc3-f1e6-435b-ae26-cee99baa04d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4783f9a9-4ba8-48f7-903c-fd27cac73035",
        "cursor": {
          "ref": "a88b52f2-c3bc-44fe-b72c-87fdcbf720bc",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "6493ceff-4098-4b5f-9395-28d6a11a1183"
        },
        "item": {
          "id": "4783f9a9-4ba8-48f7-903c-fd27cac73035",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "5cf76806-fe0d-4832-a073-2e4d7035ff7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17dce54c-a7e8-499b-8ec1-0cbdbca9aeb6",
        "cursor": {
          "ref": "6c479d16-5b97-43d8-8065-5d21ead43bee",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "5e4ed575-0778-4af1-8a8e-2488875ec083"
        },
        "item": {
          "id": "17dce54c-a7e8-499b-8ec1-0cbdbca9aeb6",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "537a6806-99ca-4090-9c23-565ce4b51bcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96946cc8-59f0-459a-8470-02c916eb784f",
        "cursor": {
          "ref": "e46fc473-b05d-4110-bcfc-6bef4eb31d0b",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "4333d6b1-9d38-4364-8dab-edaae6a7c184"
        },
        "item": {
          "id": "96946cc8-59f0-459a-8470-02c916eb784f",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "dda8b99b-8d55-40a8-896d-11df9d45e649",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dee8f8fa-584b-4ee1-af19-ac5432aed24e",
        "cursor": {
          "ref": "034d66eb-49ab-41c5-b529-62cf6a2a556a",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "00b7793c-70b8-43d6-a019-6049f1a43d08"
        },
        "item": {
          "id": "dee8f8fa-584b-4ee1-af19-ac5432aed24e",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "f849119a-3d8e-467f-a1c8-c3efbf97603e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4a7b8bf-1fd5-47ef-868c-968658d1cb3e",
        "cursor": {
          "ref": "abd442e2-b037-4f72-bde3-d839090faef8",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "6d0d1909-db6a-441f-97e6-aa0035438de4"
        },
        "item": {
          "id": "f4a7b8bf-1fd5-47ef-868c-968658d1cb3e",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "7342cf17-66fe-44e6-b274-6a184038af75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00c1d687-7ef7-49f8-a523-5e34eb85b844",
        "cursor": {
          "ref": "2457b376-9475-4a26-8fcd-c614d8597053",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "3d0cf023-5bb1-4d8e-b538-9b22e5c0cdde"
        },
        "item": {
          "id": "00c1d687-7ef7-49f8-a523-5e34eb85b844",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "7fa7217d-82e0-4f5c-b2ea-32f0a152287e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4579e58f-259d-4e91-9790-3dc2e3cb2e35",
        "cursor": {
          "ref": "96713b0a-9bb2-4c3a-97d9-d56fc42b4369",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "3c462529-210d-4ee6-81b7-39f3d5483f91"
        },
        "item": {
          "id": "4579e58f-259d-4e91-9790-3dc2e3cb2e35",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "cd2e8b0f-0bc2-4ca5-967d-3d0349bf1e9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68ee69f0-e565-4edc-860c-2ac57ac2283c",
        "cursor": {
          "ref": "eac199a8-f338-46d3-86d5-25bb7d3ec89b",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "3d16faa3-5497-4bbd-a54e-5e26dc353fdd"
        },
        "item": {
          "id": "68ee69f0-e565-4edc-860c-2ac57ac2283c",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "50fa7ebf-0f3b-425b-9d53-38ff256bad4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a231c17d-3b6f-4ca2-bca7-23e4932e645c",
        "cursor": {
          "ref": "4c5c8f61-cbc6-4a6b-88ae-2b0b922d2f07",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "33fa2584-0602-4c23-ad18-7a2f8a618d88"
        },
        "item": {
          "id": "a231c17d-3b6f-4ca2-bca7-23e4932e645c",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "47ddcb75-46c4-4881-9644-ac4605508f95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2e83e89-e3ee-4493-b73f-76baf7f61bac",
        "cursor": {
          "ref": "3eae5a71-ebcf-4c7b-a6e7-7cd78c746018",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "695b3757-910d-4987-b2f7-7bad7ff0033f"
        },
        "item": {
          "id": "b2e83e89-e3ee-4493-b73f-76baf7f61bac",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "43eb1dfb-8cc0-43eb-9dd5-9645945354a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8a64da7-c998-48fb-99b5-c1e869b9d05f",
        "cursor": {
          "ref": "247239d3-3797-4044-8ac4-2f331f8bc1ba",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "a43cabc0-1f04-47ac-a16f-946213907036"
        },
        "item": {
          "id": "c8a64da7-c998-48fb-99b5-c1e869b9d05f",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "205b6e85-7697-4d1e-a957-a1308f2fa785",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "282eca5e-28c0-4d91-b4bf-fca52d69e40a",
        "cursor": {
          "ref": "57411738-d844-4559-acf4-1c45f6e88ec5",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "4a3bac9c-4a29-4afa-9f92-333b52e08887"
        },
        "item": {
          "id": "282eca5e-28c0-4d91-b4bf-fca52d69e40a",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "e3ee741c-3c1d-4704-a115-1abea25613de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a05ffbd3-6515-4ed0-b452-7410c88f4020",
        "cursor": {
          "ref": "28cbae56-0ded-4e1e-a21b-0d0732ac2b86",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "e63bed72-c515-4bd1-879d-a7d322f13037"
        },
        "item": {
          "id": "a05ffbd3-6515-4ed0-b452-7410c88f4020",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "fa05f96d-d121-4034-bd07-5fcc5aa17546",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f52f081-275a-4e5e-ae43-c82b5d7be97b",
        "cursor": {
          "ref": "ee588767-329b-4cc6-8c31-080b43fe7d58",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "796c2318-c854-4c70-b8f8-66f43ecdac1c"
        },
        "item": {
          "id": "5f52f081-275a-4e5e-ae43-c82b5d7be97b",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "d45ec4e4-d24f-4c0f-81ea-fcd3e0686bfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c43fc4fd-ec3f-4337-b872-0d68bee0cbbf",
        "cursor": {
          "ref": "b5b7641f-2524-4611-811c-48f5552474dc",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "3fc2f0d5-6484-438c-b36c-c3836e6eb939"
        },
        "item": {
          "id": "c43fc4fd-ec3f-4337-b872-0d68bee0cbbf",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "ec8ab355-a349-4bdb-90fa-e9ebb1e6e217",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc4a8d4a-5624-402f-ad11-61412bb3706c",
        "cursor": {
          "ref": "d52bff6b-7139-4f32-9d3b-4eb3d09b1049",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "ce8abd07-0a30-425c-9cbc-2fd877d26ee3"
        },
        "item": {
          "id": "dc4a8d4a-5624-402f-ad11-61412bb3706c",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "29b5e480-6f59-4bda-9888-0827b99808a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0719ecbd-267e-4f82-aa3e-f1e4d7eba343",
        "cursor": {
          "ref": "cf16faa4-43b7-4f7c-b148-fd8690b8d6b3",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "19c855f5-53d9-405a-8eb0-9d717eedeee8"
        },
        "item": {
          "id": "0719ecbd-267e-4f82-aa3e-f1e4d7eba343",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "6fa43cd4-88d2-4362-aa4f-2bd56850bc47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e10ebab-9f3e-4afa-85ea-0d5019d94b3d",
        "cursor": {
          "ref": "ec5bbbb1-d21f-4f50-a11e-0fc3840594fc",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "dc5f6c8f-222a-489c-a35d-8efa5fff2aee"
        },
        "item": {
          "id": "4e10ebab-9f3e-4afa-85ea-0d5019d94b3d",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "99f4939c-f38d-47db-a135-6cd618b94a8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48a935c0-9338-43b8-8de8-d2afc7453748",
        "cursor": {
          "ref": "712d72ee-32ef-47ec-8c74-dedef5558ef3",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "d750b1c6-bc50-4811-9faf-1ee8ce2dd725"
        },
        "item": {
          "id": "48a935c0-9338-43b8-8de8-d2afc7453748",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "7948aac4-849e-4d28-9c48-e8203bf14ee8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e919770-6189-4226-af1c-f37b7f0cf9fc",
        "cursor": {
          "ref": "abf61a1a-0f8a-4602-b240-e8f3a7a75111",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "ce1d4a4c-1232-489b-b72b-c6706ae48874"
        },
        "item": {
          "id": "8e919770-6189-4226-af1c-f37b7f0cf9fc",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "ccc565f6-0ae4-4d53-8014-60da0992c365",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baddd9a0-9bac-415c-9e47-56dfcb43b126",
        "cursor": {
          "ref": "53a85fc5-fa74-4195-b0eb-788da17f4de1",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "d47a49f4-b92c-4ef9-8162-a714f804283a"
        },
        "item": {
          "id": "baddd9a0-9bac-415c-9e47-56dfcb43b126",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "19684a5e-bbba-416c-8477-9fef5966d3a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b429cb0b-bec5-4c95-b491-1934f2b3f772",
        "cursor": {
          "ref": "fbc8a6f2-b801-4cb7-81c1-07ae9249d8e1",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "4dc8890e-1248-4765-ad4f-ce4654e8514f"
        },
        "item": {
          "id": "b429cb0b-bec5-4c95-b491-1934f2b3f772",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "57b7ca77-69b3-478d-978a-7017aacf3315",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4d9d7c2-d6cb-4935-b69f-a0dd6805f1f7",
        "cursor": {
          "ref": "0a2f6a52-8352-49ef-a1e0-cf5f8fcbe9e8",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "06367cca-5d8c-4e93-90fd-ea7fb0deb6ce"
        },
        "item": {
          "id": "a4d9d7c2-d6cb-4935-b69f-a0dd6805f1f7",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "ce69ae85-37d5-4cde-a811-f97dc20853a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2318c9ae-e0b5-427f-8fcb-53a2ccc86bf0",
        "cursor": {
          "ref": "768ceea0-d47e-471e-9a43-b66c401941ee",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "2ebce214-a0ec-4585-ab77-6a52fcd791ab"
        },
        "item": {
          "id": "2318c9ae-e0b5-427f-8fcb-53a2ccc86bf0",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "fbdb0a27-d147-49cb-b30f-a842469ae4c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffcb4685-527f-48ba-a831-1cce293bb4f2",
        "cursor": {
          "ref": "096b75ea-1c9e-4b21-bc71-0022c760be4e",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "c2f1ae5b-6ec4-4c6b-bad2-addecb02500d"
        },
        "item": {
          "id": "ffcb4685-527f-48ba-a831-1cce293bb4f2",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "727f8206-678c-468b-bf05-748ce9f0b4c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec545fbb-1a22-4027-9f6c-44f7c43c76e0",
        "cursor": {
          "ref": "7456c091-abe4-495d-8db6-6df60df2561f",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "d452977c-2812-4462-8112-4ccd697f0563"
        },
        "item": {
          "id": "ec545fbb-1a22-4027-9f6c-44f7c43c76e0",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "ca521f4e-05ff-4113-b15d-d55d5a4aa387",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "910622de-c8af-458f-a1cd-b642c32db039",
        "cursor": {
          "ref": "e2100c91-74ed-48d0-9cdb-b6b56d4f414d",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "c61295a3-ea8b-4760-b6a4-7a6fc8b9ecda"
        },
        "item": {
          "id": "910622de-c8af-458f-a1cd-b642c32db039",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "4447bcd8-7cf1-471c-8a3f-dc8740820d5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33228b36-6642-4c4d-a043-84e6270094c0",
        "cursor": {
          "ref": "c1f5593b-2f3d-43c5-8281-616c0cd5804b",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "a4baa23a-345b-479c-a82d-ba2b9ff75132"
        },
        "item": {
          "id": "33228b36-6642-4c4d-a043-84e6270094c0",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "8618a780-acf3-434f-a540-870190934ee9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae9b8890-37a5-4dbc-8fcb-ae9c1d507c34",
        "cursor": {
          "ref": "6415f587-471a-4e89-851d-41293c089f3c",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "94bf7734-781d-4717-a682-db0686aeb28b"
        },
        "item": {
          "id": "ae9b8890-37a5-4dbc-8fcb-ae9c1d507c34",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "63acebb7-e0c9-400d-9264-c6a68ca8b305",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d0fe300-abe5-4f64-884d-3b615f804efd",
        "cursor": {
          "ref": "468ec8a4-18a4-4c87-84b5-6a5c51664484",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "b0dec337-bc16-44da-9c2e-6e3a8d8463a9"
        },
        "item": {
          "id": "5d0fe300-abe5-4f64-884d-3b615f804efd",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "29456ce1-33f4-4190-97ef-eedb8aea9ec3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5e6a123-637a-45aa-b927-3b02f757c0b6",
        "cursor": {
          "ref": "44a37034-f353-4432-b20d-ccafe14dd162",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "dd9755d1-36a8-457f-ac5b-fb666c50442e"
        },
        "item": {
          "id": "d5e6a123-637a-45aa-b927-3b02f757c0b6",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "7651085f-6ea8-4c22-b8f3-912405b2bee2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed47e580-5bf5-4f6a-87bc-7df55d0ddd63",
        "cursor": {
          "ref": "965c5e97-b9f3-42fc-abf3-c5060e0444d3",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "ec6dfb80-2430-409a-8a9d-b995507affb5"
        },
        "item": {
          "id": "ed47e580-5bf5-4f6a-87bc-7df55d0ddd63",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "be4f9ec6-1451-4d45-8612-d2602ae79903",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fad0ed9-6c7c-4287-91a5-985fbe828672",
        "cursor": {
          "ref": "e5774944-7dc9-46d8-a0cb-c73a94bf8035",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "2430c72f-c007-42bd-aa98-8257c2460b27"
        },
        "item": {
          "id": "0fad0ed9-6c7c-4287-91a5-985fbe828672",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "3676aa05-c83f-4ba8-8fe6-051e2b0b5717",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b52b1de4-81a9-439c-8044-b77102bd750b",
        "cursor": {
          "ref": "2c73ca50-7898-46d9-867f-1b35b0d20e60",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "92817e7f-b18f-46e9-88cd-594708ed15cd"
        },
        "item": {
          "id": "b52b1de4-81a9-439c-8044-b77102bd750b",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "77748816-8536-404e-99d9-65a7789c066b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f7302bc-17fe-489d-8682-66fa237ec345",
        "cursor": {
          "ref": "26f708b2-57db-4b7f-b586-10e2887824e2",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "1e11a3e0-307d-4a80-bc9e-8d65facafe2c"
        },
        "item": {
          "id": "7f7302bc-17fe-489d-8682-66fa237ec345",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "0ab41e86-f6fa-462c-97f1-84d32b165a90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35b00b96-de1a-46c5-a4f3-ada6ef669e33",
        "cursor": {
          "ref": "7ad3c8a5-ed04-41e8-9041-aeef81df6ed3",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "0a8d7b05-5f32-486a-a7a8-e9f414985039"
        },
        "item": {
          "id": "35b00b96-de1a-46c5-a4f3-ada6ef669e33",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "cf6f6ccf-b6bd-478d-9976-193696be89d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b27d90b5-a18b-4c62-85b0-42f574337056",
        "cursor": {
          "ref": "f9814aef-7d2f-4816-a845-bd08aaf39785",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "8c85491e-b63d-4fbd-a246-49aa8f0a653e"
        },
        "item": {
          "id": "b27d90b5-a18b-4c62-85b0-42f574337056",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "fe3f30a1-f434-4145-8aa7-96addaeca702",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef22b3a2-ed14-43c3-b4a0-6d19b24c90fc",
        "cursor": {
          "ref": "9c111850-c149-4120-bc8d-7d3c818d7a07",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "0ea9cd8b-88a6-4ec6-bcea-a7925210afe5"
        },
        "item": {
          "id": "ef22b3a2-ed14-43c3-b4a0-6d19b24c90fc",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "efff239e-0eae-4e2c-84c3-771078c1c9b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f3e1861-1b26-4e8e-a387-d1b4b5daf1c6",
        "cursor": {
          "ref": "7f44b395-2917-4630-a3ab-705742ec1ba3",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "6d241e04-8f62-4507-93f5-4e42b920520f"
        },
        "item": {
          "id": "0f3e1861-1b26-4e8e-a387-d1b4b5daf1c6",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "f561f33a-090c-4648-bcfa-814a9cedd49f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "186d2ae5-c4d5-4c45-b371-4da76136741e",
        "cursor": {
          "ref": "32bac6a1-c035-43da-8a19-7050488bf968",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "32dfecc3-04fc-4625-9877-ec01bbd0e658"
        },
        "item": {
          "id": "186d2ae5-c4d5-4c45-b371-4da76136741e",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "1ded5194-5863-42e0-b061-b730391da1f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c22ecf8f-3784-47bb-ace3-af4e6e5fb5be",
        "cursor": {
          "ref": "111e4373-d606-4b75-b2e2-e0e1018b1501",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "b3706d95-9540-425e-aaf3-c912d4ae27a3"
        },
        "item": {
          "id": "c22ecf8f-3784-47bb-ace3-af4e6e5fb5be",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "faf78a60-e90b-40ee-ba5c-dc202a40a6b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "085c4505-4ed4-465d-a7b4-c2383f616818",
        "cursor": {
          "ref": "2cc9c74c-e1a0-4d31-95f9-a67ca2e077a8",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "a9ab4299-c2b7-4e5e-95f2-a79c5821aea2"
        },
        "item": {
          "id": "085c4505-4ed4-465d-a7b4-c2383f616818",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "324b280c-ec98-415e-b5c5-4aa557b750f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a41834a3-dd20-4519-9915-26dffd5a73a7",
        "cursor": {
          "ref": "619b6b15-a1b5-46d2-854d-28e9db8a77eb",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "bd10e68c-2bd4-4318-aea8-5e5e3e2b2721"
        },
        "item": {
          "id": "a41834a3-dd20-4519-9915-26dffd5a73a7",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "ab2f9e89-aa7b-4bdb-aeaf-1971e07697b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec082ab2-b977-4818-a683-3ba88a523abc",
        "cursor": {
          "ref": "29b69232-e89b-4b70-828b-8e7faee7fe20",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "1c71e677-4505-4f50-a291-95e605c1c7bc"
        },
        "item": {
          "id": "ec082ab2-b977-4818-a683-3ba88a523abc",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "a8919cbc-1cc7-48ad-8348-b6bed0d7ca9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8007494b-5486-4161-8ff3-f14a31c0256e",
        "cursor": {
          "ref": "7fbcbded-f3a1-4151-8048-1183ac1d81f1",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "9af86635-4eb1-4d45-ade9-247779cd1049"
        },
        "item": {
          "id": "8007494b-5486-4161-8ff3-f14a31c0256e",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "450f8335-5262-4d7d-898d-61df60e1c4e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3d7d40f-4747-4cf7-9fdf-747567b4e16f",
        "cursor": {
          "ref": "82a56b65-c364-4a06-82c3-e9a6a8baa3d5",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "aec5c240-055c-431a-99ab-770d8d2e5ffb"
        },
        "item": {
          "id": "a3d7d40f-4747-4cf7-9fdf-747567b4e16f",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "3957235a-c5e4-4dbc-b7f2-26471170f4fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "194fc659-dbcf-4913-bfc7-067ff9e153b3",
        "cursor": {
          "ref": "d89320b1-9bff-49df-b9fe-e25fb5606ba7",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "126f9e14-e40f-434a-b6ef-9dbe5599a8ed"
        },
        "item": {
          "id": "194fc659-dbcf-4913-bfc7-067ff9e153b3",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "d3d602e9-7b92-4f0e-a501-5d8d6ad1d55b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0d558fe-2812-47b0-9785-205d58d69522",
        "cursor": {
          "ref": "ee01d0cc-6817-416e-a970-4926ef36fab0",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "ec84919c-f04b-41e1-b3c3-1f81c11ea2b2"
        },
        "item": {
          "id": "f0d558fe-2812-47b0-9785-205d58d69522",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "ff300af4-cfb0-41ed-9252-c0695e1a939a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "405ac8b7-e96d-4e7e-9a2f-7b3733139575",
        "cursor": {
          "ref": "9f76701a-cc27-43a6-84fb-14b558475105",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "fd91ad0b-7c7b-4f6d-b209-2de6930f5a05"
        },
        "item": {
          "id": "405ac8b7-e96d-4e7e-9a2f-7b3733139575",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "ff813d80-42ab-4667-b274-a3536bb0bf06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ab63c0a-3212-44af-9b50-1b87a2cfbf16",
        "cursor": {
          "ref": "6fff6e17-cbfa-4723-bb53-54f3bd93e5d4",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "50facaf0-7db6-4d0e-b503-84ee2d92a505"
        },
        "item": {
          "id": "3ab63c0a-3212-44af-9b50-1b87a2cfbf16",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "e42363d4-1b0d-477b-8d4d-410020987e06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78bb895b-8e51-41cc-9046-9a6be9e29600",
        "cursor": {
          "ref": "6534f83c-c369-4fc8-b4cf-faf969c789e1",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "2eb02f2b-ecba-4262-8585-3cba46e195eb"
        },
        "item": {
          "id": "78bb895b-8e51-41cc-9046-9a6be9e29600",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "7282d6e5-bf7d-45b1-b6b4-ecbacee064a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe62b47c-5830-45e3-96bd-d8fbff5ffc93",
        "cursor": {
          "ref": "409cac7d-96a1-4cc1-abfe-47fc0c670404",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "88fab5a7-5656-42f3-b73c-3a2e02c16cd1"
        },
        "item": {
          "id": "fe62b47c-5830-45e3-96bd-d8fbff5ffc93",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "f47ed3b2-49ac-4095-a94f-1595faceae0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "521f2202-8da3-4dd8-ada4-3ed3ae915a26",
        "cursor": {
          "ref": "21a6011b-ddba-4612-985c-98064cf369c0",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "4a1dd155-b83e-4d4f-aeac-678786a1fe35"
        },
        "item": {
          "id": "521f2202-8da3-4dd8-ada4-3ed3ae915a26",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "6a32d69d-d1e6-44ad-ae50-31405a360cfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8196d665-3e94-45ef-93d2-b532e511b25f",
        "cursor": {
          "ref": "3374a1bb-89e1-4d47-8206-098f4ca56a87",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "62d79096-dfae-495c-93a9-e27f267aeedc"
        },
        "item": {
          "id": "8196d665-3e94-45ef-93d2-b532e511b25f",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "bcd17a6e-609a-4e36-a8ef-e04f6de31fb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dd60089-0e04-44be-b14c-d593ea95274c",
        "cursor": {
          "ref": "efb6f616-9086-4e2a-8fe6-c348ac4e46a8",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "13d23984-38cb-48f6-a95a-8768c3fcea71"
        },
        "item": {
          "id": "8dd60089-0e04-44be-b14c-d593ea95274c",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "40a56f7f-b784-45f7-90e9-9a2e39ea9806",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f90ba38-30be-4ffb-a0c1-41c0c2377812",
        "cursor": {
          "ref": "a79609d5-2f81-46e9-b189-3e5bd91b21dc",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "544d3a2c-5774-4535-ba93-6c97d2c8fb6f"
        },
        "item": {
          "id": "6f90ba38-30be-4ffb-a0c1-41c0c2377812",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "24a2e369-88b8-4773-b109-0ad57591ff39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11ec3837-dc21-47e3-aa4b-0be1db7105b2",
        "cursor": {
          "ref": "4da7e074-4ea0-4bf6-a5a6-7e295c4628f9",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "d850cfc2-8ead-462f-8ae5-75f87e0030c1"
        },
        "item": {
          "id": "11ec3837-dc21-47e3-aa4b-0be1db7105b2",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "7c07f0b6-3c9a-4f12-8e06-68891df54f58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a09e72bf-a2bc-4c8b-9479-62126eb265b9",
        "cursor": {
          "ref": "9d1fe5ef-de54-4158-b66a-55277d624a8e",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "ddecb873-d7a5-4250-adc5-c1b7d60c4d15"
        },
        "item": {
          "id": "a09e72bf-a2bc-4c8b-9479-62126eb265b9",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "a3e7b9bb-01f7-40a0-8cd8-196f7b192634",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a69d373c-1ed3-450f-9fbf-20887dcabc7b",
        "cursor": {
          "ref": "d8a3bb16-3554-495a-a12c-a13471b8824d",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "41c1f2ec-c16c-408d-be3e-9466f1a77e30"
        },
        "item": {
          "id": "a69d373c-1ed3-450f-9fbf-20887dcabc7b",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "8b59a7c2-01e4-494f-add1-123af66f4e09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7560d0db-e75f-47a3-979d-d0bf3695380a",
        "cursor": {
          "ref": "c7d8906d-3114-44d1-81f6-53a74b0a3081",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "c863f363-3db8-4c81-a79b-e44de521aa49"
        },
        "item": {
          "id": "7560d0db-e75f-47a3-979d-d0bf3695380a",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "f06d1462-17ac-4a40-aedd-4297ef7da8b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94c808d6-ae65-42d5-b9d3-e1b693f1a4ad",
        "cursor": {
          "ref": "2bac0478-6a94-4032-b529-d464b18d5fdf",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "21333267-00f7-4de3-b5e1-dfde4b9aeab5"
        },
        "item": {
          "id": "94c808d6-ae65-42d5-b9d3-e1b693f1a4ad",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "c6d4a9bb-3e79-4604-a496-481be50177ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2321a08f-9393-4880-ad37-e924190d4221",
        "cursor": {
          "ref": "40869fba-2712-42fe-a766-e459a8d9298b",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "e6234e27-c6b5-41ac-b221-c04d4eccaee7"
        },
        "item": {
          "id": "2321a08f-9393-4880-ad37-e924190d4221",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "83dcaa13-6257-45b9-9d81-f2baa0c7bd3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "623ae6fc-68b6-46e9-adcc-a3b643135993",
        "cursor": {
          "ref": "769a8f34-5bcd-41b5-8910-02eb8047d60b",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "4d236478-e20f-4da1-a1c5-d0fa7b33fdd1"
        },
        "item": {
          "id": "623ae6fc-68b6-46e9-adcc-a3b643135993",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "c5ccf7d4-2cc0-4c04-a841-fb80378d25ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9aabfcbe-c3f3-4134-ac79-67f7f7cbb5b8",
        "cursor": {
          "ref": "c624909d-2dab-4746-b9f8-be476d378943",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "7ac63c55-13c8-4d81-aa48-9b24d2b4dbd9"
        },
        "item": {
          "id": "9aabfcbe-c3f3-4134-ac79-67f7f7cbb5b8",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "65fa4c80-6b4a-4970-8c91-e5aca69bced5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f12c27a5-a084-4148-ba05-ed401fc280c8",
        "cursor": {
          "ref": "1983cd5d-dc8c-441e-b0c9-550f3b8e980d",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "f60b6bb2-0878-46d7-ab99-4a18c7e88936"
        },
        "item": {
          "id": "f12c27a5-a084-4148-ba05-ed401fc280c8",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "501865ea-b371-41d5-a608-1f413cfe8869",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3427137d-cef3-4cba-9e09-2edf4e8f8ee1",
        "cursor": {
          "ref": "c4de9118-7f39-42c3-96b8-2ad5470e4e5f",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "3002ffde-e2e8-41d7-bf7e-e186d0530e1b"
        },
        "item": {
          "id": "3427137d-cef3-4cba-9e09-2edf4e8f8ee1",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "ad739434-7b1d-4810-8e11-cccb937690f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55b11895-e506-4c93-a88a-aae5aef86f98",
        "cursor": {
          "ref": "e37fc228-64ce-4614-8640-6d4eb6c74666",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "47f2803b-47df-4c03-997b-405d938f2b49"
        },
        "item": {
          "id": "55b11895-e506-4c93-a88a-aae5aef86f98",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "d4271968-335f-4338-8653-4a1689dd20e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0558d6a0-4e91-4f0a-9b4a-919bd4aeedb7",
        "cursor": {
          "ref": "6f11cf28-0f30-4be2-a76a-fb21652efd58",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "7faa28bb-2c52-42d5-bc6a-346100c79bbd"
        },
        "item": {
          "id": "0558d6a0-4e91-4f0a-9b4a-919bd4aeedb7",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "b3a05246-b0ff-4c26-8741-791ddd0ebc07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e79d015-7e65-4289-8aa3-2c7ed5017274",
        "cursor": {
          "ref": "1158c048-edfe-458d-9833-e9fe0e4ef295",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "e53b6164-5a42-4fd0-80fc-ec1dc8c4bbdc"
        },
        "item": {
          "id": "7e79d015-7e65-4289-8aa3-2c7ed5017274",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "24d15aa9-639d-4fb7-9405-0607e70703da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21accad6-d1ce-43ef-9ed7-fe03067a6ca8",
        "cursor": {
          "ref": "7b7d7a92-e164-4fbe-bc25-1c19ef294859",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "aab4ebfc-6222-47d2-9f4d-127833bfcb60"
        },
        "item": {
          "id": "21accad6-d1ce-43ef-9ed7-fe03067a6ca8",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "4843e091-5c17-49e9-892b-10c8698cc6ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a268e712-3ef2-4383-942c-844c42406c95",
        "cursor": {
          "ref": "54148d0a-2179-473a-82ba-f166679223fc",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "2279f30f-8c4b-437d-b0f4-a04246995b7f"
        },
        "item": {
          "id": "a268e712-3ef2-4383-942c-844c42406c95",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "4d00a3f9-59a3-4701-805a-50d3a7b6be63",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "20f38fa5-31d5-4a33-a052-dca28d704ced",
        "cursor": {
          "ref": "6a6397d5-8045-402a-9ff6-f4dd9b660d87",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "5c7ae343-3c79-4450-948e-0fb1daba1a59"
        },
        "item": {
          "id": "20f38fa5-31d5-4a33-a052-dca28d704ced",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "f794dc47-8ac3-4a49-b744-90d1e1ee2099",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "f5682fb6-31c2-43d7-a59b-c7d352b26a60",
        "cursor": {
          "ref": "cd69d37c-f502-42f7-a789-670f21848571",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "32a5008c-b308-4a1e-8bac-850b38df5049"
        },
        "item": {
          "id": "f5682fb6-31c2-43d7-a59b-c7d352b26a60",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "9ec446fb-c9dc-4da0-9c41-26068d0b23da",
          "status": "OK",
          "code": 200,
          "responseTime": 124,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fe4afb9-06eb-4015-80cc-acf62ee00159",
        "cursor": {
          "ref": "ce436acc-a0b9-4cb4-a7cb-6f1c963c97ca",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "e44c2b8e-b98e-4167-b48d-c8ad98b93ab4"
        },
        "item": {
          "id": "0fe4afb9-06eb-4015-80cc-acf62ee00159",
          "name": "credentials_verify"
        },
        "response": {
          "id": "b0de1339-86c6-4bf7-bb1c-00e5a5f77d72",
          "status": "OK",
          "code": 200,
          "responseTime": 1633,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f37cffe-96e2-42e6-b125-83f8306affae",
        "cursor": {
          "ref": "f95960bf-6ac4-438a-a078-a55f54713824",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "8aaed369-a004-4099-8dd3-de7ce6758bbb"
        },
        "item": {
          "id": "4f37cffe-96e2-42e6-b125-83f8306affae",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "22153631-cea2-43cb-aa03-e32328708002",
          "status": "OK",
          "code": 200,
          "responseTime": 2304,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "1facc471-686e-4321-a3e9-46400d4b3a25",
        "cursor": {
          "ref": "034d7adf-da7a-4196-ab11-d9a64233803e",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "7015ed6b-bac6-4c53-8dd0-8825ffc3eea4"
        },
        "item": {
          "id": "1facc471-686e-4321-a3e9-46400d4b3a25",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "50ed79ae-43b3-4c31-8d7d-ceb0e2908dae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "1facc471-686e-4321-a3e9-46400d4b3a25",
        "cursor": {
          "ref": "034d7adf-da7a-4196-ab11-d9a64233803e",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "7015ed6b-bac6-4c53-8dd0-8825ffc3eea4"
        },
        "item": {
          "id": "1facc471-686e-4321-a3e9-46400d4b3a25",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "50ed79ae-43b3-4c31-8d7d-ceb0e2908dae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "1facc471-686e-4321-a3e9-46400d4b3a25",
        "cursor": {
          "ref": "034d7adf-da7a-4196-ab11-d9a64233803e",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "7015ed6b-bac6-4c53-8dd0-8825ffc3eea4"
        },
        "item": {
          "id": "1facc471-686e-4321-a3e9-46400d4b3a25",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "50ed79ae-43b3-4c31-8d7d-ceb0e2908dae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "78d6fd6d-0184-495a-8771-1c5e28d7f8f1",
        "cursor": {
          "ref": "4c342702-7930-43c7-8e73-c4d8798e2378",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "e6f61d65-0b55-41f8-bee6-f280ad09e7f1"
        },
        "item": {
          "id": "78d6fd6d-0184-495a-8771-1c5e28d7f8f1",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "731f8ebf-6c9a-45e1-a182-6c72e13f6d23",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "14eb72a4-c4cf-440a-bf91-7dce78619ab3",
        "cursor": {
          "ref": "21ba9030-f812-4283-86ea-6014e8d2ebc7",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "02c5341f-1302-4523-bdca-5deaea989eaa"
        },
        "item": {
          "id": "14eb72a4-c4cf-440a-bf91-7dce78619ab3",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "e6d653a5-b545-48c5-a933-9e27a1b66713",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "14eb72a4-c4cf-440a-bf91-7dce78619ab3",
        "cursor": {
          "ref": "21ba9030-f812-4283-86ea-6014e8d2ebc7",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "02c5341f-1302-4523-bdca-5deaea989eaa"
        },
        "item": {
          "id": "14eb72a4-c4cf-440a-bf91-7dce78619ab3",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "e6d653a5-b545-48c5-a933-9e27a1b66713",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "b9e5c4f3-57d0-46c1-bee7-593a3fff526c",
        "cursor": {
          "ref": "3516d610-566b-4b8f-b09a-836994d048a6",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "95140c49-3c39-40e4-8566-2a346acefe7f"
        },
        "item": {
          "id": "b9e5c4f3-57d0-46c1-bee7-593a3fff526c",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "a59730fd-d406-47cd-8e95-3b52298cd6bf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 248,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "075e2c29-f480-4482-9c9b-570a25ae838b",
        "cursor": {
          "ref": "0bc9385e-2646-4fc2-b063-cd507c002d99",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "6e21257a-ba0c-4554-83e4-3421953d464d"
        },
        "item": {
          "id": "075e2c29-f480-4482-9c9b-570a25ae838b",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "7cda83f9-431a-4bc2-93c3-1d855740fb02",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 13,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "075e2c29-f480-4482-9c9b-570a25ae838b",
        "cursor": {
          "ref": "0bc9385e-2646-4fc2-b063-cd507c002d99",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "6e21257a-ba0c-4554-83e4-3421953d464d"
        },
        "item": {
          "id": "075e2c29-f480-4482-9c9b-570a25ae838b",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "7cda83f9-431a-4bc2-93c3-1d855740fb02",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 13,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "a4a0400d-5349-478a-b7f2-34e549ca4f45",
        "cursor": {
          "ref": "732965aa-e8d4-4f3c-bda7-4cf63153d239",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "8601fed7-2937-40de-9cc1-f57756ab4d04"
        },
        "item": {
          "id": "a4a0400d-5349-478a-b7f2-34e549ca4f45",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "59a2082c-9ffb-4491-abcf-1a4b145b5688",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}