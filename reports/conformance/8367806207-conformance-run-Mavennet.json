{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "0f29fcb4-bf1d-465d-8cbf-5f09ce40e5da",
        "name": "Clear Cache",
        "item": [
          {
            "id": "c37974bb-896a-4e0a-a486-2fdef8280c6f",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bab22f04-c04c-4054-b239-e182e2b2ab62",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "79218bc4-d2fa-4412-b89c-e56ed2b46db8"
                }
              }
            ]
          },
          {
            "id": "31ab1e80-8ea2-487a-94f4-2eed9bb0d304",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ae507342-2c56-459c-894e-e102cdf3e47f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "200c0cc6-bc7b-4820-9ec6-242b020b499b"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "19849b1f-1c8d-4a9d-bb50-843a3373d5e1",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "80c1dea8-5282-4567-8724-00e5ca690e21",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b7f25aff-61c5-4982-8d73-8ae909308902",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "be0a1f21-0cd5-4d1a-9979-d7dd894b9f65",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "48aabe01-edda-4e0d-9680-8e4e51c94579"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5e960487-a1b1-4d47-8757-d02e7a369414",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "60c05068-1a60-4b6a-8122-c0bd2fd22146"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a6caf587-2be5-4af2-97c0-2e54f532d143",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ada714c5-19ff-4e6e-bf41-b0c7fe30af3b"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "647685e0-385d-445a-8740-286ed18f7fec",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "1aeced66-630e-4ac3-9ce9-f9b9ac6694a3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "767a88a6-b4aa-45fd-8a7c-e55c7cc20531",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "08539e09-c5ec-4f41-b624-00762f98d38d"
            }
          }
        ]
      },
      {
        "id": "02320871-9dfa-4d38-ac2d-5f0e7ff006eb",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "2e75c383-b0cf-4ed9-9c9d-5f8e1aa271b8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6b9b30e5-e18d-4553-bd55-279aa47fb9fc",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7c935719-d1d5-4853-856e-ce7263026190",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0748bd97-fedc-45b9-8e09-d40d5d159d32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3e313901-da44-4060-8856-66186473b341"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af01e5fd-1376-48db-a913-0553db88b3ca",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "308d71f3-16d8-42d0-97ad-eb75bef269b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "810d8489-8a47-44f9-baed-7e5e207e7360"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0af250ee-7c7e-4401-9ad1-ce00d0bb403c",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95468350-2c9e-44a4-b763-a5e27b2ed9f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "50d331c5-a5bb-4475-9f91-5515e1e272de"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "59c48715-471a-4814-9823-b665b3074217",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ea36a50d-8d66-48d8-8c73-52fe2b5bea22",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f065509-5c21-49b5-9ccc-d5e3df3d897a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7bf9f784-edca-4726-b51d-de24c881b18b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8aca56e-d6c7-4472-8ae4-ae123a45d6bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e9ecfc9-0edb-40e9-a22d-4184ae2c9dee"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "cb4c32c9-d7fa-4bc6-8736-3fdf453c431d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b8cae8b4-6c38-4c79-ac7b-9edb87fed15f",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1d65cf31-2f4f-4c74-9db5-fc3280f65c91",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "07c056fb-30c9-4771-9251-ee31f5c42bbf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e455ce2f-b9bc-4430-b920-57222b5f348f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "a1cbcc45-776c-4c84-9934-e04412f32ea5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "56d88099-99c4-4bbd-80d4-7c6abed5b8c3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2ac096bf-7278-44b3-876f-3c6d5413aede"
            }
          }
        ]
      },
      {
        "id": "7f37e229-94c2-4c68-8a44-84669de4a11b",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "696242c6-3be0-4255-bd1d-b32b23ad04c8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "071e4236-d9ae-4db9-b4bb-029994ab0edf",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "5a6fdf89-242c-4951-a898-471eaaa375db",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e4778d2-8dec-4fcb-ac7b-e0d565185aae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a6ae378-4b39-4112-b0f5-70e566602a45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a257eb49-492a-4c84-99d4-0c9a1fb3b7f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d92f40e4-afac-4542-851e-3ef6c17c33bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd587964-e1d5-4376-be6f-3243c5976745",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05c07475-f750-4b23-9e04-54cae922f752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2ec3d25-ab43-4d89-b889-d27a2070cd0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9047d41b-306f-4575-88d0-ae73a05db20b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "df7b4995-50fa-4373-839e-45e688725c48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6627fa2a-ca09-41c3-83b9-040b67162bee",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "091e2a0d-4c29-4646-891c-89f8df2094bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "120789b2-0648-4963-a159-31a66c18ba6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beaa902e-2b58-4c6c-b1ed-46ce7aca27c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a1cebd61-e0d1-4e4b-921a-b769bb5311bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0014db27-3571-473d-a7d4-bc7247334723",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3638f97b-4988-4b48-b27d-d170291f351e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e40bb46d-85a8-4165-9538-1011f465b366"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a432ab4-b14b-40a7-a77b-8d531bc66d4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5703c9b5-1006-4a34-a215-21ce34b6ffda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "995d767c-7c5c-4eba-991a-ec98be35195e",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d37e115c-5565-4089-8f6c-33f24c204d66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef7167ea-224a-4805-bbd2-81def6fa3c0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8196fe98-2df6-4bc3-9b3d-fe4ddaa07e22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3063596b-cac3-4035-ba4e-481a061552a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6e91cb1-2656-43aa-b97d-0bd7d18d1ddb",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e029c1f2-caa6-4da2-8cf2-472cb95e6f62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da981aed-a827-4d8a-ac91-36931ec9fe5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08dec650-5aed-4f34-ab06-07051a316b30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b1bc9f5f-a0d5-4b48-a2b4-da059c30fcb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ed61803-a99a-4103-af3c-58b8a0df5948",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63219d2b-fbe5-4e73-94f9-2923d4f53df8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "173e18b8-e32e-497a-98f8-8bcef751c9e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43083785-dfb5-431c-b614-25340286f7b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7814cfe2-ba50-48f3-a4a1-0142e549f1ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fca8c82c-6f89-49cd-8337-d28574878795",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "254222e2-24d8-4f96-b5e6-08fc130545f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c1c78c6-5331-4f90-a42a-211b60a5c192"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be31e076-db70-42ad-bfa0-26057f47be26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "af2e7931-f360-4054-b00b-576318ae4aeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a163e95d-0c3a-4a32-bd15-daf17f3010f0",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99567618-e55e-4a92-8854-99cce3a4bbfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "455be502-4f2f-4d4f-9b60-89c6d5c08e1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e007ca8b-732f-45f1-9ad5-226fe7dbcf84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a5d8f725-880f-4e4d-8a00-ac65becb3ea9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30a20cd0-6672-49e4-825b-2dcc320e4af3",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efaf22c9-b40b-4f3b-bb14-56e2d08fc509",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be56b12e-0574-4c12-b6dd-743032ee3979"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e71b393b-b2df-413a-b292-824baf3cd68c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "db1547cd-125d-456b-85cc-3fc5dd15e8b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5c2e36c-f0ae-4563-93a1-14d7205fd76e",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11a4e3e6-ee4e-4d23-873b-7cefb43ade9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d7365f8-7ae3-4025-8814-20271fb71a22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bec8788-5c7b-4c44-85e6-902871ad8224",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "78683478-4f26-4eee-ad26-508a1845ce7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f343d36b-7221-4363-9aab-1224a3394651",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de2aa25b-7881-49ab-8673-44d38eb6711b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0eb5a3fa-9eee-429b-bb7e-82f11cd32b63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ab38754-0ff0-447c-92b0-e43d4854b90d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "947add0f-a3ce-4fc5-aedc-415e0bf0fd10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2170fdd-ab98-4a39-8899-29216d41d08d",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cae6606a-2460-44a0-a824-5bc79f1e5f09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72a503a0-22f7-40f4-b156-72cb4286d8a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a06dced9-0ae2-4ee8-ac55-ea26c93019f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9aaf3891-6ee4-4205-a848-6740c42d1d81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "951b28d1-f048-4d19-9509-c3406815f59c",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "376d567a-df8b-4ada-bf01-3bcdace37d5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "614e313b-4d58-4037-8375-8230ad4c67e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "698620db-e176-427f-bc18-9b11afb66db3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "162cd055-2e5d-44e6-874f-7be9280d880c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bd6d1a4-a01f-4359-aa09-eddc5fbfd671",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91253027-a94f-4b18-aea9-8aea7b623531",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94e0ef42-ba15-4a57-909c-7a9d038ab5d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2f75099-eaf8-431d-80bd-33676965fdc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "56990e7b-59d2-4f6c-a1d9-be7f5ce9d702"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e7493a2-e4f3-40a4-b4db-9e2e478da854",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8084714-b44b-4b15-b151-d60eaab7d76a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83844001-9f92-404e-8c20-0e0eaae592d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed0b37a0-6206-4dbe-b439-ff690a2e4be3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b6de44f5-448a-4c6e-8c43-357a6342412f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9c310bd-e64d-412d-b584-890517641681",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d1f6587-b2a7-42d2-8018-d239f8ab0b73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac26cf9d-8e1a-49e2-b0cf-c7682cca15d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c278d0b8-171d-4881-9426-6aa61bc9ac84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e8953496-b206-4cd8-9a70-ca51b5e22faf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce00f88e-330e-4b67-97ce-d36fd0dff97e",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "779672f0-23ec-47ad-9188-50babe963126",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5362b713-1c1d-4fb4-8d39-0fb72c13ddca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c0cd002-c829-43da-b64d-97c3050b6178",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ecc590e-c9d2-4417-87ba-cdadccaa85e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aab50a06-6ace-458b-afc6-59cf29f53e21",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ca456e9-67bf-41e6-9a25-ce65e1f6d2f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfaffab7-20f0-478e-8360-9c34bd0fe9ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9bafe9b-2f48-49f4-bc0a-48ed0a1fe7c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ac63c63-9c16-4eae-a7e8-56f06e57fc4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8dd9ac8-e9ea-4d91-8549-83a5f4316ab6",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c58de0b-eb38-4ff5-8e1f-249d2e607bc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b63100e-fa12-460e-8a03-18f1178f5f40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a214b794-7ecc-4134-93f7-70d8d207e30b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ed051f6-2343-48e4-a83d-fc9fac7c8095"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f772950-480a-4ce1-8725-c9ae6bfef9ef",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73962a7e-97c2-4296-a190-5ae776df168e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5df11948-e715-4aef-8774-9b6288bcd2f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aa734b7-10b1-4d0a-a60c-2c59e59a417c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ff4b74d-031d-4866-85d4-17dafd1d8fc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f321f946-dbf2-4c25-a470-91d165c48c42",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3164cc1e-925d-4a9e-94f1-3695422ac632",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dc45dd7-2b7c-4ee9-878e-a088a8c87557"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5ceb0ed-d88c-49f4-88fa-9de71b23cda9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3d68736a-49ba-47b4-908d-d9331d537b31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37de141a-31c8-435a-b2c6-8d62378373ea",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8456544-23ed-421e-b1b8-aecd35217e8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60e3702d-a14d-40de-b766-2195428754a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68cdd738-8d31-480a-bc8b-9daaaaaa5e3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "10c9bed3-d397-42d9-b7c2-e811862bcfdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87dd1896-54f4-4837-b12c-867ea2555dbf",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "082db345-0abc-4efd-b9e0-4bab07d81175",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f6d7413-8a36-41ae-a4c2-a77149dca101"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20d2704c-947c-42d1-a72b-bda87f1118f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b7bad20-a62f-4501-898e-70dfc5a8a2e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89caef99-aa67-4707-816e-229876eb7b4c",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a851893c-cf8c-49e7-89c9-66401766dace",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0261a605-e9e5-4608-af94-58049548eac8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3590f63c-e02e-43b9-ab77-7aa4d660e295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "00a221e7-4638-4ee9-908f-bbabf02e3ff1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fae8b580-d8b6-40d9-bf6a-a5d4865c37fd",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f761719-72f5-45ec-8620-dc150c762f0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb77aa89-67f7-4b3d-bcc5-50bf0a3cc02b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7f74c4f-6671-4e46-8cfd-bf06b6e70b9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e25bc8e1-c94d-4171-9cf4-821ec33402d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d438a57-60e6-4ae5-9563-238b3ea02a24",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9d90f68-8b22-477a-9bca-0bb727567ee8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c7f1ab5-17a9-48f8-8ee3-535d8820ff16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "678cee4e-ed84-49e2-93d4-c80160e77b0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3ba9f13-2a52-4403-be97-35c90234db1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "831dc30f-c51f-474c-8e6e-dfc98df7d19c",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5af13c9e-897f-4834-b53b-f4d67d136b41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91e847bd-7087-4044-b65b-5570edc31053"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f098b2c7-3330-4a45-b598-bedd78ddd11e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f311b941-ccc5-458c-8014-ed45ee54fcd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c46f5e16-4317-4aab-b7e2-65b7c6512449",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb107196-564c-4469-b4d2-8c0ba0175f87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0706424-7c60-462b-afd7-20e5fed02bcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd5e9507-c928-434f-bd29-926a97981d81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "43d26393-9b64-43ca-bc3d-dc23cf0793f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52567740-72fd-4e9f-bda6-b7f658e5e212",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dc6aac4-d107-4af4-a920-725d84f1f929",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bb27d01-1b84-44ec-b77f-4d67978d4653"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc520fd0-9684-44c6-9e01-1732682ba55c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b4b5a72-96a0-41be-9187-63e9b23723e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b24e16cb-69d5-421e-81c4-4b454afdecce",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a17b5e1a-dec0-46d7-a69c-374f2c7879a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0aad1db-e67d-4221-8924-d830daed0b73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de82ae18-ae23-4cf6-bcfb-d82d3c5fe7e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5892f9c-8f04-4571-81f1-604e99c4f646"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eaeba37-b964-4826-96fd-85a2c1978668",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a89ad157-0886-4fc0-ad99-cff71a34e5bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21fce28b-42f4-4db2-bbb1-716b4c4bf994"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bd6046f-27be-4234-b0d4-79f4371c2354",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f6bdebdd-008b-4c5a-b0a3-aa6291327511"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7effd3ec-03ac-4eb5-bace-65a92e518952",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89a93db4-28e0-47f9-a7ed-4b91526efeda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf728e0e-55d1-475e-955a-9b1b36b420e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "270086ef-4e7c-4bc4-a9b4-e02494632b65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "58eb0114-98da-4e3c-b87e-3497397c47ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9af9854d-73be-4788-a8a0-116037fedf37",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8c0d7f2-140c-40fd-9768-d1054ab4fc35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc44fb6a-9358-4281-834d-e0d087c63c0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "677f6094-58a1-4b53-8ac0-288da0ddd5e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c2ce041-9376-4b88-99ad-d7b4a3a7488a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f735a666-2e53-4212-af72-b81b367566f4",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6729df6c-10ff-47e3-a50e-93325ff8caed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb555443-619f-48fb-8521-9ea63f1199d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7253c58-7ac8-46d0-bc0d-5e473d0c2237",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "94300efe-10da-4473-b8c7-e4d6bae62778"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffc727ee-9491-4147-a0e4-279f48fc0727",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e3d2edc-efd4-4059-b71d-c91edc846f55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b91a029f-7a99-462b-8c10-6d7492340f88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d73035bc-7f17-4d28-a69d-b093e33f86f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "233bb10a-062c-4f1c-8568-0ec1175e4080"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d000b3e-974b-4ac7-b496-6b4cc43d8dcb",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61959426-f3d8-4556-b27e-8253511e9e9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5da0525-81c0-41ec-893d-8e7051485dcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "335ec73f-ba4a-49ce-819d-10a76b316e87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "239f2413-25ec-48ec-a439-a4060aaf63cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "796cb0bc-dc64-4a28-be76-b598fd5f3acb",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0075601-716f-413e-a128-a996c32b1517",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc41d1ff-a4f9-4d37-a650-c44acf2bb7a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faa7e15d-24d4-4e08-ba23-9a1c92b79590",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a7b7345e-ec94-4544-a653-14c6dec9092d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f76ba61-73ca-40e4-be4c-1bdf0337a55e",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d7c139b-d7ac-4433-991e-69193351cc90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e31c8687-13a4-41ec-915c-8de5507daef7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c267bcca-35dc-4e3d-b5a6-f94c40d0465e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "63e79b24-1430-45a2-86c0-3ab78baa9d36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4bacfb3-33bd-4f9e-9cb5-dd487566f692",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50efc44a-3d19-4725-953b-0bd705ad4371",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94f6c9c9-3957-4862-bad1-403d724424fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7700e37-f77b-4982-848a-0ddd6f0c2a36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e84ac6d9-2c7c-4b22-9f0e-61a4f4d59fb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a690e87-c98d-4d8f-8ef3-49ebbbb85856",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21e4564b-c9fd-4f07-aa74-5739d58b3604",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30aad2db-e6a9-4ae8-90ea-2921d0872664"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c36101f-b3a4-4222-8e4b-cb28e6dd06d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "43402798-5b9c-4f42-92df-0765188c8da1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bcd45c2-597e-4cce-8b76-19efa99ba7ac",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0b59ac6-e32a-47cf-a66e-93b64dda98b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "079888e3-9f3a-41d2-8209-898e200ed97c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bffd1689-0895-4983-a50d-7a98f1bdf32c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "bbea0eab-5dea-4ef2-b7c5-93fb168dde2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b8fc75a-f20e-4320-9c27-d1ce718fb3d3",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf5c72a2-c52d-41b1-ba08-745aa8f0a612",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66f04c47-59bc-4e09-911e-8113b99ffe88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "812df283-1a05-4da7-830c-e1ee6069d416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "bb511c64-9058-4b33-9365-93fcfe3c3504"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10d06743-8cee-42d0-8724-2330837d4a2e",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b6c81b6-96fe-47e9-8051-9cb4e0b8c8e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c87dd29d-627c-4a83-88ef-970d613e31af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b12a83c8-fdce-4cf5-9398-5834069c0824",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "d8cc45be-d7e4-467d-85b4-bb188fac3f04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8a001f1-d321-41a8-8e23-b3a05fd992a6",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5f6132e-c74d-4351-bc57-06345d99e151",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efc36cfb-a105-4124-8de6-875d62a7f888"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab1a1dcf-4b93-4fef-844c-b911a6284da8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd212096-7fb8-4e6d-a24c-3c9474339ef1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad8816f2-0d90-42cd-9a6e-1cd4faa0955e",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af4a7784-50a1-46b2-bbcb-e0cec59dc437",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cb6d49d-b7a2-4b82-8749-25235b741d64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54972b53-be90-466c-8856-79dec64d8152",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "eca8374c-0f3f-4baf-914a-82a0e717d404"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81ce394a-ebfc-403d-972e-f44b92f07a51",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbe47646-e9e7-4ece-b65d-0e766e2facc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94fecbd4-d899-487b-a93d-81b0491f4a5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c0c8e84-b2bd-40e9-94ff-1fddaa005a9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "384ac09e-4eb5-4ddd-9e1c-eb8f2078b216"
                        }
                      }
                    ]
                  },
                  {
                    "id": "196bb59c-2a50-4db8-b478-f3f03a20058e",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4613816c-ae0b-40f6-aff8-25ffd7e94eec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc3dc52c-a3a4-4215-a285-d3849985abf4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f662f7c-9171-4a50-b7b0-e6deee548705",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "22717154-1a41-46e2-bd51-521b5f43c322"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51733496-ad3f-469f-9a99-2da534549232",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a70444ec-d464-4fef-9d65-6793cf74f536",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "436c6711-a962-4c80-a541-b52b3d660d8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed38931c-bc32-4ffc-a3cc-893db24628df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "83153b81-d07d-4dc4-aab9-4b9e29b3fc54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87a4179c-2584-4334-8941-9fdaed8c7fc2",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a9eff96-e042-40ad-bfa9-9792e6ceb608",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7eba89b-29f1-4181-9f4a-035374f57bce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc3591e5-30da-4590-86be-48ecc5c0eb9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "499c8dc7-a29d-4d24-be05-d0d30c038771"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e92ae488-15ce-4b0e-8ffa-d7b2b3b093c1",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "914e88ab-15b6-4598-afc5-6b292cef2d5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "083faac0-dc0f-4478-99ca-9c2f515d4f9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7278d65-4da2-4961-8dd8-d8a3d2aedf26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "ad8c038f-bb1a-495b-a968-d1dacc0f9207"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a741fcd-f4f8-42a0-851d-c810c4a94760",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87f5e56b-9ef3-405a-aa44-f3d3efe67594",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "225355a2-548d-4167-9d22-f55241ff7344"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c21bc8f2-1334-42c0-a339-c0385816d28a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e5100f1-f7dd-40c0-a07d-3339247a02e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ab5041c-7ec6-48a6-997e-3e2c4ce8c068",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc0d9967-f042-412e-86db-fdc6a9d026eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b37dc52-512c-4f37-8cec-7d7e357edec5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83a15cac-d6cc-4af3-beb7-63a52d14ce80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3527dffb-7834-400d-9446-eae6fe4c53ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c5aafe5-f91b-4736-9e89-647db7de0c95",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bba4dc22-9d24-4315-a7f1-cc10bc5ed7e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95e3df4b-bcd8-48cb-acca-ffc621a23f27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03302a14-547e-4b65-a056-dcfbbdb45e07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b8b2760-0a2c-4f9d-8345-80d014719af1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbb658dd-2e39-4257-ae87-8ad5e9c168cb",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5e75eff-2389-4ebb-9665-4d4989fd0294",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8369e12f-4cc5-4a01-9b0b-1165a89cbdbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfd2bf57-a0c9-4b7f-a881-74726a8135cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "85ac3e2e-f49e-4ec2-878d-72f1f05a9d3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce7eeb79-f48d-4313-acfd-164073b9e3b3",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f7b3dd9-72b9-4f6a-918b-f4e0c7d7e299",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2893c88f-6608-49d2-982b-c4337138044c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e8cb8b8-f5fd-4870-98f9-0115e41d254a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "5f6503b7-e684-4a8d-aab4-9563cf7c2013"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff3e1136-6b95-4782-a8df-fc6c35bbea0d",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f223854b-bd3e-47c8-9428-f4cf3216117d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bc8947c-48fe-4bfd-b434-6285b2338217"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6889dfd-e3f4-404b-ac3f-8058adf1f36c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "2ed508ae-9ff6-4ec6-9d7d-bd4f78e9b346"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55787b2f-9fc1-48b4-91fc-79890c74eac0",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bfa3693-7d24-45af-8502-f5f83eecf5fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f220756-f42b-4d5e-888a-efa80d2aef33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4579b8e-95da-4cc3-83d7-286fe4e05a20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "100219f4-f394-4f6f-a0a4-4c1d59ed6de1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96f53007-702a-453f-9544-16f629199725",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50a9bffb-6e9a-4fa5-9c11-4c8c13039e02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e983b5a8-0285-476e-957d-e4e72dc79e9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcd6994d-9d78-4829-8196-15c737b4317f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e79a1e2b-99a6-41e7-b48e-e23deb722288"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1928cb1b-987a-44af-b223-ef93d97aaecb",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "249d5fb1-9b15-4edb-8694-8db097d1545f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27922331-85c6-4e72-978a-80c91c563abb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6a4f079-04c4-4f52-9566-2f9a9ebc829d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e58532d9-7c02-48ec-b0cf-e4881ffbc2ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b1739b8-4612-4ba0-9d6f-078283cb113e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b5733bb-9b97-4e4b-bcc4-63de4c50655f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4919021-a371-4b3e-a9aa-70af6e2c9dab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdcd1ce5-3351-41e6-8927-8601e62e57f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ac7c2f68-126b-4d26-85a8-f34811a4247d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b6c1b43-645e-48a2-9c34-c1c2ce9bfe39",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cca6850a-e66d-470b-b384-28e1286e1373",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "562eb20a-3ee8-4a3e-90f1-11c91072d2bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d5f17d6-4582-48ec-b816-6ffdbb6f9521",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "198fcf97-3b75-497a-8776-8190e8549997"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95475586-9d6b-4f80-957d-2240077d33bc",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f6cfefd-aaf4-4c5c-926d-19a5c1cbf91d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92c9d15e-341f-4e2a-9b2f-5d5464e21949"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7552aa5-94d2-4cb3-ab99-1e976549dba7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "4dd761ad-4ae8-4ea0-b9e0-2a36b9e32b79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd999ce5-1689-41a7-9aae-e118c76d971f",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbe1ceee-a7a1-404b-b238-53184f1eeb69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98fd9c06-5555-4335-b5b3-695aeb09ffbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45b85b66-2654-4622-b910-db66f381fbf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d3e663c0-690e-4eec-a49b-23761d3ee7c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d95dea61-cf13-4bf2-a248-ae5a6dad784c",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bb4b16b-f387-46a4-9cd4-c9f740fbd17f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dda390a-53d1-426b-841f-22d824999009"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67c01f72-a930-48e8-b615-f9b3c741bd6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a01ed17-1404-416f-8b43-682143fa32bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "556c91e2-c4eb-4725-bed9-a188ab6a05b7",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3183a9a-ad25-4c1e-b837-da05319c214d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fbc4d94-ff5f-444b-a456-2a77fc5f3871"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c89e8b61-0650-4828-8b07-3a58ce42db09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9eef2bd2-859d-49ee-8208-ed2d2d6d6377"
                        }
                      }
                    ]
                  },
                  {
                    "id": "803e708b-ad64-4e6d-ae2c-2e7cb96bc38d",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fb37a15-6f30-4814-b387-84806a935f51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cedc327b-4e7a-4580-bd94-c221ced6e54e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68637861-78bf-4786-b441-0b9d31ee948b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "03e8b841-fb80-4289-affa-048fe191c6a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a5529dd-2de4-48f3-abca-59cbc9e33b1f",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d40ed51-9ee5-4737-bd03-869add1fa894",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b189fe8-d739-4309-9171-05c1b5766b8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2852926-732b-472b-9e5d-c39cef0a489e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "329540e4-3028-44f0-aa9b-93d78a7bc9f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5abdef20-a5b2-4201-aa0c-e5d1baf72a97",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85a43ccc-3cca-4e87-84e1-b9885b300afc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0941c9ee-3f22-4902-bc73-54f582113997"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65840b80-d321-4d3e-8f26-ec9b70921d0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ce91c21-1259-4ef0-bb19-11851899ac9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae3b3555-e50e-4d06-8fb3-2a3bf9ac549b",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db30b4f7-7271-4a1a-81be-a50e6016fc57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c594166-0128-43af-8d27-b404bbf8f897"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d634f3f9-5585-452a-a508-d7422c81f07d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd18fd0a-dad2-4dce-a0cb-3146ff265073"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ef13d3b-389e-43a6-bb87-7481700b9181",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "215d51e8-0353-4cb3-a962-0953e6a5650b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3032501-467b-4415-946f-7f181fa4669f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79f777bf-6752-4a3b-ab89-9963ecab769a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3bfe956-3cbf-4cf2-8555-e81129774b4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "675fdf16-5919-4d1c-a5ef-90c57d1cf7fd",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54c7e3cb-f1f6-4a4d-9df2-044e0dcd8388",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b4b32f6-5f69-4853-97b2-66d270fed7fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c252e5e2-ae50-4672-85d9-1ca914476b9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "66d8c008-903e-4aa8-ae3e-f08df2ec8a17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84ee90db-6eb2-41dc-a26a-99bd6800a0dd",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ba01ba5-d5bb-4b4b-942b-86f02c68c224",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64b369c8-2245-4bef-8cf2-603d3a078a46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f55f9b4-4485-4abd-8443-50389486df77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dae12eba-225e-4351-a291-acd7d335a5bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a3780f3-c219-456b-9cf6-671a73179064",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4a293a0-4afe-49be-9a45-37ca9f1bb2e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abae0dfc-1186-472b-a335-2821d257de50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01fb3008-05d6-4530-aacb-1078e4bc0867",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "92305dba-73ca-4055-817b-41ed1a769aa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "364e1224-305e-4b5f-bece-e21ed53620a7",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a10bb43-d1af-4a62-afcd-d00a38e306b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e688139-3903-43b0-af0a-5e210cd73f80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecbc220a-f6af-45bc-9fff-87d416c1940a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "74994573-6a77-4031-85e7-f02bebe623f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f43ffdf-6ac5-48f4-addc-4f11f88688e0",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9987cf0a-39c6-48e3-a67c-57ddb6a2d58c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a28c6e6-2a8d-4503-bb88-8ba6655f27f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0da17fd6-bf5d-40b6-a6f7-370bf2090e6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7aeb2f95-8ff2-45aa-97a5-01e65500c36a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "959b3d43-878d-4048-bedc-a387fdf731b1",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a916c04-9114-4230-8409-2c0a828d1880",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9f23733-a74b-43b2-8c43-39ea6570271b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29b8baa4-adc6-4935-8379-1df3a06596e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "566ba6ce-b394-4209-a41f-7f4e6f5e8858"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06dee302-b97d-4ad1-ace0-39b8ff69035a",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4990d04a-cd42-4e08-8cac-8995eddd7908",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1b527c8-fe06-4ae8-83e9-fa64a1a6e7f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82ed4999-5dff-41a4-a679-fa488496676a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ad59cc2f-86a6-4cbc-b298-69c7ea6c4a4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "625f99d6-6bc1-4ccb-912a-39059754b79b",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "581b5b76-ddce-419c-8b34-449d9601528f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfffdc03-5b22-4ac5-87d0-c87bff798c10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab2845f1-ba9d-423c-b37e-0096a99ccefa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "31f0fffe-05e8-4abe-9a41-d2041fa19b0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1e1e2c8-8c14-49e9-9f3b-e6389699ff0c",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d070a86-c2f8-4935-a589-ac6019b50bd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e19c19a-16ae-41f0-b5aa-4c72ac3c4d7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a246b320-f30a-4ea3-be9f-d34f0b34e383",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7f1d7b25-f503-4513-bc90-565635ddd454"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2d85e57-a382-48e3-97c4-848d8accb60c",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2052c817-776c-453b-9df3-b8c1b6eec5a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "898b3d92-6e8b-479b-bb02-b4965aafb951"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2afea9d9-cb79-4d07-916b-21f821fb68bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b9cd5b12-cbeb-48b9-aa65-428c30c12072"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a1930dc-ad4a-438d-a8f8-d1c70ad58e93",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11c0c740-48ba-4a55-b0bc-3a5a4cfa0045",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbfd8372-6c51-4dd4-829c-96077af4eed2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2419b3a-8725-4a6c-90f4-ef193fc16fcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "256251cb-87fd-4c0b-b867-458041cec773"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00d7caa1-dce6-4c7c-9239-24166902458e",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80f15dd3-06bf-49b3-83c4-b14cf9117354",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e3e589e-09fd-42c9-8987-0742c4cc6199"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd2d2cce-35db-4f76-86e1-2a95f9fffa59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ef632bc-673f-41d5-b4f9-5213d065889b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8b52eed-f34e-466c-9838-bccc33748389",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6b4b254-9a06-4e96-954f-e10b298b2228",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea2dfdc0-c9a7-4c62-8198-f8b62f5f0ddc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c045c8f6-fbc4-488e-bff1-4f9be24ef824",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b8e2d81-269d-44c6-b6fa-568f82dfbf73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45530efa-3517-4e2f-a74f-e8e63aa6878d",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76feb023-030a-425c-a1a3-972a41986988",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06ca39c5-fd7b-4945-aecb-3db1b1ab87ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ae1b258-dc18-49df-be71-ecde30e17920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c93467b9-bcea-4a8c-bb47-c816675a3fee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f54e5052-16b7-4f24-a1ad-10354ddd84ab",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a99162c-73d2-422c-a9b7-04aa871749c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4e31a99-677c-47e0-80f0-3b9733f5ed3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "772fcd1f-4347-443c-b0e7-1f7a6aa28ee8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "aa0dbfb2-49c8-490c-8547-be09c4f9e2ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2206fef-2fb0-4eba-97ce-fe4b65ddaf0a",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80bf3585-0e8c-474c-bad8-095cf487abfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "161d2a9c-bdfe-4905-ab13-2aba0220b401"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5fd3355-224b-486c-8cf7-4af508f7d92e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6de5fa80-03f6-4ff1-a410-d35000f0f1d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "307c81c7-0de8-448e-9a9f-1c1f58f3c406",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fb274c0-4bc6-426c-9ff8-2f2cfcc9dd53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a59497a-4259-481a-91f0-8cb56c71908a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3776e165-ea63-4426-bea1-fa4f27c87d0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b0d2b74d-c721-4c1a-bbb0-e425a5b1e108"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8c640eb-fca3-417f-9dfc-db5c8f8dfe0a",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc64b77a-9a23-4804-8019-a4c8bfc0ab7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87456528-04af-49b0-a85f-dc4547e4ecc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd84499c-85dc-4b35-8dad-2cc6f6389aee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "90471f9e-0674-46cc-8e70-c54d7194d0be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "993b1ba6-32d4-4193-b99d-a18bc6ee0c79",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa4f8f0e-32ff-4ed1-aa1f-8722c8bc61d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6f366f2-daff-41c6-91ff-02a2c3908267"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bf6d66a-a022-4101-b68d-e6c2e5db3e46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "82d2e725-bcec-4469-8546-2f7a67848893"
                        }
                      }
                    ]
                  },
                  {
                    "id": "415977e2-6a52-47a0-a2a8-e6d45fcea0c5",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76b39403-7d4e-49e7-b04b-bffac4b77a58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8f3f1fb-831d-4f7b-b7bc-4a60fbff8f6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6045685-4a91-4cfb-a060-5aceb7bc50e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "c85dddb8-d53b-4188-8e7b-41a34f55d3b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06cb1a41-74cf-449b-a75d-48621d16fffe",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80376535-b4df-4434-b825-f7b97766f4c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "f45688f3-0413-49b3-9cda-b0df8faf14db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4826f10-418d-43b3-8709-8d40b3280da1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "abf93478-355e-4413-b6f8-15a602ab106f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "385fdfcf-601c-41cf-ae39-2d7cbd5c17a7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9b3f5d2c-a8f4-477b-9528-f30154c0ca22",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa14f705-5a6e-43a8-9cb6-50f47acebb0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "100d80f7-69fe-4a9f-939a-ce620ad06519"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a77f781-2650-4be5-a63e-e36fe3dfe5f4",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6615293d-248c-402e-b6cc-779a26a5edf1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "31edb884-4683-4bde-a780-6c3f0b232623",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7a5d5335-5a45-4429-b548-8d82d358a05d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "26018df6-a6e0-4411-a4b9-26872fc35822",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "78f9e06c-b035-40f2-911e-119413cd84aa"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6dbe9d35-28cd-4dce-8d14-30daa899d8ba",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a54ec4a3-b8bc-4cee-a664-d8cb439a9612"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3416dd3a-a7eb-4a86-8957-352acc904f02",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f2382306-2cd7-4178-81cd-82f22aa288ee"
                }
              }
            ]
          },
          {
            "id": "4f40a871-babd-4a27-8ee0-e0564768f1af",
            "name": "Positive Testing",
            "item": [
              {
                "id": "59877fc3-03c0-41f4-9c15-1ce6a7087d3a",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "ed18f298-1a5f-42d1-9839-622623f591c9",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cadc9d2-4e61-4fd0-b625-9ee80e2ac690",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "243d0f78-f2d5-4a2c-9aed-33f59edd3f14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33df6d2f-51b9-48cb-ae40-8c88578d7b00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c713bf0-1fab-4b34-a309-d41c7cba8b70"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "732dfe9e-c9db-41bb-9360-6358ade8d30a",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "352f78cf-181e-4241-b433-42f23269e697",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "68c236cf-ab46-4dad-9808-a7a7c698a077"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7bb07515-31df-4fb0-9fd1-19b9f5963954",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3f3f240f-b724-4c14-9cae-51fe0fc8b226"
                    }
                  }
                ]
              },
              {
                "id": "96042f46-de71-4fe4-828f-350cbd9ffd4e",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "94566656-27a2-41a6-b1b1-0a51f1a3d5dd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d65c3a66-b660-4c39-a7ab-58c1e52d7fc9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "767803ad-a78a-435c-beed-de1ea222db11",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "44ed79af-2e9f-4364-b515-4579474de27f"
                    }
                  }
                ]
              },
              {
                "id": "3b28ae7f-bd88-4ed8-9742-e409029c47f3",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0afd885b-1800-46ce-9434-f2b44dcf2f96",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7db2a1c7-4d09-4309-8f78-e12e7488952e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e71b1421-1752-45a8-8277-c488dacc3807",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6c171dfc-b8f5-43c1-8bcc-ea858de9f0e1"
                    }
                  }
                ]
              },
              {
                "id": "0e049658-6cc5-4a36-ba11-c6c3738f7b40",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "81cf6074-66df-490c-8210-d30d9c6944b0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9b0a9e11-b7ec-4386-adab-813730a53685"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cb971c22-db85-4500-a20a-59720d82acfe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "2d601817-6e7c-4e4f-856f-181069be9043"
                    }
                  }
                ]
              },
              {
                "id": "265bf409-35d6-44ec-b3d5-a0153c2971b2",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1d06a465-503f-4b0c-bf39-a546fa018676",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "33e0b8d6-1d35-43e0-96b5-cfc1a3bb7b4f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e7f14e91-9a40-4410-b091-ffcdda660c32",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "aed601b9-4d22-477b-85b2-f485d008b2c8"
                    }
                  }
                ]
              },
              {
                "id": "759ffba4-ca09-4d42-8bd3-9c09a12d2589",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8532265d-999b-4ba2-bb42-11845cacf296",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ada9616f-1dd8-479b-8cdc-3115cbb5351b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "89f7be6f-3538-4c03-b5ae-e01c90ca763a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f8fdbafa-ba45-4458-9a6f-b086a433521e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e9b61788-2799-4b53-be38-616955025b08",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "70f168be-8803-4ad3-a66a-1efdb7a70d5b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d1b00148-a777-4705-99f7-3ab78d2fa37b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3643f535-b8ca-4885-aac1-7487a24a0b0b"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6b2bd928-a1b0-44c6-bf3b-f9d4f37ca469",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "f1b93769-3ea5-4318-8c5e-3d0217829b82"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "59803dc9-ce83-408a-a693-755177deef43",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d5f8dd37-9679-426a-8f21-6d600e8f45fd"
            }
          }
        ]
      },
      {
        "id": "f17e348b-1e45-4d62-9093-c12442c3f78a",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "bd26367a-1604-4678-b579-a2ea5167cbec",
            "name": "Negative Testing",
            "item": [
              {
                "id": "464ef011-c95c-45a7-993d-9f40c9b00266",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e16d316c-feba-45bf-aa34-579d0547e119",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a134f76-5440-485d-b3ad-c0b6f0139622",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38a6633b-1447-4af1-8cd3-fb7eac2e31dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a510c8ae-52b9-4e0b-9a86-ba1a373ac6cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "b36bc667-2ed5-4313-8d91-f725d3dd5b91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b20ebeb-b996-4908-a2e0-1258d5ae1003",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3ca20a5-7ee9-433e-9478-e14c86da5cda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bd438d3-321b-43b9-8ced-e2f5d2696f59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0a2d2a9-e6ef-44a1-8791-b4be9615e438",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d07777d5-1a67-428b-9592-a1575f6ca551"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c5af6e9-248e-4270-86df-f6e9e90c224f",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d145bec7-7daa-4bdc-b451-f632e93aaccf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ddc2ece-d051-409b-a196-76f3e9725557"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c10efbb-5d5e-407b-bbda-837c663a9f65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9caf4f99-beaa-4df3-9de6-ce6bdcf6862a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d310c937-da0f-4165-acbf-56898afe0a8f",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abaa054e-494d-4637-98e9-e7ccfc7423c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed044846-c471-4003-b428-f7552e9725bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aff9edd-7df7-4560-a728-507e1e748a89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "875bcdc4-2ac4-4a46-8930-5cb768250a42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c38697c-75d9-4635-8a92-33bf220df564",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6574272-941e-4edd-a3f7-3a72815d2e29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfd21f24-afa4-410d-8d06-94c006a971f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61e90d86-6376-4a57-9269-db254fb82fa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b23928d3-235b-4148-aadc-18365847e391"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3808b5de-a3d4-4ab3-9922-54f01939939c",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a17a0b1-5e32-4e73-bf45-09fa6b3176e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c1c3da1-127a-4bce-8487-2e705c1bd911"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4bc7707-6ad3-4a76-8a0a-406023414514",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0c551831-5375-48f1-88a3-d3428d038db4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e13c5002-757b-4d74-a57f-76eeb2cb23b6",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d73da1f-46a1-43a6-9210-691ee96967e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b332ec67-6ee0-4ac4-abec-d542b6506244"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "477262cf-7f41-410e-9634-410d69ea537b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "f1b9f4c6-d062-44ff-b664-87ef48317a18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08f411e5-4e31-4b5a-8e42-f23364600102",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1c20c9e-2006-4a8a-af2b-42fb06819408",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ec827b3-24d8-40cd-b778-8e6318ab9935"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc6f1098-8285-4860-89cc-3c7702ce96fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4ee07f9-f1b4-4c08-af1c-8e1d349c202c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "024a7406-0cb5-40fb-b7e7-86afaab7052b",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "554e40fd-c954-49a0-b6b9-9b83b16d7e4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9b7d306-0ea7-4dae-9816-2dbe0bfdd4a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b59cfb3a-4879-453b-a2f0-bb52bb49af15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "942911da-9e39-459b-8d60-d50296a52ef1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74c8bb00-919b-4938-85e7-a14f99564ffa",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cb2f6f9-2768-4746-aa11-0c3c939a6ec9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c21da9d-b884-4911-9b63-4e6e949d81c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "067a016e-2033-4fe7-aafb-9720ed75e339",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "026c20c4-67fb-45da-b440-9a4c31d11783"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13edd63f-82a2-4fa7-ae65-5e52f5b0c823",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22c59976-1934-41c3-9bc9-1c4e82136004",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78b79967-9528-437c-bbc5-2fdfad44bb39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44c9d461-e28e-4a9e-bafc-21a09db956e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "e82e0544-b08b-4daf-87b3-8538259ee21b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db3d0aeb-1294-4bea-867c-616c69b9d9c1",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bac78b9-b392-433e-b487-ac6ddcaf0766",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80a159f1-1c89-4fcc-9a57-b5f41953ac5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d42c8fd-a86d-43af-8761-92e674c15211",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "db6015fd-cefd-47ca-8506-582bcc1e1af5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cd6d29d-f4cf-43f0-bf9c-2abe37cd73c4",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48aeb9f3-a8d6-4d3c-af16-913727f48796",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0abc3d31-3714-456b-b171-4a268aa827d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19305621-6934-43ca-b044-feb699ff9e32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "072c3658-2ed8-4276-8f21-f72f3131f517"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71131ba2-c162-405f-afcc-1959e5f13468",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d061fcc-c6c4-4ac5-8cc6-314e8093bdc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6b9163a-e8d5-47a0-b194-f43bfa8119d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "736e27d9-f95b-4802-9751-6fa43616df6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "5260f687-038a-48df-8d9d-2408ec7ba782"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7065205a-d961-450d-9719-e7ffe2d1a511",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f604546-67a2-49a9-a784-6584d024c0a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1783fc9-d73a-4f67-a093-ed4b8189ba29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d474acb9-c8e8-4dde-9865-9d82cb7a6cc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "3970e754-937a-4eaf-8fd9-89e25743dd62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62110b9e-83c0-40ca-b853-169ecfa0bf27",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cf7e7db-ee5d-4b12-a554-d6e27c600766",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d971794-dc84-428c-94a1-b3879903bd6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1200a39-00da-4cc3-8091-dcabaaeac8e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3ff3316-5f60-4025-a73f-1c6a5c027559"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98a8d31d-8355-4a60-b1bc-245613abb295",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ccf4e57-ffff-47fb-a011-53cc43051de3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0644ebd6-eade-4438-8d7f-b58f900e930c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d34a5de2-2957-4996-84e5-7915288f9d06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3aca35a-862a-4f0d-9717-d8a909a49f96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c76caaa0-0cb2-4e26-b273-52d3badf0dbf",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf218566-af6f-4dfb-a1bb-60775d9ed819",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65afd82b-ee8c-4d59-9dc8-5bcefb554f49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52c51aa7-6e04-490e-894f-e0afcc898ada",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c7691ca1-e440-43be-bc1e-b5d07bc1e958"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d210f0bd-2434-4eea-8cb9-1b4f8ca4312f",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8080b066-6412-441d-86f4-bb76d68ef1c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2a609c9-7642-4916-9c87-804632fd18ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96665144-205c-4217-9b7c-38e1281facfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "76c223f1-5c15-4893-b21d-a3eafafefabe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb1e823f-27cc-480c-a9e1-f3e18b4436e8",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e41af14-0f45-421c-bf0c-f96fd3c3a653",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f551c2a-5ca4-4c9b-a41c-663d64bc0a2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e01ad614-bfbb-4715-a971-845d9a513361",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c02c91b-bd48-462c-b829-50809a3c4fb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0cb1cf8-7b7d-4806-9c5b-d344725ca9d2",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35438802-7caa-48d9-9639-302568c785f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fec882d-ca38-42fc-967e-f20d477825df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07d024a9-237d-4a63-ac29-d44d5a199683",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c948e37a-fec4-4e90-9209-3524033c6266"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea849f03-3971-41a1-bea7-3634b3f2ca27",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd574a0c-89f0-461a-8674-9acc5e39c3c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c66e9ac-dd0f-4f8d-bdf4-3f5c7a802300"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71b7ab3e-e75c-4c9f-a6fd-2c4fa200941a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "000b99bf-fdd9-4e40-b7ff-ac3f82da6dba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51f30067-36bf-41b9-b17e-3e884c4f3f60",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bcf4edd-cab5-44c1-90fd-ba7cec2fc5b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0532dd49-b07d-4439-9bc2-ed86859ec14a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f8374c7-e829-4eea-a30c-b36c853a2bef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "09143b31-4bee-41e5-b55e-0d25688d1c5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fa35d5c-691f-4e29-b1d7-36ce9ddd66c4",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71eb97ba-c8b2-45c4-96dd-7af2cfd4f438",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "017990c8-4772-489e-8c55-a5726cf56249"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be94850c-1210-4e16-8bd7-9461071e0530",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2f0a70d-cfae-40f0-9290-ad16a42a4eab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfbb8802-6061-4acc-8127-d16f4ee9e6cd",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64b96c06-0dfd-4457-9056-3310120876b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6876048-ad91-4115-a957-6e0e5ebf3b79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4989f3a-0eae-4421-9496-389c8f28ff61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "67cb39af-c9f7-4caa-8e17-ad642198a36d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ee489c1-305b-4414-aa8f-f42deaec1d69",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0bcdd1e-86a4-406f-a840-aa67a3e4a033",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22958087-52e6-4282-b622-beb0151dc269"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d1ca975-22c1-4952-8b39-601711962623",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1311aac3-738c-490b-9703-9b60f0081cc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c81b8946-8018-44a0-ab06-06b5bae36c80",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4555b2e6-8694-43b5-9fe0-3b934d5f4833",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d8cce2a-9411-43cc-8d74-819addf1f467"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c842b9f7-4842-4383-9435-998e2f430166",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "55e0e640-d90a-4dad-b7e3-6e46a9f1b0a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "882f3dfb-9684-4ff8-8368-de52026d3ab0",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66b1a2d7-7773-4070-80e7-c7d49a86e177",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0985f487-d3a8-4a29-a62b-cda84c992ed4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b4c5dd6-c8c9-414b-a515-c9feb6901440",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a8a01af-78f1-4d22-b5a5-7e6e9d758bc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e966301b-c069-4ad2-8eb0-055e72ab0d95",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e969e35d-bba6-498b-a9e9-f05c4043780a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f329296-21fe-4f54-87e5-67569437159c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90d35e37-21ba-48ce-b457-d2ab09d78db2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2b0e705-83b9-4c25-8bfb-8bb32b7fd41c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42a0d462-b48d-4b35-bbfe-b5d4f9c4259e",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9108f1ca-fbe4-4dcc-9bb2-721c4930a961",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8988cdd5-33ae-47db-858a-1dcf7a84459c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f439113-f8fb-4fb2-8e96-59fb8b5e0261",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c7434af5-6ec4-415b-96c5-94cea0d7abd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac163dde-e059-46b4-9f80-3fcfd77314b9",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dce33ba4-1544-4b27-a0e1-e62ca5d42965",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4ccf021-4053-4ffd-b9ab-83485a03b109"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89237040-accf-4cb3-9331-9e6b869d91ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "16b3c185-6938-4152-b072-1ca1b8782f54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c15bc470-16a6-4680-9298-f1841ff10398",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f6ddbdd-cd25-40ce-8130-3ba8cfe2668d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2a70b1f-d1af-4b5f-a4bb-12124e3348be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "736103aa-5469-4245-a661-f0e194cd1668",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e5a5961-bf06-41ec-9ad2-5dfe3db2b1fd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d91d91f4-c267-4b74-888d-54f8710ff809",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1f3354ee-caa1-4830-b949-fde4d0002df2",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f2b316e-12d7-4726-8590-88cfa6d64cbc",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "9dba3901-375e-4aa4-abe0-7ed278b60cdd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "207eae33-9d7e-44ba-9a93-a76ab180a634",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "77f2c236-1fc2-4ac0-a5d4-789943818b2c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "912d7193-27d4-4c57-9e24-92754b831723",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "71a6d42f-7483-454a-b768-980fa212bd55"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e425de66-2f2d-468d-ace2-3126aaf80692",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "591df6fe-9f51-4f4d-930c-c64236d19272"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "14d8a879-457c-4b4e-b52a-c74ffe235346",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8ce7fa41-28ea-4ed7-b8f6-04ee20b194b9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a35ec44e-8c7b-43a4-9864-3c31b5f44d76",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "425fbab4-de35-49a2-853a-71c1775b8e89"
            }
          }
        ]
      },
      {
        "id": "38702250-60f6-4308-bfb6-30c52a2cfeec",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "34a18c59-d218-4e71-a231-022636f5d182",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1abb3bd3-77bf-4e04-9b88-6c8e314b4a20",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9f07ab00-c592-4fe0-9165-07951ce0a1fb",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58e74b6a-129c-48db-b2d2-bbce309d37c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f051553b-7fee-4de0-9e32-df6dc9bda33d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3175a0e-3e69-422f-b0c2-38cf0e6f9a6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "83ace4d4-8836-44f9-b0b7-23005d05fe15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "579dea6b-1518-4cd9-bf70-f830fde2156b",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b37023b-3917-4fd8-ba16-546567ebe358",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1944c763-da3c-4e99-a75e-9015d124a308"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2e27f11-a00a-4315-a688-ff669f2466c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "78d70c3a-b165-401d-b332-8e5eb5899abf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3782c96-8860-460b-add9-4e7977b2d45c",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90024510-ff67-461f-80bd-cbad5777e645",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47a30f0e-d81c-4590-898f-cd1aa435aade"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af4a44bb-b3a6-4bc8-88e9-3b9675e2d0b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0cccbd04-e919-4052-a98f-6fac62adfa59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27bc5c47-aa97-4071-bf0f-91183b4ad6df",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "265a670c-44b5-4439-81e6-bc38ba67031c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b26a03f-1736-44b5-b2df-f8a6a5994b49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "213821d1-ac69-4219-affc-6e26719131ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7474727-576e-4bdd-b5f1-bd196e3a87e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ae14028-9a80-4ac9-9168-52f52ca731b3",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8fc3b7a-acea-495b-b135-a89a2d368da8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "684c8ac2-b2e3-43b8-aa43-ddb0b14933a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83701550-c0f7-47df-99a6-390b94882515",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf39675d-7ecf-404d-ba13-3052e1e0a007"
                        }
                      }
                    ]
                  },
                  {
                    "id": "795dde90-b037-4866-8682-e6ce22ea6491",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2f40850-1289-48d1-9a61-94d1a0c9b627",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b51d0f0c-1880-4291-b825-459d47570eda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b70a3cd-56ac-4556-92f9-38a71c010282",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "afe15847-a566-4e73-a670-bdf6044a37a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6d82e99-0bf3-4f95-9f1b-5f0a23be103e",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "361bccd3-8646-4b72-b4af-e7c905b0636c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0072833-bb5b-499d-8a3d-81046726eac9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f5742d0-e162-4f7f-a492-f16a523a0440",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "9294c962-c658-4e96-9c59-55cc7fc84aff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef3dc8f6-a5cd-40f3-a0c3-9c9548683377",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d452c325-f2d0-4fb1-959d-540aa0193c70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4824749-f43f-4173-ab51-c70dcb34f523"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "702e8cc8-28a9-4b9c-bffc-e512276d78cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb1d93eb-83d0-4caf-a02c-78f370be7df3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dfc1542-68c5-47e3-8bd9-e6d1c159fe9f",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "738e0c45-fc09-4fae-bf19-e98a16216d73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b144d38-943b-4442-9cbd-35ff80b217e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f100268-f443-4d70-80e1-1d09e15cc3a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "58ab16f6-5846-481c-9cfa-69d2504741b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "842bd49c-b120-4982-8c86-a155d30c03a7",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bd43f01-2ffa-4d6f-8a34-48c9786f8deb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf505bc1-fbf9-4413-96c8-263ae7386b9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86c7f3ee-10e6-42ea-984c-7acfc8e3b57a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6dec5111-2c1c-414d-87e4-af1c6d8b4b44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5753d804-59d5-4075-a005-f5b92d850fcb",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30821cf5-1d95-4025-b0f4-9027ee2f5371",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a1f4366-01cf-4449-8ccf-4d305298f633"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98fd982d-465c-4692-9c7c-825f41a7fd00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "96eee95d-40e7-420d-81c1-d52c86481b41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "309bd5f2-0a24-4b4e-8934-e03f7c468379",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38f3f52a-1af8-426e-aa08-326852ba8190",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef83e326-1d72-4eb4-bad4-d02c4e6ece61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0794513d-46c2-4bfd-8f90-fc19dd288cc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "717e0914-c818-49de-9cf9-1a2cb685ed53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32f8f63d-8561-41d5-97e4-e742c8d7d021",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96593394-608f-41f9-bf7f-02efd809c597",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "030ebeb3-4720-41e9-80a3-872d1556a8dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cecf840e-866c-43cf-8d23-a6ad92301b8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ffc0345f-1734-486f-84a9-8c298cdfd269"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8d8883d-1d49-46fc-a7df-b613d5b0af92",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6578f45-5482-476e-946d-e8c8abbfebfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2aa81d2-6124-4eb7-8f93-04a7d0e0b362"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "265a814c-7c6a-425c-b610-c2a7e2f5f25e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac010b04-5f6c-4940-9916-bbddd10817e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "229a483b-34d1-45a6-909d-65809fe92215",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bd378d7-d01b-4e8f-9559-1943c089d1dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59db5632-6049-47b5-a52c-268177c42464"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79db32e1-388f-44c6-91ee-c17a1effdd8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ddf34f2-acd6-445e-8b73-767f7c5b2071"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a65f562-65c7-4a96-9ee1-a57c4802b655",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc62c439-1a4e-46e9-a8d1-cc9b053bf0fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d964c7b-43da-4249-ade7-567d835f1d9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b29da7e-e2cf-4162-a0c8-3f57ad3dfeb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "9fe96d8a-1a2e-43e1-9df9-215cd925ab6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd1e17ca-200c-4f29-8351-ce0f2e79b0d4",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "167ee5fd-1263-4bf4-8205-8fa2da32b60e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3745228-921a-42ef-bd62-27e695e37862"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8194c696-7d05-4a7a-9de1-acd36e0397d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc4f6639-3023-4c71-be18-a5796cb1ca05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bf1bdf5-1a9f-4380-a7c4-2553413109b4",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9659a2c1-f755-454f-9d9f-a104ce78f686",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e6fbd28-19f8-4f0b-9ade-1fef3616c587"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2bd6d7c-96bb-4205-ab62-af9afccfdfc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc031104-1988-4f56-ae1f-6774b0ed0a95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebe90b1a-ad13-40aa-932b-3000ed1259d5",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec142457-9977-44d1-a133-f00e4d451360",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8847b707-90b9-4d1b-a5ce-4a860f9fb8b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6020153-81c6-4426-9c5e-cf95b6ba73d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "68dec2bf-eef9-41ae-8090-06b99799c9a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae36d090-1e93-4908-b6e2-6adcc8a0fa72",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebe2c95c-fe77-40dd-91ff-b91496179808",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edf0e450-ecf8-4cd1-a853-54ca9e9b39ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0e377fe-1b61-41c5-875d-558a39e98d35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f857c19d-9b2e-40c0-81e1-871864198b32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e0786fb-06a7-4a1e-b63d-3e54390500bb",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8efe4a6e-866c-4462-9f7e-7a85c759e187",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19865203-33b7-4907-92ec-4978083e4bbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30c10712-61a0-46a3-9dd9-243078102193",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "43eff964-5f6d-406e-8f96-990861cf593f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "806b3bc6-e275-4e06-9eda-c0d0af365154",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c32fee74-b9a9-42cf-b02a-37b9a4e17221",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7102b26e-3bd5-4eb0-aeae-c553266e6687"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f3ca056-2eea-4c2a-b7c8-f00fa3782c32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1cae694-0619-4d7a-a911-f6cbe96cf314"
                        }
                      }
                    ]
                  },
                  {
                    "id": "338a806d-6fac-4f4b-8edb-97201e685c20",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1537a6f0-1ce3-46f3-97cf-91f6c627a040",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "773b8732-c0be-4c5b-8517-748ea12a75f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1755a04-dc9b-44c1-b761-7a179da54f72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0356e09d-8b16-42a7-baa6-1446563f5431"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd9845fe-deb9-4b0e-884b-487ecc3ca401",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15c47d29-f8c9-4893-b4a1-d9558fceb913",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a84c4688-f59b-44f3-b216-85b435335138"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87725efb-a65e-4754-bad0-0f6bf2922fcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3fb58113-af1c-4cbe-a7c1-c5ab2dd72135"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0864687a-5422-46a1-864c-4de5da097bda",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e174a206-098f-4fb6-bb14-d1d84fa201e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76058b49-607c-4e31-bd54-ad1a7863af95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c58f1f4a-1831-451b-8f23-d357e3f554f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2982aed-6d47-44b8-814e-b4b650028a27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "269bedbc-ed8b-4ca9-b997-b4b1a9742ccb",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c39c84ea-ec30-41f2-ab34-bc2cc316ce73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a503bf18-85cd-4ea5-b77b-9c46eb078052"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7298ab60-153c-44ba-9dde-f0e160bb8d6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aae25aff-9778-4169-9e7a-b3736971c176"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7a917ed-fc5d-4144-801d-080ef3e68fb4",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc113450-4c86-4fbf-88ce-c6791a108cd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a4432cb-d021-4ce7-98d7-2e0cd47cea5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d14a10a5-b0c2-4215-88fc-2fd9665ea8f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e692c04-090c-4ede-b0fa-fe5176d21678"
                        }
                      }
                    ]
                  },
                  {
                    "id": "717f499d-f270-4068-9e8a-b94c107b0e83",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48749a93-736d-4e79-9427-0e746c271ac9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ded9f02d-6870-40c3-a40d-2119115cb3fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f00ee96-9017-4e0f-8c7a-9a507efad8ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8378c540-c350-4095-8de1-e2e4d729b284"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c08c2ef-deb6-464a-bdab-e2d1352bebf5",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "397132ad-6b6e-4fc8-b4b0-5c0dd995c6bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42d2d87c-1ae8-4cb9-b3d1-814e5b1d1613"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c05774c-a76c-40a2-b882-9fda6f787dd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cdf18303-6415-4bc1-99fd-41527d2d67db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3c23f18-29b9-4bca-ba0b-0f623c6d1166",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04c0aff6-d1a8-48da-8a4d-75385849f658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f34c60e-6349-400b-8758-3d8c638c40a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b0771d6-ab96-4803-ac1c-9fe77525526d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "82a6acb0-ee3b-45a6-b0cb-c5a4efcdd2c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d79ce572-a289-4e92-a162-64ca3b4c089b",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09c132f6-5bbe-40b6-8b29-56ab09ecf5b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5167f5a5-3713-4c0f-9c91-1668574b026c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d542f123-5df6-42c9-b6a2-8b1a16e9c5d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0662a6a1-bc9a-421d-aaaf-7550533c55cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "592c3d73-8a91-4a85-b450-72944a6ced21",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e596c84-0f61-42e0-9882-dec85e288472",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1208b3fc-86cd-44dc-88fc-f1d79baedd91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36fdbbba-733b-42fa-a8f1-c8114d4637d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef727d7d-64ca-44ed-bcc1-344980230126"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98230e33-2da3-4e98-9439-128f7479e5f1",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5657b58c-f3c8-451c-9e6e-55c0e332dc95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0eb2b283-4cac-45fa-847f-87f08cd269a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb92989d-1155-4de5-a3bf-739cd903cce2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a964687-b00c-4d17-831f-362c48ee78dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a8d3109-385c-4e76-a7bf-ac86e60fc1e9",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c83af8ed-73b7-4e9d-9998-84977435293f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0fa08c5-4d41-4a79-bad0-97f23f33dfd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d491cd0f-9f57-4296-9061-ad1106345234",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a4d26ef-b685-491f-96e5-68505324bceb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d1a7569-3bf4-431b-b637-f500ac33a657",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4827f064-7a0b-42bd-add0-6106df58a494",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08189e74-3037-45e3-8504-7d06a185a43f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd2a3eff-3a99-4b6a-bdb9-3c35d65f35fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "25a456d6-04d1-4c8a-88c7-1833b6f0e898"
                        }
                      }
                    ]
                  },
                  {
                    "id": "666d3e7d-37f6-437d-b926-254efc5a7cc6",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e2b0610-7ca9-4566-ae0a-a8f616d70799",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2463a967-e39c-4e7e-9ca8-223a0013717e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4eae5faf-5bc4-49ab-a414-e154f830a839",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f885a95-c49b-4a4a-80c7-ddef9d8eea96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2abc167-d136-4646-a92b-d678b433c420",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61d54324-b4d6-429a-a349-3081551e0568",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3441b6fd-37c1-4ac3-a59c-3d275e92032d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "830cf442-d679-4a7c-84d5-f95474891d54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "50696328-ab9c-4177-b786-c7d32cb27c06"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6933a01c-9ab4-43c8-8509-5b41985d337e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "069d6fa6-b0df-49f9-a6ba-882446f1ae9b",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "973c1f8b-a628-4def-894e-7a15c982a432",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "28620f76-9d75-4268-9c29-7b41bd6f5d1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "835ff66f-3bf7-461e-b02a-5a91df76408a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fcbad1d4-d91e-4fcf-a9bb-fe26b57fcb9b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6b239647-1c4c-4076-8d1b-7c505108dacb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fdb6624a-70f8-4a5f-ad6c-b9c379d7b278"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9c126aa6-50a9-40ad-9b98-22bc2bfc8f76",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "54a649db-67f8-4081-8095-f17528215c05"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b468a7c8-487e-41fc-9f49-1d88f211bc11",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8cd8bc82-6753-4013-969a-f03bf4e0bac2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "53889d33-e883-4b23-b6d3-adcdbf78557a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "74c20930-5b7d-4c88-b213-d838c0300655"
            }
          }
        ]
      },
      {
        "id": "2986caae-5ea7-4180-b0da-d8c7b7e9ac60",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "c403139c-4aee-4d1a-a66d-a92afc03e08d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a6568919-819b-48d5-bc82-c20c4d5a4888",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a16124b9-cf95-4ff2-8c17-7cec14f3e0c7",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "656c0a24-7f04-4a81-90d0-d721ec3f67b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d07b901-660a-4315-a53f-a8ce2aa302df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a928b150-5fdc-4ad5-856d-5d3ef42eb297",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15f75ca2-2ead-4a15-b175-2103f0bfe4b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a7f21fa-1439-46b8-a493-b096aabe8590"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db134e63-be5c-4e77-83e5-2f6bef0b932f",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8a1f080-0b52-40ed-b26b-f025a506d111",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f29b2526-3ce7-4781-8e6c-f6d83ea1c53e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2381e6a5-25cb-4cdc-b4e1-fd858d80063b",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0f478b7-1cf6-46f1-abd6-365d8e38ade7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66567ed7-0a75-4690-9bda-bb1a9f628bb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4061edc5-2037-442b-8252-facb3cc38530",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f4bd5df-177d-4e40-9782-58f6e184c6d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7cf5491-f625-4c28-9961-fdb630815ca9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "805318fd-d600-4ab4-a01f-57634bab0c41",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c512ff8-c4c9-443d-bed1-f7eca170412c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8a7a972-5770-4ef4-9be9-e383382a5d7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b822759a-4b9c-467c-8f01-ad282926695c",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58ed393a-785a-4a6c-8b7e-4620492fec74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60c0e710-6b1f-4b31-832c-e5e13dc8beca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30210f86-a877-4693-b789-7e84e3535df3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3f983ed-1901-4c93-a00b-8c638f5a38e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58eef3d3-fa19-4b40-b778-8b642d654050",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "440c004c-cc38-41da-9bf4-e03050109660",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0536af19-3095-4979-b7da-1387dda609e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "191c2385-4c50-4cd1-b1be-77e592e5e334",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5a6a933-a570-49c5-89ca-100278cbfd13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9806a29b-8135-49e3-a421-d49a6b22fc6a",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00278228-adeb-43a4-81d9-292e2a379666",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4197fa0d-b981-4c98-930b-13c3b1dbbe3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba5e354f-4083-4b1d-9079-3dbc71a95c07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c41109b-7d79-4bbb-8cfa-918121b70bc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "800c4f76-b4f8-4a88-9df8-e749ddd13a2e",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bad06582-b086-468f-83dd-eae09cd0c2e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "677522c4-31af-4013-ab36-b5a053626e9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b442bbc-84fa-4d5b-adae-4d91f9fba65a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8865619e-6f82-4751-8ee7-bfd584351633"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93c8953e-aaa4-455e-a616-f17439103247",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "793e8a7c-72e0-46e9-ab22-cca43ae8c10b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a970f470-9b1d-4a1b-b063-fe894052b086"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c71b3d6-85f6-4c7b-b9a6-559969f08fda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f764f7b2-eb3a-4e4a-a6b2-9ff4d3450082"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcafe840-e180-43a7-9558-8a1344b1a0b7",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7270846-b7d0-41f9-a1d7-f01cfdc429bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c7f21bb-f82a-4e7b-81b4-190c8ef142df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23b0dbb4-b154-4e47-808c-d85ce64288d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34b21735-438c-4e2a-99d9-7a0d4ca3e78c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63ebc39e-7a99-4fc3-b154-4612648361fb",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e519e941-a62b-4666-bb02-36550c771589",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11256283-a9e7-4fb9-b248-b9c0918549ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "118cecf1-80c4-40e3-b803-f5267778170d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e250460-6b4b-4a1f-b076-a7c7bc5a17c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43cb6f79-5ae3-480c-800d-3e39205ccaee",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5994413d-6418-4030-9979-c2931196a4a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60f5cd4e-3ab0-430a-a77c-b2e409c63aac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "339544eb-6425-47ca-ab1f-af557f15175b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba5ea73b-5185-4c6a-b78c-0dc3c3251920"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3186b44-8cc0-4963-b173-1958a58e413f",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e792cfdc-d947-4be9-b213-c02d208d4752",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d92beed9-7015-44e4-9bb2-6c1f30d0097d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5a0ca59-8f6f-45a9-9684-82086bf13d45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9260d495-3f74-4508-9ced-b71b0c5f0476"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98a92175-5092-44de-b337-06ce1e1f4ead",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d525441-2571-4791-90f0-37f1231356bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da546e97-8fea-4823-9009-3b1a748c9a3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cadf4341-849d-4ea2-9acc-b0678d58d3a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60d158cc-10cc-443d-b429-320687d9e17c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d3f1d0e-f00a-4a1b-b08b-3f931d47293d",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7edc69f-312a-4b6e-aa31-ac30922c5b0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51fb181d-4bc5-4ca7-af7d-5b56bc19349f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70b281a8-9906-47e9-a7a8-2b90e5b9c9ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcd79d7f-bd87-4e47-be0b-0830a0a0b991"
                        }
                      }
                    ]
                  },
                  {
                    "id": "938bf145-389f-4db9-8a74-95dc54eee9db",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "813c999e-2d71-405d-8c95-05a91f98ed8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1100fb91-8083-4e9e-8bb8-be9b44768226"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ecbfb83-12fe-472b-aafa-be061b33d44f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5aff3dd7-21bb-44eb-b7bc-d6c8cd3a1cf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88734862-ff29-4466-82c4-b10a5b95e74d",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67a8ed59-a6d7-445b-83de-3bbb4be80b23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "109a7c87-0993-49a0-92c2-40d38884d978"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf3046e6-9933-4eb5-b2e3-201e69b3e80f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b51f13f-56c3-48be-b30a-81f1b4f9db34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de0e7bdd-d4bf-4580-932e-6bef6ca55c4d",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c25b0df9-0ce0-4867-ae89-2094b197af50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f31be01-9bbd-42e7-93a3-c71a2c3cb79c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "faf9af23-27a4-4ee3-a5dc-45adde1234b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a05916c-5d92-4e45-8cfe-f0cfb096fde2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06418105-7f31-4c82-b205-421a507f4c19",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6fa9418-8be0-4b8c-a2f6-efd5272758c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05f66475-ff99-4de9-a7ff-dc6b4bac7f8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a793a650-6e3f-445c-94e7-1c35793dd162",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14398930-7c8a-4b14-a315-5a65043fb81d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "420493a1-4de3-4738-9483-fe26bb9b24e8",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3933671f-37bc-4681-9c67-4c8916cc9cae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3009906-ba49-4b1a-8546-e361e1807057"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7586378d-a664-4b5d-9f13-0dd7b8990073",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d158f795-caae-4900-9df1-14b1ae78bf40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92af8f29-f78a-43e6-ae9f-5a63ae9ba571",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43094e3b-e3b3-4986-8743-f77359453920",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "278ea00d-b183-4ab1-8cf2-628b6f784cf2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2e57168-ce81-4b75-b280-69ba8debf3fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38372d7d-7e7c-43ea-930a-fdf2932cc1f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e50ccce-72f0-4e2e-b1b1-810146c55777",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c9f9c1f-863f-48eb-aec9-892f132e01d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1842e55e-58ee-4bcb-8f29-93056f72c93c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25ed3020-fa32-4de6-940a-3b43955921ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a9d213f-42d7-4926-a542-3b6e2ba42b83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0030aa5-168d-404b-b893-fd7f6dc13fca",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36416806-52b3-4443-ab4d-2550aea996e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82b9e8b6-497c-4ed0-b971-a3a09b2bb766"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "581ace81-3277-4656-85f3-5a2e408cff37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53b9b611-88bb-48f4-9b1e-2f72d9fbf35d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e65bcb01-1246-4bb6-8d2e-cb8cc5584ce5",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a00883a-32e7-4cc2-9368-de75b80cf983",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "197544bf-9943-4755-bdbf-fe09e062e903"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "482c7d39-9aec-4718-8218-c2def9766ea0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0a401dd-72f6-4bdd-b59d-5909afdd1a11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1e176c1-521e-46db-a938-4ee26852c069",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e225990-a21b-443c-bdef-7129fe100afa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a5d7309-c8bd-40aa-9131-b766a23edfb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94e8f15f-46f0-4e69-8fbc-289e83f3604e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ab5b04d-6f79-4996-aa2f-787186df54c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2157a454-8623-4cd5-bfd3-6728a95bf002",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "708cc2da-2805-4726-9d36-6843e3a7ec9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9b6472f-a7b1-4afc-bd8d-79479ee391c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4962f4a9-2d5a-4d71-8754-fb4cdd0086ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d60fb53-4e95-46fd-bde2-8e2cda9940ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ced98e03-df42-4d7f-b8c4-d94056692876",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afcd6524-5471-47db-95a7-8cade5215110",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4728707-eac8-44c2-a8fa-b3b8a724b348"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f8e4c17-4c8b-439e-ba2c-314350c86a99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba005e85-2202-479b-be28-0089fe513931"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daec4093-1c8b-45f3-b0e4-b7e4bc028d20",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "789d5dc5-c7ad-4665-8acb-5d09cdc1295d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07dd81ae-6cc1-4017-a15e-6d5fbc7a064f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39f7b14a-ab53-408e-ba43-b142f2486e03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57c37bf5-6422-4cd0-80b0-38e411ba4092"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a293298-baa4-46fc-94aa-39537fb9ea49",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c4796bd-a06d-48ef-83d1-c43f107ec6f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44592d0d-3544-40f3-8aba-c428c4e4838e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4427df65-6df7-4b60-9eaa-07306aeea00c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37eb3213-dac2-4157-b1e2-1f3e5601b45e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9def603b-0b0f-4951-aa44-1ff682ef22ee",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51fced23-701f-4a8d-8f27-188ee46a8e9a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25de3603-50e0-4d64-bdbd-0e8b165a2029"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b16dec0-1ed7-4d0b-8062-37e3d8288a93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3089f6b6-7793-4eeb-881a-383baa411d84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b0c78e6-5758-4047-bac0-c0efeca0eb82",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1df0134e-1c78-42e6-b3ba-e2d09fd06617",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "141879a9-e719-40d2-b9ca-8b9d8452e91c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed0e2441-94cd-4c7b-8c93-a40c143c4d95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bca64e5-8ea9-40dc-90ff-f4d3f7d3f5d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "500744d2-5a85-4dd7-88ba-2949d3a8bc32",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce5fb19c-d526-4764-965d-f640f311867a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ee12412-060b-44b0-bfd2-93936eb31232"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8866b5cd-8a13-4cb3-bc73-6d7b3bf89571",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfb1e0d0-ec02-4fcf-a224-f8795bb1073e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af21dfbe-5fce-47c6-bdeb-432881dee4fc",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c2af2ef-41c6-4b24-bf47-3f5c24e3bd92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97078423-c123-4885-bdff-2582619f7761"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01f944f5-d049-4181-bbd5-28cdec3b5712",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90a7a697-847f-49e0-b011-6cc22cd6c1f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec40ddc1-7293-4d4c-8cc1-868b79255942",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a20ea29-8f62-4cd9-92b7-e057b2fea2fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50c10846-c243-4b55-bad8-844d3e78aa3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3100a6ef-8ae0-4ec6-a8e6-b4242ca30dfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91c95cf7-8667-4dd7-9c56-e494303341cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2e3f7ff-1d7b-4f7a-a34b-c79cf9a5f8b7",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d465b64f-88a2-4553-9892-89a3217ab58c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c90797c1-da9c-4f6e-bbe9-f175348f2a32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b0c4ce6-d50a-40dd-9a5f-c577a7b7091b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed08a588-17f0-4ef1-8eb8-6198dbccbc77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01beb1ae-9bc8-4572-82d8-27bff9f9a4ce",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cdb222a-52f6-4be0-bca8-3e97f8b8d465",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fd97166-9f12-4f35-b402-6c6d03d682af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "312813db-a536-4fca-9462-97b67af93a16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bde0deb-0efb-4680-8f7f-472a1706c9df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70d76797-104e-4cec-8e49-4dc2018035fb",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee3d72fc-e14c-4a03-9c07-23eb64b17f94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60399048-39a3-46d5-a619-e7ea2c69e3f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b178cff8-d13e-4583-9b3b-a87fa7f1835e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1301c64d-df54-41e8-a4b8-0c811f573c7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8aaf3f6-61af-471c-9e07-ae049c53c5ce",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f1953d7-0e07-4392-aaf9-c06c42f96b73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0ae2e61-2672-457d-b859-78f21aedc2be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff4da34d-3d28-42f7-b440-8c0e5d7c7fd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ca27e74-fa79-48ba-b164-6e0cd9d032d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0094933a-4272-4878-a49a-9902f37cdbe5",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4937ce60-51aa-44f4-84b7-944c4ebad728",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "692c4399-894e-45cb-939b-9e93e37f8752"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5861888-987d-4514-bbb5-6cda5f057368",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9213d8dc-b344-4c76-9e0a-ca6ead46a723"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96f7912b-71f2-4711-b69f-5ec2b5ad81e0",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bdc0b49-817d-422e-862e-915de29e90e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a21dc4f-e170-4018-a35d-2820dd92da93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f866170-7ddc-426b-bcb3-bf003d3f36d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d189adaf-e71a-4996-aa58-0bb4200028dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8e471b7-eb25-4afe-87c8-1ed9ccc30e35",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72c65fa8-b564-44b4-a3f1-f9d56bd7f839",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9407e0a1-6e88-4559-83c1-8c309e4f8c04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0561ed40-2d37-44a4-b8b9-1e7d845be714",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2edf4b35-ef0a-4a5f-9588-00108ab027c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1932d001-21c1-4492-a7c1-9679101b76c1",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38465933-ab73-41ed-bc3b-3618183106f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40402159-8cdf-435b-ba5d-d15b85dbdc25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb2e6ceb-1667-4fe0-afbe-3a086bc82fa8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b917f63-2ec8-4bd0-8f64-8cfbb221cb1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c58baac-886e-492a-b456-9b06956701ba",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c63b103-58d3-4dd7-bd8c-0b92ea75e1bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a2988d8-dc54-4827-97bb-161d9cb5a9ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eccbbc5-fe58-417d-b20c-ad9f85cb44a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67022e76-ddc4-47d9-98eb-6e309b9ab67e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88a6142a-8ce7-4566-bcd6-895957ef918f",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24c59e2a-de88-4e1c-8e40-11a24aa83905",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0d63053-9a3c-4d27-bee3-9ab3b5025197"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63092114-b7b6-414a-a2aa-e5d2b4387024",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32f00ff5-de91-4de5-8f02-7f3340367e0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccd9274c-7709-4311-a8e9-dd75b99d1b38",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cc2e57f-a9a4-4cfb-b593-a15a6c74c034",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "772b3099-51af-4032-9ce1-2d849cdc4c0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "366545ea-b351-4c18-88ab-3f660bc94769",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5044e1b5-fe89-4d50-a69f-03b3f68dd33d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e8149b6-25ee-4d0f-8ee7-1468f734dc9d",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbcaa6db-c165-4a4b-bf20-dfadfecc3e28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d8eb33d-3f52-4a20-9355-3cfe825c1a58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ec49530-1b5f-4f79-8fbf-a61fe2c78990",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0641d3b-d70f-487c-bda5-618d69d7b39b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4c324a7-9f3e-4ed1-858e-4c2b5e72cc2f",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c5dd175-c206-43cb-a800-a711fd680e24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5e0612f-e733-486b-bf1c-5572620d1749"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3167dcb-319e-460a-993d-632a147f0f37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dbe4abc-4151-4e5b-8fae-c6819d99be59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e76fdc5-c741-49e3-a1d1-b007adae7e5e",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef285f56-951b-48a3-895e-d870c9bc706e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de91f19c-be9b-4eff-8b81-0e12bafe0bb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "227c42d0-54be-46d0-a1d1-e286ac234251",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b943dd5-fd9f-495f-a4c8-7ef3bdf5cf09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21fb2dbc-3231-4b01-91dc-a753709fbf4c",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5e820c8-d650-46cd-afa7-3efe428a7a7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c56cbe5-25c1-42fe-8b68-53825784e982"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70aa4bd7-5ce2-4ffe-9baa-a474eebdf942",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75783f42-078e-4928-ad86-414691bbc8c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e944ad94-4bad-4d0b-8305-381e8a08bdec",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1ef706a-9625-4d7c-9a90-7e546640ef3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b709885a-71be-46ee-9563-ac85f6b616a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bff10a4a-2dfa-4c6b-853b-236023789ab5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6d2a07e-439c-45c4-a88b-2e4b0a5e454d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eb6d58b-4584-467d-a5f7-60d967f6cdda",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25567e59-ab8d-40eb-876b-e057fb8200b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8d486cc-2464-4e4b-8446-233220bc3b06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cab306f-32aa-404c-addf-954da82a6ba3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b34df045-c0ef-47d4-baa4-4cef3b72dd51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d45fb05-bf64-46c1-9ac6-494e04db9a61",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "774f4d30-3c11-4422-9802-c4b49ade2585",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06375ae4-2b95-4e4b-b753-33e73a12bbd7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8056a5c-c055-437c-9f96-44a22365f1e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55254ee9-0798-48bc-a175-1a4fc7455006"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18d224e5-d6f4-4c39-9901-2e5193e868ed",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9907ecd7-28bf-4ed2-b20b-0e41b0a5bcc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d19e3e0e-d061-4502-a684-291bfc53f007"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70cca92b-375c-4306-bdc1-bc6230e7af76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16779007-4b76-4ef7-9b1e-573b941f3f50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7ba6cbd-183a-44ac-93ac-ffdb1e8ca8d9",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3115a131-5f44-4885-bfe2-d5c65d4a9fc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16914165-6255-43e1-a2be-a4df2dd038ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b51c9bf1-7581-4169-9513-ac2040189c8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a50be5c0-1d7b-4b10-858c-456e7c2f69ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "884fff2a-ab92-47e6-9a3d-998423e0e40b",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e14f60b4-1142-476b-8d44-98474d05ce95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4c167ce-d524-4c27-a47d-564b58ad31ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f62426ef-ee96-42be-83fb-835a3491b7f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "129990f9-c5da-42e6-9df1-cb2d84d92b7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c50120f-7264-4d40-ab2a-8fef6a1f6877",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af9e0f73-676d-455c-8b9f-177cf14e2fbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9413d427-d463-481d-8cf4-4cb6e90ec195"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7f92ada-7f7d-4012-8586-fd0d4c3cadba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf6ff61b-d3fa-4413-a12a-bcb58f2e36ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99e28a5c-956c-44e5-ac0f-57100f6971cd",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83f0235e-a648-4bf4-99e3-d4b4441c6a60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5a6b159-9c1b-48ba-82fc-841c684a4cd6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b432ad69-9d48-4567-9c52-92ee606393cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "935b9500-e3dd-47cb-a285-aa18d37a4388"
                        }
                      }
                    ]
                  },
                  {
                    "id": "300e4be5-e0aa-43c4-9ecd-ac4331464aac",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbd631ec-1449-4a0f-9369-0c6d2bac19fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b8e6e42-def1-4fc6-8bb5-3b5ed8924db4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f420fef5-a633-42a1-a86b-2b832ff25bf0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0098b9f7-4acc-4cfb-8bb5-835facea9611"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1727c1a5-bb2c-4e69-9f82-fc41fff658b8",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43da8bd7-4100-4fb7-82ae-056866369937",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f6460c6-ed11-4933-8fca-887ea871685e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ef9f04d-412d-4bfc-a8f7-cf78b5123383",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80e8d2e2-b84f-46e8-ac38-2143f0164aab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a5177cd-1862-4685-b96c-0f674d020264",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc058a70-4f3a-4c2c-887d-416be3848201",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0248fe3d-188f-4dfa-9d05-835aeb9de178"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1df5f05b-84fc-4d26-9d5b-0aaae32664f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9746688a-0c65-4071-ba1a-1a85ec61f42f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6de3b2da-7aed-4b21-8df2-024310d784fe",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "212b63af-51fa-4a71-8829-19d2406f56e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "300d8497-6b15-4855-89c4-f832698febe2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "105788c6-9f7c-43c5-85c0-219d629739ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0c30f74-d292-46b2-8d6d-7e078ab2d47f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f150447-8d3a-4bc2-8f15-a2e0e1807d39",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3682a248-b18f-4acd-9e82-2c67a0a83db2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb72d71a-d9e6-45b0-a02b-9cd4c422e60d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c26cc7ec-e916-4530-a79f-0c832665ea83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "439f506d-181d-4374-a184-19109493c9d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2384a63c-c2ad-4025-a68b-f7309b34778f",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f34b46a-1d0d-45a1-8490-7de278495ce6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82631ebd-18ad-40f0-a03f-6eaf24c644f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79b0c537-b65a-4c6b-b593-1265fd7a08bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32736f2f-c9dd-4e48-8994-ddafa40cda45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c641988-75c6-407f-82cd-c4890df746bf",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc5fdac3-7690-47e4-bef2-c419ccd66a10",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "410b5317-8e2b-4a9a-a8b5-286dc1d4e147"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebe9dad3-5828-4a1f-80e9-9aa5b1d2401e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28c067ca-1523-4bc1-a0d3-d44b9be77ec0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c6d8d49-6608-45cb-b007-3d9d5f9b881b",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e535ee0b-f9ef-4fab-a6cd-bc669a59e5fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ede12ba7-239f-4fb7-8c91-646215aee294"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99ad56c4-2e8d-4ffb-8811-cb3dd7004979",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "672f9206-b693-449a-afa0-90f17a1173de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2319cf33-74e9-4e72-a6e3-7a00c62eaab7",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "752ec2b6-ef0a-4373-a450-16bbdc69aee8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ddc2287-f2f9-4202-a427-e4234b0e4676"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61700015-fcef-4957-b769-2be61a176aa0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5316604-140c-4091-9774-735b3277bdc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1a2c74c-7e41-45b4-adfb-3c5c09436bab",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87e6b6d3-5da5-4358-aec5-2d5ee9aa97ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8baaeeee-be68-4348-a696-2d8926bd40cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db036bb6-26e3-4f77-98c7-30730c8ee63e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56c50f91-c582-4707-9831-6f61dc963e74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "702bba98-f280-4f45-9a2b-71482b4bea1f",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0def5cbc-1f9a-4318-8580-298a847646cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a93b828-c938-4153-9509-d32757864fa7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66e823a6-ff65-43be-a159-2e21a5acb204",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "056492dc-e921-4adc-a1ed-a673680c3de5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d95b044-a3d3-440b-8046-27c27526b871",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e5a68eb-437b-4d5c-8b8f-5c79e3aba40a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54302e68-e35a-48d2-aae3-7b786b6050ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09c1801f-a31b-45ee-ae4c-ed4245b97f4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b416ae7c-37e7-4f30-bdfd-a1f9728dc503"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9277e76-966a-4fa1-8afd-93d642f865bd",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7846fbf4-f6ef-4a47-a93e-bd98d86e7def",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42e53749-e693-4866-9bc7-73ecf6085592"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e97a27f-6e0a-4e4c-a7cb-00eb411c86bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be1b2cc3-3c81-4f02-a282-a1637f0d8b00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32eb6b0d-fd44-47e3-9e48-d444064bc213",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50074f5d-7e07-4068-9e5b-c58877419819",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c477e8a8-eecf-4dc2-96b7-5945f77e6a75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e739996f-37ca-40f2-8a95-5618cdd11f02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb90be31-64ac-421b-b2fa-a1ac073d2d58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "048ee30e-e654-4af7-bef0-afc516042351",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a492e452-da0c-44f8-8297-628da45a606b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5794777-829a-431e-b6f0-36f09a345885"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23128a5e-7946-4f8d-9bce-ed676560c2ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6a9908a-53c1-42c6-92a4-c2ce0ebfe709"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb395648-1b35-47b0-8b13-17820dac8d79",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5290134c-f25f-4757-90c7-e892eddd3a08",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10dbbd4e-98a9-47ae-8fc7-ccf2060db677"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1fb5a28-a566-4f9f-8c09-d980f65931ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0a21779-93ae-4980-ba9a-cc0f69efaf55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29f6c097-c22c-42a9-90e3-b2236f744568",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c756a33-0e3b-476c-8992-fa00da7c28db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa3b3262-7657-4728-935a-247cea1387fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1edf284-8194-4a44-96be-85e7c7052b09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21e802aa-b060-40b0-b6b4-478b51796087"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99c638dc-245f-4d10-b617-dddbcf1452fe",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a94e0b6-2e7c-4aa5-bf7d-c25b1097d73b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6055900c-f23f-4651-8065-5b057453a04c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d3f065a-98a1-49b6-ad81-3cbb74d6cefe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bcff859-182e-488c-aea1-d892508b8e9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "172d07a4-8bb6-474f-80e4-c2ecf3367c10",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1e8d3d2-2584-42ac-89d0-8e52ad59eea1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c693519f-1073-4300-8ed6-9f35c3c5b230"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79044ab4-61dc-470a-acf5-9a65d45ffb80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "717f84fa-638b-47c2-93a7-7d3972fc2783"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9807f80b-bdf4-4ec8-9862-7fc9ec3fb789",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff0723cc-846f-42ab-ba78-7ea40169edff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7ab144a-e006-4055-93db-4d6790e0866c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8dce126-e6c3-48bf-bfc3-bb2da4ab0191",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f5d29f3-36ec-4ffb-b7ea-dac433a01126"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8e0e456-7a02-4ddd-b782-6dd09769b131",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0fd4dfc-c9aa-485d-a0d4-55590e424e64",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f22a2075-749d-4718-89fd-5aeb8f47b393"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66de07f6-1bee-4899-83d5-344f87f995fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26d02ae8-6eb4-494c-8e07-14c6429e6196"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d62c5f5-3d71-466a-8f37-3d46b732c84c",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c77bd9e2-2eda-4ca7-8e7d-f9d93c4b9d45",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28ed86c7-92db-4f11-bcf0-61b5bd36794a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c398777-f606-437e-b8cc-9f10b91ca78b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2a6082d-30d3-4b2e-a929-1150a1c4554b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9de04b5e-a607-4a38-9097-071b9382ee9a",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0071aa32-db80-447a-91a1-851039ea824f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6925834c-07b6-49db-bdb2-fe370003278a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33d300d4-6d2e-4bde-8371-8b4ea9a1da19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e42d2df-f0c9-4076-8a7e-d4e9cabee905"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a265edaf-0083-4c6f-8c18-7f58e1b743f0",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e1db43a-0e1f-41d0-ae39-4ffabb5a4d83",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e9e18e1-dc6c-481a-8a06-6a352fb7ae18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9d983ec-a102-4d38-ad4c-17be5291619c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92d35133-8814-4d60-abb7-96ab91653090"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0477be8e-41ff-4672-bd8a-39368b297846",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "013a329c-031e-4835-b7c6-c3516b13a1cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fecb8b0f-1fd0-46f7-b110-72d81b6bdf1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cbbe821-5863-40f4-bfab-ac20f9b9e2c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3641ba3-be98-4e5a-b1d9-a2716fafcbde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8235707-a3cc-4388-8f5b-2c095f89cf6c",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea80d342-4dec-4977-9ee1-c5874bc9bb6d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12c42449-84d3-4740-926a-e003d9427b58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d3fe396-6587-4bbe-8b5f-9ada831c0982",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df6ee45f-3f14-4851-8d3f-5d79abb8c0a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7620656-73f6-4439-907e-903923794d1c",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24e1b25f-1431-476f-8c09-ab4494586c1c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27fae639-1815-4923-9e86-0d8119c1d4c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1dc248f-df23-40d2-88ea-e1982c80923a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d63ad66e-674c-420e-9560-f3aee0e052a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1addc19-eb01-45e2-ae7c-39bf23efdc90",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3217836c-eb50-4845-be00-27bfd479edc1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79d14c5d-611c-4c15-bd41-db1741a89524"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc514de8-0a77-461d-ba14-6748b1c46d47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdf55db4-7dbd-45ea-877a-bd0874a04ba4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81ca3eb6-357d-4f20-9402-6acaf8d78756",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9066b03f-a336-40ed-99ec-a365b0861d25",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "953e4d82-d2ec-46f6-a204-68b3e69bd82d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24c9f0e7-8171-440c-8672-2fcbe4ea0da1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd952593-7451-4d4e-8e7c-3835a03c05cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d00bc29-2f90-4eca-a882-99a811e34296",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7cb5dc8-3e73-4212-a3f5-93432ba84e2f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9b16620-9048-48d1-89b3-e6158bae3b87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72985051-9257-4767-bcf8-3bef7014293d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43ebe7e2-306a-4b46-b22c-272368ed0a43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e16a0591-9bb5-4936-a850-392fad281a0f",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39ef99ba-eba0-477a-a7b1-dfc4b36256e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81084101-8deb-488f-ad71-9984f171efcb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2762b57-d1d8-4e59-aca6-2769c631db41",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6c4a587-c40f-496f-a4cf-09c97e55eed3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ab61739-82e9-40de-903a-11ed6e154172",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88c1382a-a062-418b-9644-3693cafd1268",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd4cc3a4-c9a8-4eb7-bc2d-ea36fdbeb1c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "495b6d03-79db-41ee-a5c2-a06d7578be09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e662ab1b-0eda-4487-a62a-641efb309ddc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b6def66-a880-4cd1-a087-21787f02ea39",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e46acc3-a7c4-4d4c-983b-d38ca48f29cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1edf32aa-d515-4660-b7a4-ac50e0bb94d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "457d5811-58d2-47dd-a397-3645c8e00022",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a93ba25f-dd2a-4438-8f5d-18a6103a3c68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d4b06ea-1f11-4f62-b87f-2478618c761b",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c308bde1-c8d1-4975-886c-4cf3d2cd8dbf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9bad7e36-0f59-41a9-b791-2ad9c471ad80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "954d61ba-eb34-49e7-8a65-a219e91273c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9598fe79-9dbd-4880-a0a9-2a7664478f35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6acb956-a36a-4c67-b024-a44d40142586",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5b2f9d0-a9d0-4cc3-adde-b0371b8fde69",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11f4647c-78d3-43c3-8a04-22fc9d24f57a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a0a9f8e-f869-4108-bab5-9f64b332f274",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2400a30-4517-455f-a56a-9547f37250e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9accc6d-cd04-4cf0-bb6e-72b010d19400",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "960bce68-9d24-432a-85c9-f05b14b66625",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "504a1197-5a57-4e2a-8c54-ae4b1f61aa8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6570ce34-32c9-47e3-95ac-62a15f115c2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0e8c981-a9df-4671-8246-8830046b3d9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5d28f04-ace3-49dd-b0af-20e49b1cecd6",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "056b0877-95c5-4757-a1ab-3c264faabc3c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6aa64f88-0ea2-426c-a632-1d35fd9490d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e95d97c-7f87-4fdf-b5b1-07c49e206b87",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b10fdf0-dcf3-4bbd-bd8d-bd7d261197b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a81aca1a-b319-45f0-9f83-bc234cc264c4",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74dcb73a-8fd1-4e1d-8702-4e0fc30f53c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "372bf435-9e2f-43ec-8e71-bbace4164154"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4835f81-b93b-4d81-a18f-60605dc497df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5344edd5-cd68-43b9-beaa-83d503c21adf"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c40aab5e-78a2-4cf6-b004-ea6df568ac53",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0b759e86-d996-4417-a361-a541cbad86ca"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "19be22bd-db37-4287-a322-4a8d405b870b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e946f891-743f-47af-aecb-160c453dd435"
                    }
                  }
                ]
              },
              {
                "id": "61085253-c6cf-458b-87c2-002586562858",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "abfac98a-bc04-4400-a4f2-8953b2896b99",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3013944c-588e-4f5c-a68b-514cb425b263",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "0e1a8699-c65e-4c47-8f04-e7800bc3bc45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e63edd7-81fc-4714-a298-08c81c1eeafa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "587161ae-6ded-443f-93f3-38e24a3fb5d3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c2040df1-2fc5-4dc9-8374-6ff5445f85ae",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3ba5e9a4-8b87-4921-8720-a32c183efdca"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "de8eb1a6-f244-44ed-8324-da663dff0ab5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eb503881-3f92-4225-918a-95af4df446bd"
                    }
                  }
                ]
              },
              {
                "id": "633462bf-4a28-4874-8c0f-6de8c2492007",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "2a861730-eae0-4be1-8c84-d095eed07005",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16bf84ce-b4ae-4681-a024-71db957fd451",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "40d3e86a-cc81-458d-aebf-8a806cbe6c72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b30f5824-ed9c-4055-8730-122d3afd63d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89e81151-6dee-4981-990c-959955547a91"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "82535b91-a532-4cab-ba90-71aaff3fe7e0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e0ebdbea-a86c-4303-abb9-af43455c632b",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a74a41e2-fc03-46cf-8ca5-9128b3fc7a98",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "53bd9f87-8178-491f-b319-7da3dfa04535"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a33982c2-e576-4ad1-b00a-993e898d3bb4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a9ed3750-b245-4b28-b4b2-038c9f249691"
                    }
                  }
                ]
              },
              {
                "id": "c9566c69-2c0a-4771-8935-e0a8d45004b4",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "12fce0db-b161-49d6-a10f-8acfe302c641",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "e8c412ec-0bbc-484c-b8ac-2466cc162c23"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "436dab60-0984-47d9-8739-a348eaa2b2e7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3604d817-e173-451f-bee7-128f93511285"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "eac3420f-23f6-48a0-adf5-a3badfb5d2cd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "6ca41629-b677-49e1-bbab-0e168a6d825c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2af0debf-4d33-41be-a4aa-c8420d6a59dd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "64f99cfd-e745-4552-8dc2-0a5373e5839a"
            }
          }
        ]
      },
      {
        "id": "bcae66b7-e63c-4455-aec8-3ba069d2b467",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "bb37c89a-f91a-43ce-a14f-39184d157ec9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "98ec8efe-7a01-4a12-be83-0bced2215ff6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fb283f99-28a9-440f-9b21-426af0889120",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbceade4-fb52-49bb-b185-ef9918db2f6c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "c9e7b226-84df-4dae-89ef-4908eb4371d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4dc6ef9-5f06-49a0-a2ce-0a37318b503c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1db594be-83d2-4a19-8c1c-95245d3e06f0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c87ba175-6992-49d9-a83d-617732513f51",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a580172f-7baa-443f-a0ac-53b3e091c49e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "72654be8-aa05-41b4-939a-4f342accf76f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "26fd11fd-46b9-40a5-a96b-a3db3fa4d771"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4bd5edc9-f6b7-47bd-acb2-f7b843fb6427",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "a9a6d262-997d-44e1-bd45-a33aca4fea45"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a5ad3b26-4e34-4ba1-8bec-01c61513413e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fe866028-e4fc-4e27-a260-99403c4c94b1"
            }
          }
        ]
      },
      {
        "id": "c0e657ea-8e5c-4b3d-96ee-8e1963fd060d",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "f295fa8a-2671-448a-9234-cb8541619a8f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b4ea8706-2f5c-40b9-8c49-a9096fada5f4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cc97c03a-cbaa-445f-b630-5b231401d43f",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3212579e-7740-403b-ad7d-dbd97e8c08fb",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "afc71a74-ed9f-4295-9931-91287626f5be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ec47b89-e7b5-428c-a302-00cca6f29b43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c518f137-b0fc-4c95-852b-5d1f066cf798"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9b262051-a53e-4f12-ba71-68f13771751d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "35f334c5-9fdb-4a78-b01c-8d5b993a59e6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "40158ec5-dae2-4679-92a0-10126fd7e131",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f853aae9-8817-4d8b-91b6-12fc38876a42"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dd12642a-56b7-47af-b3fa-befbf0524cc6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "1a3fac54-0d58-44e7-9e46-b108204e705d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2323140e-4ff2-4be4-af6a-1a85da186372",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9f1bb676-fd53-43cb-801c-7343e6801e2f"
            }
          }
        ]
      },
      {
        "id": "db6e1abc-4a91-4909-b2e6-20f3622ad795",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "8e698c17-c7de-41db-978a-07ba17428736",
            "name": "Negative Testing",
            "item": [
              {
                "id": "98939d40-b8e2-4bb6-8c2e-58a4a69135ed",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f932657d-5564-4626-8b45-acaa163c8401",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "542cfe57-72c0-4db5-8a7b-08fe105a3d0e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9dbbd840-4862-4ee6-9ed8-3271b88c32be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e16cbd51-b6c6-408b-919d-b63f7c8ab444",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c204cccd-40c8-4c91-9d9a-7fd8146cf8ab"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5d0a3c7b-8ff0-46c4-9f4b-29cb56b0a2f9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e98c8c51-f9e0-4035-a189-716239741b8f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b39f2bdf-9acd-4a3d-877e-d95cbc1e694f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ba950bcc-a4df-4e57-9848-f45aa05931f4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9a8c872f-c8fb-4eaf-8879-f60689f55e22",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "bde364cd-9fbb-4be4-bf63-f77c49ac7ac4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "111f25b0-d878-4f7b-81b3-e12799000b9d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "70c5c400-f301-4925-92e9-ca24fec183bb"
            }
          }
        ]
      },
      {
        "id": "d147a1f0-7a1f-476a-9f6b-ea00ac12041a",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e818b5a3-ac67-47a6-b656-5d0f3ace6493",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "119652c5-ef1c-4675-8abd-9c6869207067",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "ea0f7dcb-e471-48db-9f74-953f49383026",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "56c868c3-8a83-4e7c-9f91-f860b22dadab",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b482db55-a990-44ae-bda2-41a2efcb3a4d",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 98.39298245614034,
      "responseMin": 20,
      "responseMax": 551,
      "responseSd": 67.39550679918509,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1710981332049,
      "completed": 1710981369320
    },
    "executions": [
      {
        "id": "c37974bb-896a-4e0a-a486-2fdef8280c6f",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "5d68d082-1304-41a4-8a15-b1b29213fc54",
          "httpRequestId": "2854257f-4fb8-45d2-a9ca-07b47b36421c"
        },
        "item": {
          "id": "c37974bb-896a-4e0a-a486-2fdef8280c6f",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "fdd4466e-164a-481b-a677-ebf99a80734f",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 0
        }
      },
      {
        "id": "31ab1e80-8ea2-487a-94f4-2eed9bb0d304",
        "cursor": {
          "ref": "1480fb44-3557-4681-82bf-0704ec28b906",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "28cd5efe-4bf4-43e9-81ec-3be32092e0ee"
        },
        "item": {
          "id": "31ab1e80-8ea2-487a-94f4-2eed9bb0d304",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "b8bd2ff6-dbf2-4c34-8d54-5e8e3e57678b",
          "status": "OK",
          "code": 200,
          "responseTime": 20,
          "responseSize": 0
        }
      },
      {
        "id": "b7f25aff-61c5-4982-8d73-8ae909308902",
        "cursor": {
          "ref": "984072cb-0ba0-4dca-bc59-a17bbe57c802",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "8f71bd0d-adb5-4ed7-9320-5746958e96ab"
        },
        "item": {
          "id": "b7f25aff-61c5-4982-8d73-8ae909308902",
          "name": "did_json"
        },
        "response": {
          "id": "b6ed99eb-2099-4dc8-ac1e-83a5c0b32f74",
          "status": "OK",
          "code": 200,
          "responseTime": 218,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c935719-d1d5-4853-856e-ce7263026190",
        "cursor": {
          "ref": "1125de26-50da-49d4-a176-c5e513d322c4",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "fe3a73cc-0e9c-4317-8f65-15a47c3702b5"
        },
        "item": {
          "id": "7c935719-d1d5-4853-856e-ce7263026190",
          "name": "did:invalid"
        },
        "response": {
          "id": "d81fe6fb-77e9-492a-bed9-82877fddb977",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c935719-d1d5-4853-856e-ce7263026190",
        "cursor": {
          "ref": "1125de26-50da-49d4-a176-c5e513d322c4",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "fe3a73cc-0e9c-4317-8f65-15a47c3702b5"
        },
        "item": {
          "id": "7c935719-d1d5-4853-856e-ce7263026190",
          "name": "did:invalid"
        },
        "response": {
          "id": "d81fe6fb-77e9-492a-bed9-82877fddb977",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af01e5fd-1376-48db-a913-0553db88b3ca",
        "cursor": {
          "ref": "aa49914e-7752-4948-956b-dc51d25e8b60",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "2671b40b-395f-4f46-abb5-3598440d52e5"
        },
        "item": {
          "id": "af01e5fd-1376-48db-a913-0553db88b3ca",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "234f8163-79c4-4e6f-a7e9-e5a36d2fadad",
          "status": "Not Found",
          "code": 404,
          "responseTime": 178,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0af250ee-7c7e-4401-9ad1-ce00d0bb403c",
        "cursor": {
          "ref": "205da39e-14ad-48d1-91db-ba028a782419",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "3dd6c7d2-ce55-4a61-905a-abb6afed0830"
        },
        "item": {
          "id": "0af250ee-7c7e-4401-9ad1-ce00d0bb403c",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "558b9e58-9187-40e1-a4a2-cb649c34eacf",
          "status": "Not Found",
          "code": 404,
          "responseTime": 86,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea36a50d-8d66-48d8-8c73-52fe2b5bea22",
        "cursor": {
          "ref": "2369a43e-0fca-427c-84f7-f1d4c1a73724",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "821a8303-9c18-44df-a588-e602f8a8a05e"
        },
        "item": {
          "id": "ea36a50d-8d66-48d8-8c73-52fe2b5bea22",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "27a60b42-f1a1-46cb-a93a-7b846d516c4f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8cae8b4-6c38-4c79-ac7b-9edb87fed15f",
        "cursor": {
          "ref": "995c634c-0ec0-455f-9cd5-9fac8a8b2ef3",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "652cfa06-f0aa-46a8-b98f-4d61634aa355"
        },
        "item": {
          "id": "b8cae8b4-6c38-4c79-ac7b-9edb87fed15f",
          "name": "identifiers"
        },
        "response": {
          "id": "993d7e63-8066-493e-a5d9-8afd558a3d8b",
          "status": "OK",
          "code": 200,
          "responseTime": 116,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a6fdf89-242c-4951-a898-471eaaa375db",
        "cursor": {
          "ref": "30ca10cf-10e2-4512-81eb-63b52611bbf3",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "0ce81f6c-f8f7-4742-b27d-f60d7a6f6f83"
        },
        "item": {
          "id": "5a6fdf89-242c-4951-a898-471eaaa375db",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "80591815-aa04-4b9b-8717-9a903c9e2a2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd587964-e1d5-4376-be6f-3243c5976745",
        "cursor": {
          "ref": "8917bb3a-9469-488b-820f-b91fcd7cf5c8",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "fc03477f-54cb-4834-9e15-0ffd49a30cbc"
        },
        "item": {
          "id": "cd587964-e1d5-4376-be6f-3243c5976745",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "d37a4f2a-acc4-4e0d-bb19-a33551849eef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6627fa2a-ca09-41c3-83b9-040b67162bee",
        "cursor": {
          "ref": "3c9e1001-4fb8-4128-8dec-cde6f40f1620",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "3ccbd15a-3a41-4bf5-84da-275c1e2ae19b"
        },
        "item": {
          "id": "6627fa2a-ca09-41c3-83b9-040b67162bee",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "98364e83-228c-48f9-8698-702290eb893c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0014db27-3571-473d-a7d4-bc7247334723",
        "cursor": {
          "ref": "fcb79604-d492-411a-ade0-122c0bb29eb6",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "dbc846ba-5ce9-4ead-84d8-efb97cfc5ba0"
        },
        "item": {
          "id": "0014db27-3571-473d-a7d4-bc7247334723",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "0f64510c-3a9f-4442-8568-24f57eeb154a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "995d767c-7c5c-4eba-991a-ec98be35195e",
        "cursor": {
          "ref": "cb24dc10-697c-4824-b14d-3ae3a8312aa4",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "0cf2958b-a0f7-4fac-a5c3-128884612f6d"
        },
        "item": {
          "id": "995d767c-7c5c-4eba-991a-ec98be35195e",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "62cdd041-70f1-4848-9f76-6a1c10137aaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6e91cb1-2656-43aa-b97d-0bd7d18d1ddb",
        "cursor": {
          "ref": "033a7d7e-1069-4574-905f-a92378640d94",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "b60339b9-cb9f-4419-ad91-9a9f66e9479f"
        },
        "item": {
          "id": "d6e91cb1-2656-43aa-b97d-0bd7d18d1ddb",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "1b879c7c-6460-435e-b3c9-c8e44d25ebc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ed61803-a99a-4103-af3c-58b8a0df5948",
        "cursor": {
          "ref": "0d1621bf-3e3d-468a-86cc-07034f03ad08",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "d3a8b8ad-3352-4a93-b3ee-e91149fb0c20"
        },
        "item": {
          "id": "6ed61803-a99a-4103-af3c-58b8a0df5948",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "75b949a5-1331-4dbb-a62d-a17c89202482",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fca8c82c-6f89-49cd-8337-d28574878795",
        "cursor": {
          "ref": "6cfa0c8d-4f77-4c8c-ba5d-4cd2c051d09f",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "29c42f1d-c4d3-41e9-8b86-c3a95eb59937"
        },
        "item": {
          "id": "fca8c82c-6f89-49cd-8337-d28574878795",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "ff20efd1-bd9c-4ae2-8fa6-be15c5b3f935",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a163e95d-0c3a-4a32-bd15-daf17f3010f0",
        "cursor": {
          "ref": "7cbc959c-f768-4513-9e76-ce6c872e9f43",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "3bd7bd88-da7e-4f0f-ae59-b586cc1c8657"
        },
        "item": {
          "id": "a163e95d-0c3a-4a32-bd15-daf17f3010f0",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "3b0ea55c-a5db-47c8-aec6-23038bd90bcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30a20cd0-6672-49e4-825b-2dcc320e4af3",
        "cursor": {
          "ref": "1818a00e-36ef-4e28-8b83-0806ff4c1d5f",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "fca14937-1d65-4e8f-9dee-56f59ad32d31"
        },
        "item": {
          "id": "30a20cd0-6672-49e4-825b-2dcc320e4af3",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "4dec6fc3-4083-4c0f-a9fd-93ca97a64d83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5c2e36c-f0ae-4563-93a1-14d7205fd76e",
        "cursor": {
          "ref": "25e41708-b2c9-4425-9c09-56671399f951",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "158d0298-7ac1-4637-ad30-8183f49c8e9c"
        },
        "item": {
          "id": "a5c2e36c-f0ae-4563-93a1-14d7205fd76e",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "7a26a64a-f56b-4789-8084-afd17ac4f6a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f343d36b-7221-4363-9aab-1224a3394651",
        "cursor": {
          "ref": "3578cbcf-c061-417f-96bd-c944ec5ad157",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "f6ede393-9e6b-473a-b117-df53dd3bf2df"
        },
        "item": {
          "id": "f343d36b-7221-4363-9aab-1224a3394651",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "943e2435-3cee-46e8-b30c-c150d6502e1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2170fdd-ab98-4a39-8899-29216d41d08d",
        "cursor": {
          "ref": "a0584389-e65e-4d39-b5e2-876aba2fa46b",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "6f1746c4-be14-4952-8c7f-965bd6c873ec"
        },
        "item": {
          "id": "e2170fdd-ab98-4a39-8899-29216d41d08d",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "85d81b2d-a7d8-4917-b30c-dab9b1e50833",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "951b28d1-f048-4d19-9509-c3406815f59c",
        "cursor": {
          "ref": "3216830d-84c1-4d45-b63a-88826f306d38",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "6baa6626-c79d-4c4e-8df6-bca6c7b5b151"
        },
        "item": {
          "id": "951b28d1-f048-4d19-9509-c3406815f59c",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "36c3c675-78e2-461d-8df3-4db5e25cc503",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bd6d1a4-a01f-4359-aa09-eddc5fbfd671",
        "cursor": {
          "ref": "9ef78825-da05-4b2e-a6d2-c25f0787ec18",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "25afd84b-3e13-4cf0-a749-42ba5f71cfa5"
        },
        "item": {
          "id": "2bd6d1a4-a01f-4359-aa09-eddc5fbfd671",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "0aa4ff35-9c39-43f5-9f2d-94543435bd20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e7493a2-e4f3-40a4-b4db-9e2e478da854",
        "cursor": {
          "ref": "3af90ab9-cfbf-43c9-b05f-9d8f13d8daed",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "92302f31-e8bc-4a77-a18e-5c1e2c25d071"
        },
        "item": {
          "id": "8e7493a2-e4f3-40a4-b4db-9e2e478da854",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "6492838c-1fa8-4f2f-b14e-43b4a0ae0f34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9c310bd-e64d-412d-b584-890517641681",
        "cursor": {
          "ref": "4fba0661-c75b-4700-b129-bedbe7273246",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "6d3fec31-db2b-4581-b4c8-9ac8e86ec108"
        },
        "item": {
          "id": "e9c310bd-e64d-412d-b584-890517641681",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "bdbafe16-a944-41dd-a388-b1264013d031",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce00f88e-330e-4b67-97ce-d36fd0dff97e",
        "cursor": {
          "ref": "d35c418f-de14-4b48-9573-14abe31b6471",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "895db5e3-0335-46d2-9a69-18e86698d456"
        },
        "item": {
          "id": "ce00f88e-330e-4b67-97ce-d36fd0dff97e",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "988eb2bd-466e-4616-91bb-55ce9adc31ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aab50a06-6ace-458b-afc6-59cf29f53e21",
        "cursor": {
          "ref": "cb507b6c-73c1-4624-80e4-4cbf586d1705",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "1d240f8b-b404-4f26-951e-c71a734feded"
        },
        "item": {
          "id": "aab50a06-6ace-458b-afc6-59cf29f53e21",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "067f12c1-198a-424f-a220-c304aa3c5939",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8dd9ac8-e9ea-4d91-8549-83a5f4316ab6",
        "cursor": {
          "ref": "1821c8a3-ed73-4c14-8692-7d260090589c",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "989a81b9-8367-41dd-b62e-d74dcc5ab348"
        },
        "item": {
          "id": "b8dd9ac8-e9ea-4d91-8549-83a5f4316ab6",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "c08b00bb-9cf0-4e07-9228-1f3df3ef929f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f772950-480a-4ce1-8725-c9ae6bfef9ef",
        "cursor": {
          "ref": "46719eb2-b33f-4d76-a0bb-79553e85f23b",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "46b9528c-7b20-4264-a00b-4d3ab37b59e3"
        },
        "item": {
          "id": "1f772950-480a-4ce1-8725-c9ae6bfef9ef",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "7a915afc-c4f9-47a1-ac6d-a47a9b79fa7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f321f946-dbf2-4c25-a470-91d165c48c42",
        "cursor": {
          "ref": "5116d937-f7ab-47ad-a64a-57aecb53dce1",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "5755faa0-956f-487d-b892-28e16fb4f788"
        },
        "item": {
          "id": "f321f946-dbf2-4c25-a470-91d165c48c42",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "5c0f1099-b868-4a72-b601-d3c253a60f7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37de141a-31c8-435a-b2c6-8d62378373ea",
        "cursor": {
          "ref": "aa274adc-ff0b-464f-b502-61d085d0ca57",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "30d5e0ff-185e-4d8e-bd1d-a7e05b4aaf53"
        },
        "item": {
          "id": "37de141a-31c8-435a-b2c6-8d62378373ea",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "d003832a-5ca4-410e-9aab-6e8d02f46dad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87dd1896-54f4-4837-b12c-867ea2555dbf",
        "cursor": {
          "ref": "0974df3f-b228-4237-9a0f-99d26d23d64c",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "a91d6041-1024-4625-b090-94bd9a2d92ab"
        },
        "item": {
          "id": "87dd1896-54f4-4837-b12c-867ea2555dbf",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "c0135fd6-487d-456f-b550-1e70da8f0f69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89caef99-aa67-4707-816e-229876eb7b4c",
        "cursor": {
          "ref": "6b4333a2-2552-40d4-acb2-81e7226496ce",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "e83ee24b-8608-4f98-b447-119a63b6e05f"
        },
        "item": {
          "id": "89caef99-aa67-4707-816e-229876eb7b4c",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "54d0494f-2d7a-4f13-8250-341ab1a4303b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fae8b580-d8b6-40d9-bf6a-a5d4865c37fd",
        "cursor": {
          "ref": "654e762b-2872-4c1f-b03c-2cd1b03e953c",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "74f7dbda-a5a7-40bf-a613-cf1ea9c6f492"
        },
        "item": {
          "id": "fae8b580-d8b6-40d9-bf6a-a5d4865c37fd",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "262c4904-ff53-4ec8-aa1b-2658bb74179f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d438a57-60e6-4ae5-9563-238b3ea02a24",
        "cursor": {
          "ref": "832707f6-a461-410e-a320-185284bb4113",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "cfdab185-142c-428e-a737-522c8e9e3264"
        },
        "item": {
          "id": "1d438a57-60e6-4ae5-9563-238b3ea02a24",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "2e09b60d-b448-4aba-bbc4-1d8bb49ee98c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "831dc30f-c51f-474c-8e6e-dfc98df7d19c",
        "cursor": {
          "ref": "5bea85f9-ab39-41db-9d85-668955f6c364",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "f1bdf2f8-38a9-4e8b-82cb-639d987b5701"
        },
        "item": {
          "id": "831dc30f-c51f-474c-8e6e-dfc98df7d19c",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "1d58c1ed-7570-487a-b923-bc413847335b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c46f5e16-4317-4aab-b7e2-65b7c6512449",
        "cursor": {
          "ref": "a6c24e6f-4e07-4c10-886e-f8fc0bc31e3c",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "941c205d-1991-4288-b231-4cddb93619ca"
        },
        "item": {
          "id": "c46f5e16-4317-4aab-b7e2-65b7c6512449",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "933fcd8c-a8cb-4d0b-a6cf-394fd030c7e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52567740-72fd-4e9f-bda6-b7f658e5e212",
        "cursor": {
          "ref": "4cb6fc9f-8fb7-477c-ac0b-33e05d34739a",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "7bb39f0e-bd15-4769-b0ed-7457a0f0fc14"
        },
        "item": {
          "id": "52567740-72fd-4e9f-bda6-b7f658e5e212",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "26db57dc-1dd9-4416-aec6-0c5069a9814d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b24e16cb-69d5-421e-81c4-4b454afdecce",
        "cursor": {
          "ref": "32f12faa-2ce9-4a20-9472-e2603d57aa96",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "a7c22439-6fe0-4aaa-b809-ee00ab7ae142"
        },
        "item": {
          "id": "b24e16cb-69d5-421e-81c4-4b454afdecce",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "c5eaf9ac-61af-4dcb-b938-4c1406a041cc",
          "status": "Created",
          "code": 201,
          "responseTime": 551,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "5eaeba37-b964-4826-96fd-85a2c1978668",
        "cursor": {
          "ref": "fd7cfaba-6c8f-4c1b-97c7-1ecab1080b34",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "d208b4a2-7bf5-40cc-b48d-76a0de5541e0"
        },
        "item": {
          "id": "5eaeba37-b964-4826-96fd-85a2c1978668",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "5a64d1cf-b23c-4f67-bf28-f9d22f8959a7",
          "status": "Created",
          "code": 201,
          "responseTime": 279,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "7effd3ec-03ac-4eb5-bace-65a92e518952",
        "cursor": {
          "ref": "68eaabb0-05d7-45c5-915f-cd7f4ee4184f",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "b42f8d79-3e51-49da-ba84-cdd445b7163f"
        },
        "item": {
          "id": "7effd3ec-03ac-4eb5-bace-65a92e518952",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "1d84379d-8f76-43f6-a1ca-8005b6d3e9dd",
          "status": "Created",
          "code": 201,
          "responseTime": 284,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "9af9854d-73be-4788-a8a0-116037fedf37",
        "cursor": {
          "ref": "38dbafe0-d2ec-43d1-95fd-e95aee0f7099",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "5c24b394-dfef-4543-af6b-c49eec690a1d"
        },
        "item": {
          "id": "9af9854d-73be-4788-a8a0-116037fedf37",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "c2582403-08c5-4f88-b7ce-0adf41e4ac25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f735a666-2e53-4212-af72-b81b367566f4",
        "cursor": {
          "ref": "9aafcbdb-6881-4a17-a20c-7895b23366c1",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "efe46baa-e68a-4176-87b0-278a8bae126f"
        },
        "item": {
          "id": "f735a666-2e53-4212-af72-b81b367566f4",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "8b259bbf-8d28-4532-bc8e-b077ae715789",
          "status": "Created",
          "code": 201,
          "responseTime": 295,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "ffc727ee-9491-4147-a0e4-279f48fc0727",
        "cursor": {
          "ref": "657d9db4-e0bd-4ad1-a4f7-356565a9ee5a",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "639cb3b4-cddc-4d37-83a6-c354567d5247"
        },
        "item": {
          "id": "ffc727ee-9491-4147-a0e4-279f48fc0727",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "7420035a-44d0-4c15-a38c-f1260f605dbb",
          "status": "Created",
          "code": 201,
          "responseTime": 293,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "5d000b3e-974b-4ac7-b496-6b4cc43d8dcb",
        "cursor": {
          "ref": "7b9e3001-31d9-4f9d-adca-751990f3e608",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "070a23a4-a1bf-4b30-aa75-d93a7645a859"
        },
        "item": {
          "id": "5d000b3e-974b-4ac7-b496-6b4cc43d8dcb",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "11cd3fd2-2824-4412-872f-02d910c70b84",
          "status": "Created",
          "code": 201,
          "responseTime": 368,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "796cb0bc-dc64-4a28-be76-b598fd5f3acb",
        "cursor": {
          "ref": "bc9b22d8-a3be-4c01-8678-38d645ac1b75",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "a0900110-9d49-4887-b473-4ca603cca918"
        },
        "item": {
          "id": "796cb0bc-dc64-4a28-be76-b598fd5f3acb",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "9227d25f-16d0-466a-a68d-af4f1ab43879",
          "status": "Created",
          "code": 201,
          "responseTime": 286,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "1f76ba61-73ca-40e4-be4c-1bdf0337a55e",
        "cursor": {
          "ref": "9174e11f-65a1-4dba-bd5e-930069409106",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "60523fdf-f028-4e5e-8cd0-73107f884b5f"
        },
        "item": {
          "id": "1f76ba61-73ca-40e4-be4c-1bdf0337a55e",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "0d6d8565-8c80-4230-a599-092fef56c891",
          "status": "Created",
          "code": 201,
          "responseTime": 264,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "b4bacfb3-33bd-4f9e-9cb5-dd487566f692",
        "cursor": {
          "ref": "045577bd-46c1-422a-95ea-e19af5561f69",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "809dc21d-851c-4bd5-abaa-eed2fbe38068"
        },
        "item": {
          "id": "b4bacfb3-33bd-4f9e-9cb5-dd487566f692",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "86e8900c-448b-42e1-8c91-1d19d88ad8db",
          "status": "Created",
          "code": 201,
          "responseTime": 274,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "0a690e87-c98d-4d8f-8ef3-49ebbbb85856",
        "cursor": {
          "ref": "e20ffc93-0ed8-491b-b2a7-0cceee1b65eb",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "dabaf6b4-ca75-4614-bae6-b92de129ccea"
        },
        "item": {
          "id": "0a690e87-c98d-4d8f-8ef3-49ebbbb85856",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "64e61dae-15b3-489d-8220-f74550f304a2",
          "status": "Created",
          "code": 201,
          "responseTime": 277,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "4bcd45c2-597e-4cce-8b76-19efa99ba7ac",
        "cursor": {
          "ref": "92335e24-8ace-4cf2-8311-600b5571c644",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "a7a1a94a-612d-4bdb-a0af-2cceb048d563"
        },
        "item": {
          "id": "4bcd45c2-597e-4cce-8b76-19efa99ba7ac",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "3915bdeb-4cfc-482d-8936-8662f0d814cc",
          "status": "Created",
          "code": 201,
          "responseTime": 266,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "4b8fc75a-f20e-4320-9c27-d1ce718fb3d3",
        "cursor": {
          "ref": "611c7df6-1cbf-4741-9c74-8beeac41bd91",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "5f29e34b-a08b-491f-87b0-fc7271dd19e6"
        },
        "item": {
          "id": "4b8fc75a-f20e-4320-9c27-d1ce718fb3d3",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "7c3f635e-4eed-4d59-9b34-6c4648c823f3",
          "status": "Created",
          "code": 201,
          "responseTime": 309,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "10d06743-8cee-42d0-8724-2330837d4a2e",
        "cursor": {
          "ref": "abd6c60d-54ee-40ab-8997-7b98288941fb",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "391a16d8-2b16-4f61-8f94-92368af05645"
        },
        "item": {
          "id": "10d06743-8cee-42d0-8724-2330837d4a2e",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "71fe6df8-e22e-4f17-a151-fc8615d9e2e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8a001f1-d321-41a8-8e23-b3a05fd992a6",
        "cursor": {
          "ref": "ac8787a1-08e2-4ff0-99d0-6b76fdaa80ac",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "5251422b-d7f4-47cc-bc29-e0557fb626ec"
        },
        "item": {
          "id": "f8a001f1-d321-41a8-8e23-b3a05fd992a6",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "6d086a27-d54c-404f-8e7b-97d4b591bf5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad8816f2-0d90-42cd-9a6e-1cd4faa0955e",
        "cursor": {
          "ref": "915c3fda-1eed-4ce8-a68e-b1a5f981c35d",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "84abd12b-d9cf-40d7-800d-604c7595a2c8"
        },
        "item": {
          "id": "ad8816f2-0d90-42cd-9a6e-1cd4faa0955e",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "f80fd5a2-5eb2-43bb-91ba-26b7e3c47b16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81ce394a-ebfc-403d-972e-f44b92f07a51",
        "cursor": {
          "ref": "95015239-1c57-4168-ab79-09afd871e42a",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "8b7bac4e-baca-47b7-8aed-a8579337593e"
        },
        "item": {
          "id": "81ce394a-ebfc-403d-972e-f44b92f07a51",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "888ca3d4-8dcd-4fda-868a-1a51c3aa511d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "196bb59c-2a50-4db8-b478-f3f03a20058e",
        "cursor": {
          "ref": "68bb5f8b-abc7-4531-abdf-ef012e6561c6",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "50a53cae-53cc-4f19-8e45-1bc7e5ebe51f"
        },
        "item": {
          "id": "196bb59c-2a50-4db8-b478-f3f03a20058e",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "f62a49f5-c556-47ba-b8a8-4c0d9ba7a712",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51733496-ad3f-469f-9a99-2da534549232",
        "cursor": {
          "ref": "bae96e71-bde3-40a4-9fc7-be371c404873",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "7aab5136-2679-44ea-a714-1c17b1203d58"
        },
        "item": {
          "id": "51733496-ad3f-469f-9a99-2da534549232",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "9a2af21a-de16-4cd7-abc3-1302a09d3410",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87a4179c-2584-4334-8941-9fdaed8c7fc2",
        "cursor": {
          "ref": "dfbff4ce-d093-45ef-bc9e-8c126a2ae357",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "d98dd317-a4bd-4dcd-8b56-7adf77ed291d"
        },
        "item": {
          "id": "87a4179c-2584-4334-8941-9fdaed8c7fc2",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "2dabb13f-b166-45d6-b1ac-1d3de19690fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e92ae488-15ce-4b0e-8ffa-d7b2b3b093c1",
        "cursor": {
          "ref": "ec933b45-a4a6-45d9-9c87-db6299762348",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "9579607e-ac66-470d-b619-0b66eae4f602"
        },
        "item": {
          "id": "e92ae488-15ce-4b0e-8ffa-d7b2b3b093c1",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "d33cf7a1-75b5-4a49-b203-ded52595294c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a741fcd-f4f8-42a0-851d-c810c4a94760",
        "cursor": {
          "ref": "ff3eea90-7ffa-498f-bd0f-8ecbbc775d43",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "49e9a7b1-b831-4c06-a828-9b8b07cf1290"
        },
        "item": {
          "id": "7a741fcd-f4f8-42a0-851d-c810c4a94760",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "802af4af-02ce-4777-af6e-19affbbec1b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ab5041c-7ec6-48a6-997e-3e2c4ce8c068",
        "cursor": {
          "ref": "d3149375-4c28-4b2e-9eac-a57ad1787aee",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "856cee31-bbd8-47c1-8a42-812be86adf3b"
        },
        "item": {
          "id": "8ab5041c-7ec6-48a6-997e-3e2c4ce8c068",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "33cdc517-81c8-4862-8ce5-1d3326c929ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c5aafe5-f91b-4736-9e89-647db7de0c95",
        "cursor": {
          "ref": "0f2f2711-aabe-496f-910b-c16a9cd57654",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "bfef9be2-9319-4758-ac47-2bf26b59731a"
        },
        "item": {
          "id": "2c5aafe5-f91b-4736-9e89-647db7de0c95",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "204a1609-f74b-4c95-b3c9-6ab7c63c5d6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbb658dd-2e39-4257-ae87-8ad5e9c168cb",
        "cursor": {
          "ref": "9f6e673e-2dfb-4bf2-96e5-ec04c0284680",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "417e3365-d86f-427d-8937-f79f072aeef2"
        },
        "item": {
          "id": "bbb658dd-2e39-4257-ae87-8ad5e9c168cb",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "c80d3f11-3015-494a-b3a2-03e06a61e272",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce7eeb79-f48d-4313-acfd-164073b9e3b3",
        "cursor": {
          "ref": "5da8b3fb-f6f3-47a1-8e1d-0490764ef0d2",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "057aceea-6bec-40cb-a171-f09158a8ba59"
        },
        "item": {
          "id": "ce7eeb79-f48d-4313-acfd-164073b9e3b3",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "00f5110e-e886-4ef4-8d97-aea29b571202",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff3e1136-6b95-4782-a8df-fc6c35bbea0d",
        "cursor": {
          "ref": "a28ac6a6-1de3-400a-a2c3-3579a30c1c90",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "9afcc742-aca2-4cbf-bcfb-54015262322a"
        },
        "item": {
          "id": "ff3e1136-6b95-4782-a8df-fc6c35bbea0d",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "cbe9326b-b331-44b4-92b2-4911011af9ae",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "55787b2f-9fc1-48b4-91fc-79890c74eac0",
        "cursor": {
          "ref": "89e4098e-f64d-435e-8489-8f5599390ce4",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "a13a5dfc-44c5-4f93-921d-f16827ed2b3f"
        },
        "item": {
          "id": "55787b2f-9fc1-48b4-91fc-79890c74eac0",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "2b3c74fb-1942-4633-a151-b98ffae51c03",
          "status": "Created",
          "code": 201,
          "responseTime": 290,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "96f53007-702a-453f-9544-16f629199725",
        "cursor": {
          "ref": "db88dd19-3b31-447b-9d73-54b43db4877c",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "6ccffb32-1c20-40b0-be1d-674075c956cf"
        },
        "item": {
          "id": "96f53007-702a-453f-9544-16f629199725",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "8bf19f57-5cbe-48f4-aceb-e9f49f7e4c29",
          "status": "Created",
          "code": 201,
          "responseTime": 294,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "1928cb1b-987a-44af-b223-ef93d97aaecb",
        "cursor": {
          "ref": "acfd6978-aabd-4a1c-a121-aa110ffadb31",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "7f4f8ecf-b634-4167-87dc-f5d09719aa73"
        },
        "item": {
          "id": "1928cb1b-987a-44af-b223-ef93d97aaecb",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "346f88a5-8ce4-487f-b2f5-af5dcb18c179",
          "status": "Created",
          "code": 201,
          "responseTime": 291,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "3b1739b8-4612-4ba0-9d6f-078283cb113e",
        "cursor": {
          "ref": "f754fca7-83a1-4a36-86ab-3567374df122",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "21366cdc-6164-473f-84df-5d477e55cded"
        },
        "item": {
          "id": "3b1739b8-4612-4ba0-9d6f-078283cb113e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "a34f6a1b-34b0-47db-b241-6e7840382c23",
          "status": "Created",
          "code": 201,
          "responseTime": 277,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "2b6c1b43-645e-48a2-9c34-c1c2ce9bfe39",
        "cursor": {
          "ref": "d6c0adb2-893a-4359-ba1d-7a2b7785547b",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "f7805c79-2d68-4cb7-a62b-83a287edc495"
        },
        "item": {
          "id": "2b6c1b43-645e-48a2-9c34-c1c2ce9bfe39",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "55b243ed-deb7-4f78-8eec-a2c37a45d444",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95475586-9d6b-4f80-957d-2240077d33bc",
        "cursor": {
          "ref": "6929e257-d4cf-4415-ad1c-6b000aafe2d9",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "488d317d-2574-4f20-bebf-54f4c09d0441"
        },
        "item": {
          "id": "95475586-9d6b-4f80-957d-2240077d33bc",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "55546f11-837e-4817-b7b2-a6fdcda356dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd999ce5-1689-41a7-9aae-e118c76d971f",
        "cursor": {
          "ref": "41ee83f5-ae21-4300-8107-80799067202a",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "6d0bbcae-b4cf-43e0-9d8f-be54695740bf"
        },
        "item": {
          "id": "dd999ce5-1689-41a7-9aae-e118c76d971f",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "572fccfc-4658-41ce-897b-171589c39f58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d95dea61-cf13-4bf2-a248-ae5a6dad784c",
        "cursor": {
          "ref": "c090453a-8f32-4326-a5fa-405293fbbd48",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "43886c1b-8d40-4803-b504-b86f3af596b7"
        },
        "item": {
          "id": "d95dea61-cf13-4bf2-a248-ae5a6dad784c",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "183a2563-ba7c-4c4f-8b8c-c614ec976553",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "556c91e2-c4eb-4725-bed9-a188ab6a05b7",
        "cursor": {
          "ref": "ca32814d-ff8d-4657-b092-1ec6b08dde4e",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "fc4b0206-b221-4bf7-a14d-2b0507cd76bb"
        },
        "item": {
          "id": "556c91e2-c4eb-4725-bed9-a188ab6a05b7",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "04bf25c0-42dd-41f2-a2ef-82ab4cb774a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "803e708b-ad64-4e6d-ae2c-2e7cb96bc38d",
        "cursor": {
          "ref": "a53ab2fd-1ea8-4070-af62-7a86a6eb6884",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "f7783445-26e5-4b7b-8e15-24f2aeb60455"
        },
        "item": {
          "id": "803e708b-ad64-4e6d-ae2c-2e7cb96bc38d",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "7e5fe8db-3775-4c57-a35e-aa9532192c98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 145,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a5529dd-2de4-48f3-abca-59cbc9e33b1f",
        "cursor": {
          "ref": "bf89716b-21ac-469d-b6b2-8ce37b6a4476",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "671e5491-3857-41ec-a58b-424122c89f09"
        },
        "item": {
          "id": "5a5529dd-2de4-48f3-abca-59cbc9e33b1f",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "31f5df71-2c04-4ef3-90ba-3d6aa588f400",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5abdef20-a5b2-4201-aa0c-e5d1baf72a97",
        "cursor": {
          "ref": "c93e7ba7-16d6-4107-9fd0-3b1448e06c77",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "49211240-14e5-4cc7-ba07-8a5461710437"
        },
        "item": {
          "id": "5abdef20-a5b2-4201-aa0c-e5d1baf72a97",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "1013bffd-0666-48af-a6c1-4de3f9ee909e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae3b3555-e50e-4d06-8fb3-2a3bf9ac549b",
        "cursor": {
          "ref": "041ba345-89c4-406c-bbca-16ac6d9fce9b",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "a915270d-3595-4fe8-8b5c-25b0e2d6708f"
        },
        "item": {
          "id": "ae3b3555-e50e-4d06-8fb3-2a3bf9ac549b",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "3ce92218-465f-4766-ba27-245812527f81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ef13d3b-389e-43a6-bb87-7481700b9181",
        "cursor": {
          "ref": "3598db1c-e2d3-466d-a216-687dbf0d4779",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "77455e13-c344-4fdf-a1bd-4a3e39f66179"
        },
        "item": {
          "id": "6ef13d3b-389e-43a6-bb87-7481700b9181",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "737d9fd0-8031-47a6-a422-3d95842bd315",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "675fdf16-5919-4d1c-a5ef-90c57d1cf7fd",
        "cursor": {
          "ref": "31b1e31b-21ce-4678-9ccd-43a64404847b",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "0ac9606c-3cce-41bd-be80-0257be1ab888"
        },
        "item": {
          "id": "675fdf16-5919-4d1c-a5ef-90c57d1cf7fd",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "4027f72b-dd7b-4344-ad82-e7c1ad5e8531",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84ee90db-6eb2-41dc-a26a-99bd6800a0dd",
        "cursor": {
          "ref": "8ab66f87-ec50-4452-b51d-c54389a73d0e",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "2e86d14f-88ae-4f76-921b-790f4a1efe27"
        },
        "item": {
          "id": "84ee90db-6eb2-41dc-a26a-99bd6800a0dd",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "a28eb2dc-404c-4fa7-9085-d3259397101a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a3780f3-c219-456b-9cf6-671a73179064",
        "cursor": {
          "ref": "903168e1-69bd-491c-a988-4d5906906938",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "53fa1f6d-32d5-445f-abd4-ce6675987a02"
        },
        "item": {
          "id": "6a3780f3-c219-456b-9cf6-671a73179064",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "59931d90-40eb-4abc-8f87-853689fb5f56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "364e1224-305e-4b5f-bece-e21ed53620a7",
        "cursor": {
          "ref": "f98b6cdf-7e54-45e3-a945-2fa95f37b3d2",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "64aaf4c8-328d-4a65-b221-5f426f1b922c"
        },
        "item": {
          "id": "364e1224-305e-4b5f-bece-e21ed53620a7",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "88a4e06e-fd0b-4221-9915-914a0c00b3ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f43ffdf-6ac5-48f4-addc-4f11f88688e0",
        "cursor": {
          "ref": "1b7c3f07-d10c-4b32-a0b1-4e0446f21e6b",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "c762a1ec-4daf-4c8e-9c24-32a3acff317c"
        },
        "item": {
          "id": "8f43ffdf-6ac5-48f4-addc-4f11f88688e0",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "47d73c63-bd98-400c-a219-edbfa4fd6245",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "959b3d43-878d-4048-bedc-a387fdf731b1",
        "cursor": {
          "ref": "c5a0ff48-9d42-4559-bebb-d20bc7e8662f",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "b3ed7d71-0959-459b-b243-149c109d5ef3"
        },
        "item": {
          "id": "959b3d43-878d-4048-bedc-a387fdf731b1",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "2378c8ee-335d-4b00-bdec-b9a203e9086f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06dee302-b97d-4ad1-ace0-39b8ff69035a",
        "cursor": {
          "ref": "bc55e20c-10d4-4e16-8c7d-33554722a0da",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "2eac5b5c-29b2-4aa5-8799-0b542cd33160"
        },
        "item": {
          "id": "06dee302-b97d-4ad1-ace0-39b8ff69035a",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "891cb499-4b1b-42e1-aee5-836a1f1f3604",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "625f99d6-6bc1-4ccb-912a-39059754b79b",
        "cursor": {
          "ref": "e917ca94-424e-4788-b15f-2c28fd251b03",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "fd545479-e506-4959-a201-933f295aa9cb"
        },
        "item": {
          "id": "625f99d6-6bc1-4ccb-912a-39059754b79b",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "1eecd392-efb8-4a7f-8590-595bd0708fdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1e1e2c8-8c14-49e9-9f3b-e6389699ff0c",
        "cursor": {
          "ref": "9bde4114-8fdc-40ff-ad86-7935de2214d0",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "35d19f09-de94-4c7e-abdd-70f653bf013b"
        },
        "item": {
          "id": "c1e1e2c8-8c14-49e9-9f3b-e6389699ff0c",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "ac037b20-18c5-4683-b08f-03af37ecfa9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2d85e57-a382-48e3-97c4-848d8accb60c",
        "cursor": {
          "ref": "c22a96e2-4e71-4af6-ad3f-41795c9a6816",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "58a73e66-43f2-4f66-b0d0-a3ed518acf99"
        },
        "item": {
          "id": "b2d85e57-a382-48e3-97c4-848d8accb60c",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "b9760e29-bcf5-4441-8da4-288156014312",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a1930dc-ad4a-438d-a8f8-d1c70ad58e93",
        "cursor": {
          "ref": "86d8b336-cc9a-4ebf-ad71-8fbd6ff593a6",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "ba776437-f046-45da-92bb-3c553442c677"
        },
        "item": {
          "id": "0a1930dc-ad4a-438d-a8f8-d1c70ad58e93",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "8408ddfa-0ddd-43eb-8207-c6ed79b054a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00d7caa1-dce6-4c7c-9239-24166902458e",
        "cursor": {
          "ref": "4ae034ec-d018-40b3-b1b4-4d8b4580b307",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "9b0bfefe-2131-44e1-beab-0dbcdd241fef"
        },
        "item": {
          "id": "00d7caa1-dce6-4c7c-9239-24166902458e",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "6a64e07f-4f8e-442e-99ec-eebc64485a1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8b52eed-f34e-466c-9838-bccc33748389",
        "cursor": {
          "ref": "64834bc4-6208-458f-a68e-432e3e48028f",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "ff352578-2add-415f-98f6-755c7b6fe12b"
        },
        "item": {
          "id": "f8b52eed-f34e-466c-9838-bccc33748389",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "2761e951-f936-4c1e-b9e5-e2e233b661dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45530efa-3517-4e2f-a74f-e8e63aa6878d",
        "cursor": {
          "ref": "202fc9d9-b5e5-4de6-9613-61658c48a355",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "86933882-43b0-4985-9600-766b73925813"
        },
        "item": {
          "id": "45530efa-3517-4e2f-a74f-e8e63aa6878d",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "a81afef9-f615-4fff-a18f-6cc2d037e33a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f54e5052-16b7-4f24-a1ad-10354ddd84ab",
        "cursor": {
          "ref": "6c4140de-1353-4a51-9b91-0b99d953c848",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "a12612c0-c954-4492-8074-bd991b55a916"
        },
        "item": {
          "id": "f54e5052-16b7-4f24-a1ad-10354ddd84ab",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "7e891c55-866d-44ef-baa4-fbcdbf53ebf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2206fef-2fb0-4eba-97ce-fe4b65ddaf0a",
        "cursor": {
          "ref": "383e1e37-b6d8-4ef3-83df-829ee4ca0e69",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "976c39e2-94bf-4cc0-81e6-bf6e7b3aff46"
        },
        "item": {
          "id": "f2206fef-2fb0-4eba-97ce-fe4b65ddaf0a",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "399813bd-46d7-481d-ba20-d7d2486f431b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "307c81c7-0de8-448e-9a9f-1c1f58f3c406",
        "cursor": {
          "ref": "bc5c10a9-95b3-4244-bbb9-bb7d0522a241",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "0a9598fb-e62b-4066-ae24-7b08b08a1799"
        },
        "item": {
          "id": "307c81c7-0de8-448e-9a9f-1c1f58f3c406",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "0eea313c-a211-48d7-bffa-be86382a2694",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8c640eb-fca3-417f-9dfc-db5c8f8dfe0a",
        "cursor": {
          "ref": "f9070d0a-a202-4e4b-a0eb-3b5ee10b130a",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "2bdf64eb-b885-4d7b-b7d3-0d0504640035"
        },
        "item": {
          "id": "a8c640eb-fca3-417f-9dfc-db5c8f8dfe0a",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "83050532-ed6b-4037-986c-4ab504d96abf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "993b1ba6-32d4-4193-b99d-a18bc6ee0c79",
        "cursor": {
          "ref": "5996e901-08ba-4ed3-8055-c22b506534d1",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "2b7cdd03-1674-4815-a7db-0eefc0d88f9f"
        },
        "item": {
          "id": "993b1ba6-32d4-4193-b99d-a18bc6ee0c79",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "96392b1c-a707-463c-9003-782ed27deab8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "415977e2-6a52-47a0-a2a8-e6d45fcea0c5",
        "cursor": {
          "ref": "074370b6-7ac7-4598-807b-bd56eb2d9b3f",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "6302f34b-98b9-49f8-80e2-dbca28bc9acd"
        },
        "item": {
          "id": "415977e2-6a52-47a0-a2a8-e6d45fcea0c5",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "65018352-c2f9-40f7-9718-75aa896c7e02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06cb1a41-74cf-449b-a75d-48621d16fffe",
        "cursor": {
          "ref": "5ae903ce-997c-4007-bc33-0ea249347bb7",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "d7eb03ba-ea0c-4587-9650-5e6e61b22215"
        },
        "item": {
          "id": "06cb1a41-74cf-449b-a75d-48621d16fffe",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "a69c4d87-5ed3-4bd4-986b-f3f086041e72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b3f5d2c-a8f4-477b-9528-f30154c0ca22",
        "cursor": {
          "ref": "c92edb57-92ba-480c-ae60-e4d02e25a812",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "604940bd-cfe1-4cf9-a55d-575fe74859b1"
        },
        "item": {
          "id": "9b3f5d2c-a8f4-477b-9528-f30154c0ca22",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "7df78193-bb8a-4b9c-a833-56490f3076a6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed18f298-1a5f-42d1-9839-622623f591c9",
        "cursor": {
          "ref": "57501f28-634c-4257-b68b-f1dbbeec7d82",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "d8ef7336-8f36-4b37-b0c1-2241f6d9a592"
        },
        "item": {
          "id": "ed18f298-1a5f-42d1-9839-622623f591c9",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "d1fc57ae-d5cb-4a17-a0e5-1d7c594845cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "732dfe9e-c9db-41bb-9360-6358ade8d30a",
        "cursor": {
          "ref": "da5a9ed1-d5ea-45e6-8918-287966b36ffe",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "27852ebc-e795-4992-8d5d-bee64c9adafa"
        },
        "item": {
          "id": "732dfe9e-c9db-41bb-9360-6358ade8d30a",
          "name": "credentials_issue"
        },
        "response": {
          "id": "b6ae8725-8753-4b67-9a16-9af523176887",
          "status": "Created",
          "code": 201,
          "responseTime": 279,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "96042f46-de71-4fe4-828f-350cbd9ffd4e",
        "cursor": {
          "ref": "29a0d277-9d15-4553-8c1f-c8f7d4a9be00",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "489db222-01c8-486d-b73b-fd18b40d3814"
        },
        "item": {
          "id": "96042f46-de71-4fe4-828f-350cbd9ffd4e",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "e5ebea29-f6e8-4008-9bdc-c06b4e847e5a",
          "status": "Created",
          "code": 201,
          "responseTime": 291,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b28ae7f-bd88-4ed8-9742-e409029c47f3",
        "cursor": {
          "ref": "4b57ad09-bbce-4589-b57c-04460fb77033",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "89d7b656-d33e-4f94-8201-79620a54cfef"
        },
        "item": {
          "id": "3b28ae7f-bd88-4ed8-9742-e409029c47f3",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "617916c7-397a-4bec-beda-2001e76e01c2",
          "status": "Created",
          "code": 201,
          "responseTime": 277,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e049658-6cc5-4a36-ba11-c6c3738f7b40",
        "cursor": {
          "ref": "31b9cb0b-7aaf-4c7f-94e2-025b90c371da",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "1feb44bf-1477-49aa-9391-5964eefcdbaf"
        },
        "item": {
          "id": "0e049658-6cc5-4a36-ba11-c6c3738f7b40",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "d6306e00-5732-4f88-9192-f5eae73c88f7",
          "status": "Created",
          "code": 201,
          "responseTime": 316,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "265bf409-35d6-44ec-b3d5-a0153c2971b2",
        "cursor": {
          "ref": "7f098e06-9127-40b3-9a52-2c2f8f73e765",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "f226e549-4668-4e5d-b36d-40ea28d6c5f8"
        },
        "item": {
          "id": "265bf409-35d6-44ec-b3d5-a0153c2971b2",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "07c8b431-0746-4576-badd-b15f9c6a253a",
          "status": "Created",
          "code": 201,
          "responseTime": 287,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-03-21T00:35:49.146Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-03-21T00:35:49.146Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "759ffba4-ca09-4d42-8bd3-9c09a12d2589",
        "cursor": {
          "ref": "d6a513a0-3ec8-44f9-9f7e-7d683542fdb8",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "c9196baf-73da-46a9-8f6a-c80004979632"
        },
        "item": {
          "id": "759ffba4-ca09-4d42-8bd3-9c09a12d2589",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "516adca6-d741-4349-950c-ddc062640b85",
          "status": "Created",
          "code": 201,
          "responseTime": 297,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e16d316c-feba-45bf-aa34-579d0547e119",
        "cursor": {
          "ref": "be42c423-bf28-48f6-9417-69f3171f824b",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "42b0691e-2c67-4972-8205-47fd2f75f8b8"
        },
        "item": {
          "id": "e16d316c-feba-45bf-aa34-579d0547e119",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "df896db0-b17c-4bd5-a0fc-75bf835d5610",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b20ebeb-b996-4908-a2e0-1258d5ae1003",
        "cursor": {
          "ref": "5b5ca65d-9b80-45be-9d2d-3024c80359bc",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "710c0247-f690-450e-a744-4d9ebd8924d4"
        },
        "item": {
          "id": "8b20ebeb-b996-4908-a2e0-1258d5ae1003",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "1133d828-38f1-4d01-8b84-2ea667e6c22d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c5af6e9-248e-4270-86df-f6e9e90c224f",
        "cursor": {
          "ref": "9e3a4424-0f7f-44e2-83a7-a94724b9fcc4",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "cb6756b9-876e-4003-b2e3-a9248693811e"
        },
        "item": {
          "id": "6c5af6e9-248e-4270-86df-f6e9e90c224f",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "377356be-d0da-41a9-8e25-1f45db9fafb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d310c937-da0f-4165-acbf-56898afe0a8f",
        "cursor": {
          "ref": "db40f1f2-8be9-4671-943d-d6e19bfeafa8",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "1fa14829-4013-4591-aab0-3f1718de380e"
        },
        "item": {
          "id": "d310c937-da0f-4165-acbf-56898afe0a8f",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "86607c68-49a2-4968-b10b-7b1f62d8e47e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c38697c-75d9-4635-8a92-33bf220df564",
        "cursor": {
          "ref": "8f31f826-8c5f-4b17-9ba2-5758ec3a87b8",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "f7fef0fc-10e7-437d-855e-8e5bf3b54d87"
        },
        "item": {
          "id": "8c38697c-75d9-4635-8a92-33bf220df564",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "9e6badb8-1371-4035-8bb6-ab6ff72906fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3808b5de-a3d4-4ab3-9922-54f01939939c",
        "cursor": {
          "ref": "f98d834c-71e2-45c6-8f39-1f1400384bcd",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "aec63fd2-d9e1-43c4-ae53-2fc3bba9bdd7"
        },
        "item": {
          "id": "3808b5de-a3d4-4ab3-9922-54f01939939c",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "5e4a972e-cbb7-43ac-bf03-13df41612f6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e13c5002-757b-4d74-a57f-76eeb2cb23b6",
        "cursor": {
          "ref": "b4af6630-c4e7-476d-81c2-6754cc11e476",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "db3e496f-954d-4738-b574-a946b2ee1cda"
        },
        "item": {
          "id": "e13c5002-757b-4d74-a57f-76eeb2cb23b6",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "cd1733bb-cc8e-4185-b5a9-588f965f3acc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08f411e5-4e31-4b5a-8e42-f23364600102",
        "cursor": {
          "ref": "98ae9f0a-c615-4b0f-930d-e3fba6097eea",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "38c09086-7e16-44fc-81ae-f5610c7554fd"
        },
        "item": {
          "id": "08f411e5-4e31-4b5a-8e42-f23364600102",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "25cccf4c-58f9-48ff-a0f3-57170833778d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "024a7406-0cb5-40fb-b7e7-86afaab7052b",
        "cursor": {
          "ref": "d22a6779-3c42-4687-be6e-649d7f275fe4",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "30cbb4a0-d365-4054-97f6-6a7910072de8"
        },
        "item": {
          "id": "024a7406-0cb5-40fb-b7e7-86afaab7052b",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "62d2e211-9f67-475a-a35e-ca7657b1b223",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74c8bb00-919b-4938-85e7-a14f99564ffa",
        "cursor": {
          "ref": "ab8a6d70-36ef-4285-a24f-5e2fd1207725",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "76bd6fa4-a7ab-4860-88a4-0b4beb62d2eb"
        },
        "item": {
          "id": "74c8bb00-919b-4938-85e7-a14f99564ffa",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "c273169b-a24c-4058-8d51-715db43db0f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13edd63f-82a2-4fa7-ae65-5e52f5b0c823",
        "cursor": {
          "ref": "6c1d0083-7b07-4a52-ace9-7aa43a9552e5",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "72f74c15-4a9c-41eb-859e-10c6193d09c2"
        },
        "item": {
          "id": "13edd63f-82a2-4fa7-ae65-5e52f5b0c823",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "5a79675e-8f99-4bda-8c13-8cdca61b2a85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db3d0aeb-1294-4bea-867c-616c69b9d9c1",
        "cursor": {
          "ref": "396a1439-a9c4-41c8-b44c-e3396c206432",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "0f0dd277-d19b-444f-b883-24117a439387"
        },
        "item": {
          "id": "db3d0aeb-1294-4bea-867c-616c69b9d9c1",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "a0d95538-c2e8-44b1-bd65-1cd6c9dadb89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cd6d29d-f4cf-43f0-bf9c-2abe37cd73c4",
        "cursor": {
          "ref": "262ed091-8d10-4445-bd44-a8f7ab050621",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "dca8ad56-e613-4687-b440-6fce898cf1ed"
        },
        "item": {
          "id": "2cd6d29d-f4cf-43f0-bf9c-2abe37cd73c4",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "a3e30ea1-bc97-42d1-b300-e7ca5dc8f3bf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 130,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "71131ba2-c162-405f-afcc-1959e5f13468",
        "cursor": {
          "ref": "7c1dbdc9-f139-459e-8952-aa41ee265790",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "7437c846-5f35-4778-892d-a58ee0795707"
        },
        "item": {
          "id": "71131ba2-c162-405f-afcc-1959e5f13468",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "f061c4ab-68bd-4d78-b5e1-476e9993efca",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 112,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "7065205a-d961-450d-9719-e7ffe2d1a511",
        "cursor": {
          "ref": "d9a28bd1-f664-4ecd-877f-14d1d5536d53",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "5463a50e-a98a-4f52-b1fa-24bf1e13552a"
        },
        "item": {
          "id": "7065205a-d961-450d-9719-e7ffe2d1a511",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "0ddd5e5d-bc06-4faa-bdc1-3cf92eed6e4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62110b9e-83c0-40ca-b853-169ecfa0bf27",
        "cursor": {
          "ref": "a62ce44f-6a38-4700-9b01-84c7e635f92e",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "e447ee7c-705f-4248-b627-1b874ae5e431"
        },
        "item": {
          "id": "62110b9e-83c0-40ca-b853-169ecfa0bf27",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "b0367eab-3bff-4b46-929c-826980127174",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98a8d31d-8355-4a60-b1bc-245613abb295",
        "cursor": {
          "ref": "91ff8126-1b1c-4245-bb47-d9b1944711df",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "f35eac87-5550-4d81-93c2-a80ef64f1126"
        },
        "item": {
          "id": "98a8d31d-8355-4a60-b1bc-245613abb295",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "fb3e0ef0-ab19-434d-8ebb-e765a1754c68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c76caaa0-0cb2-4e26-b273-52d3badf0dbf",
        "cursor": {
          "ref": "90a24d1e-af6d-4317-ad64-08d43025d034",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "2f2400fe-4e10-4a5f-9ebd-04cdb3dfa32c"
        },
        "item": {
          "id": "c76caaa0-0cb2-4e26-b273-52d3badf0dbf",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "5beb53c6-020e-4f62-ae25-af0504d83345",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d210f0bd-2434-4eea-8cb9-1b4f8ca4312f",
        "cursor": {
          "ref": "cf02b1dd-f07a-4ace-98bd-4b587781732d",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "082e8187-8a67-403c-a678-8409438a429e"
        },
        "item": {
          "id": "d210f0bd-2434-4eea-8cb9-1b4f8ca4312f",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "10f69a25-ebb2-4cfc-a932-fcfc098f82db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb1e823f-27cc-480c-a9e1-f3e18b4436e8",
        "cursor": {
          "ref": "686182e2-49d3-42c4-af73-0ada32a4ae8b",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "97c507cb-0e2f-4c99-afcc-863ae0958e43"
        },
        "item": {
          "id": "fb1e823f-27cc-480c-a9e1-f3e18b4436e8",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "2ee207ea-3217-4db5-97ac-1e792465036f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0cb1cf8-7b7d-4806-9c5b-d344725ca9d2",
        "cursor": {
          "ref": "ce98201f-baef-4563-a7e8-8dcf18ccc3a4",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "bb6f72c8-58b9-48dd-b4c3-ca9a8eac9b0b"
        },
        "item": {
          "id": "d0cb1cf8-7b7d-4806-9c5b-d344725ca9d2",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "dcd2b729-9708-4760-82cb-257bdf628044",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea849f03-3971-41a1-bea7-3634b3f2ca27",
        "cursor": {
          "ref": "11a11b43-9ff3-4a1f-8512-1b1bbe594bf2",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "d6454530-090e-418b-82a0-2643e204a315"
        },
        "item": {
          "id": "ea849f03-3971-41a1-bea7-3634b3f2ca27",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "4bf8cb3b-e1e3-4190-b1cd-64f48c6b9289",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51f30067-36bf-41b9-b17e-3e884c4f3f60",
        "cursor": {
          "ref": "2d5e3d75-f001-4cc6-948c-18cb5f866542",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "d5d50df4-d678-4cbf-a6b9-86f37ff1bcf5"
        },
        "item": {
          "id": "51f30067-36bf-41b9-b17e-3e884c4f3f60",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "fbd82d81-89aa-4900-850c-e39decbd7df6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fa35d5c-691f-4e29-b1d7-36ce9ddd66c4",
        "cursor": {
          "ref": "a436b45a-673e-4801-84d9-a21557458386",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "7d4851a1-7e3a-41f4-933f-7fb06ee2702f"
        },
        "item": {
          "id": "9fa35d5c-691f-4e29-b1d7-36ce9ddd66c4",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "3aa55f93-b860-495b-ac51-1f61c8a0b775",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfbb8802-6061-4acc-8127-d16f4ee9e6cd",
        "cursor": {
          "ref": "a2f13bf4-7018-4677-b8b2-51601d39e0df",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "48471bb7-b8ea-4323-97fb-2b194281d46d"
        },
        "item": {
          "id": "dfbb8802-6061-4acc-8127-d16f4ee9e6cd",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "13f04521-8b8f-4458-96fd-a08f9d45a4e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ee489c1-305b-4414-aa8f-f42deaec1d69",
        "cursor": {
          "ref": "1f31a3cf-a2b4-4525-9a81-5482a6a15d9c",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "628a0e42-9a7a-4123-b8b5-7f6d2a04c7bb"
        },
        "item": {
          "id": "8ee489c1-305b-4414-aa8f-f42deaec1d69",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "8a55d4d8-8fb3-4c10-bbff-11985de17ed5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c81b8946-8018-44a0-ab06-06b5bae36c80",
        "cursor": {
          "ref": "26dc4bc7-71a5-48aa-a5b1-7bd038d3e861",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "a27f5167-9aea-49a6-b105-b18ee3dbcd8b"
        },
        "item": {
          "id": "c81b8946-8018-44a0-ab06-06b5bae36c80",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "368c0842-c1be-4e02-81e1-25435c1382c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "882f3dfb-9684-4ff8-8368-de52026d3ab0",
        "cursor": {
          "ref": "4ab278b9-2b7f-4700-8596-8c080f2157de",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "6d20b3df-a96e-4255-be79-c3ee25773414"
        },
        "item": {
          "id": "882f3dfb-9684-4ff8-8368-de52026d3ab0",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "470aaa47-c6f5-4a1d-837e-7ed836f5b60d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e966301b-c069-4ad2-8eb0-055e72ab0d95",
        "cursor": {
          "ref": "7d156378-0738-4743-b564-ba87fc147b12",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "f7749040-b5f7-429c-b867-614601b2f976"
        },
        "item": {
          "id": "e966301b-c069-4ad2-8eb0-055e72ab0d95",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "a4c23bf0-0872-4878-b4d5-fdc6bd630fde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42a0d462-b48d-4b35-bbfe-b5d4f9c4259e",
        "cursor": {
          "ref": "5cc4c7d7-beb8-4295-b46b-ea562d9bf69d",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "a4567d86-10be-4a2d-b096-e3bf4b78bc2a"
        },
        "item": {
          "id": "42a0d462-b48d-4b35-bbfe-b5d4f9c4259e",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "e247da2b-1dee-4b7e-a2b1-c268b1fb7b18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac163dde-e059-46b4-9f80-3fcfd77314b9",
        "cursor": {
          "ref": "459dbab2-bd8e-48e0-a562-d9423d7b5853",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "448e988d-6604-4084-85e0-27345da8d45b"
        },
        "item": {
          "id": "ac163dde-e059-46b4-9f80-3fcfd77314b9",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "0b51bde6-8379-4558-ba66-d83e0a554c01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c15bc470-16a6-4680-9298-f1841ff10398",
        "cursor": {
          "ref": "05253545-c06d-42fd-abba-373dadef5d8b",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "317db489-6b66-4ad1-8236-702d34222951"
        },
        "item": {
          "id": "c15bc470-16a6-4680-9298-f1841ff10398",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "5972598d-64ff-4829-a84f-dc85d55d3a66",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 113,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "1f3354ee-caa1-4830-b949-fde4d0002df2",
        "cursor": {
          "ref": "c7cab5a1-442f-42aa-8190-3aa7812d5d46",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "227c5a1c-2051-4cfa-b164-8e9872437381"
        },
        "item": {
          "id": "1f3354ee-caa1-4830-b949-fde4d0002df2",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "5a271c94-2704-4e35-b4a7-f567f523c273",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f07ab00-c592-4fe0-9165-07951ce0a1fb",
        "cursor": {
          "ref": "84215849-9ae5-4b64-a552-a5180aac0e32",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "2382598c-d929-4d15-a4e4-5d5366272185"
        },
        "item": {
          "id": "9f07ab00-c592-4fe0-9165-07951ce0a1fb",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "7c0a0de0-f1de-4a38-bdaa-d685c08a96f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "579dea6b-1518-4cd9-bf70-f830fde2156b",
        "cursor": {
          "ref": "cd7ebf88-fa46-4b35-92e5-bb708904a6ce",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "abe7ddc6-40cf-43fb-add9-97fbe8f3434f"
        },
        "item": {
          "id": "579dea6b-1518-4cd9-bf70-f830fde2156b",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "41a81bda-ba22-4798-b1ac-7f983b2dc6f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3782c96-8860-460b-add9-4e7977b2d45c",
        "cursor": {
          "ref": "d5d6c7a0-8ffc-4fc5-a3ef-3594c16c7d7e",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "5adee27a-71bf-4c1b-be3b-1fa6d2f7fc63"
        },
        "item": {
          "id": "d3782c96-8860-460b-add9-4e7977b2d45c",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "6808edb9-4b0c-465c-a51d-82165261196c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27bc5c47-aa97-4071-bf0f-91183b4ad6df",
        "cursor": {
          "ref": "67c87eca-af42-43e3-a5b8-589e9d4fc0ab",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "c445fdbe-cdb2-482d-a072-9d0407e3c1ab"
        },
        "item": {
          "id": "27bc5c47-aa97-4071-bf0f-91183b4ad6df",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "5eeebfd0-a3e7-4f7b-92b2-a46e1af9d64b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ae14028-9a80-4ac9-9168-52f52ca731b3",
        "cursor": {
          "ref": "14bde685-bba3-4cf4-a16d-6c9dfe286e11",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "8fbeddaf-dc85-4457-8b4f-eb8802782da0"
        },
        "item": {
          "id": "7ae14028-9a80-4ac9-9168-52f52ca731b3",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "15c67bdf-188d-4d55-a381-17feebfb6737",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "795dde90-b037-4866-8682-e6ce22ea6491",
        "cursor": {
          "ref": "191bce92-2411-490a-a603-97f2cb3beb04",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "0dc09858-80fd-4eee-88db-514b1a3f9c29"
        },
        "item": {
          "id": "795dde90-b037-4866-8682-e6ce22ea6491",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "a5f8fff8-5ad2-49f5-b271-bfdcfed78633",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6d82e99-0bf3-4f95-9f1b-5f0a23be103e",
        "cursor": {
          "ref": "92d86f25-a485-44bd-a0f6-6eb524e2c8df",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "bc6e3984-1608-4440-93f8-99b6da9b37f9"
        },
        "item": {
          "id": "b6d82e99-0bf3-4f95-9f1b-5f0a23be103e",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "76067aa4-d5ef-4093-b843-718217228e1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef3dc8f6-a5cd-40f3-a0c3-9c9548683377",
        "cursor": {
          "ref": "e04263a5-b148-4613-9a1b-09065f047d35",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "fc4eefa3-c2da-4634-bf55-eecc443c4559"
        },
        "item": {
          "id": "ef3dc8f6-a5cd-40f3-a0c3-9c9548683377",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "aa31ac3a-528f-45a6-a94e-52bfb8322328",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dfc1542-68c5-47e3-8bd9-e6d1c159fe9f",
        "cursor": {
          "ref": "eea960ce-211e-40ec-a214-257b2acc9bc8",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "948f9ea9-56f0-4bd7-ab76-a4c835beda3f"
        },
        "item": {
          "id": "5dfc1542-68c5-47e3-8bd9-e6d1c159fe9f",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "999874ae-3936-4964-b543-d39e8aea399c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "842bd49c-b120-4982-8c86-a155d30c03a7",
        "cursor": {
          "ref": "98f33fc5-bb6c-41c7-9922-c347c57d5c05",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "9272d9eb-0402-4546-9f1a-04cecdf57df5"
        },
        "item": {
          "id": "842bd49c-b120-4982-8c86-a155d30c03a7",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "a5919860-f4c9-4d64-ab88-0fcd14e97f47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5753d804-59d5-4075-a005-f5b92d850fcb",
        "cursor": {
          "ref": "e15a64b3-0e7d-47b2-b9d2-f7dfdef82b9c",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "3d275e04-99a9-4ff0-a20f-a35863a243a5"
        },
        "item": {
          "id": "5753d804-59d5-4075-a005-f5b92d850fcb",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "af406d2b-90da-45f1-b706-988a4ede64d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "309bd5f2-0a24-4b4e-8934-e03f7c468379",
        "cursor": {
          "ref": "22eef661-58a6-47a6-a213-137100604b06",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "f0db7dbe-dc85-4ff1-a36a-27dd593347e4"
        },
        "item": {
          "id": "309bd5f2-0a24-4b4e-8934-e03f7c468379",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "efaa2f7d-5fbd-41e2-9321-75cb664c8519",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32f8f63d-8561-41d5-97e4-e742c8d7d021",
        "cursor": {
          "ref": "4448e8b7-6a2e-48ec-a25d-d63af06449ec",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "2e90e6fc-61c4-49ea-b8de-8f03d1be64a1"
        },
        "item": {
          "id": "32f8f63d-8561-41d5-97e4-e742c8d7d021",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "f3099a36-2f44-4b3b-af3c-93983bcb7847",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8d8883d-1d49-46fc-a7df-b613d5b0af92",
        "cursor": {
          "ref": "a13f7e9b-628d-41dd-80ef-21d9c4a3420d",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "0d1d5b48-0e41-4122-a7d0-ff0c2a408431"
        },
        "item": {
          "id": "c8d8883d-1d49-46fc-a7df-b613d5b0af92",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "6618a9cf-7b3f-4c66-b438-3d861ef3f8de",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 109,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "229a483b-34d1-45a6-909d-65809fe92215",
        "cursor": {
          "ref": "c1b4a0f7-6b8e-4d3d-b2c1-33a59f0ce00c",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "bacb9308-8531-4d4e-8d23-e1d41045d1b2"
        },
        "item": {
          "id": "229a483b-34d1-45a6-909d-65809fe92215",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "0dd325c7-0dc7-4ab5-a503-30b0c6f1bdb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a65f562-65c7-4a96-9ee1-a57c4802b655",
        "cursor": {
          "ref": "4204f2d9-751e-45b3-93c9-7cac77c4c668",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "25ff1815-e1b3-4683-9b5a-7f34b928ef73"
        },
        "item": {
          "id": "8a65f562-65c7-4a96-9ee1-a57c4802b655",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "9d29bb1e-3f38-42ed-81ab-f91f42640e4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd1e17ca-200c-4f29-8351-ce0f2e79b0d4",
        "cursor": {
          "ref": "858c0730-3759-412b-bb23-8c2fe3e711a7",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "cc210fac-3f09-4576-b963-9643c6d5070c"
        },
        "item": {
          "id": "dd1e17ca-200c-4f29-8351-ce0f2e79b0d4",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "6c147553-3b75-427d-9574-adde774837df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bf1bdf5-1a9f-4380-a7c4-2553413109b4",
        "cursor": {
          "ref": "da5e7ce5-f77d-460a-af9d-7e03d1b384a2",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "a5e9daa8-1599-4e55-9e73-789bde119ced"
        },
        "item": {
          "id": "3bf1bdf5-1a9f-4380-a7c4-2553413109b4",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "22ef3c43-8539-4636-9e5b-59905fe874fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebe90b1a-ad13-40aa-932b-3000ed1259d5",
        "cursor": {
          "ref": "366f4423-ceae-41c8-9eed-b9e9c44ffd89",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "7df3d04b-dfe6-4bd7-a0a7-766e48739425"
        },
        "item": {
          "id": "ebe90b1a-ad13-40aa-932b-3000ed1259d5",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "70521b5d-618a-4a07-9228-da9b3860b578",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae36d090-1e93-4908-b6e2-6adcc8a0fa72",
        "cursor": {
          "ref": "fc0e5c3a-1bd9-4e45-877f-837a787f2458",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "c769a178-0220-4e5a-9239-bdfd0cb6e629"
        },
        "item": {
          "id": "ae36d090-1e93-4908-b6e2-6adcc8a0fa72",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "8fd3f76f-3de4-4e1c-81f5-56b711b0f514",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e0786fb-06a7-4a1e-b63d-3e54390500bb",
        "cursor": {
          "ref": "31b37eff-dd3f-49a0-bc46-e70ac37beada",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "d1e6acb7-df20-4b60-bd22-ab1f0e328f4d"
        },
        "item": {
          "id": "9e0786fb-06a7-4a1e-b63d-3e54390500bb",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "9175df04-6087-4ed2-8010-3aa4d613632b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "806b3bc6-e275-4e06-9eda-c0d0af365154",
        "cursor": {
          "ref": "27488a54-d975-46e4-95a9-9dd7a17105f9",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "d5d9246b-7d10-4441-b781-7567885166a7"
        },
        "item": {
          "id": "806b3bc6-e275-4e06-9eda-c0d0af365154",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "c98be2a6-9094-4937-8637-6eab28ac9303",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "338a806d-6fac-4f4b-8edb-97201e685c20",
        "cursor": {
          "ref": "d6850916-260f-4c5e-9aa5-cc364429c6d1",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "551655af-10be-4421-a055-fdefa9193457"
        },
        "item": {
          "id": "338a806d-6fac-4f4b-8edb-97201e685c20",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "2bdc18a6-ade0-4235-a524-312f5864b612",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd9845fe-deb9-4b0e-884b-487ecc3ca401",
        "cursor": {
          "ref": "e5c25b22-05ef-489c-b0a9-931c193859d1",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "00c26880-430c-4102-9866-5cee6f8c8766"
        },
        "item": {
          "id": "bd9845fe-deb9-4b0e-884b-487ecc3ca401",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "d6ca5578-af36-4d5a-8d1e-831f0e2cfbff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0864687a-5422-46a1-864c-4de5da097bda",
        "cursor": {
          "ref": "c502644f-b514-4267-a4aa-076e26889966",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "3e23d31c-9d94-4f15-8017-e8618ef8ea88"
        },
        "item": {
          "id": "0864687a-5422-46a1-864c-4de5da097bda",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "d7e4b84f-c511-49d2-b1f0-2da58533ec50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "269bedbc-ed8b-4ca9-b997-b4b1a9742ccb",
        "cursor": {
          "ref": "dc97b149-20eb-4781-bf33-ac056ee12a6a",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "5ba05dfd-66f8-4ec1-9509-8e61c5dcefb5"
        },
        "item": {
          "id": "269bedbc-ed8b-4ca9-b997-b4b1a9742ccb",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "4caeec7b-bfc3-42fb-8d4a-9a4cf4ca82e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7a917ed-fc5d-4144-801d-080ef3e68fb4",
        "cursor": {
          "ref": "ed1a7d77-6f3b-488b-84f1-00ceb2b808ed",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "49516e5b-edca-48c4-b6c5-ddf78e221655"
        },
        "item": {
          "id": "f7a917ed-fc5d-4144-801d-080ef3e68fb4",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "d3e86389-3105-4ced-8096-cd99048b5f54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "717f499d-f270-4068-9e8a-b94c107b0e83",
        "cursor": {
          "ref": "aed3e6a9-f3c6-4fd6-81a0-201b3a2f12e5",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "85a7a38a-2e2d-41cb-aa7c-c1a845b89f87"
        },
        "item": {
          "id": "717f499d-f270-4068-9e8a-b94c107b0e83",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "305dd132-9db4-43ec-a3b9-6bc27bf42f9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c08c2ef-deb6-464a-bdab-e2d1352bebf5",
        "cursor": {
          "ref": "2f04ae78-facb-46a3-8c82-67048c3da4ea",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "5a0256d9-db33-419a-b7d7-42ef0736a95e"
        },
        "item": {
          "id": "4c08c2ef-deb6-464a-bdab-e2d1352bebf5",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "b7da7ea9-5396-4ad4-ba04-05d9a6d95c97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3c23f18-29b9-4bca-ba0b-0f623c6d1166",
        "cursor": {
          "ref": "2024ca44-8c84-46a0-8c6b-23f6802bbe4c",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "e03b3cc5-7be8-4521-b95e-c9fec21dac31"
        },
        "item": {
          "id": "c3c23f18-29b9-4bca-ba0b-0f623c6d1166",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "445cd320-59a6-48b4-a46a-52d0f25c3d1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d79ce572-a289-4e92-a162-64ca3b4c089b",
        "cursor": {
          "ref": "b1de3d8b-b68f-4039-a6ad-0eaecddfa70d",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "dc4f4206-328e-4bc6-95f1-94be706fc00c"
        },
        "item": {
          "id": "d79ce572-a289-4e92-a162-64ca3b4c089b",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "c3ac1299-51df-42e2-a66b-7acd73dfad63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "592c3d73-8a91-4a85-b450-72944a6ced21",
        "cursor": {
          "ref": "0c32e20f-f05a-4db5-9542-1d72a60432f8",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "21663561-8dc8-4301-8acd-5b9ea26b05bc"
        },
        "item": {
          "id": "592c3d73-8a91-4a85-b450-72944a6ced21",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "a4d6e470-93b0-47e9-ad71-24bf4a3e580b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98230e33-2da3-4e98-9439-128f7479e5f1",
        "cursor": {
          "ref": "5a405255-faad-4da3-bac8-ad649583bfd7",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "e668f145-5acb-4c98-8f22-d080cd661857"
        },
        "item": {
          "id": "98230e33-2da3-4e98-9439-128f7479e5f1",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "ff776c27-5976-45a9-8bd8-e4832bfd053f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a8d3109-385c-4e76-a7bf-ac86e60fc1e9",
        "cursor": {
          "ref": "7d00c3fd-3e81-481c-a68d-dbfc92c38da2",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "d0371367-ddea-4c32-8b1b-bb71d612fb87"
        },
        "item": {
          "id": "7a8d3109-385c-4e76-a7bf-ac86e60fc1e9",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "238c1fb7-8721-40bf-91b7-b485f42026b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d1a7569-3bf4-431b-b637-f500ac33a657",
        "cursor": {
          "ref": "e4987e3e-32fe-4b68-ba7f-fedada0f507a",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "b8a1368e-28e6-4b85-9938-29ba76e85f86"
        },
        "item": {
          "id": "6d1a7569-3bf4-431b-b637-f500ac33a657",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "c546a606-2304-43c0-b3a3-a727fb28b19d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "666d3e7d-37f6-437d-b926-254efc5a7cc6",
        "cursor": {
          "ref": "e13edc50-df28-4d2e-8b19-d90e33506967",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "6b9754ba-5163-46ae-b0a9-0f0737cd6293"
        },
        "item": {
          "id": "666d3e7d-37f6-437d-b926-254efc5a7cc6",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "167d0b42-783f-460d-bf0b-297c8d29ddb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2abc167-d136-4646-a92b-d678b433c420",
        "cursor": {
          "ref": "e1f296d8-86e3-44e9-be14-bc8f18854317",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "89f53985-af69-49cc-bcb5-c5ce3d73149c"
        },
        "item": {
          "id": "c2abc167-d136-4646-a92b-d678b433c420",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "1ca4da96-ae7c-444c-8963-76f772ed7e6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "069d6fa6-b0df-49f9-a6ba-882446f1ae9b",
        "cursor": {
          "ref": "782ced79-21e5-4f46-b169-48e41cbdcb7c",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "1b7c35a0-759c-4233-9646-9a195266c069"
        },
        "item": {
          "id": "069d6fa6-b0df-49f9-a6ba-882446f1ae9b",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "fc202c04-904a-49a0-9f6e-12cce2f9be19",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a16124b9-cf95-4ff2-8c17-7cec14f3e0c7",
        "cursor": {
          "ref": "e0244fec-47eb-4e37-8c10-3462fea87957",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "8644164b-1a5b-4297-9f99-1d9087df9564"
        },
        "item": {
          "id": "a16124b9-cf95-4ff2-8c17-7cec14f3e0c7",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "0348052f-b820-4a40-9d40-4243227755f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a928b150-5fdc-4ad5-856d-5d3ef42eb297",
        "cursor": {
          "ref": "f2c6e142-9a59-4b02-a06a-6939ec8d8f60",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "c66083d9-c107-434a-b0e3-f2317870f153"
        },
        "item": {
          "id": "a928b150-5fdc-4ad5-856d-5d3ef42eb297",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "ef0e2230-6690-4325-9bb7-7c58bc3ca298",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db134e63-be5c-4e77-83e5-2f6bef0b932f",
        "cursor": {
          "ref": "d6f4aedc-7cb2-4f92-a8bd-600efa426982",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "144af8b8-78f3-4f1b-9eae-75af3046ba87"
        },
        "item": {
          "id": "db134e63-be5c-4e77-83e5-2f6bef0b932f",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "c3296384-29b9-413c-a0ea-a2083a298096",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2381e6a5-25cb-4cdc-b4e1-fd858d80063b",
        "cursor": {
          "ref": "b05a5895-66f6-4738-ac9a-8bd2d7b4a4bb",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "af185c39-4bb5-48b0-9772-49a53c2e507a"
        },
        "item": {
          "id": "2381e6a5-25cb-4cdc-b4e1-fd858d80063b",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "65caca19-77ce-4be6-a9ea-af694c9e722c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4061edc5-2037-442b-8252-facb3cc38530",
        "cursor": {
          "ref": "3720373f-6d8c-4278-b665-b2a8c2793f68",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "d90d8235-225e-4967-a7cc-6ee29ad0fc92"
        },
        "item": {
          "id": "4061edc5-2037-442b-8252-facb3cc38530",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "6f176d16-d893-44b1-8138-9eea7f648f8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "805318fd-d600-4ab4-a01f-57634bab0c41",
        "cursor": {
          "ref": "ea2501ac-2ef1-48b1-b30f-c971603c036c",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "e373b793-6ff3-4ff8-ad42-717ad2123117"
        },
        "item": {
          "id": "805318fd-d600-4ab4-a01f-57634bab0c41",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "0c7b5178-462c-4aa3-b9a4-693bd0927fbe",
          "status": "OK",
          "code": 200,
          "responseTime": 152,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "b822759a-4b9c-467c-8f01-ad282926695c",
        "cursor": {
          "ref": "c15e2eae-63d1-4032-8b70-76ca599edb42",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "7f2454ba-1d51-4885-97db-5c63ff116e62"
        },
        "item": {
          "id": "b822759a-4b9c-467c-8f01-ad282926695c",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "04cd3bc9-7bc2-4b07-8fa0-e6e3d10e3c5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58eef3d3-fa19-4b40-b778-8b642d654050",
        "cursor": {
          "ref": "24a6846a-d0b0-4d5a-82e2-a3bf1e2c7d2d",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "041ffd4d-6fad-4214-8fc5-442be46f3bb4"
        },
        "item": {
          "id": "58eef3d3-fa19-4b40-b778-8b642d654050",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "cb2d8661-2ee2-4e7f-b27d-08b946cde9a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9806a29b-8135-49e3-a421-d49a6b22fc6a",
        "cursor": {
          "ref": "e71bb62d-bcff-4010-9cad-946df160b007",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "a139e304-7fa7-4d2e-85c7-41c194f87549"
        },
        "item": {
          "id": "9806a29b-8135-49e3-a421-d49a6b22fc6a",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "b7861564-dc00-4be4-aba1-3cd593511a95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "800c4f76-b4f8-4a88-9df8-e749ddd13a2e",
        "cursor": {
          "ref": "86dca79e-098a-4030-bdf1-e4881e6e0710",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "ecc6d812-7c49-4b1b-85aa-03c96a7c1ecb"
        },
        "item": {
          "id": "800c4f76-b4f8-4a88-9df8-e749ddd13a2e",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "4861ba4e-6419-4982-916d-530102ae9afc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93c8953e-aaa4-455e-a616-f17439103247",
        "cursor": {
          "ref": "3bfc57ac-9cb0-40b1-9779-e887c6a05486",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "18ae4708-06e0-4baa-b785-8580280d861f"
        },
        "item": {
          "id": "93c8953e-aaa4-455e-a616-f17439103247",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "7673301c-d3c2-4522-b9d8-b06f723cb39c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcafe840-e180-43a7-9558-8a1344b1a0b7",
        "cursor": {
          "ref": "7c41052c-5ef2-49dd-9a2c-49020c17270b",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "0d07d850-fab9-47e1-81f3-9e9071a69e5d"
        },
        "item": {
          "id": "dcafe840-e180-43a7-9558-8a1344b1a0b7",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "482a9255-af6c-42a3-916f-9efe5302b44b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63ebc39e-7a99-4fc3-b154-4612648361fb",
        "cursor": {
          "ref": "e7d3e2c1-eca7-41fb-ab91-923a3975ef27",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "71d4664e-41a5-48d2-8022-b9d0b98a0c08"
        },
        "item": {
          "id": "63ebc39e-7a99-4fc3-b154-4612648361fb",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "c1975be6-e60c-4a4f-8000-353847cbb01b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43cb6f79-5ae3-480c-800d-3e39205ccaee",
        "cursor": {
          "ref": "16a18750-54c2-40c9-9089-7eb17a64efd1",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "b1b95ead-8111-4362-9842-698d71997a8e"
        },
        "item": {
          "id": "43cb6f79-5ae3-480c-800d-3e39205ccaee",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "78572509-1c59-4b6e-8504-928345a778f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3186b44-8cc0-4963-b173-1958a58e413f",
        "cursor": {
          "ref": "ed1001f8-4bb7-4d8c-8c31-85c38f382c4a",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "0d8f72b8-290d-4638-8a63-8110fa0aade2"
        },
        "item": {
          "id": "c3186b44-8cc0-4963-b173-1958a58e413f",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "79f49b82-8da6-4552-83dc-c8df2dbd7827",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98a92175-5092-44de-b337-06ce1e1f4ead",
        "cursor": {
          "ref": "301e8a2d-6efb-4229-9541-5c0e5bff2140",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "4372f99c-dcb7-42d2-be7e-537fe535a6ec"
        },
        "item": {
          "id": "98a92175-5092-44de-b337-06ce1e1f4ead",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "7b5a9e24-321a-4d1b-9c99-dd423ee305c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 123,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d3f1d0e-f00a-4a1b-b08b-3f931d47293d",
        "cursor": {
          "ref": "638e38c6-e956-4daf-8e14-94ecd17f8141",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "20713a5e-f9f8-4a1a-96d3-ab706feef28f"
        },
        "item": {
          "id": "6d3f1d0e-f00a-4a1b-b08b-3f931d47293d",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "8b972b73-111f-467d-b39a-ff7403d6ba33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "938bf145-389f-4db9-8a74-95dc54eee9db",
        "cursor": {
          "ref": "94e8ad85-fa86-4901-8d0c-efad7352a556",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "45264ea0-2e8a-4200-b004-9be76db5e785"
        },
        "item": {
          "id": "938bf145-389f-4db9-8a74-95dc54eee9db",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "1b857908-dbe0-40ff-bea7-114a3c0633fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88734862-ff29-4466-82c4-b10a5b95e74d",
        "cursor": {
          "ref": "0569709b-9c57-4df8-9114-e5ea9ba89041",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "40e52c79-b8f1-44b5-92f7-afb0f0c8226b"
        },
        "item": {
          "id": "88734862-ff29-4466-82c4-b10a5b95e74d",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "b9216712-f39a-4375-9ff4-0850382c021a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de0e7bdd-d4bf-4580-932e-6bef6ca55c4d",
        "cursor": {
          "ref": "af9117cc-c2b6-4608-a2f8-0dee22775f17",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "d6cb03ed-eaee-4119-8155-7adf6935f5c5"
        },
        "item": {
          "id": "de0e7bdd-d4bf-4580-932e-6bef6ca55c4d",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "aef0fd67-92c0-4eee-ae3c-a24778ea3e6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06418105-7f31-4c82-b205-421a507f4c19",
        "cursor": {
          "ref": "d24dbcaa-00e8-4862-b727-12c36cd182f0",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "b93c8199-ed9f-40d7-b850-c04bcfd5ac58"
        },
        "item": {
          "id": "06418105-7f31-4c82-b205-421a507f4c19",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "4efa1ec6-cfcf-4f04-a0b4-46865717a9f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "420493a1-4de3-4738-9483-fe26bb9b24e8",
        "cursor": {
          "ref": "2c3cebbb-de94-4985-8aec-463edfbf3fdb",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "0fd967c2-21cd-4019-a1fd-b344054c7c3f"
        },
        "item": {
          "id": "420493a1-4de3-4738-9483-fe26bb9b24e8",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "1287af9e-0efd-40f1-85fb-7c3573c9312a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92af8f29-f78a-43e6-ae9f-5a63ae9ba571",
        "cursor": {
          "ref": "8a852303-ddbf-4af0-acd2-5a380b647a56",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "a16b2684-9bd5-4c03-8673-6cbe979a9927"
        },
        "item": {
          "id": "92af8f29-f78a-43e6-ae9f-5a63ae9ba571",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "68b9a9e5-e0f6-47ef-b5f3-58d9d692b979",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e50ccce-72f0-4e2e-b1b1-810146c55777",
        "cursor": {
          "ref": "3d3c1559-6b98-4fa1-89e1-18c4b6be95fa",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "3f820c9a-bcc4-4ad1-b8aa-cb4e7630c9d7"
        },
        "item": {
          "id": "5e50ccce-72f0-4e2e-b1b1-810146c55777",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "4867ddc0-7f10-4eaf-9b59-6eb0cf7d4705",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0030aa5-168d-404b-b893-fd7f6dc13fca",
        "cursor": {
          "ref": "c6b244f1-4a31-4940-b776-4e8cb84d6730",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "008dcfea-5d46-473b-be8a-e0a66a47625f"
        },
        "item": {
          "id": "a0030aa5-168d-404b-b893-fd7f6dc13fca",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "e0463539-fccf-49a8-85d7-baca5983051c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e65bcb01-1246-4bb6-8d2e-cb8cc5584ce5",
        "cursor": {
          "ref": "538279cd-5174-4fc1-bdf0-43c510d4d926",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "5a25b44f-e6e3-4da1-9906-d796ba41407d"
        },
        "item": {
          "id": "e65bcb01-1246-4bb6-8d2e-cb8cc5584ce5",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "07eafef4-fa47-4ba0-b32a-2b8dd9055a21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1e176c1-521e-46db-a938-4ee26852c069",
        "cursor": {
          "ref": "949691ee-d1d3-4723-8b12-e1ee31b41e41",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "d99d6d25-9db6-40d4-81ca-30ebdd345fbe"
        },
        "item": {
          "id": "a1e176c1-521e-46db-a938-4ee26852c069",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "6a95b960-e8a3-4c22-9a1e-96add445c6fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2157a454-8623-4cd5-bfd3-6728a95bf002",
        "cursor": {
          "ref": "080404fa-b3cb-4627-a2ba-ffd1111be8cc",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "a1a24859-43ab-4ba9-bb81-7983f384658b"
        },
        "item": {
          "id": "2157a454-8623-4cd5-bfd3-6728a95bf002",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "aca10169-808e-44ee-ae27-3e171416e7e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ced98e03-df42-4d7f-b8c4-d94056692876",
        "cursor": {
          "ref": "66207aba-4abb-4790-9b68-e1f8d9d123d5",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "eee86914-1ec7-4368-a6c4-17729d62a497"
        },
        "item": {
          "id": "ced98e03-df42-4d7f-b8c4-d94056692876",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "0ff3400f-abcc-43cd-bdb3-dd187d896c67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "daec4093-1c8b-45f3-b0e4-b7e4bc028d20",
        "cursor": {
          "ref": "4429f45e-8dcd-4b11-981a-2bbc2d15076c",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "9f1c1d77-fbbd-4876-8569-14b675c90dd8"
        },
        "item": {
          "id": "daec4093-1c8b-45f3-b0e4-b7e4bc028d20",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "167aa737-7ca3-456a-8a1e-7d185a541ce1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a293298-baa4-46fc-94aa-39537fb9ea49",
        "cursor": {
          "ref": "303d6a6a-2328-4083-861e-34401ce20e6c",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "de10c202-2db1-4673-924b-105ed693f618"
        },
        "item": {
          "id": "9a293298-baa4-46fc-94aa-39537fb9ea49",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "625c17bb-3cc1-47d9-873f-a3cac171cb2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9def603b-0b0f-4951-aa44-1ff682ef22ee",
        "cursor": {
          "ref": "6990bef7-d597-4ea7-a9cf-d6e37317d083",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "6d217e0a-c990-4125-9d63-e5f93a7a9b39"
        },
        "item": {
          "id": "9def603b-0b0f-4951-aa44-1ff682ef22ee",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "a388b1d0-7713-44a2-9ed6-e86f4a6bb8c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b0c78e6-5758-4047-bac0-c0efeca0eb82",
        "cursor": {
          "ref": "64fb18b6-947c-4662-8464-62303a9f28d0",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "a68d7185-5cff-4ebe-a4f6-709beb027e79"
        },
        "item": {
          "id": "5b0c78e6-5758-4047-bac0-c0efeca0eb82",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "75f85b76-8f1c-4a74-89ab-f2d72255fa53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "500744d2-5a85-4dd7-88ba-2949d3a8bc32",
        "cursor": {
          "ref": "7f9f8920-93cf-4428-8ad2-45b4b134f6b5",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "e2735b7c-1e3d-47d3-92bc-3206a1890fbe"
        },
        "item": {
          "id": "500744d2-5a85-4dd7-88ba-2949d3a8bc32",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "faa93f85-3ba8-4f0f-a54f-c6081a52077e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af21dfbe-5fce-47c6-bdeb-432881dee4fc",
        "cursor": {
          "ref": "739da9eb-ed5b-41c3-b723-b3ff1645e20b",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "56a0884b-ab6c-4003-986a-d3ba32a96504"
        },
        "item": {
          "id": "af21dfbe-5fce-47c6-bdeb-432881dee4fc",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "cf31e5d6-70c6-4115-ae9c-4a32363a3d53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec40ddc1-7293-4d4c-8cc1-868b79255942",
        "cursor": {
          "ref": "46d76b0b-0305-42cc-bbd1-b03ae4102ec9",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "d4410019-93ab-4301-bab1-c6febdd706b1"
        },
        "item": {
          "id": "ec40ddc1-7293-4d4c-8cc1-868b79255942",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "32e17ddf-a1a2-465d-955e-7c211ede1be5",
          "status": "OK",
          "code": 200,
          "responseTime": 161,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "c2e3f7ff-1d7b-4f7a-a34b-c79cf9a5f8b7",
        "cursor": {
          "ref": "ab35b9ef-af7e-44d7-ad55-9b8a775cb6d8",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "7674945a-57fa-468f-8b7c-cd50a681e86c"
        },
        "item": {
          "id": "c2e3f7ff-1d7b-4f7a-a34b-c79cf9a5f8b7",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "49eabe28-0d29-43f8-b286-525cd0814ca3",
          "status": "OK",
          "code": 200,
          "responseTime": 148,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "01beb1ae-9bc8-4572-82d8-27bff9f9a4ce",
        "cursor": {
          "ref": "4a8332e0-4cc1-4199-a26f-f1125e5b68ad",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "2f3f00b4-153e-4a1a-8d1d-961e2460258b"
        },
        "item": {
          "id": "01beb1ae-9bc8-4572-82d8-27bff9f9a4ce",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "418b8869-101f-4eec-b2a8-3f8ff441abc4",
          "status": "OK",
          "code": 200,
          "responseTime": 163,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "70d76797-104e-4cec-8e49-4dc2018035fb",
        "cursor": {
          "ref": "37ac4f38-67e0-4995-93e6-453fb1811878",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "d8b87eec-c201-441e-b784-815859f7aefb"
        },
        "item": {
          "id": "70d76797-104e-4cec-8e49-4dc2018035fb",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "5296ada3-107a-4765-b0f4-306c3b01ced2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8aaf3f6-61af-471c-9e07-ae049c53c5ce",
        "cursor": {
          "ref": "c3e5ea0f-c799-4926-95f8-398debac00da",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "77a1ac77-cf43-442b-8ac2-095c477cedaf"
        },
        "item": {
          "id": "e8aaf3f6-61af-471c-9e07-ae049c53c5ce",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "8013029f-194c-4ced-84d9-cdd6bc401b1a",
          "status": "OK",
          "code": 200,
          "responseTime": 154,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "0094933a-4272-4878-a49a-9902f37cdbe5",
        "cursor": {
          "ref": "ddd746c0-686d-4bbb-88f7-d52f40b77d10",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "ecb80a2a-08cb-4350-9b6f-9f38cf507528"
        },
        "item": {
          "id": "0094933a-4272-4878-a49a-9902f37cdbe5",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "cbf7ca13-9258-47e1-9871-1683ec6e47d4",
          "status": "OK",
          "code": 200,
          "responseTime": 160,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "96f7912b-71f2-4711-b69f-5ec2b5ad81e0",
        "cursor": {
          "ref": "e6c9e215-4bd4-4382-9bdb-2c3e1058ad6d",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "87cbea2b-7536-422e-a2f6-c6729a278cf6"
        },
        "item": {
          "id": "96f7912b-71f2-4711-b69f-5ec2b5ad81e0",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "7b5e4aae-e817-4487-ac7e-89900e0c4349",
          "status": "OK",
          "code": 200,
          "responseTime": 155,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "f8e471b7-eb25-4afe-87c8-1ed9ccc30e35",
        "cursor": {
          "ref": "8cec3895-9971-46f7-8a14-df899ce90a0e",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "4927112a-7f70-4fb8-80cc-0a59cc58b7c8"
        },
        "item": {
          "id": "f8e471b7-eb25-4afe-87c8-1ed9ccc30e35",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "f987f9c7-77e5-4935-9b57-5eee3b2c5558",
          "status": "OK",
          "code": 200,
          "responseTime": 153,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "1932d001-21c1-4492-a7c1-9679101b76c1",
        "cursor": {
          "ref": "150ab965-018d-4e57-ac26-428334dcbe35",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "9fc02a3b-d059-46b8-a575-c7e93278cf41"
        },
        "item": {
          "id": "1932d001-21c1-4492-a7c1-9679101b76c1",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "884788de-9872-4fb7-8368-009a1d063bd4",
          "status": "OK",
          "code": 200,
          "responseTime": 153,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "5c58baac-886e-492a-b456-9b06956701ba",
        "cursor": {
          "ref": "2f4daca4-b276-45d3-86ad-331c5b5eea7a",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "058e6a14-a103-4723-b5d8-1b918756941b"
        },
        "item": {
          "id": "5c58baac-886e-492a-b456-9b06956701ba",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "21417dc7-0bae-4c6f-a5c7-f7ca31d8807d",
          "status": "OK",
          "code": 200,
          "responseTime": 154,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "88a6142a-8ce7-4566-bcd6-895957ef918f",
        "cursor": {
          "ref": "ff6d1056-7576-49e7-8784-d19f4ed438e2",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "662b56fc-dace-49f7-82f3-2e545c70c8fc"
        },
        "item": {
          "id": "88a6142a-8ce7-4566-bcd6-895957ef918f",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "dd6d7211-fb26-49ed-8bf0-89e405ad5a9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccd9274c-7709-4311-a8e9-dd75b99d1b38",
        "cursor": {
          "ref": "f5c6f2e8-8f3e-4845-9fef-643c976e61cc",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "a7933fe9-1181-485d-a6f9-9830ad88719a"
        },
        "item": {
          "id": "ccd9274c-7709-4311-a8e9-dd75b99d1b38",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "a87cadd9-2a30-4092-815d-757aecc36bd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e8149b6-25ee-4d0f-8ee7-1468f734dc9d",
        "cursor": {
          "ref": "86e77171-3b44-4bf0-b62a-57acad689499",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "b88112a2-0fe7-4677-987e-90e4372cd021"
        },
        "item": {
          "id": "0e8149b6-25ee-4d0f-8ee7-1468f734dc9d",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "c813dab8-190a-4f18-8e01-c952316ba8ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4c324a7-9f3e-4ed1-858e-4c2b5e72cc2f",
        "cursor": {
          "ref": "80932033-f417-452d-88c2-ce5eebdf27aa",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "27f7b3c5-85da-440d-8c2c-472c896b35d4"
        },
        "item": {
          "id": "d4c324a7-9f3e-4ed1-858e-4c2b5e72cc2f",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "ef55dd92-de5e-4f9a-a9b7-04857bae02ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e76fdc5-c741-49e3-a1d1-b007adae7e5e",
        "cursor": {
          "ref": "189f2653-a710-4e49-85aa-851390054b2e",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "6986ccd6-8aee-4a7f-af36-22a286c2e552"
        },
        "item": {
          "id": "3e76fdc5-c741-49e3-a1d1-b007adae7e5e",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "39f6722f-afa3-44ba-88a5-0be35cb6e7d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21fb2dbc-3231-4b01-91dc-a753709fbf4c",
        "cursor": {
          "ref": "6ba4cd7a-149b-4449-8449-8ae616e8f0d1",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "615c2b9c-9609-4ce7-808d-9b47510d78bd"
        },
        "item": {
          "id": "21fb2dbc-3231-4b01-91dc-a753709fbf4c",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "0aced07a-4165-43bd-8f72-339b30a0e417",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e944ad94-4bad-4d0b-8305-381e8a08bdec",
        "cursor": {
          "ref": "bcf19019-f627-477b-abce-27669bd93ece",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "a4bae2e1-2ff2-48c8-af02-d736815543e8"
        },
        "item": {
          "id": "e944ad94-4bad-4d0b-8305-381e8a08bdec",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "6d1930fc-7397-4fac-9ec9-a955c0430ac3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eb6d58b-4584-467d-a5f7-60d967f6cdda",
        "cursor": {
          "ref": "59a6f5cd-1c1c-41a9-9e55-85234bc4f84d",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "7502981c-30f8-48c8-8ecd-a54ede195a90"
        },
        "item": {
          "id": "5eb6d58b-4584-467d-a5f7-60d967f6cdda",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "1827ef9c-fe28-4817-93de-dc609a0114a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d45fb05-bf64-46c1-9ac6-494e04db9a61",
        "cursor": {
          "ref": "d36f3a67-d8a6-4092-a90e-f1904e3a6cb3",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "cc7e0a83-5d8f-41a2-a17e-32b3cc95c12e"
        },
        "item": {
          "id": "8d45fb05-bf64-46c1-9ac6-494e04db9a61",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "cc6ccbbb-3be7-414c-9c5b-ea02597f1784",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18d224e5-d6f4-4c39-9901-2e5193e868ed",
        "cursor": {
          "ref": "5af46d39-f0f6-423b-abc3-f00abe827f6e",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "05b05082-4aa5-4101-8302-9b0751952797"
        },
        "item": {
          "id": "18d224e5-d6f4-4c39-9901-2e5193e868ed",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "015cdad4-33c8-443e-871a-023ca38ca520",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7ba6cbd-183a-44ac-93ac-ffdb1e8ca8d9",
        "cursor": {
          "ref": "0be99f2c-4a52-48df-bd91-1948d386697d",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "624b9eee-fce6-4260-b318-56dbc8cf7836"
        },
        "item": {
          "id": "e7ba6cbd-183a-44ac-93ac-ffdb1e8ca8d9",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "895bc0b9-16cb-4da9-8ee7-53372592c2d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "884fff2a-ab92-47e6-9a3d-998423e0e40b",
        "cursor": {
          "ref": "58b0c0f3-1752-4d3c-8ac9-5bd56f825e07",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "f0aa0f73-656d-4f70-9531-66278b493106"
        },
        "item": {
          "id": "884fff2a-ab92-47e6-9a3d-998423e0e40b",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "1f736897-5bd3-450f-b360-358fed1e0523",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c50120f-7264-4d40-ab2a-8fef6a1f6877",
        "cursor": {
          "ref": "db0eee5c-6752-4400-811f-e521541d8ef7",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "093f40ba-70c2-491d-9d20-71a113416c24"
        },
        "item": {
          "id": "4c50120f-7264-4d40-ab2a-8fef6a1f6877",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "a01b5397-1aa9-4e0e-bb57-2a6133901181",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99e28a5c-956c-44e5-ac0f-57100f6971cd",
        "cursor": {
          "ref": "1409845d-c413-4b54-b923-c630f0f5753f",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "b8836617-fb8b-4034-9392-ca3ec6146016"
        },
        "item": {
          "id": "99e28a5c-956c-44e5-ac0f-57100f6971cd",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "ce9fe7a9-2e9a-40b1-91a9-a3edd7bc9df7",
          "status": "OK",
          "code": 200,
          "responseTime": 149,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "300e4be5-e0aa-43c4-9ecd-ac4331464aac",
        "cursor": {
          "ref": "63fd7046-0fff-4bd6-9403-bce256505af8",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "88e2b84d-b9d7-4a0d-8153-c1ee46fc7041"
        },
        "item": {
          "id": "300e4be5-e0aa-43c4-9ecd-ac4331464aac",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "fe3b0bf8-5d1c-4167-bbe8-3152a4fe0d9f",
          "status": "OK",
          "code": 200,
          "responseTime": 153,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "1727c1a5-bb2c-4e69-9f82-fc41fff658b8",
        "cursor": {
          "ref": "69a1aed3-c379-4878-8e3d-682557583f09",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "9ba68a82-f2ee-4bfb-9ae7-a1d6659ee0e5"
        },
        "item": {
          "id": "1727c1a5-bb2c-4e69-9f82-fc41fff658b8",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "e71380b3-9d1c-4c63-bbed-907e805c7242",
          "status": "OK",
          "code": 200,
          "responseTime": 148,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "1a5177cd-1862-4685-b96c-0f674d020264",
        "cursor": {
          "ref": "8b21ebbf-7733-4a24-b498-6b249a1deeb1",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "42f72277-5ade-49c1-9ca1-5bb410124dd2"
        },
        "item": {
          "id": "1a5177cd-1862-4685-b96c-0f674d020264",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "15c0fad4-e5a1-4aef-b059-5b303cc35d08",
          "status": "OK",
          "code": 200,
          "responseTime": 156,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "6de3b2da-7aed-4b21-8df2-024310d784fe",
        "cursor": {
          "ref": "5b8222de-0224-4fde-a1a1-4fcb0036bf6f",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "443c7f34-036a-4c34-931e-66ccd094ce33"
        },
        "item": {
          "id": "6de3b2da-7aed-4b21-8df2-024310d784fe",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "4949944b-68e9-4dad-b231-44bed3e21a2c",
          "status": "OK",
          "code": 200,
          "responseTime": 149,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "5f150447-8d3a-4bc2-8f15-a2e0e1807d39",
        "cursor": {
          "ref": "33963ae4-b8f1-4f46-ac09-ec45d166c739",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "d1b4eb1d-d46b-4e42-9d71-4f735783c421"
        },
        "item": {
          "id": "5f150447-8d3a-4bc2-8f15-a2e0e1807d39",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "107b6ab3-c88b-4ae2-b7c3-bf91230e87f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2384a63c-c2ad-4025-a68b-f7309b34778f",
        "cursor": {
          "ref": "f0f8c693-dd65-4bb3-8fd7-0aa01737acbd",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "579674f3-f411-4607-a91d-bf237eb843ef"
        },
        "item": {
          "id": "2384a63c-c2ad-4025-a68b-f7309b34778f",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "249c74cb-bef9-48ee-b58e-b0a8057843c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c641988-75c6-407f-82cd-c4890df746bf",
        "cursor": {
          "ref": "55fbc369-b630-40a8-8b23-31c5513b1a39",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "1f06b67e-fc21-412f-9ff8-fd07bef612c1"
        },
        "item": {
          "id": "1c641988-75c6-407f-82cd-c4890df746bf",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "1583cc8f-3e8a-4ebf-ab70-a5ce812df467",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c6d8d49-6608-45cb-b007-3d9d5f9b881b",
        "cursor": {
          "ref": "b8803000-1a22-4c6f-af60-da12944323ed",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "4637998c-7ec6-4530-9b7d-16d2edf33ef8"
        },
        "item": {
          "id": "6c6d8d49-6608-45cb-b007-3d9d5f9b881b",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "a4b0bc3e-f739-4314-bafc-ac110f476b10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2319cf33-74e9-4e72-a6e3-7a00c62eaab7",
        "cursor": {
          "ref": "04286d18-6119-4a0b-bf60-365dfcb93464",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "a37ff664-e1ea-4d8d-ba7d-5c16ba0924ae"
        },
        "item": {
          "id": "2319cf33-74e9-4e72-a6e3-7a00c62eaab7",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "57bf6b86-a4c5-4423-9af1-a16405db6bc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1a2c74c-7e41-45b4-adfb-3c5c09436bab",
        "cursor": {
          "ref": "22eb316e-b83d-4ea0-862e-935f56be4794",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "248815b4-55b4-48df-a148-795dac14556e"
        },
        "item": {
          "id": "f1a2c74c-7e41-45b4-adfb-3c5c09436bab",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "030ae2fc-728f-4106-9dbe-b9d0eb6c2d17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "702bba98-f280-4f45-9a2b-71482b4bea1f",
        "cursor": {
          "ref": "2e3b062b-9766-4920-b8c0-97c34a41b61b",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "8e63d5f2-f404-4ce9-bbb3-5eb4bf7e0629"
        },
        "item": {
          "id": "702bba98-f280-4f45-9a2b-71482b4bea1f",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "de9cb92d-896b-4f4f-94e9-43dfbcd4603b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d95b044-a3d3-440b-8046-27c27526b871",
        "cursor": {
          "ref": "b3543d02-c836-40b1-84ff-62348f279cf0",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "8c91e0c6-c35a-452c-addf-f223cf7bf5e1"
        },
        "item": {
          "id": "4d95b044-a3d3-440b-8046-27c27526b871",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "d41f036d-04f6-4716-a8a9-7a4806f8dfbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9277e76-966a-4fa1-8afd-93d642f865bd",
        "cursor": {
          "ref": "91d5e5e8-749a-4d5a-b1b0-00b1b367a2ed",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "5f51aa51-e5ba-4fae-85da-267b24b00b89"
        },
        "item": {
          "id": "c9277e76-966a-4fa1-8afd-93d642f865bd",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "f168afcb-e1a1-4c10-869f-e37448852615",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32eb6b0d-fd44-47e3-9e48-d444064bc213",
        "cursor": {
          "ref": "203feb45-9718-468c-adf0-269b628e7f21",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "287e24fb-b511-4959-b061-84433cde15fd"
        },
        "item": {
          "id": "32eb6b0d-fd44-47e3-9e48-d444064bc213",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "b882a380-d269-48f5-b0d5-c23488aa27b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "048ee30e-e654-4af7-bef0-afc516042351",
        "cursor": {
          "ref": "faa0d5fa-6b03-4b58-9a94-d3b9c6c075e2",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "9fcca535-c8dd-470a-ab75-1a785078170c"
        },
        "item": {
          "id": "048ee30e-e654-4af7-bef0-afc516042351",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "b708ce77-22b2-4e27-b254-af4e410607b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb395648-1b35-47b0-8b13-17820dac8d79",
        "cursor": {
          "ref": "2a1e3f37-42f3-4491-9a8f-04fe6f855b44",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "10adf71c-594a-4c6d-b2ae-15f7c3b3ca30"
        },
        "item": {
          "id": "eb395648-1b35-47b0-8b13-17820dac8d79",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "77829d9d-c2dd-43a5-8845-341a58d9d010",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29f6c097-c22c-42a9-90e3-b2236f744568",
        "cursor": {
          "ref": "52bce190-efed-4ac0-b073-2ae679f11789",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "948b0496-e5d9-4f3b-a7bb-b595faca2c89"
        },
        "item": {
          "id": "29f6c097-c22c-42a9-90e3-b2236f744568",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "ac1a0818-ae36-431c-a8ce-6b1057a7f60b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99c638dc-245f-4d10-b617-dddbcf1452fe",
        "cursor": {
          "ref": "b7ad0c46-8067-48e6-909a-357c5c3cf2af",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "ff7226ee-52a1-41c3-aa9d-d55dcafc2424"
        },
        "item": {
          "id": "99c638dc-245f-4d10-b617-dddbcf1452fe",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "2e1ca178-fda6-4d0f-96b2-4633e9b1704e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "172d07a4-8bb6-474f-80e4-c2ecf3367c10",
        "cursor": {
          "ref": "b5ca7fb9-b8dc-495b-988d-d92238b085d6",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "b46bbe46-bbde-4924-a5cb-3945860d2adb"
        },
        "item": {
          "id": "172d07a4-8bb6-474f-80e4-c2ecf3367c10",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "9c66314e-cf5f-4f83-8d8b-659f7e4264f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9807f80b-bdf4-4ec8-9862-7fc9ec3fb789",
        "cursor": {
          "ref": "c82e8eca-9be4-480e-a207-63ac532bc7eb",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "ae909350-c088-48c4-8ce3-643d3e801c3b"
        },
        "item": {
          "id": "9807f80b-bdf4-4ec8-9862-7fc9ec3fb789",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "45897235-1f21-469e-aed5-abee6a08988e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8e0e456-7a02-4ddd-b782-6dd09769b131",
        "cursor": {
          "ref": "db00a444-bdfa-4c08-bc04-ec3de62809d9",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "f8198fd8-1baf-4f47-90c6-640f7f5490db"
        },
        "item": {
          "id": "c8e0e456-7a02-4ddd-b782-6dd09769b131",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "67586f9e-5439-4ed7-bd11-1234ebaa3a48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d62c5f5-3d71-466a-8f37-3d46b732c84c",
        "cursor": {
          "ref": "25f1993e-6721-4852-b29a-2f2a3b48b216",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "cb05016a-49cd-41da-989d-134655099bec"
        },
        "item": {
          "id": "0d62c5f5-3d71-466a-8f37-3d46b732c84c",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "2dc71fa4-f5de-469a-ae9f-e86bbe1ac84c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9de04b5e-a607-4a38-9097-071b9382ee9a",
        "cursor": {
          "ref": "8215b09b-fe36-48de-9c35-5b7f6f921ca1",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "a8e388c2-0b17-4766-a05c-672ab1fe49af"
        },
        "item": {
          "id": "9de04b5e-a607-4a38-9097-071b9382ee9a",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "9cb11db3-b92b-4a10-9576-3fe97d805064",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a265edaf-0083-4c6f-8c18-7f58e1b743f0",
        "cursor": {
          "ref": "962fecd2-2695-481c-a2ef-4c4ca4ad4adb",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "f79e2d97-a65d-4d12-821c-afe44eb3bf8c"
        },
        "item": {
          "id": "a265edaf-0083-4c6f-8c18-7f58e1b743f0",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "9fc68392-941f-4206-9830-ae91b15d3850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0477be8e-41ff-4672-bd8a-39368b297846",
        "cursor": {
          "ref": "a0227862-3f1c-4568-98bc-53c16180577c",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "b96be0bb-c7c5-49c9-9456-b77f5be0af4c"
        },
        "item": {
          "id": "0477be8e-41ff-4672-bd8a-39368b297846",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "f1ab2dbc-a8dc-451b-ae54-8d5e96df3b4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8235707-a3cc-4388-8f5b-2c095f89cf6c",
        "cursor": {
          "ref": "f16362b2-8707-428b-a20a-cd85ee5187e5",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "66aa8278-2801-4fb7-8443-b67bea3d4174"
        },
        "item": {
          "id": "e8235707-a3cc-4388-8f5b-2c095f89cf6c",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "48c79e01-9d94-490e-83d8-be4ec032be35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7620656-73f6-4439-907e-903923794d1c",
        "cursor": {
          "ref": "f329eab5-5173-4412-a555-db80a8cf740a",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "84a73aa2-b75f-42c0-a563-37dfe5411303"
        },
        "item": {
          "id": "d7620656-73f6-4439-907e-903923794d1c",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "092a349d-9d18-4b99-924e-d71f5b43076f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1addc19-eb01-45e2-ae7c-39bf23efdc90",
        "cursor": {
          "ref": "1e7d5c41-1e09-40d8-aab9-0a732137bb78",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "fd92d550-3b07-472d-9991-43be4e8bbf7e"
        },
        "item": {
          "id": "a1addc19-eb01-45e2-ae7c-39bf23efdc90",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "188a55ef-f835-443c-b6ee-5613dff582e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81ca3eb6-357d-4f20-9402-6acaf8d78756",
        "cursor": {
          "ref": "ab719152-5975-44e0-a4bb-46bb59cff192",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "4735656d-859d-46b6-b1ef-7f79bdc26a4a"
        },
        "item": {
          "id": "81ca3eb6-357d-4f20-9402-6acaf8d78756",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "05aa45dd-1d76-4ef6-a11b-8bb611073580",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d00bc29-2f90-4eca-a882-99a811e34296",
        "cursor": {
          "ref": "a3b3a168-33f0-4a76-8afe-aaf67854e6e3",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "0ca45811-f71e-48cf-8469-c81a58b752c7"
        },
        "item": {
          "id": "7d00bc29-2f90-4eca-a882-99a811e34296",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "a6482ff5-dfcb-44b6-a559-fbd8a290beed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e16a0591-9bb5-4936-a850-392fad281a0f",
        "cursor": {
          "ref": "5a69e724-0e35-456e-af6c-6ee90ffe79cf",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "6a3d1f0a-b71a-4c39-8b0f-7d5eb417f8a2"
        },
        "item": {
          "id": "e16a0591-9bb5-4936-a850-392fad281a0f",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "58498a48-04f7-4e72-9ed3-8e23cbf120b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ab61739-82e9-40de-903a-11ed6e154172",
        "cursor": {
          "ref": "c78f6b4f-5705-4fb7-bf58-17590ab153db",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "b2d6013b-3a0c-4226-8c9e-c7f254cf6a32"
        },
        "item": {
          "id": "5ab61739-82e9-40de-903a-11ed6e154172",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "e8eddc64-c31e-4910-ad14-06973964c1c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b6def66-a880-4cd1-a087-21787f02ea39",
        "cursor": {
          "ref": "f4901c42-acff-44fc-b7f5-b24a4ff033f3",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "edf9c244-ce01-45e9-afc6-31394b9633b0"
        },
        "item": {
          "id": "7b6def66-a880-4cd1-a087-21787f02ea39",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "55686cc3-8af5-4a7e-829d-651b8e77703c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d4b06ea-1f11-4f62-b87f-2478618c761b",
        "cursor": {
          "ref": "b499c085-aef1-47a6-9d76-07213f9990fc",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "1951fec1-40ac-48a4-8d17-7fc69334a677"
        },
        "item": {
          "id": "9d4b06ea-1f11-4f62-b87f-2478618c761b",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "5834aa2d-b07d-4525-96a0-033dfe715607",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6acb956-a36a-4c67-b024-a44d40142586",
        "cursor": {
          "ref": "0f69490b-40bf-4bfd-b04c-2c1376a933d4",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "a25e9c9a-e6f5-44ce-ae7c-0f8be9f5ce4f"
        },
        "item": {
          "id": "a6acb956-a36a-4c67-b024-a44d40142586",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "a10879e3-cf87-45fe-8df8-99ea83b46871",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9accc6d-cd04-4cf0-bb6e-72b010d19400",
        "cursor": {
          "ref": "37768bdd-cded-4339-b706-453c480e3dd7",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "0051397e-7025-4515-a1d2-d381d9aadc16"
        },
        "item": {
          "id": "e9accc6d-cd04-4cf0-bb6e-72b010d19400",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "467e264d-90d9-49f4-a58c-257174fd5c24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5d28f04-ace3-49dd-b0af-20e49b1cecd6",
        "cursor": {
          "ref": "0b643068-5aa2-48f5-966b-9e64c32cb4cd",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "ce430ace-bf44-4b2e-a45f-3e4dd85d4972"
        },
        "item": {
          "id": "a5d28f04-ace3-49dd-b0af-20e49b1cecd6",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "713676ee-e0db-456d-bc29-fac418e6c492",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a81aca1a-b319-45f0-9f83-bc234cc264c4",
        "cursor": {
          "ref": "48d3ac13-694e-45eb-ae7b-5fa55112d00c",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "e553d850-16d7-4786-b5f1-c62880ece2be"
        },
        "item": {
          "id": "a81aca1a-b319-45f0-9f83-bc234cc264c4",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "bd02e286-d020-4751-949c-b9377e33192c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abfac98a-bc04-4400-a4f2-8953b2896b99",
        "cursor": {
          "ref": "c111f410-da0e-49eb-b817-af14adc96c25",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "d230ab3a-afe1-4f0b-bb7d-be7d751e56ad"
        },
        "item": {
          "id": "abfac98a-bc04-4400-a4f2-8953b2896b99",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "eb63ee99-6724-4da5-8d82-bc47e5c03792",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a861730-eae0-4be1-8c84-d095eed07005",
        "cursor": {
          "ref": "034ba89b-3684-4f3f-9d3f-6292e49f94f7",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "5cc459f6-4b98-48d0-90e4-e020315a9b3f"
        },
        "item": {
          "id": "2a861730-eae0-4be1-8c84-d095eed07005",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "cf7dd09a-3ff6-4a74-8cb2-9dcafde57349",
          "status": "OK",
          "code": 200,
          "responseTime": 154,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "e0ebdbea-a86c-4303-abb9-af43455c632b",
        "cursor": {
          "ref": "a034609b-f0a1-482b-8b78-8f13bb887f80",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "b149d690-8730-4be4-98bc-143837c2d11c"
        },
        "item": {
          "id": "e0ebdbea-a86c-4303-abb9-af43455c632b",
          "name": "credentials_verify"
        },
        "response": {
          "id": "62caf298-26fb-4232-826c-2cc20db2bf7e",
          "status": "OK",
          "code": 200,
          "responseTime": 151,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9566c69-2c0a-4771-8935-e0a8d45004b4",
        "cursor": {
          "ref": "c4b51556-3ab0-47c0-8b02-f28e9e75d049",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "72d5e200-3e0f-42b5-a87d-2e1a4ca3a861"
        },
        "item": {
          "id": "c9566c69-2c0a-4771-8935-e0a8d45004b4",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "d15d3f40-161a-4e87-b390-773ee7712953",
          "status": "OK",
          "code": 200,
          "responseTime": 150,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb283f99-28a9-440f-9b21-426af0889120",
        "cursor": {
          "ref": "86da4e04-83d5-405a-9389-3a3628ae45f3",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "78b74dde-e3f4-438c-adec-57eee322928d"
        },
        "item": {
          "id": "fb283f99-28a9-440f-9b21-426af0889120",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "1285b97e-5d76-4c9b-8929-485159716247",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb283f99-28a9-440f-9b21-426af0889120",
        "cursor": {
          "ref": "86da4e04-83d5-405a-9389-3a3628ae45f3",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "78b74dde-e3f4-438c-adec-57eee322928d"
        },
        "item": {
          "id": "fb283f99-28a9-440f-9b21-426af0889120",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "1285b97e-5d76-4c9b-8929-485159716247",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc97c03a-cbaa-445f-b630-5b231401d43f",
        "cursor": {
          "ref": "e1c1ef0a-1309-4fdc-b317-5b684663bb21",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "7d7673aa-f1f1-45b7-b1a6-e3f9362ef999"
        },
        "item": {
          "id": "cc97c03a-cbaa-445f-b630-5b231401d43f",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "c7e806c1-a1bd-4c5f-af75-e4a64a79900f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f932657d-5564-4626-8b45-acaa163c8401",
        "cursor": {
          "ref": "cdf054f8-7103-494b-ae39-ef90c6d46248",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "bcb1c64d-815a-4899-aa9d-e9f9fb4656a4"
        },
        "item": {
          "id": "f932657d-5564-4626-8b45-acaa163c8401",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "513f9a3f-99a0-4475-81f5-41139e1fcdc6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}