{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "660cbb75-d96b-406b-9574-2ee24233e9bf",
        "name": "Clear Cache",
        "item": [
          {
            "id": "480cdbf8-08f2-4348-a8b9-d935969c99a9",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e595f581-4bf4-404d-b428-23ed35cda0cc",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "22b008f7-396e-4d03-90d2-ff94534d7aad"
                }
              }
            ]
          },
          {
            "id": "7f9dd60e-ba48-44a3-b196-70d6fc60171f",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9b78b284-68d5-4364-b057-c801f8e26cd1",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "af383a78-3a0f-4b9a-b667-9de2bc60feb6"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "9d1c3d0f-b784-40df-8b4a-927e904a2ed3",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "aff3b10e-b486-415f-be51-b54411c4e798",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8439e02a-5f6a-4a3c-8c5c-3325bde76aaf",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "741f3a39-8292-4684-9aaa-84a24eff6440",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0db73c0b-9cea-48c5-8b8c-6bf7f9fc01bb"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6093729b-4e5c-4782-85c3-376517c49064",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "65cbd944-1657-4c53-95af-20e9d33e42ca"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "995b54f1-7ceb-4bcc-8fcb-952f56fc666b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cf85d75e-0c0f-43f2-a434-d8b05c6c37a4"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "20c99547-4596-4f0f-a0c1-e07b3e3cbbea",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "ae2de7c7-f3d8-407d-94bc-873aa5ca310a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "df488ee1-1f67-4f72-aea6-c84596eef804",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b42eb3ec-3da2-4214-b84d-68f422e219df"
            }
          }
        ]
      },
      {
        "id": "de679281-ac0d-4ef7-bc6e-370cdd48f795",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "36dd8e94-8336-4aa7-a1ec-df82cffd16d4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dd121a70-25c5-4c1f-af13-b2718cde938a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9fa6221b-11c5-41c1-a89c-0ea006bd4c3a",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "952c1cc6-3406-49c3-b080-34e69882ba72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dc7b6892-a432-422b-95b3-1e0f0e47359b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34447adc-f40f-43d6-805f-bb0ed74f24a6",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2851f4c9-bf33-43a9-8368-4b615f251340",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "de2f1f41-07fd-4f4e-b322-db14124f5c23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f7ae8c8-9ba1-4a30-a690-fb63a239c4e3",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aaa2f8c-925c-474d-b320-54ad3db52b88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fbca47e0-c398-4113-addc-41eb992436a9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8e85d6f6-20b2-4bb9-94e7-7f65c2ab2461",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "af13976c-8b53-4fc9-8978-a123dcf69075",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d916dd9-07bf-4a61-b4e9-ab4e37ddf459",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5e2c9b28-1836-4641-83d1-ca8f7fc88d14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c01e35f-a5b4-4962-b6fe-c25c9d162c32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3fef59d-a099-4535-946f-582b965267ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6552e754-756d-4df7-8728-a2816b9c81a1",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd998adf-4ada-430b-a26f-74632ea39ad1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e60cc979-fc54-434c-ab42-85b24d146c36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96376d9b-567c-40ec-a814-d155b4501ce2",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "c2d2a99d-401d-4e13-9727-e772f98f9913"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "51b4bd97-cefc-4129-94c3-be9df070d645",
            "name": "Positive Testing",
            "item": [
              {
                "id": "fe5cca34-6ed3-4572-8f55-0fba52f6cf8e",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "19f7f514-06e4-4263-828a-143a71c38461",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "6004508a-d4f9-40b7-9581-8acac4cfd401"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bd71f332-ee93-4939-985a-b77f33d81a04",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "e538d28d-7ba5-4075-977f-3ec6ef5d07ed"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "77e4440d-dcd8-4c6f-a2e5-1de16cbfe322",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bf186141-a8c2-47b1-bbfe-4436e303cdf1"
            }
          }
        ]
      },
      {
        "id": "edec6fca-8253-4184-85eb-1313b4ae9041",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "4fbc6d8a-3aea-49ad-9240-87c3a2b3ca02",
            "name": "Negative Testing",
            "item": [
              {
                "id": "78d9a833-26b1-4b7c-b591-20104f450a4e",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "24ab53b3-01a4-4e6f-b8c9-2de619adef92",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff95c4a1-16f6-40ea-96f3-594e2d5c7034",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c833cdc5-5c91-42d6-9d86-5224775bc0d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fcd2ff3-b301-4075-8260-07a8d2cb68de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6c23cefe-44ab-4bdc-a922-f8be82988be9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "139ee0c1-bb13-45f6-a1d5-0933be518791",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47b341cd-9c7c-43a9-812a-4a166d76d6ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ab7952c-9365-40bb-8007-43b848bef252"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "977fb62c-15dc-4a54-a75c-f7f9e34008a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "336563a4-160b-49ef-8995-c026879974c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7687de05-0bb1-4ad2-a188-145fa5b35157",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e179a6bd-2505-486a-9301-9b652e3d5230",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3fe4550-4574-4fcb-a47b-804de08eeef0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f971252e-2d17-47de-a4af-df39dae16a5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e85e021e-a347-456f-9254-1624e31b52d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28b1919d-0f59-497d-bfb7-909a8cf97267",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4759643d-0b09-4a27-822a-95d5bcd77406",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4c56fdc-07e0-4a51-83d1-ce6d6549a895"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f77437b2-dc99-4fc1-9880-6f4504ad03f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "54f66550-d7fd-4caf-b880-a2ee33ba6fd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3272df3e-0932-41f6-bb6b-5ff1cf19b8cd",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7534f034-3ac0-463b-9a5f-9bd9db247124",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26ee0840-4c9e-47d3-b2c3-f5e9e5098023"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b072634a-1e5a-44a6-adc4-bb6b86d38778",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "79c0ce83-4262-4663-8e3a-d7b0de543894"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72fb5b11-f8cc-49d1-b18c-3f91cb52e8a1",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0283df32-a1d5-40a5-a090-b5d6ca021f3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "135c8f5d-5ce8-453a-ac3c-356e14546aac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8aab3803-f1c7-40ce-a8b4-ba518861687e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "965af8a0-bfff-4767-a3d8-21bd0982a462"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f68f242c-9808-4bd1-8111-fe3b8299eb2c",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50a952d3-727f-417d-abf0-7b8b43ad4cfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a11d968c-bd7c-47c8-b846-421660083921"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44e3076b-6c03-486f-8305-f19d63d25c08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fd5aea0a-a965-4ad9-aa8c-22c01c2fd587"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9cf3ac0-3abc-451d-9bf0-159358d60e14",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d6f8b63-9144-46ce-a89d-2ba462191356",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b828a1b7-8ac1-41fe-af36-995c054f63a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa48fdba-ace2-4944-9a3c-5a1f1ff5d869",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a256ff63-4484-4dba-831a-5bc1850c0fb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9384f024-50bb-4097-b676-e6f1bb24724b",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74fc54fa-c907-4078-b2b3-c6524b9d8c3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d765b22d-4083-47bc-8efa-0e29260a5d30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f457b09-7b18-4ded-96c5-faadb3feb207",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fa8447c8-ea67-428b-be18-954ea84bb578"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49f24571-06ad-400a-b5bc-8a26cec60744",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb8c7fde-6a38-4c51-9257-9f49115ca3bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef5dc1fd-644b-4373-a37e-0b212c8262d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0efdde7-48b7-428f-bb02-200d63c65aea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "df370c2d-de11-4f41-8356-c87552dde29e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad75c888-088a-4b2e-a6e5-d167c39297ad",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38a95abc-038d-4b0c-98b9-d24fbefe669e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebef4fe0-9003-4f88-b4c8-3ee648e6c2f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42d5aeeb-f8b6-4e80-b46a-2a5d72a0f1dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3c8c8957-38a9-4d34-9098-3fd82b5e474f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6ea715b-2644-43c4-9d0d-aec2465949c0",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5605cbef-fc99-4fa1-884f-84cd8c5e3fe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddd399b5-70ed-4acd-9be3-36e890627a9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91eb0372-62b2-4b98-abef-ce95a0a0550f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "166a1fbe-df35-4acd-ac96-d95e8e0f478f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f3e8c97-410b-44ec-b9ef-502ecf64c3ed",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edbeb8e3-8c52-44ab-9cdf-935b8ec1cd72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "269d857c-101f-4be1-9ae3-6001b48f88ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e54bd25d-9d25-46e3-9477-7adb05192ca1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1d616f49-d15d-4737-815b-5acb3967cde5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6fbbeca-07df-4edf-9169-e6afe8327525",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6fbdfdf-8f05-461d-a601-66fa08fd9e09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e66f2f31-5e5f-43b3-b646-6acfb7204f5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4db3a1cc-1e52-40b4-86df-ce6bb2e4c9da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c526aa9a-4464-49d1-8724-b6cb0ef4b5e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d92d3719-8170-4b64-afde-ace663c0b407",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9743094d-f4c5-4df7-9d20-97172496b581",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae435ced-36a2-4a7c-8806-58144ac8c3d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7aacfdf-8ffb-4307-8755-3621276acac1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "578387c8-68d5-4312-b4e2-e0ae53be8b74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5901fb7d-7d9a-44c1-b4b7-545a274e8e6f",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71f2871b-4695-49e5-918e-6810522bcc03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90df1a27-2466-49d8-87a7-394f8399c334"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad436f37-fef7-4e83-af45-3935955fa5b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e9076f13-a421-4947-8680-e2b91a34b30d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "798dd848-0403-42f1-b4db-594d496bb338",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f19b8f6-29cf-40e6-b7fc-0f3cef5ac8fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b41718e-db6b-4947-85c0-bcd8fa00ab76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48149707-9552-4f3d-911f-4fdca5114a41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5ad3fea6-8f9a-4559-98eb-c29ff13b041a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5891a3b8-b421-4659-b63c-5a6d3ccbc159",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "417cad8d-838b-4841-b877-cc519a6598dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edc1a67d-bd1d-4457-bfca-e6c9eae25c86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a3921ee-e6d2-4a85-872b-085a5de8a698",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "010d7aeb-404f-444b-9b2a-0ece28832628"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46a9b093-e921-4963-b332-8910eef58216",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a8102aa-9d2e-4f89-90e9-7b48ef39bc68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee145e03-11b7-4030-bec5-3909a73e5db8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8319bc08-9116-43b3-9955-09734929f58d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e19e112b-6805-453b-8212-f9934d53d3d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7eb3ded9-8207-4f0b-a962-d0c173f8524c",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5958ca1d-a864-4c5d-820b-762c716088e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48998579-8c9d-4f9f-a9be-1e200b8806ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d32f965-1602-4400-bda4-1ad41f65f4f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "278af6be-b8c1-4093-9a98-a3a59f94c546"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d9b5636-9688-48d7-b03b-ae5a2d9b0d55",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c358968-1a97-4dab-815c-af142e2746af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cd89c67-43e6-4355-b7c1-37f5b81450a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9b03fee-6df8-46a9-a799-8ae3b91184fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b28cb021-cfef-421d-a5df-d31bd3a5be32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2463c9a3-ed78-423d-882d-f43da5773ff8",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78e594e4-7ea9-4c85-bc67-8dccfabca87e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c5609e3-e7fa-4b13-955b-b681cb4bbfdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fd69f69-d90a-4aaf-bb6a-fb8b5a1ba996",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7abe0956-899a-4c2c-83d9-c2441ffef1e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d50f6c53-56bf-4a79-831d-2cdc212705b1",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed0aa875-7229-4005-bcdc-fe5a17fad85e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3ea3fc0-bb8d-4432-9c68-6fd108b7a73f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "418ce754-cfa4-44e8-b9bd-1d57de941524",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7a1ed36a-d8ee-4c1d-9e38-4a331ab47eff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cc9695b-4757-4985-ba35-7970c84ffcd9",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09248320-b6ba-4785-a0b1-d483e707a4de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd41f457-5da8-424e-a1b2-2867c6eb34f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ae834e8-36b4-4b6e-9a6e-444f928c4a23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "607efef7-a2ed-43d4-bd9d-a05218f78aed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "998fa5da-b7e3-44a4-b065-1d224b6a2ebb",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "179f848c-bcc2-4047-a8ae-e89b0c0d255c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "703fc1f3-1b19-4777-910f-23d0654b8b75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c80eace5-4df0-4e66-8a98-fcaa92420488",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4389650b-2a43-429d-8db8-d47b8b215ce3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d544fd74-16ab-4a5d-9b1f-a771a71f2f97",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee9c414e-3f73-4a04-bce0-e232856935a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5083d901-5266-4683-923a-f0b8799261e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67210046-47b7-4c48-a62c-6202d6c314ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a62db02e-963e-4ef5-aed3-526d32154f49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af1aa24c-25b9-49ab-9160-3a2759a302b9",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e25f3776-8ca4-4fb8-918b-3a05d005fb31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bb8d866-fe98-41f1-903e-37a4513bd233"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd124fea-8bbc-465b-80c8-3e639641394a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b9da1b9-f52d-44f5-9070-ced28dc19467"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a5e9382-5d78-40e6-b3b3-0b0820951ed9",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16699ffd-8936-492b-aeab-bfcd03565e98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad7e1013-b2f7-4fba-b917-8176f5a235fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f33c17a3-a9d5-4076-b289-55bc7955638b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "53c04249-a6d1-4a02-aced-6c0af658f93b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4ffbbd3-df81-428e-ba24-8470ca9cfc42",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4d95b21-9061-4508-ac48-54e387ec53ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bdca565-8880-4545-86f8-737bfc23e1e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b80c7dbc-8d47-492d-bc67-fb90c463f6c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "98ead67d-63a8-4b72-b71f-7779fff549ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "255e57db-16ec-4447-bde1-35fc9c3a5c5d",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69361cf3-f0c8-4413-a4a2-4415d16c3710",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cab608e1-0ee9-4e34-9d52-5efaa18200fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b61166ac-34b7-4f2b-9660-c52dd51c8807",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "7bc08a70-5cd8-4777-af0e-6ff1411a54cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceca6403-132f-4d2c-9b9f-8453b0b0f260",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4052b9f7-aea6-4ce1-a984-41701beb5fd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a90bbd3c-9eb8-4cce-b4fc-fa2b7de38b7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c96a07b-b8a5-47ec-9ad1-54878f7e4d41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4767d754-efe4-4078-8636-3c212d8e604f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0450836-4c11-446e-80c3-41cb7c098b17",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "498293f4-d0f2-494b-bb48-f62dd373ca78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b51d8a10-5d67-44e0-a73e-9724829f4c9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf42304c-9b38-424e-be28-5fba7f227cb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd238d11-30a5-4516-a3e0-dac02d197ea3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f301c1ef-cb79-43ac-aa16-23d0789c40ce",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e143a41d-0bcd-4e74-a443-13fea6a384f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5436506-ef92-437b-b787-168c5d9d9e0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5f14732-70c5-42e1-a73a-6479913c83f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "13df55f6-0f3f-49fb-845b-81c48087dca3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "854e766e-cfb5-4235-8648-9ed95e88d5a8",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1830d4f1-22fb-4ac2-8c36-1af5ec3df244",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e85c4112-3965-43ff-80d5-c9071067928c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43f2e087-bcd6-4a1b-873d-cd0a97db6cc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ccc5106e-91ab-4101-a584-5b5de71e0518"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5129e1e9-69ba-4b90-8c47-9b52e225cb92",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1fa8bb0-6795-40ce-a510-30e20a17b1be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "228d2f2b-7e89-4c5b-bf9f-e17d1c971094"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ad76c83-3cbf-4454-869a-a01deb83c7b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "a25c9f25-5b95-47ee-a4bc-86357415b299"
                        }
                      }
                    ]
                  },
                  {
                    "id": "655133cd-4cdf-489e-bd2d-5f34f7a75f57",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "563ad2c8-8fdb-4561-b1ab-5455aec116d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1f9b4284-7a89-4355-b984-6b3a1fa29878"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3ab3f0f-ea45-44cf-8787-5170d45f91c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "59b5f4af-489d-44db-b1f0-91072c7cd6de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c31a770-aaad-4c44-b930-122c4caa36ee",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dceb644-1ef6-46f5-aba5-85ec9ee8368f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b94efde-1140-42fb-878f-dad5f9f7e579"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "074dd5bb-6196-46df-98d2-0f2ba36fb496",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a8175824-85f8-4041-97ca-78d9d1ddca96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f152ad78-be2b-4030-be80-1839a3eac326",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b08675a5-c456-4fb1-9305-33433d04a658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "518d5aab-5ac5-430e-bf62-d11e1bb819a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38c1ca26-9bdf-4cae-b14d-c65d8ef212a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "660c5986-89ab-4a2e-8710-36f68e8a802e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "141f6dc6-5ae5-4624-a75a-018f56d4e40a",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adcdb371-2cdf-44f0-84f8-b6508acbcfb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bff70b4f-79a6-46bc-8432-bbce116c6283"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2785f529-fc6d-4494-9d39-1bec531c7675",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0ee99d10-19ef-4866-bafd-e2a5cb71b1f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52cdb0b3-f419-4557-9d6e-8552a4956d1e",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa5845c8-26d9-4380-985d-d87d83327e16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "521ccfdc-d481-45bb-8d2f-6189d6232d73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4227ec11-cd57-4bd8-a16b-51ef20c38da9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "14e4602c-4b20-43c0-89d1-1612aeb226b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fe8f79b-8de7-40bc-8d05-befb8fdd3e32",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9964e7a-875e-4637-bdb6-44bf5991e2e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "580a334e-de33-40bf-bcd1-ec46a3a7b025"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "677c80b0-a66d-4a55-8fe1-b5680e75289b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e75c807f-89eb-4983-bc0e-481d59457d55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98fe35a4-c5da-416e-89f4-cbfa4073be5d",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4cbccf9-c72b-45a5-adb7-461f9a07da33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47d68d50-48c4-4176-81c7-021702e42819"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "950494ba-b043-46ac-84cf-5fc05f59d3f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "25a213df-586b-41c9-a963-3084f2f03b54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28936a09-8935-4588-94c0-5994fc6c1569",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3178dce3-be0c-477e-bf33-f7f06122a118",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d39c7ce-68fe-4a59-b530-2e46632a5a25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "039ef930-30c0-4c28-9e83-0b104ff9488f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "89435d85-e3ba-499e-b9d1-2cd72c6d5674"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca2ea8c1-66b5-4942-b6d4-4234f6c20ec6",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b208938d-5f55-42a6-ba51-5fe5e37c929f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97a6efb7-12c5-4109-a30c-4cc6b0efc61b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "464a5c27-4555-4b79-b65e-aa91c12b3214",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "0614674c-e6e9-425a-abfc-e0e1e7e665e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7b236e3-2440-4363-8ea8-54e112ac4d59",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b3b56ae-fea6-446f-9bc1-d7ef7da95c7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "301d596a-fbb2-4494-b0ad-a3067db1be70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6d14854-3859-4351-b229-fc65398749da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "86171851-b683-4bf9-aa73-3687b6ab53dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "742a139e-5726-405d-9184-2165a4eb94c4",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcaee869-fcf3-4baf-bc66-fd1c08fb02c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3eab8b8a-75f8-47a6-955f-be131cb1f041"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6a0af9b-845e-46aa-a8a3-b1cb4599aed9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ffe8377-3182-4d87-b2e4-fafa7a0bea9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3363eceb-a895-4724-913a-158f7fc8c75c",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aede584-983d-45f4-b2b7-c563742277f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c545a3f2-4f04-460e-a721-7c6c5c97f941"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3c6bc04-f50a-4efd-9f79-fe2792f6a47e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d2f41f98-5b42-422f-9111-56055dd0fb99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fb2e1ec-1d31-41e6-81f7-2d9bfcc51d93",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be575fe6-1dbc-45be-8ae1-e28ac002f478",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b27f418-0a78-40a5-bdd0-6d6cf5e26cd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e518390-01c5-45d3-a7be-860d1612ed07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c6b14bd-a03c-4a97-b221-4429ccc4a324"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14368d24-022c-46a2-8490-bfccc7b0956f",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94c2f27e-f764-457e-8cd3-fe4ffbc2768c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "813b11a2-c48a-4a19-94eb-009f16135182"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "037ed3e5-e2a6-484c-be42-31dae0ffed10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e8d8bf39-d10a-4d68-8f2e-4347e7a8bd07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b09fe7a-e2c1-4c1c-add4-bb18bd892fca",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16eb7d61-4bd3-4692-8994-adedd166f9ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a0e0978-3b4f-46c4-8f07-f27dabc4764a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6099ee86-e846-4ad7-a61c-2f5e27ae4aa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0007e885-44ff-4aba-aead-0f4ef34bf032"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1634e426-1a32-47d8-acf2-b7bd5d94890c",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaa89b58-5221-403d-abe0-8a3594f66564",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41ed2c19-944d-43fc-9fa5-1cd56d8e7671"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd2796a0-fd31-4b7a-80f5-9f3e63c8c7e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b2b7228-7b32-4e9c-b409-a47f2ec3bd30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe1caa50-cc51-48ea-ac28-a030e46627da",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d09515be-c57f-4716-926c-ed3e9bed210a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da0065e4-730f-4bcd-bc25-1282f58e146c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f3df4e9-484a-4b0e-845b-3d064eb6606c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc5b1feb-8e51-4577-8da6-0f97670999a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c549642-66e2-4c19-8ac5-f0dc2183519e",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fbe4418-9602-43a1-84cd-a1598898e575",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c545b60b-3b5a-4fd5-aaaf-4ada1c093746"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "349694c2-2dfc-4f00-bf26-a7a701b3d242",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e65a348a-c2a2-4c88-af16-4ace07663056"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d47d84c0-25ae-4c23-b2fe-b8d96f650c9b",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceacc877-5980-44d5-8400-8588220eac2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "367f9177-5442-4f4a-bb2e-9e269f1c51c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ca7e6b1-8361-407d-af3e-52ac8b59824f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d71a762a-fe0f-43db-9709-ca3dde479b86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1758d2a5-2a13-4947-8d6e-f093f9145f7b",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e6a8053-c37d-4bbe-a058-9f85fdb5f43b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "610d393b-dbe6-4c31-ac21-d0c898abb14f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6de1c8f-1e14-44f6-9c00-14042f6f2491",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e564dc19-86ef-4b47-8c6e-fcf324828a7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ddb38ab-1746-47ff-8dde-1c400967253c",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92043485-bc8e-461f-8a4b-25c39c627107",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2474eee5-9589-431d-93cd-52b31311588e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b603a45-3951-479f-8253-95bccaa8720c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "53692af1-2bf5-4169-b97a-6b4d726783e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9929e68d-a5ae-4289-a9b4-e4a7e88ddca0",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb91aab0-15a0-4c86-9341-1b6177a85c04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6088280f-f9e6-4c91-8dd2-73b54f9471b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "debca517-e527-4cfb-8af3-1cf27658c458",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "cb18dee9-9819-4824-ad08-6829559f2ad3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77f2a771-26f0-4ff1-a8a5-fa0c6941716a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08e0a278-b5d0-4823-b088-60e587d03265",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4837544-19c8-4599-888f-98b8ee0a8826"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "209abf8e-8cd3-4ac3-abac-77c0eb3215dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "43301360-9418-4f10-85cc-7b2ebd2f92c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13b427dc-8ed6-4ee9-bcfc-8ca386214a96",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f9dcdd8-ee5c-4cc1-b8ff-cb37adbc8bac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9d62189-d8ea-41f5-a07b-6de86b4823c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b81d0713-96e1-4f27-a3dd-e6625990d290",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "fb659c94-582e-44a4-8207-e039b821caf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8850cdf6-e69d-42f6-9877-e2e2cf7d3f3b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f57dd955-e4c9-42cc-901c-6aebaeb69d0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67d7f921-f85f-4342-8095-dc2382b5fdc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd3501c4-05d8-4a31-a5f9-993b9a5d3c25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "3a61bd5e-8680-4d61-b036-cdf8a3450d98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2fa745e-c523-4aec-98c0-8cc9a197a3e5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84db31e5-a82e-4ec6-8a83-495848b8318d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "112e1a5e-58e9-4a7c-ab86-3d0319cba7df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74c95e19-ea37-448f-b815-d42010a4a766",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "33c81784-8e28-4b9a-a4f8-60f0fb50e37f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2439064f-8a46-47ab-b7ba-6ee1b0cb03d6",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22eb230e-ec01-41b5-a822-e8149a634ea9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "823d6fac-7c1f-437b-aca2-883fc6fd7a49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9539cfa4-3e8e-417d-8efe-6bbc1b5c7c10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "35c58685-0eba-4706-b446-d67425b9659c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad245f98-b5e6-4a46-8b40-75d7e33084f4",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "113fe47f-a014-4b56-b84c-b8d6dfd7c832",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3771139f-8f45-46b0-89f2-9a7fcf9ceffc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17f5078d-6969-4db0-a928-18dbbebb81f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "b709524a-d86d-40bc-b48f-e8cf021a0496"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4793530b-d715-484e-b00e-734543365cd5",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6e7313e-f652-4683-b8eb-5ea3c9fa9c32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "483bbd0e-c761-4764-bcff-a7b92ea14567"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2b84359-7a54-4fc8-9079-c4e746da0b10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6540aaf-b7d6-48ba-a198-f98685654503"
                        }
                      }
                    ]
                  },
                  {
                    "id": "613ba3a6-d77c-49bf-9a4f-1d716aceb13a",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5310401c-2b63-4e48-b34a-f4f113096364",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3119859b-4198-4f69-b79f-475b44af90d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19e55641-8e32-4889-b06c-84d81e8305e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4345ac13-554e-4bee-a5c0-e2e8f66a589c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e672f41-b8cf-4146-8538-47e3dd34b16a",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b47b8859-42f3-4d53-91c8-b6bd3f35ae84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a7c55de-b8eb-4fb9-b490-d4bbd2b82269"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebcbd2f4-a930-4bc3-a6ab-d04a5ea7f677",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "458c8d4e-72dc-496c-8681-10ba5ec62305"
                        }
                      }
                    ]
                  },
                  {
                    "id": "538e91f6-3890-4abd-a53a-16e20f00a9a5",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a39dd3b6-f0e0-4274-a7cf-7e3bbc52de99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a28209b-7143-46e4-b2b4-65bcd39cb9c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cb99e96-8d7e-4354-969c-90977b09aa92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d1ac370a-6f7d-4303-bea0-aec650d49217"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17ba6085-13a7-44bf-8a01-2f4b220d7eca",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a2f6a0f-ef64-4cce-9100-002791c65b2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "700b4a81-1530-4ebf-9ca1-5904d1e85298"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7eb3f4c-026c-4aaf-a96d-55ed24605fc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "9426cbdf-4e5b-4496-bc04-c1a4b83b9f1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69ba27b1-103a-409f-a90d-c334595aa5c1",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ff0f8ec-f7e4-4ba5-bcd7-8399b3a94e1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9244d7c-f6f2-4569-90e4-beb0c5671719"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50e0abf3-1def-4f8b-9a77-4f8efa052eb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d279dc20-5060-45f5-898a-183780852b81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49e17585-8f78-45f6-8620-a854abe8d239",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7c122ff-c7d7-4f81-b4c1-729d228a7293",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09a1f9e8-4d4b-4c4a-87cd-e69d6a36147c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c4f857f-9929-4330-a7e3-7993c89cf89a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c81ab3c8-0e50-467e-ab87-4a8f309e319b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "706966ff-8e90-4c6f-885b-41f464793542",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84ae8100-4bd7-4636-858d-878647487971",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d932dac-d61a-4876-810a-0d3864cee9a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e609f34d-ff93-4827-9073-c7635123d60f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ec65c7e-a686-469e-aab2-176b7b71c577"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98823d85-c503-4ff6-b9f6-eb5d4178d3ed",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f891576d-1ab6-4875-9a0d-31ea131246eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca75ed71-efe4-4d5a-b97a-a9aa76c6d02b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5401f8be-1cec-46f7-be63-2ff77997ef17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ff6d8ce-ca09-4bcf-8b55-010a8ad7a86c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "653de081-4985-4738-8c27-9670f6c2e8b1",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "020fdd9f-3def-421f-81a1-0325c8e18afb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f403da49-b271-4d8f-9285-72527dbfe47c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55c39c52-113f-4e8e-ae9b-5252228b2b6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "75bcaee6-3c4b-422e-bf11-81025a9d1aa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "399f0d19-42e2-4e3c-a968-4423be9a0c11",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "180769c9-d8bd-4248-9e9c-96ed5c6a2b6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e6e742e-fd9e-4971-82e7-c00345eec6a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d274d5ec-663b-421a-a488-21d82f66d48f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d522c1f1-e194-43c9-b04a-93a42c5a6455"
                        }
                      }
                    ]
                  },
                  {
                    "id": "454c686d-863f-4ac2-aeee-595c2b1e0c08",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "799213e8-428f-4cbd-b1d6-1f57418ac167",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "762c4775-c861-4ded-a348-b6787130e216"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6680a640-92c0-4e53-8fd4-e6cc693792cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fbffdf1c-9a39-4f78-84a3-df766dfe4201"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ca4d1cd-0930-4110-97dc-7c744ea871d2",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b015370-2ca3-45e8-ba05-47a058739585",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "947713bf-88fb-43c4-abad-5eccc4c044c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "768850c4-256e-434d-8f9d-aa0d59bf2b9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba17393a-d7f9-4771-8956-06431671ecc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a33f3284-c7d3-4453-b272-60f6dab053b5",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2ea3ff5-2e38-4759-a9b7-78cc044fc456",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f97eb062-e8af-4ddc-ae28-9dc2e02dc53a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c187ec8-d7bf-4661-81e7-575b25165b3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "47cc2f2a-7d4d-4914-bf89-f75ed8534f76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bae1cf74-a4f4-4a68-ae77-3b408e824fd5",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b84875d5-2dc1-4e74-b7fe-83b7d24bbce7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d2ed2a7-0081-4221-9ebf-4fa74997d9af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f7076c7-5a8a-4165-b788-b912f948468a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "47013263-4b5a-4e66-bc9b-5c6291d1b8cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e947b8c1-8866-41ae-a095-46345badd68f",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36aa431b-15b1-4c99-a547-f40562dd4380",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65df1f41-dc95-434c-99d6-11d8fa98dc9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c76b5c0-2590-415d-b6c0-fc4957373cd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "35444b84-21ec-43b1-b188-db73c1e92b1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a358a8e-9a41-474c-a5a5-fc96c1b63b56",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a19ff67-aa5c-4164-869f-56a8076e7702",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49045155-0a41-4f64-b773-9ba74cb9ea96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c70193af-5fd7-4219-9622-d2f59c838300",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4184ee19-9c57-4c2c-8c57-b75cf736b330"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42466863-1516-4ac7-a662-23e58cd310a4",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2759bcc-43bf-443e-a578-d6e3e5dc9b74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bd8ab9f-1b13-4337-beca-cfa861eeee41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c959d5e-6ccc-4145-8e93-31c2b42551cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5c72d92-e289-4e6f-a49c-d91416f6c181"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11d58a55-83a2-43db-96d4-5acb2ac6a64b",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb9788b8-9bc3-4785-82f0-b518d33f9358",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a10b214-e674-40f2-a471-3e5e30b98f5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21ce7ece-bd53-458d-8aef-6cecab19df3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9a86fe0-a8f5-4b80-8f66-d1c2602c56f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06193809-1f69-4804-92ac-a2ca11a96b20",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3d2601e-6655-43b8-857f-a1293b0afa15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e2f2e08-4b78-466f-a441-3b0040549be8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3caf8bfa-9739-49e9-8d98-47f74aab18e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8227b58a-af94-4e84-86bf-14a0238cadde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "218dc7ab-b1a0-4657-8e7b-4ecfa191c36a",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75b885a3-0f7b-4954-9651-79522e96c298",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a672f36-f1d6-4e34-946f-7cd55b7a5c1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6caa7a55-6f94-45b2-a4de-3b33ac6e178c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "064fca71-9150-4766-8c06-2096bd20415e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dbb6fc4-bf53-4d84-bea4-df3dd64b6cd7",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cd4c6ba-1380-4f76-9060-049d71d680ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a7736eb-79dd-4b42-a4cb-7381dff6111d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9ceb47e-92f6-471a-841c-6bafca2e9a84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cfc0d3f1-b7ec-47b8-bdda-d34c8c1be962"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5951ea03-f412-46e9-aac2-792df7ebe774",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7872fa6d-86b7-4d56-98e3-f0ea3889263c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4fcb088-d2da-4292-92f7-049afbbada22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af5fa071-029f-4702-9cd7-c614986d9396",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d8f10436-55d1-4099-bab0-8876f5378526"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f7b8db3-6737-4967-8338-09f5a6bbd21b",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9b89d47-ed8b-4b97-b9a1-5ae6f59314d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "549dc6d8-ae4d-4f9d-8a47-f57abd8bad55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6c8aaaa-a72f-4b65-82d6-0e76617c6aa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6d1c0d8e-83a2-455d-84c6-b1acbf82b820"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e9fcbcf-c6f6-4573-9822-9202ebe6a906",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2689a4c-9a34-4a6c-a5b1-a8df894316bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d263aba1-fa06-400e-8b6e-d3374d1a1be4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0108dcd0-c12e-42fc-a946-55d47859825f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "2c41d134-51d1-49af-857a-49ad42d42075"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b4e173b-255a-435c-b0d2-b6aadec49a02",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aca7bed2-3ef3-48e5-9c8c-fb077193b808",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "999e9f02-948c-48ce-a98e-c1b608e7f9d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c837dacc-eb46-4f48-9af1-806c24c45657",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b1c5c31f-a689-4f03-ace6-1046b77565f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cacf5d2-2deb-4cc0-94ff-a953ea8cd984",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e184cdd-06bf-4382-9094-d929bd1d1098",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b573424-8d23-4b69-bab4-79ca7d8c66fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f503eb7-4a6b-4acf-b8ce-2cc0bbff5f02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "faae1184-2bad-4c98-ab5b-ae6e7bd35722"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a2f5558-26a9-4b09-9d77-97a4a8f93810",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13e08b9f-3ea4-4a50-9b3c-515854c950b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "788b99d4-bc0d-43bc-9472-3091ba8445c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d26dc3f5-d321-46c6-a394-2ad1311d326a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "b2cf753d-f189-4397-85e5-94a93a28d37e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba06e852-49d8-4abe-87a0-0db98a1330c6",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49e72573-33ea-4260-83b4-5c56aadda966",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "bf59a7ab-8121-4569-b426-29db2c57c0ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22533e85-ea78-4e09-8c64-e1077a57743d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "5ad93ed6-a3ac-42d1-b873-a78e67541f7c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4fb28fe1-2703-4d85-9a5b-e2e27117f3a0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "901ec773-fd2a-4b44-9dfb-5264d8538a05",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e244be7e-9b5c-4dd6-ad01-f34ac2f8a900",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1891d212-56bb-41c3-a2e7-b3c0075fabbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cfacb12-57b4-43f7-904c-fd08d6bb6d19",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "78c27f5a-1f5d-46df-aeed-a7e2db447bf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d629f53-3dc0-4156-adf0-64596dfa73dc",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3ba89f9-c832-4a94-a59b-ceb934aaa58d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "501b8d05-247c-472d-85c9-a2f20e189535"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc53b924-dd8a-4cdb-8dc6-c243804f1758",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "83398980-bfd4-4ff3-aff6-bc4ef1ee0d41"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f00a4ab9-f370-4a72-8c39-b324d7b7ffdd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4b4b8968-0abd-45f4-98d2-104d48744042"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9cc5e19d-8c7d-4255-8f94-7ff6312b434a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a2f2d6f7-0bb8-4491-ac75-86740bf7c728"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0ec0911b-33e4-4106-b9e2-b4e6ceca746f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b4d5b9cf-2f53-4a71-b32f-45d7b19ae453"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "084fe73f-2a5a-4ff6-b4bf-685d3bef573a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "efc3a897-3c3b-4dc6-b183-70786c162736"
                }
              }
            ]
          },
          {
            "id": "8be87e2e-5c70-40b1-bf25-55ba8f11fe07",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2aa40e51-ada9-4dd9-9b4b-e3e626e5fb8d",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9ce47324-e565-49d3-9bdc-e269d537249a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "59df0411-a5c5-4ba8-b551-e2c02ceefbb4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a488adbf-ed82-4407-b0b8-1c6b1d7d7e2c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "83cc3dd5-6341-49dc-8196-f8dceb3756b3"
                    }
                  }
                ]
              },
              {
                "id": "25e8d6ff-6517-4b5f-8886-74e9935710d7",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "83ed78f3-b531-4998-8cb8-3ba93777628d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "05832dae-5ae9-4fc7-9c02-99999b985b9a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "02fcddb1-8921-4ed9-8103-1eb59162d885",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6913af27-a736-49d2-8e5f-1f39a16ce22e"
                    }
                  }
                ]
              },
              {
                "id": "bb702bb7-af20-45f6-893a-a9ff53b83c5d",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "72081761-d554-46ef-bcce-7d2da4d6a8e3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "95245099-dccb-4999-b9f0-1a2d64beb030"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e2798480-7a1d-4270-a08f-12cafed9a3cb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b3fcc94b-bde3-4ef0-85c0-08004d8c50a3"
                    }
                  }
                ]
              },
              {
                "id": "41581934-29cc-4326-9acb-2dc9e6383331",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "153ed7a7-dafa-4f1e-a0d0-78ecdca85228",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a70edd9b-30fa-49e5-8450-dbcfcc091d1f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cb71706f-462a-4b00-8a66-d551922accc6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "67f00a39-3aa7-4993-92e7-f4b6c71528b5"
                    }
                  }
                ]
              },
              {
                "id": "2fcfe459-382c-46ca-965e-9015b0e7fb3c",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5f39616a-4a8d-4d06-9ea8-8ab351c3acef",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "28fb0a07-5c98-4d8f-9585-2b245ad699ce"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e50f75ec-42b0-465c-aac8-7f93514e00ec",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "367145a3-448b-4aaa-a5fd-76a881931dc7"
                    }
                  }
                ]
              },
              {
                "id": "da5f77ea-43ff-47b1-a93b-6040417861bf",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0fb7edb9-4675-4512-b8f9-362e00acaee9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "df426fb1-32d3-4e87-b0bc-17c7bbb16d21"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "49944ef8-4765-47d8-b51a-f603328ff9ee",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7a4b67c8-d5fd-4a5d-95bd-0fbb07cebace"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7c0c2ba4-c78b-40af-b337-ad4ca568f043",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1a1c983e-ca89-4c44-addf-89560073bb5d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "52301cb3-612a-4522-bb69-a1a33f283146",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e0fea0c4-baea-4725-bf1c-2a4d69a1f5de"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d1969a7b-2970-49f8-9acc-6dcea2164826",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "cc49bafc-27c0-4f99-8bc7-a8da9f5347b7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6d1b78ee-dae8-434d-a00a-47a0e702d7ec",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2ed6a08f-7ec1-4111-8129-58d2954a4712"
            }
          }
        ]
      },
      {
        "id": "65800a1e-cfa6-438a-b1da-a081d959d6dc",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "39af6aa6-84da-46e6-a8b2-99878561b2f9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e9254dcf-6400-4f97-b3a8-98b695c3cbc2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "47d4a20f-bec3-4c73-a852-09e9803871b4",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7d78b86-17eb-4168-9961-0d37d59b5d1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d8d3ff5-2883-4f54-b96e-5007b454530a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a75035f9-d748-43cb-8bbd-edf23b2af876",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "76dfd9c6-796e-432b-be8f-5e4e3b051267"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b6f5184-b6b3-46a8-a9dd-1417737b3dd2",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20bfcaf2-3277-4de7-8319-27200b212f34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00af2034-65b7-4fb7-99ec-655d81c5b521"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5257ea65-0c41-4fd4-9b45-39d0af9ee3e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ecc53598-88bd-4b10-8c64-1b8bed532bbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33044259-7a15-4722-994f-a9f8e83b5255",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62ed10dd-e9ec-42da-abb7-39d0c7c6f524",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59c67772-723c-4b5b-9c9a-c7deb27e00bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9faa5fcb-f462-459e-9816-a429f1be118c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "738e0658-d783-4046-b886-da4e8bc58719"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebddfc53-7527-4bdf-8c7b-b03a1b141a82",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08d9c752-8d20-4176-8f0c-0d441b3dd1bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfb25598-8a46-4dd4-9162-85bc6eb6e7ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb5632c7-f8da-4a56-beee-daddf251c76f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c17e1495-584c-4b9b-ada1-e8edee900fe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4aa452d9-42b9-4cd9-976d-d86e860c410e",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63d082fa-2d5a-4a8a-81ca-b8050a519b45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01a36aab-5778-4c14-9383-991c36c8a5b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1b3ae6a-7194-454f-9d4e-ba34b0ad52f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9000eb3f-b25f-4070-9e73-71fc2f180c99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50bc90a9-ab44-45d5-b6c0-8cac97b17e67",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a4e6f2b-a317-47a6-b81d-c1cb016261d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdd91565-2ef3-4dcd-84d5-d8442cae57ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2676baed-5cbb-41fa-83be-1910049ab950",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "800c9ce7-7c3f-459c-8196-13a8a5b08106"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14c8e7d7-d74e-4cc7-a9ca-46a814d87185",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4605516b-5212-4249-b1f1-104966b8762f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d816d960-c10a-45a1-ad45-6585302cd92a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e5b2871-a004-48a6-9110-eeede25e11d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "7e651443-690b-419f-bd15-e074eac37124"
                        }
                      }
                    ]
                  },
                  {
                    "id": "287e9395-7f07-4e8a-807b-a725dbd7762d",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a38b3aec-418d-4e64-91eb-7c930fb41a1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfaa9524-060d-41a6-a3b9-10999de95bcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd9b9d49-4a87-4e80-b5d4-dfacbee64156",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "65414cd1-8a46-4dd4-8e64-a7a6e7e7f52d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63a8dbbc-6d4d-44ca-91ce-33ee6d76298f",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2030ac4c-595c-4332-a84f-42b48f6ca8b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04cc02d1-7b88-4e1f-ba9f-82ede80ea8c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd536c0a-8e1a-4ed3-85ef-25be3f39cf2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ab5085c-0252-4225-8a11-33b763f1195c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a85d49d-d082-4b73-8652-6bdc6f6fad7a",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a372df9b-07c1-4814-a1d7-dbe1fe7e32e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91231b1b-a3e8-48c3-9cbd-f7f20bd896dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7b7afd6-0e7b-4c4f-978f-cf213499e337",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "97f151ee-e18d-472e-9bf8-5b7d0337dfb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e5df4ca-8f10-4e1a-97de-0ac8b10fb2f0",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8053001-c13b-435c-a03f-1b90d60277fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acf098a4-6951-448c-b5ac-7d23e7765e07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c489803-53e1-468a-81b7-cccce4ecbc05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "8733e64f-196e-4d38-825a-5148f2016857"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1554663-a3f1-498a-91fc-fa47d63e2671",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e082bed-5757-49d7-8d3b-881fc1a11eb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c97ca03-1ee2-4577-9953-dcfdafc36463"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8689403d-467d-4d6b-b705-88c07b9f4f3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8c2abda8-13c0-4ae0-8527-5d1b11b79611"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d798c25-e2ab-4ed0-802d-0d4b46501ebd",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82c5ccfe-ce2a-48df-b2a7-00f382e94030",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49f3ab40-bca0-4aa5-96d8-4e55bf2beab2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b438df48-0622-4b16-bbff-226a42dc648f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb4c749a-5033-4926-aa8b-8f4fd8931c24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a5b4d77-e417-4dae-9de0-4dbb852c0dee",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "634042d3-c533-4ad0-a093-0dd851964bcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15dfd4c1-7e73-4cc2-8112-9e33aae5726a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ed05788-3e0d-48d1-920c-0003524b3182",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "76c07655-5e01-488b-b4a9-788c23138c97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "503d6632-7cfd-4eb0-86e0-82c683210d69",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d282c6e4-0cc1-42a3-9e85-8a8deb967a6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f83351e-f0eb-4181-9535-edce9f7aef43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8609327-a028-4ecc-b647-5ef362035f99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff388aac-a597-42ea-835f-2ec7b4999fc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "911cb846-2cb3-4742-a2ec-fb321cc415bd",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dda31c1-271d-4073-a1cd-f12a66ed46f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "597db90a-8f64-4aac-90a3-d8b9254f97ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec26f258-c51d-44de-b013-8de3aa7e27de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb9ea42b-ab6f-4ef3-89e6-6d71aeee7e61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0df5f5f2-6db2-4e45-8147-2cc84e4fc2db",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f3e5657-b18e-450f-8665-ea68c41c8aa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c9a653e-4a25-42a9-8e38-71803242dd3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6db9e69-4c1a-4afc-89dd-f2fea50d78bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "6cd02b84-0459-4fd7-a4ec-910d4e86f359"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaa60ed8-0d19-494e-9fb8-2ce7b2bfa9ab",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0613b5d-f273-4974-92c7-291d8d625311",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03f355d5-f29b-4a89-841f-de6ed7955afe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37547497-5e6e-4d29-baad-5227f1d00624",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d2c72bf9-518c-40f9-b6e1-f01847f129de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53ce2822-d6e8-4f02-876b-25348d712c7f",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73e890b2-d7cc-4869-842a-e7d7113e2390",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e427f04-56a2-435d-aef5-890aa1888030"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20b7d82c-77dc-4a22-bea3-170d4b5459bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b81ad42f-087a-4fc2-bf18-8eeb18715c74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "632bf18c-ee3a-424b-8813-51fec1adb531",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec2d7019-a7dd-4e08-a62b-ee479ad842dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a07dbdf8-fa37-483e-84f2-06a5ad110777"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ea00d45-10dc-47a2-9269-f5f67fa0b28a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8cf49e52-e905-49b8-900b-d7b69d6780b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7170b75f-a06a-4be0-9ff1-a8c194c1f65b",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f52eccf-6452-4557-bf3a-9633655f5224",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ffb6a72-c810-4dca-8fb8-3370944ce3a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fb79780-2bfa-4974-b792-dea5862dbf3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9800a8ea-da3a-41ca-9bd9-853aab27ef29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fee662fb-31f8-42b2-bbfa-8dc24d5c7eb2",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21eff6cd-65cc-44ff-93a8-8f275eba0ef6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e7369a7-1aaa-476b-9050-b589516e6623"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26eaf758-8c3e-4248-acea-8c2f4d813720",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d54b16fd-f520-45f6-abb6-1803f4330f61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de3cddc2-86cb-44ea-95d2-887ebbd618ce",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62ec233c-f04b-4bd0-83fc-076c19c92efb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42395f2d-10f1-4bff-ae56-f7c21f06197d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e9c3f2c-2dff-428d-a0b3-5bad0ec78b00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cfd65eee-86bb-4c23-a232-70d0ba9a32b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e02a3c8-1531-4c0b-b9d2-e08cd5fef7a4",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f76a59fa-0210-4c49-a877-6a2012c10dcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1aa0cfab-077b-46be-8543-d088b97cc7f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "507483de-b4df-4694-90f8-7f4f5ad65dbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc6aaff3-deba-4d35-9a2d-aed437eb0e93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b10df09-b256-4db6-9c9f-25b3e008b48d",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91ab762e-23d2-4db5-b237-cc10cdbac8e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10a04a55-c9ea-4cf4-bbfa-fe17c81adfaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a63a410c-cbea-41c1-b587-83a724ff3d36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ccb6c114-5289-4f65-8fcc-45d8d3552b48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "142fefaf-6fbc-4533-bb3a-a2a5f73bb28e",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66a5eb63-011f-49df-83ef-7cc1b99271a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86b4d0b9-a037-441c-8cc9-01be045dc92f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d093fe7a-b0b7-48fa-b48f-1a165983b114",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "17de6792-3a3f-40e1-b701-24ad2a27cb56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45591f86-4418-43f3-9eaa-a2d20899f87a",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fe7cf79-a52c-4497-bcf7-20695e3f3185",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "916f1d2d-dbf7-4dcd-a071-6c622bc75005"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adeff5da-4020-4dd5-9ae8-409db358d80d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8e3fdc5-3311-461c-9170-d07f39c405f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b236ef3-50c4-433a-8ddf-858ba428939b",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "446e381f-80ad-4b49-8faf-3e71f293b285",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "284df0b6-d2b5-4bbf-9e62-1227deaac493"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "921e17e1-1e30-4b96-8279-ffcff459651c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "78200dd2-f09e-494b-9a97-aa75ee4e8c14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18736d22-9eb7-430b-89d1-3bb58e36e948",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a374e63-a994-4bf3-a20e-bb4711a1d433",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "559c9909-cd07-4d29-868c-8e4ccbde48b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78692b96-0d5e-494f-bfac-3973f14ca504",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d26becdd-2282-46ff-a344-9414b7b9bdb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d83ad6f0-2639-40c7-aab2-66bb9096b1a4",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c0d185e-8ed7-402b-9ba2-973d350d3f4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10141bcf-feaa-45e1-81ac-839c9ca46ead"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eff17adc-c0bc-4502-9b47-2ad2e8ccbdfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dbf58ac2-c18d-4be1-87ad-b32fbc171a45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a81265d1-ac08-45fc-bdc8-63d860fef458",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a787f57b-a85a-45c4-9b19-57d27e5516df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2450dfd6-d8bb-4ac9-9ff4-7c937e5cf40b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f494f3f7-ec5f-4168-8d42-18f6e73acaa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3cbc73b8-e615-4491-9716-692c886d9ea1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f52da54d-5174-4e3d-a7d0-af507dafcde1",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aab27d5-daf4-43fd-a428-42b58c58cbe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "631ee8db-c877-47b4-ada8-7c8e6b32e754"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "700194d7-0203-41e0-8cc2-8a16f6a1ce6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1191e973-23db-403d-ac3b-6793f8e674f1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b6970c23-5fa9-4fd7-9fea-3c6a31280d4a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "616a85f9-a3f1-40d6-850d-e88446a6fcd6",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1a66a67-6b39-4ac1-815c-26b985d0c084",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "ebae9127-7e79-4449-96cb-d28cf41a057f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a44058b-2239-4f94-b8b0-743797b6f4fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2de0943c-78a7-41f3-8ccf-4acd5ddac759"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd31b076-e5e9-4c70-9471-343afc4cb766",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d332280-205f-487f-b4fc-d0d49ffb68af",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "d2f30cbe-b32e-4225-b16f-e1e0ba4ad446"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0d160bd-ec52-4f53-96ec-375badcb096e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "01aafb59-2f1b-4522-813a-0df7a482653f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b8d3a930-fc5d-4683-949d-f6a4cc2ed58b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "31801d50-9a8c-4890-ac0f-9d942e914999"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "adaae4f5-3dc7-4da0-b9aa-d128828303e9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "72de942e-fa8e-4be3-a3f8-184bd6c872e4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "821513f1-855b-4257-8c23-d90c9c93e759",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "3e96b515-0646-4bb7-b5dc-a1280aecdcec"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "579bd7cb-ba74-481f-8d82-85e640828d97",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "92893375-5378-4772-9175-9448eb147abc"
            }
          }
        ]
      },
      {
        "id": "2c63b72c-e715-46ff-a229-53b1ea977ab8",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "d57cb0eb-bfee-4b00-8c13-1cbcc387bcdc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "65cedc30-6cad-42ad-b362-804129135bac",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f4da043e-22db-4866-93b5-2ed4cf0d48c1",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac179ae5-9958-4470-83d5-c331d0290f9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd7b933b-793b-4aae-9685-e827c2c9f244"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1085c03f-394a-464b-9b69-deb2e500ab64",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8579a561-dd3d-4610-975d-5fdff7e3ac85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1944db99-fc21-4505-a2a9-0ee39381e1be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e41b0be-8e1a-49dc-aa7d-e31041b820d7",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eabc61e2-bbf8-472e-a92e-a5a3b5770318",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d97087b0-9caa-413c-8261-76e35ccceb65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "098f4c67-da14-41ea-99eb-aa77abf66ec6",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d726841-6d44-4c55-9a75-6a023f701e40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "993ee229-c79d-4243-81ff-a9c1b1b9d8a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f20fe2cd-5d55-4540-a1ab-a18f7b5a4950",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce9866f4-5e30-4fe7-82dc-561ce91e4b44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "379009e3-3151-4eb4-9328-ae442f63337b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f5414f7-9f3c-4bf0-8530-e4ba374b878a",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a938f56c-d6e4-4b9c-b974-21bc52543f1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dda66465-2274-4fca-a1d3-e739aa2c7a56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "531214da-9c29-4de7-b994-e21dbf28bc1c",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f59a25dd-26bd-4ce5-a713-260d093d46ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dbe7580-8575-498e-918a-868268084baf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e04ee338-04ee-4dbd-b0c5-0631af2b63b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0afb3d1-b734-4be0-8439-a6c4a31c0059"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae3988e1-429e-4825-b1f8-05b293f9727f",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0234e406-edf8-4a2c-a549-1fd794a30475",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b41ceda9-7e30-40ef-bf2a-383cfd0a536a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b847b4fb-9e67-4ed3-befc-7dbc918b8280",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fc8955a-abe2-45df-af0d-00734551173e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1bc9434-872f-4758-9ab5-9d7282c5dc16",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7067a478-b4e0-4a0a-b932-cf343d0fb474",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2b053d7-53f0-40e8-a2ce-75de35617159"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6b020a3-a98e-4d0a-b5ea-a6223d861ed3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "515f824a-8796-4f81-9690-f5135a0fbdb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "386f9d07-15ee-48a6-813d-e213e525fea4",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "289418b6-b3b6-43d5-914f-5a708f666424",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea1858e5-cc33-4651-b4b2-068a7d879b7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29d9b15b-8d17-4178-a79e-cd6a49568c1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "643257e4-8fc2-47f9-bf00-9ea58e23df55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89281fe2-bb7b-4a9d-86bf-234bcabc01c2",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b26f130e-0ae1-410c-8fc2-0956a67cb23c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d30e471-6ee5-4d04-8ed3-5b99583d85c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8cc6172-baf4-4bb5-b2cc-c861611f15ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97eacea0-8bd1-4725-bfb7-d3eb43b3e085"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49529137-1064-451e-b59b-f8b1306addd5",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cabbc8f-3f9a-4690-82ef-5250c28562a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58ab00b9-67d9-4594-a656-b53392e4faf9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fb793d5-399e-4d90-8716-cdfa1c86adef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3575806-9e4a-45d8-b424-28e27d8be661"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f13e66e-87ad-4926-9a57-ec169afcb7e6",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a4e8db3-0903-441d-bbfe-1c006f3cd70c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2361cb4d-5dd0-4815-82d0-b0cb6ab82fde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f773c22-f525-4069-9ff6-299c4d205e61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "deebc452-aacd-44f3-b5a2-98b841f3aef1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a4db737-8040-4ff3-9f17-bee51a1f4535",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8ac9c56-03ff-4011-a195-48d2fea76ed4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fea4f946-9e57-4619-9d00-eea4ca12f540"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "452169cd-3cc4-4ef1-86e7-8ae978cbba58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f22b9543-4dac-47f7-8e19-0f410c85ee62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e16b032e-9a57-441c-97a4-af0e44391a0c",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c277a6f-ba3f-4070-9ba4-21ab32ccb576",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4b08f45-23d5-4d28-920c-0b6b2bf2b1b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94f2392e-93e9-41f2-aa46-37c246d0a8d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30681ddc-60cd-419f-b07e-7546cac5428b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb605448-dbe0-44c1-b918-dea5a21122c3",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b33ea32-7831-4928-8339-4c1f968aeb23",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41d8c0a6-574e-4e76-ace8-95ad00354056"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "625d864c-fe8a-4389-bf99-7db76346d6d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c665013-1651-4965-9519-aafdf65a6f41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e533a41-74b6-4dda-90bc-e1358666c134",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac406e39-b6ba-4560-96d6-5cd84cebe9a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "536d2a28-d102-4f22-b544-b0e549dcbd42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "918d06c1-1ce4-49cf-9637-047ad8eb3aae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e525c2b1-d98d-4614-bc15-8778f5f0defa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2ba995d-e9dc-471f-b4fe-7e8715d610e1",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91bee0f6-bcb0-4950-a8b3-f620dc31b688",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e5ecee2-7917-47e2-b5f9-18f86f6f1303"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d963ce8-fab1-4c6b-a353-0bb152ac529f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa1e41b5-dbad-4480-bd8d-7df7f0f37462"
                        }
                      }
                    ]
                  },
                  {
                    "id": "801b5133-a476-414c-ba08-76a51f941714",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47901258-101d-44e1-8aab-21bd0539f541",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b87560c-6a1a-4250-9ba1-c63e750d0e53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a498717-651f-4ec9-b2c3-992c2ac87f1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02bf32c6-0957-4b63-a7d3-9236174ce3d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66f70302-8400-4d85-92f7-2be75552d417",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16d6df16-bc9c-4386-aec6-cf4d24b61f24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccf5c7dd-2420-43c8-a425-17393e2dce24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e5fe6c1-1358-495b-b582-ed1d929aa2d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7249c022-9c5a-490e-8b74-b2b7628498e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7997a5cc-04b4-4ae3-b042-87c14ace845f",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27991d9a-a547-4110-a47c-806eb34a16c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2caae323-8322-4b8d-96c9-8fda71b1dede"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6bdc3f0-2896-4c77-b671-da614ccd1aaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "899fe73b-7a51-4faf-9d53-e96b744515e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "536a40f0-53bf-4cc4-a679-678da28088d8",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12e3b067-9217-44dd-a0f2-b66b1d16b96e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a08fcbf-6ee4-4ab7-91df-bec45739feea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f451171-4f90-4ef2-8084-2cb708d27cd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03f09c8a-86c8-4a3c-a73b-009e6329b01a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9281a8d-25a1-4779-a127-54144c8a731c",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29889e9c-0848-43f6-b553-1e54c133b04b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0d94a3f-71d1-4320-acc0-c54941cf62e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "942eaf30-03b1-47a4-a166-1dfcae62888a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "792d9e80-b0ec-4e3f-9524-61eea954d2f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "323c21fd-e5fd-4cb3-b8ec-cf0933465931",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f1c549b-daa6-4c68-b236-95f046c22a69",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56877a78-04c9-4b42-8abe-1249e196c7dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9b7f9ba-8003-4eaa-a756-99e08eaf5dd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "182de94e-e64f-43aa-a67b-926d525d8607"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e421cdf-7011-48a4-a57e-c128ae597e25",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "782cabe6-2949-4cd4-8700-78dc0a64ff50",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c197ba5-675c-4be5-b557-451122044898"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d0bda8b-e859-474c-a934-a88e45515676",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c83d9c9-b5a0-409c-9884-3f06eeef40cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19a17216-73f9-4df4-abdc-10e27b8baea2",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c820e9b4-d5ab-4b59-9651-41f27109e3c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8792957-396a-4634-a2df-2846fc62d1a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "831ce2b0-f27c-4441-803c-e75ffe4fca15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d7e793f-ec1a-44b7-92f8-87e6a84282f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17cfc8c6-82b9-4a8c-b632-77da2504b75b",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95d0f9cd-dda3-484a-b34a-b768a83a82f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d76c0e9f-82ba-4c2c-92e4-9f93f3f610b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83e5b4b9-cce7-4d80-b7da-89af056add37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "933a6628-f91a-4548-aa9e-9e625810534b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9f67555-5109-4cba-82fe-d9adda0c8991",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65d131a5-724f-4af7-abac-e5362df045e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bda3c1b9-5bea-4178-91db-472c4f0d5dcd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36cfc2a5-d498-468f-98d5-7ce6ff3626a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84fdd863-7c72-431b-af55-07db5f9a85c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3e99248-d24c-4fee-a15d-71038436cbf5",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab664df7-7fff-45e7-bad6-b4524a778a51",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9cc316ed-6c52-407f-98e5-eec21a99082a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efcfa960-37ce-4f76-9fea-60daa6d80956",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6727d8d-7668-4bc2-8ed9-5f05e22b48ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50ceb096-116b-4417-940b-93fda09af09a",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e3531fd-4dec-4384-b331-7491469b3b66",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68cdcdab-77cc-4415-8bad-b0d96c17331a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf19bfcc-bbe8-4440-9ffe-d562c1acc9ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb5e01d6-d639-4c5d-b283-a50935b9102e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66937bf6-d00a-4329-9d7b-6241519c6c0e",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4144cd1-d987-43e0-9211-50f4621a205d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84a8d2d3-f640-4ea2-8108-eb179944db07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b972ddf4-a8e5-4c60-b8d1-b66881bfe177",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a43805c-7be4-40e6-97cd-a21aeabefe75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7ca0de1-1e6e-4515-bd92-a95643961dcb",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00569add-cd30-42ba-8468-4124c9d3f99e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d6a87af-1402-4dc6-81c3-325b26a4c467"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "942dc6f8-200a-445f-a31b-d8f9cc54fd61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a1750ae-db43-4ca7-866a-4fd82f1a8848"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc1580a7-32ed-4b8e-b83d-4b6b145d5cd4",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d82b4d1-7c71-404d-8c22-43b302f1d8e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9a6738e-c79b-495d-960c-98f6cdad5605"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5b12674-f4a2-4ec2-9ab8-35027b92105a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d379913-9a6d-44cc-9747-3b76a381dcf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf23661b-575b-49ee-9baa-b1c3ec82121a",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36e2b79f-1ba0-4087-845a-612b812096f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "621a67eb-dc44-4345-a4ec-949b7829c163"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57f440b7-74a0-4b57-859c-8df632b8b574",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a175df81-84c0-4457-9a3d-0f149ca5dbfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbec42b1-7999-4e17-b98f-9e6aafb4b1e9",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77ee2a96-b547-4148-aef9-2a4681645c8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96f03fff-21eb-4d45-8194-baf1870fe38d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84210c41-62f0-40db-ba61-9f7220bb71c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8414446c-f823-4f0a-96dc-a7d5d9de04cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f32bce8c-40be-471e-b184-08a8ca0d483e",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee56b30e-7033-436e-bdae-ade5402d63cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "978cd6e4-63cc-4b28-b0ea-51bce35b5730"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8fe1a8a-aa4b-4462-86d3-e64e27e4cf29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6cf70b1-ff98-43d6-9b2f-9f6126bda708"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2b26310-a80d-4c42-9b4b-149319a2e24b",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3a6a317-d253-4749-9905-f01c1e34b584",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac68563f-68ea-44b8-abbf-62b56b318bff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a35e41d2-e73f-412b-a0ca-891392ad9527",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adb087d5-0377-4a3f-a393-5a5ff4c60704"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53c7a4df-6f26-4993-8278-7b17e2e9f9e4",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d807b53-1893-4e8f-b326-d6bd026f60d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1826665-141c-42b7-a6e5-1ccdfc3d7f7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d6aad08-682a-4584-a4e4-6ddfd3daa9b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79304fa6-a929-493f-9f92-54c131838050"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93d29174-606d-4496-97ad-2e7b92d4a73e",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f69cab9a-705a-4e65-8665-918813900cd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbc54581-567b-4d2d-a2a6-5b72b9fa97c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cb335a3-0569-4ec0-bec8-92aa5fecd68e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c162180b-3d4b-4c66-8dd5-ffa6eec865b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fdd3cc8-cf53-47cc-b702-bf20ad9d80a8",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0492e8e9-b351-4341-be48-1741b94d92a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcef2c71-9203-4b09-94cb-fcef91255dfe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c530976-edca-48bf-b7d8-e7b0bbbe385a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2de9fd38-e496-4fc2-bf50-b75cefa89ae0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a737e03d-26a5-49ec-8e50-ba4cdc2f0dff",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6ac27e1-7627-4e0b-9618-5caef816b05a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1a39346-a4b3-409d-840a-95722c2a2a6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4608f7cd-659b-4164-b42c-cd22b4e9a968",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88ac82a7-e782-4b4e-bdfe-5e31880cb0ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7be03853-a6b8-4b4e-8fc5-08524fa862aa",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f61e02ab-4643-49b4-bedd-a616c332cc55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59872bf4-cac9-462e-9f58-01ffc19028f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e2d2f3c-41ce-4e16-b41d-855fd1b2a9b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29237b0a-635d-49ab-b285-bc0745f59fd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e1aa025-fc6c-4d58-98a1-399cd14b32b3",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4df6911f-201b-4921-925d-790fc25be092",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68b0b7be-14c3-4a13-bddf-07e5a9c616b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c779eff-237d-4694-a899-fe01d42de815",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46396af9-327d-4df7-a3f8-0de0f767e10f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e848402-40d8-477c-b92f-1be12a67281e",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b0ec98b-b7be-44ff-b10a-ee368aae5b13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78d827b7-5348-4ce0-a7c9-4134058778a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5426631e-1b74-475e-869a-c182c7f30dfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d1daede-5770-43c0-8570-6682b3856e4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f231895-9bd7-4be3-9a62-0e58a3fbbf24",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aa0b30d-fac0-4e08-97ed-e97173d108a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17c07d0f-e592-4f75-b928-3730c4d783cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d248e36a-48af-499e-9f95-8b22b02d221a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ed541d6-4d1c-4af0-bc6b-87d8f1b1ea9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88589a70-ba7f-4fcf-80cf-f66936f9db56",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54da594d-8b35-4eea-99db-f32398d8d336",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bbd713c-2255-460d-8d39-2ce940af1f10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "faddf95c-b338-4525-a82f-8a8fa492e4c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41dc30e6-8f84-413b-8e5f-5c33a15d5636"
                        }
                      }
                    ]
                  },
                  {
                    "id": "623e41b8-06ed-4fe9-b677-295ff7f7cd8b",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d10950b5-0697-47ad-ae98-901bd3831da3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e27b193-e9a5-49ef-92d8-5788c640da6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f77633fe-e0cc-47e0-a821-47de95aa1e90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "738226af-2c25-4a72-a507-00ddf283ccb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14ddbbf3-0e49-4676-9933-5c9db249fbae",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b0a32e6-6af7-41cc-9161-7b81c04e3680",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a35680d7-abd1-4cba-94d9-11a2e18078c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d67e8f1-cf22-4e84-bf0f-8e64bc7a8f2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "152946f4-26f6-42cd-806c-99eaf74b7ac4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88dbf207-ff78-45d5-b056-11b2b5d90fb9",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae64e00b-9d90-408a-b29b-adac8cc1eb9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75549f52-bc5d-463f-93c8-bc1b874008b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3af7be45-9a5a-4c86-bd2e-348d8208fc16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7eb635e-8527-4add-b73f-e6422b739ea9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c415a3f2-b535-40c2-af0a-4aa00425925a",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48a4fdce-5ccd-4d87-aa4c-1a75a4e67572",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3d07905-2d28-456e-aa07-083dca66adc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e559774-bb32-41b6-9bc7-0edb60d29724",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad0a7bd1-47b0-40b5-8141-2c3fa3ce5110"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11b05dfa-16bd-481e-8cfb-785914635994",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9b820d9-29c7-4d2b-9cc9-d2ba6a3861ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33a79784-3569-4656-aa13-b26965040071"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc01ae32-86d3-4c87-87ce-daf686fce9dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83e6b24e-8e8f-40bd-8575-e97a3acffba0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fce4a2b7-95b1-488d-8bae-9c572b91cac1",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa9b6a94-3f8c-46cf-9701-e860cb0315d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ad21b02-cf64-407f-a6bf-b078437e4344"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2ed1b3f-2346-4f9d-8631-f6121832036c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3432d91c-e928-4e14-b2bb-7612cf21eb47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1140a855-f655-48e6-a6fc-f57fa1589258",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b62b68e-36ea-47b1-ab97-f902c4ba22aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "920c3112-8fbd-4102-a503-007f7de05967"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e789d33-ccfb-406a-9340-006c3f31ee8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12626bdb-e588-41c8-ae87-f90ec880d60f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d02da9d-e07d-4538-bbb1-88b5ae7f6cc6",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89a6babd-4b5c-464d-b92b-ac4557d40021",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b28b69b2-c755-458c-bd04-2740795c16c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a525efe-3ee8-4aa9-936e-c962483a2620",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2738d8f-1e25-4e16-b4f8-c6aac708d0e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dfb86dc-45db-446d-92bf-b1d3dc3ccbd5",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "635647fe-0deb-4991-aa8c-185d327f8810",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8afc04a4-e581-40c1-957a-1892e986868f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db9f1803-8a96-4664-b7ba-c1211bcf2bf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7914be87-dd81-4c9e-a5a0-1300ec92016c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b5ca987-400c-41c4-b186-94c7fd780f5c",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c6b9b7a-c793-4c60-980a-0aed5eb31e0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44e3d35e-a1aa-413b-8675-b19b0ed9053b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2ccb45c-16f8-4ff3-98bc-8b33908b74f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0385cb53-3bfa-4b7d-ad11-cf57c91b3480"
                        }
                      }
                    ]
                  },
                  {
                    "id": "002ccea7-f2ca-4a84-86dc-7bb231b78ea1",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd76a421-cbe7-41d5-a7ea-1a477a75b96e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "718f08e3-14bf-476d-9ecb-c6a4adbfcd5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d819e83-b604-4afa-9468-194268897190",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "347ee8d8-1f2e-424f-818a-bbba83c82117"
                        }
                      }
                    ]
                  },
                  {
                    "id": "728aa25f-7e58-48ea-ab32-b5cb3dd57997",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e715a04b-d913-47d4-ba12-ac03a59faf7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c96f68dd-268b-40e0-8302-92aeac9727c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7806086a-3f9d-42d9-ac69-8791614feca5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45d85eab-a203-415f-adf2-9794b850e7a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9da41ce6-c318-4ef4-ab2e-541015b1c025",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "806f5288-c5ad-43c9-8251-f5bc1ce77ca2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ef1d824-c973-4f58-8fdd-c9f86e2e12a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92233389-97c6-4611-82ef-1eed7b9181cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fbf960f-c30a-4017-87b9-66c0d674feb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79123d92-734c-4e6d-9c91-5d7a159bf4b2",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67d409fa-4377-4644-b1d9-6663ac208b0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "326aa7bd-19c6-4126-88a4-cbc50a7614c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb0e52e6-3ad9-427d-879d-79383ead47ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d4989c4-6835-423e-a2a1-5b3072693286"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60348e97-e243-4758-b731-95f4dadf98df",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48b190fb-3d4b-4b27-b18c-8fb63718f66f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ac4b77b-9933-4925-8bb7-6e0c4735c985"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e91400fe-97e3-4e42-aca7-75d50ded18cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08c3af1e-d367-4791-8f9f-6e9fbf6f3c3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c581510d-b4f0-4069-8b5f-e4f6eca30407",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "507f8506-0d52-4c9d-8f0f-604a78c25a77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b066100-ff71-4209-bd70-300274de9aed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80fdc588-2673-44c3-a6f8-098688d7490e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0508fb7-aaae-4cee-b00a-721eb18ea2fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9911bed3-d5e2-4629-9054-e49041e8953a",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cc1de43-4cf8-4e7e-b9b1-eb0e9aac135e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffd5a7b5-3d1b-4176-bb91-fef4fe194586"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cd497c2-3e6e-446a-afed-a696c2ee1207",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17ce2d68-1995-4595-8e9e-9d6950fd0506"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d1c5419-2d7e-46ed-86a9-0d18f97c5698",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f62687e-3c21-4872-aea8-4672a1da1629",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b8ca79d-7b37-47ce-9e01-bdb692fb57ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f9a0532-ffea-469a-b976-0c43ec36fa24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e3b51c7-d884-451a-8c94-dab22528ad76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32e4d9ee-572f-4a18-8fd6-d2445da60c61",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "641d7ce3-a4f3-4c48-8bbb-52fd1b36fd82",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38dfb2e2-11f0-4850-87d3-d591de78cd2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d075302e-8d9f-4ff2-bef9-b404ced99a56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bde2d817-2269-405c-b76b-9202f5a28b8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad6ae48c-db66-442f-83ef-541313690399",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "416865a5-8e99-4a10-ad0c-aa3c0bc0d497",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bcc50af3-c846-4a5c-8d21-a682c69ec041"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08bc0f56-3972-419a-83fa-6db2b1a340f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae3943cc-d3fe-45ef-ba8a-e577040cdf89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4921dde-f01c-4af6-9328-658d327c9500",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47ab7123-e2bf-4de8-9d3c-f0e4bab69ead",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "369941aa-a28a-4541-99be-fcd82d85fb91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2feaafeb-00e1-4976-9f31-b746487e9a38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b5e9f7d-ab4d-4bc8-bc81-dc2077c13751"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5c9c3f1-a0cb-48df-94e4-58dae98575c5",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d312a297-974d-4e64-b96a-3a1e794b9e27",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cadceb6d-ce7c-4a1c-9266-995c11a79e5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e421d76c-590c-47f3-8d93-853f296841de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "864a28cd-0a84-4c5e-8d35-1279f4de074c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a1e77e6-94cd-4a0b-9e42-5432e1af3ebf",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0df55e6-7d53-47b7-9824-9bcbdc3eca10",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c86b181-71b9-4813-9c82-e504fe675c4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afcdadbb-98f6-4120-9933-d392e81c0954",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88c81b33-7cb7-442b-904d-94e8ef157ca2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "184ca6d3-4655-4caa-9859-2c2b89a06f73",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db8d17bc-142f-4c7f-b10d-a8d6583e616d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd93c0a0-6130-43a2-98d5-5cc393f2800b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fdd7411-4396-417e-9e1f-f187f37fd9d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aca25e6f-c83c-40b2-bf63-9fd82526dd63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91fa3fab-d9ef-4e89-994f-8220dc46de4f",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "910155b4-c8f8-408d-8903-2efc9ec721f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b280e55-f0a8-49b7-9960-26d659d52dcd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6971705a-65cb-4d28-8849-48496d84a91f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f3e0f5d-9660-4af1-9171-d4c4c8d99624"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d384f6f-21be-4de8-8fe4-3efa74d4ab01",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fdb15d1-d968-4170-bcdd-b8427aef4e56",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "484b95a7-fe73-4397-a0f2-7a1ac68ed30b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe555084-5b2a-4561-9385-4eba172ed42d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dbd208a-188e-4549-9542-d10e7108b8d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08e2ba91-121d-4f99-9dd8-6dba063f0ace",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afca36f1-7047-44d0-8179-56de7b8d907d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9cb216e-3131-4549-bad2-74c11567dc5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70185ed6-9082-4d14-b0ed-8abfd1e0d2bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "807130b1-c258-4e59-9ae9-49f25384f557"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b93e6e24-773e-4fe0-937f-9df77800c123",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afda704f-28e3-4edc-bccc-f6fdfa53df4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02e926b8-51a1-4276-99d7-0482062bf2f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6c61459-1926-41d8-8597-a665ee7fa274",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50d78669-a153-488f-a2cc-ae1f86b4167a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b824640d-9843-495a-afa7-901516b0f79e",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dffa518-4111-4dd1-9ea5-3012ca10e8a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db413d49-1e0a-4766-b367-e3521840829e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f3f18cf-a422-40b2-9346-733854e0b902",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a803c6c6-965e-4280-9d16-214aad0729e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f70eb14a-3240-45a9-b9cc-c6556299dc17",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e776bd25-3a4a-4e02-aeb6-18a1bc93625d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f680e2ee-ac56-4986-8107-d43d84101145"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6352557-6770-4f3b-862f-4ffdac37e699",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d3caa6e-1582-4ad7-be00-25ed514a8799"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0dd5210-d8da-4222-97e7-2dea53330fb5",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bf4ce31-ae5d-4e16-b35c-a691207c70ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "318f8563-34a8-4463-8311-dd642badf396"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a0bb158-e0b4-474d-8260-8302ae7f2a10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbc9fbb9-6979-4c86-bb67-94df8cc1c6e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1439a5fa-c4f0-4cfc-90c1-6a673d5c3458",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2307866-c697-4050-9cc4-e5471222a957",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a0d70d8-8d3a-4adb-a998-0da501e3f6f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8666bf6e-78cf-4035-9f7e-b11b1a5cfcd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f3ce649-1e5f-467c-8112-ec0acb49acff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d256b54f-b124-4674-b744-7960b98e791d",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d19ba030-4e15-406b-91f8-a6b7b27e68ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ad8addf-59e6-444c-bcde-f9cab3177bbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cca0ac8-f754-4c3c-84dc-5b8622132d96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09910eb8-3565-4fb4-9075-4e731930e38a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a629da0-c846-449e-8985-723e192e913e",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbcc5402-aabe-447c-93da-a8a5bf7419bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7cb94e0-f2c0-436b-b284-ad7c32335889"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48d8c45f-1de8-4125-8eca-38a28cba54e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da206da9-2429-4522-baaf-c494c7abb8ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeb2d39e-4c46-4832-9b45-1377a097e9ac",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64ec7847-d965-40ca-9ac7-af8d0887556a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c45e566f-bfa5-48c8-b891-19966497db08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5bfd33a-2666-4534-b0b1-3dbca4b67bff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f5410a6-badf-4f1b-8622-ad93342d4d33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5deebbe8-f3d0-4a80-a2a2-57e5100cb92f",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c16eef0c-a66f-4c07-af1f-866c0cc8eaa2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d510e39d-2ff5-43d4-9c7f-d7aedf7d5c3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12da3560-e026-4eb4-ae5d-cbd2b1aea2ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a393585a-a5da-4e46-a324-9788a40f62e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b587e0ef-e6bb-4f3b-b590-72c8a2d0550a",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc763cad-1ff2-463f-80a0-48e082289926",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ca1e929-1c03-4d8c-b021-b2233a69f566"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7d91c6c-0e73-4de7-af31-5d13892ebc5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86bc9d2e-cca4-42dd-8b21-a406d17c7ca0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49f304c8-2807-4c51-b2d5-a68f029c1035",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3271ad32-d457-4b32-89b1-553c0e6c5299",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98592c85-11a5-4b74-98bf-b9b3707bd525"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8b14b1a-9b11-4e28-be5d-d749e160a93c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "172047da-a2dc-4d83-9aa6-81ed9236ba5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9024d603-b1ad-4e16-9e86-fb13eba094ed",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86c964ec-76c6-428a-99a8-d581aad6fa44",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26611023-4523-4e7d-9303-226cc3a9099b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9491ad99-3926-4ed2-8cf7-6fbe621182d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7112b4d3-f81f-494a-9f73-ebce065039d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd084551-890a-4551-8f68-9f78ac0b7f58",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0884f84a-b466-4ac2-9528-cadb1238cded",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6a29181-e502-42b2-ad04-b26681c11df3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1db8c5c3-018a-4fbd-ae7e-d71460239b3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f4abaa6-d9b1-47dc-afea-d2c7d5256cd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3436f270-304c-4c18-8357-100e94d58b0e",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d507cd2-2a90-4222-b48d-344703249a3b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d14ac9a1-43f6-44bb-baa6-70b4ef4f4575"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0804027b-4521-49c5-b390-6a3f451d0d3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39803399-1c24-47e1-a6e6-8fafe732e7df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68a461f8-fa13-4de6-96fc-f78ecb351b98",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90b4553c-3edd-4a14-ba17-282c4815e8fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9845507a-83e9-44cc-84fa-234bf696855d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "468cc74a-a567-40cb-9e8c-dfa3874080d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fba76af3-e1b6-424a-9912-27c553dbc275"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe07a112-9464-4efe-b421-98b3b44bb23f",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aac3c0ee-9048-4284-8f30-7efd740263bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ab8eed1-8563-4b87-a153-1a9c5d58d6f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b3e71ed-43bb-497b-afab-b1baf3c859ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82eb708a-c276-42dd-aa40-d4338c568b1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1823a261-ca6c-4391-9a97-39b8f7929a5c",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4d5d8d4-57b9-4831-896c-cc31d247a81b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4fedde87-08bc-49ab-b5df-cc01d8c68b96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaa7bb71-43e1-4917-80ac-cfedc94dfc65",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd0f5aa2-af0c-4edb-bbcb-de5c49836661"
                        }
                      }
                    ]
                  },
                  {
                    "id": "135ec936-71ae-4c9a-96e0-f636634af2c4",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22d87fca-281b-4cdc-83b4-d985050673d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55241604-97d7-4aa9-b484-637d322db0b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03ce2f82-4203-4d23-8cda-c385e1782ccc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "081cd92e-9264-4c61-9f99-07e41c7b83c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6a61c6a-a639-497b-995b-4f9bee69fc2e",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8219196d-5728-469c-9e7d-fcc6e0f0305a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b38591f-d42e-4ef7-82de-3b452600a573"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8c413a1-4a37-4737-9318-ca81d0ef6f47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7482fa45-0ce0-4b55-a874-90276e18f6ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a35cee01-8023-4708-8f44-7c411b8f73ce",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "106f8775-fd48-44a5-a5c7-5b5a2d68a1aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "997abaea-a1d5-4113-a142-acfb8b6fe06b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61b21641-5693-436f-9d43-a65c06cc5cf0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96cd45ed-2586-4242-a320-8f8c6a177730"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f20c4a8-267e-44e9-b87e-f99f4c8f8f79",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "616a47ab-bc6f-411d-9452-55c9180a9852",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3dc1f801-2ede-4986-97fb-1ef755df7bd4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07da85a5-f58a-463a-a290-8c5424d60a99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29957782-be9e-4be3-8840-023b3cea9037"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05ea11d6-54e4-4280-a7ba-f4bd8d2ef6cb",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c713e0ab-f43b-4c8a-b008-6975d52ea30a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "156bbbc4-fa33-4add-84f6-5d19c9a3503d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06da4923-ce3b-4adb-a4b8-abfcc3ad4ad4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "988cbaf1-73e4-4788-9c34-24c1ed646bc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6673d1b-3eed-48b4-b878-c5271d46104f",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58985af2-0ed2-4e3f-9abd-ed2130d5a200",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44d32d4c-00cc-4e08-93ba-107b01a1430a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b6455a9-87a3-46d0-83fb-cd4464276655",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57b4afc8-45e1-434e-8202-a04683d7b557"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b208856-92c8-4025-8f1d-8acf00fe30b0",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e562d57b-d295-427f-860c-4be1dbc508e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8819d9c1-7a66-4640-918d-a81aced88193"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f783852-3e69-4fe6-98f8-bd647948cadc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "875b82af-3d57-4271-b1de-00b3cb4adecf"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2cc18796-3aff-43da-bfca-dbbc00a63df0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e2c899e6-615e-40bf-99ff-51683319ceea"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b5847504-03e1-45be-b10f-a5698b5fd39f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "347b01a2-41a2-447a-bc62-0b0723ba2d08"
                    }
                  }
                ]
              },
              {
                "id": "42b9b1b7-3d75-4389-860e-d892a86be249",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f7a959ee-2e28-4b1e-bcf6-94a239337c6b",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a8c4f19-4de6-4d00-9b49-24ff630711ed",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "6e92569b-7b83-43ce-8a78-9b2c70c8fa9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ad91871-31ec-48d1-87d6-ae984b0969fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "914884da-1c41-4054-843c-745fe7cc830b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ba3d09f-87a9-43eb-b326-40e9fd510372",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c743624-b0e8-4889-837e-dd35d0b4160d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "3105cae0-301a-4ec5-9162-e95657427f7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "692dbae4-95b8-4521-af9e-aca0d8828d3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fdfe3ae8-6389-4235-be13-cf8756bced61"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "220ef0d6-3652-440c-af22-8e4ce4833b66",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b3b74bc0-3f7e-43b4-9797-ac83674a284f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ac6a27df-c6d5-4d62-81ab-02e0c2fd96a0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "28eb38b8-d556-46d6-8562-b51d0f5f0d0c"
                    }
                  }
                ]
              },
              {
                "id": "8c82203b-765a-4986-8ace-d6e79ddc5d08",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "4ca2084e-d6f3-4bbf-9891-69e97edf6e9c",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4a091ed-179e-4fe6-a0d7-aba818f9ef0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "3bf6f666-5425-41d1-9a79-e642edda4cee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fb3b4f6-fa9e-4160-8741-8805f4515e61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a49c3aa2-4b6c-4ef8-8fe1-ceb5afb2ea40"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "f728f85a-8022-4525-9990-a6bbe65aa6bb",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8a876407-3ab5-43ad-860c-5c4e91c99eac",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f21148a6-e7a4-4428-87d7-c12c4414fa8d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "8960d195-bb6d-4639-b70a-e3630cd13ff7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ee4935b5-b529-4660-a240-e26d0d091675",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bd655895-ffe0-4790-9047-8fbac6038199"
                    }
                  }
                ]
              },
              {
                "id": "b82ba5ae-e806-4b57-a7cf-0257b1c89096",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6aa677d3-1ea7-448b-bb89-fda2a0046661",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "f568bff1-bd9a-436f-8536-de6cf29448a9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6d80a4d4-90f6-4325-9b73-7aa68fb55265",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "49023f5d-5523-4202-a674-fc6990a2e20d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "454ada51-1004-4c55-9200-acc7beccebe9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "cbccc38b-6fd5-4680-8209-dac64763ee68"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "860cfa0f-8acb-4a6c-ae83-f93f57b5c11a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4d1a1616-8609-49d9-b9b8-69caa6fe940c"
            }
          }
        ]
      },
      {
        "id": "ea6694df-1aa9-494f-bd65-e651be3ce7f2",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "27c6abf1-92a8-4f21-a477-3854a4d4a6fb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a8b5e77d-d7dc-4b5d-85ff-61feed58eb4a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cc2b14f8-41e8-4f09-84c7-1e02d52fa254",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0a129c9-5c18-4d0f-ab04-0f7415fe4ccc",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a5f38ef2-8052-4b78-82b3-e8ac5b91e737"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f23f5f13-c789-4597-a5cb-cd357f4f91cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4beca7a2-2641-4dbc-b22c-92ae403b828f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d8bf0d4-df29-4e04-a85b-f4e6c4a1057f",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b030e409-9eec-439b-a1d5-5340f479837e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "18063483-4615-43c6-bace-14793582cd11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98320eb1-848c-493e-bde6-b0d9063d08c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c84dd928-6a79-4dd8-a4d5-64ee73bd680e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "74063306-6c26-4c92-a528-7a64914ca206",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "777c6df9-f1bd-4da4-80d9-784140ddd0ab"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4b59b0f4-93d8-488d-98bd-5a7b93df5189",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1b9c6516-509c-40b0-9976-d5fdfd0b1da3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b37f83f4-02ee-42e4-ab96-e592bfe9bdf7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "f8d12d27-f9da-42b8-b678-3016069243a5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6e9bb024-2fd4-4938-b4de-ceaf4c14b8b9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "64b5fa35-1e13-4c97-b650-7b8d853834b6"
            }
          }
        ]
      },
      {
        "id": "df3c45ae-5aad-4c67-a265-1408aeb4d80d",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "326d1588-790b-4334-9416-1f0266ab5f24",
            "name": "Negative Testing",
            "item": [
              {
                "id": "34d9cca8-5b29-4ddf-b714-86c1c34f9228",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a107850a-7463-41bb-a04a-f5f4a9bd4197",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdabb156-2a20-426a-82fc-d881081b7bf7",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cccddb74-3082-4181-85fa-16697f61498f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec92c2b5-f853-426f-a1c8-affff9de093b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ba808578-8081-4540-a58b-5b3672fe7c73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b32484ef-7871-4064-b616-028244563c3c",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87c3afba-cfca-41cd-9749-1b621c758483",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "afaad778-91eb-4ddd-a3ca-cfdb9997e26a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c50fd0c-9da4-4885-89a7-89bd0a576adb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cab0b8de-429b-4210-87b1-5ba64813810f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "16d8f805-5667-4973-949a-e0ae9f646fda",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6517e90f-0269-4fb1-a5aa-2e4100166599"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e788fd82-5a99-468f-9e75-4aa79188f39f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8f520609-19bf-4ee2-8bea-fc23ee9dc7ad"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "889a6bae-480c-41ea-a205-22f2557c42da",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ff06a717-11e5-4e4a-a153-9505a0bce69a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a0406e14-385f-4d36-9155-ef2842b029cd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2838403d-eb29-483a-9e8c-bcea097b7dcd"
            }
          }
        ]
      },
      {
        "id": "00b94738-1f15-4788-a01a-3f027c95456a",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "0947c9f6-17f1-4f8c-b18f-e68b16a7640d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bd5ebf06-2464-4ace-a7a7-083be2d2ca36",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1d070ec1-08ab-48b0-b7cb-9467df79debe",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52b4b0da-b599-42a8-84bd-4199de249687",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3a41040b-72a4-4d91-a7fc-3da36e8459c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdbe4475-0ed6-4b86-8296-432d9185c069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7fe721f0-a301-4405-9b57-3436ed08a0db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bbdae1d-7249-4b05-b039-d1935e11df1d",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbf31217-2522-4027-8b4a-98d6c96645ca",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "76bd0032-41bd-42ec-9c5a-62fcaccf7c73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed330336-5526-4705-b3f1-f885bdb75113",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fc3f6c89-d641-4575-8b43-634b315c8c84"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "06891277-a43e-4cc4-9491-fbe67f2a8b59",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9ed96498-cb71-4dbe-94f7-a794f41d8964"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "70eda84e-1500-45b0-8b86-3ad10833d1d4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ed8665c0-0a71-426d-b4e3-39bb003c8797"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a6630c30-8034-497f-be1e-9b25fc72ce11",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8a44a76f-c7de-4bfe-91cf-2cfb2abeefb1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6280a619-9b1a-4636-85a1-ee84dbbe40a0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dbacf159-8899-4a28-81a8-c6f555c5361a"
            }
          }
        ]
      },
      {
        "id": "5ef7deb8-865c-47c3-8317-b79663af8d0e",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fcd3131c-15d3-4c80-abe4-1ef026b1eefe",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "da6df3b8-da84-49fa-b045-bc3b28d52b16",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "db14243b-612e-422c-a973-8b8637ff74b7",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "47741dac-66c4-443f-ba46-66f7bb696668",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "245477e2-4b94-4f2f-bb1a-4f8101505958",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 258.36153846153854,
      "responseMin": 10,
      "responseMax": 10084,
      "responseSd": 852.7366849768596,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1683592638881,
      "completed": 1683592716847
    },
    "executions": [
      {
        "id": "480cdbf8-08f2-4348-a8b9-d935969c99a9",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "cd48a403-7dfa-4efb-a296-7c70c4806e06",
          "httpRequestId": "0bb8e328-f364-476e-b9c7-bee2ea69171e"
        },
        "item": {
          "id": "480cdbf8-08f2-4348-a8b9-d935969c99a9",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "c4cadacd-706a-4488-8dab-6d6888bd6443",
          "status": "OK",
          "code": 200,
          "responseTime": 61,
          "responseSize": 0
        }
      },
      {
        "id": "7f9dd60e-ba48-44a3-b196-70d6fc60171f",
        "cursor": {
          "ref": "d289323f-7097-4187-9ac0-6f4de6a9bc12",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "307bfc7e-a659-464c-885c-8d3c81a8326b"
        },
        "item": {
          "id": "7f9dd60e-ba48-44a3-b196-70d6fc60171f",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "6fd3f073-92cb-4649-9415-adbc9bde9ff6",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "8439e02a-5f6a-4a3c-8c5c-3325bde76aaf",
        "cursor": {
          "ref": "3760e248-68bf-4c7c-addb-33e176c563c8",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "04cb6354-fa4f-4fa9-88b5-1f13dc99588a"
        },
        "item": {
          "id": "8439e02a-5f6a-4a3c-8c5c-3325bde76aaf",
          "name": "did_json"
        },
        "response": {
          "id": "c3a32b5b-9338-48be-94d9-3bc4d3cac7d0",
          "status": "OK",
          "code": 200,
          "responseTime": 349,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fa6221b-11c5-41c1-a89c-0ea006bd4c3a",
        "cursor": {
          "ref": "8560db2a-b58d-4655-8e90-a1f84489dfd9",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "6a86e863-4c4e-49c4-beb5-92657e5e526a"
        },
        "item": {
          "id": "9fa6221b-11c5-41c1-a89c-0ea006bd4c3a",
          "name": "did:invalid"
        },
        "response": {
          "id": "2b014a82-fcbd-48bb-afca-0b290a683ff2",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1385,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "9fa6221b-11c5-41c1-a89c-0ea006bd4c3a",
        "cursor": {
          "ref": "8560db2a-b58d-4655-8e90-a1f84489dfd9",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "6a86e863-4c4e-49c4-beb5-92657e5e526a"
        },
        "item": {
          "id": "9fa6221b-11c5-41c1-a89c-0ea006bd4c3a",
          "name": "did:invalid"
        },
        "response": {
          "id": "2b014a82-fcbd-48bb-afca-0b290a683ff2",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1385,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "34447adc-f40f-43d6-805f-bb0ed74f24a6",
        "cursor": {
          "ref": "2f9468f5-7c7b-4f4b-9230-7b939a1fef28",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "f434c242-791b-43fe-aecd-911dec7e1ddf"
        },
        "item": {
          "id": "34447adc-f40f-43d6-805f-bb0ed74f24a6",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "467ac85d-3f59-42d6-889f-4f44a442957f",
          "status": "Not Found",
          "code": 404,
          "responseTime": 48,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f7ae8c8-9ba1-4a30-a690-fb63a239c4e3",
        "cursor": {
          "ref": "8600b228-51cf-4ecd-af33-1269132c2d43",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "4262bf96-d268-41cf-89da-04ad6139f444"
        },
        "item": {
          "id": "3f7ae8c8-9ba1-4a30-a690-fb63a239c4e3",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "cd5498f0-4331-490c-9aed-e911b1ec9c5e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 41,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af13976c-8b53-4fc9-8978-a123dcf69075",
        "cursor": {
          "ref": "d87b5be4-8586-4908-83bc-db8b57d0bef3",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "9bc847ed-76e0-4e8a-ad97-16806ac27410"
        },
        "item": {
          "id": "af13976c-8b53-4fc9-8978-a123dcf69075",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "fa24d7ad-afe0-40b9-a2ee-ac059263e966",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "6552e754-756d-4df7-8728-a2816b9c81a1",
        "cursor": {
          "ref": "09d7b8a9-720c-40bd-922f-41979e76c385",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "d8f258dc-99b4-4520-aa13-7832bbab4bb7"
        },
        "item": {
          "id": "6552e754-756d-4df7-8728-a2816b9c81a1",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "81b1dcb6-01fb-42c1-8f62-0e5585e6b01b",
          "status": "OK",
          "code": 200,
          "responseTime": 128,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "6552e754-756d-4df7-8728-a2816b9c81a1",
        "cursor": {
          "ref": "09d7b8a9-720c-40bd-922f-41979e76c385",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "d8f258dc-99b4-4520-aa13-7832bbab4bb7"
        },
        "item": {
          "id": "6552e754-756d-4df7-8728-a2816b9c81a1",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "81b1dcb6-01fb-42c1-8f62-0e5585e6b01b",
          "status": "OK",
          "code": 200,
          "responseTime": 128,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "fe5cca34-6ed3-4572-8f55-0fba52f6cf8e",
        "cursor": {
          "ref": "1f8082c8-af6f-4736-8869-9d74a53a14a3",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "3c3f4cfd-cac9-425f-9954-af2c86cc647e"
        },
        "item": {
          "id": "fe5cca34-6ed3-4572-8f55-0fba52f6cf8e",
          "name": "identifiers"
        },
        "response": {
          "id": "126cefbb-b3bf-469f-82a6-ffda9e45997c",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24ab53b3-01a4-4e6f-b8c9-2de619adef92",
        "cursor": {
          "ref": "cd7911fe-e26b-4356-bf70-6f7ff82ba505",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "067632f6-8c59-4a54-a49f-c5fee346f2d4"
        },
        "item": {
          "id": "24ab53b3-01a4-4e6f-b8c9-2de619adef92",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "d90a8c48-40b0-4a8f-8dd5-d59379d05894",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24ab53b3-01a4-4e6f-b8c9-2de619adef92",
        "cursor": {
          "ref": "cd7911fe-e26b-4356-bf70-6f7ff82ba505",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "067632f6-8c59-4a54-a49f-c5fee346f2d4"
        },
        "item": {
          "id": "24ab53b3-01a4-4e6f-b8c9-2de619adef92",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "d90a8c48-40b0-4a8f-8dd5-d59379d05894",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "139ee0c1-bb13-45f6-a1d5-0933be518791",
        "cursor": {
          "ref": "db400b2e-bd95-47f4-9e68-94857c56a222",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "595e9327-65c5-4e47-a324-bbd3daaec855"
        },
        "item": {
          "id": "139ee0c1-bb13-45f6-a1d5-0933be518791",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "f04197b8-09cc-45bc-a229-85ff834c32c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7687de05-0bb1-4ad2-a188-145fa5b35157",
        "cursor": {
          "ref": "5797bb70-3fff-4de9-a657-0771236497eb",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "0a794792-71c1-4465-a165-73ab5771d1a7"
        },
        "item": {
          "id": "7687de05-0bb1-4ad2-a188-145fa5b35157",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "69780bf0-e357-43b0-862d-16cfe5d3700c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28b1919d-0f59-497d-bfb7-909a8cf97267",
        "cursor": {
          "ref": "361d6de9-8b88-4d9b-99dd-3422222662ab",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "eb8072de-7c6b-4be5-8a00-75e84d45f9d3"
        },
        "item": {
          "id": "28b1919d-0f59-497d-bfb7-909a8cf97267",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "8fe6d508-88c6-4e95-bca1-a63388629d52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3272df3e-0932-41f6-bb6b-5ff1cf19b8cd",
        "cursor": {
          "ref": "5336981e-a15e-414a-91b2-ee1f0eb03646",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "54f0717a-b3ab-4c69-9b39-09935dddfdea"
        },
        "item": {
          "id": "3272df3e-0932-41f6-bb6b-5ff1cf19b8cd",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "263cbea0-2881-4f10-84b6-c55043c49ccd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72fb5b11-f8cc-49d1-b18c-3f91cb52e8a1",
        "cursor": {
          "ref": "3580a393-c47c-463e-9f96-776dfc01c734",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "1b604cd2-9c8b-4161-a3da-e090b64fd643"
        },
        "item": {
          "id": "72fb5b11-f8cc-49d1-b18c-3f91cb52e8a1",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "2e05e2f9-e358-42d6-b377-6c79524b10b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f68f242c-9808-4bd1-8111-fe3b8299eb2c",
        "cursor": {
          "ref": "0edfaf4f-759e-43ad-9ed0-36269d09e130",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "0bffd534-563b-4790-a11b-0d170b904d0e"
        },
        "item": {
          "id": "f68f242c-9808-4bd1-8111-fe3b8299eb2c",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "ea9d5002-0ec6-4eae-8103-78db06cdb023",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9cf3ac0-3abc-451d-9bf0-159358d60e14",
        "cursor": {
          "ref": "9df484b3-65c8-404d-a870-ca76fe9f8b15",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "6c55205d-536a-4c70-84a0-626e11d78536"
        },
        "item": {
          "id": "e9cf3ac0-3abc-451d-9bf0-159358d60e14",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "cd2a43a8-b75e-43cf-8674-5fe773628dcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9384f024-50bb-4097-b676-e6f1bb24724b",
        "cursor": {
          "ref": "4cfa75b4-c2d1-4d00-b86b-49076957985a",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "01719248-612a-4d62-9b7a-837a27d6a039"
        },
        "item": {
          "id": "9384f024-50bb-4097-b676-e6f1bb24724b",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "85284ad8-3b53-4ffe-a991-1d6dc107d886",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49f24571-06ad-400a-b5bc-8a26cec60744",
        "cursor": {
          "ref": "cebbdfbe-8831-4ca0-93e1-a0a103e0a8db",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "adce7ded-9ae0-4c4f-8d4d-19cd44f8b0ee"
        },
        "item": {
          "id": "49f24571-06ad-400a-b5bc-8a26cec60744",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "055d17ef-6798-49f8-81bc-50cb35b75064",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad75c888-088a-4b2e-a6e5-d167c39297ad",
        "cursor": {
          "ref": "32d84fd8-ab5f-4622-9b5b-a2036a2bb17b",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "a61f0cc4-e7c5-4762-8adc-05bf0d143518"
        },
        "item": {
          "id": "ad75c888-088a-4b2e-a6e5-d167c39297ad",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "726626ec-efe0-47c3-90b5-423f03c3347a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6ea715b-2644-43c4-9d0d-aec2465949c0",
        "cursor": {
          "ref": "4cdec8ac-6c54-464d-bea4-feb505c4aed2",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "dbe3ccd3-5cb4-49b1-852f-37195b6e5e00"
        },
        "item": {
          "id": "d6ea715b-2644-43c4-9d0d-aec2465949c0",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "37d9bfba-27e1-42b7-9074-46c6ea81fee1",
          "status": "Created",
          "code": 201,
          "responseTime": 823,
          "responseSize": 982
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "7f3e8c97-410b-44ec-b9ef-502ecf64c3ed",
        "cursor": {
          "ref": "7b47bf60-ad91-402a-a2e1-58b3ae9ffa4f",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "73ab07e3-6cf8-49ae-a289-80b77cccdfe4"
        },
        "item": {
          "id": "7f3e8c97-410b-44ec-b9ef-502ecf64c3ed",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "a320c272-d6a6-4ed6-8867-9e8535981601",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6fbbeca-07df-4edf-9169-e6afe8327525",
        "cursor": {
          "ref": "dd3b98a9-f220-4bc2-b0e2-2719047ba58b",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "638bc1f1-0465-42a6-820a-ee31956ece1f"
        },
        "item": {
          "id": "f6fbbeca-07df-4edf-9169-e6afe8327525",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "fd80eab1-ed2e-41ac-b9fa-c242a3135596",
          "status": "Created",
          "code": 201,
          "responseTime": 10084,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "d92d3719-8170-4b64-afde-ace663c0b407",
        "cursor": {
          "ref": "51d63fe3-6b2f-4c70-b4fa-2fc81959d034",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "2cee4827-decb-4ff7-b45e-333366277149"
        },
        "item": {
          "id": "d92d3719-8170-4b64-afde-ace663c0b407",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "9c334a89-aecf-4d5c-869e-e064c57f7452",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5901fb7d-7d9a-44c1-b4b7-545a274e8e6f",
        "cursor": {
          "ref": "6ac3975c-5c08-49cd-9b4b-1e2d2b4febe7",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "75fc7b2a-b629-430a-baad-9c86174a6c8e"
        },
        "item": {
          "id": "5901fb7d-7d9a-44c1-b4b7-545a274e8e6f",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "589170ce-0fd4-4a54-b708-6e2d34cad0bb",
          "status": "Created",
          "code": 201,
          "responseTime": 3526,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "798dd848-0403-42f1-b4db-594d496bb338",
        "cursor": {
          "ref": "74099125-f6c9-4dca-9052-a112cd853775",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "745a5dc4-e3ab-4711-872e-cc14d0596d3a"
        },
        "item": {
          "id": "798dd848-0403-42f1-b4db-594d496bb338",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "6954ab73-7c95-474a-9f20-285fe509e02f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5891a3b8-b421-4659-b63c-5a6d3ccbc159",
        "cursor": {
          "ref": "02a67160-3096-40af-8120-9708d1136cf8",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "ffa75a8f-0597-4b1e-a7d7-738e39d65d22"
        },
        "item": {
          "id": "5891a3b8-b421-4659-b63c-5a6d3ccbc159",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "ccf05a2c-17f0-4182-8a94-75d9681e9bf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46a9b093-e921-4963-b332-8910eef58216",
        "cursor": {
          "ref": "70a05644-d525-4eb4-9727-a9c162809a3a",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "c3de98fa-3ab1-4eb4-8e3d-7a2bed2e7b5d"
        },
        "item": {
          "id": "46a9b093-e921-4963-b332-8910eef58216",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "17411c5d-ed16-4c06-a6af-dab38f31e73c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7eb3ded9-8207-4f0b-a962-d0c173f8524c",
        "cursor": {
          "ref": "6073cab1-6e19-496e-9938-f153f74daf1b",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "6f78c7f7-2bff-4d92-a02f-73954ce40ce3"
        },
        "item": {
          "id": "7eb3ded9-8207-4f0b-a962-d0c173f8524c",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "266ac4e3-3a00-4bc0-864a-2809d6c33dec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d9b5636-9688-48d7-b03b-ae5a2d9b0d55",
        "cursor": {
          "ref": "9162789c-9b3a-4e0d-b1a8-73c386bc18d0",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "31ad97a5-6f34-4537-ae4b-cbe00ea87c41"
        },
        "item": {
          "id": "0d9b5636-9688-48d7-b03b-ae5a2d9b0d55",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "712b955c-3148-45f0-afc7-7027472e930d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2463c9a3-ed78-423d-882d-f43da5773ff8",
        "cursor": {
          "ref": "694e75ba-d9e7-4d64-82d0-682fe010ded1",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "bea58c2b-76c7-4a05-875a-160b31496243"
        },
        "item": {
          "id": "2463c9a3-ed78-423d-882d-f43da5773ff8",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "dbe2fbde-4c19-4823-9630-b274ea2aee0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d50f6c53-56bf-4a79-831d-2cdc212705b1",
        "cursor": {
          "ref": "ddd80015-0f4b-4b26-b5d7-0b2fb654564b",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "005a86fc-9969-49c6-9df8-49250ff5210d"
        },
        "item": {
          "id": "d50f6c53-56bf-4a79-831d-2cdc212705b1",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "bab7557b-e33b-4407-8523-38ff5c3ed279",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cc9695b-4757-4985-ba35-7970c84ffcd9",
        "cursor": {
          "ref": "becd8b22-88f6-4fe0-ba43-13fc455ae76b",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "1e6b4c13-660e-40bf-a01c-2c77d1ddc8eb"
        },
        "item": {
          "id": "1cc9695b-4757-4985-ba35-7970c84ffcd9",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "7aab60a4-8397-4ef1-8da5-33f5d3de3b27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "998fa5da-b7e3-44a4-b065-1d224b6a2ebb",
        "cursor": {
          "ref": "06eb1cee-8457-4c21-b4d2-6d085c2f2933",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "2722725b-c8cb-41da-bcca-d2557ca6e006"
        },
        "item": {
          "id": "998fa5da-b7e3-44a4-b065-1d224b6a2ebb",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "f6b19984-79b0-4d10-88ee-a9ef678d8c13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d544fd74-16ab-4a5d-9b1f-a771a71f2f97",
        "cursor": {
          "ref": "e718ce7e-8451-413e-8312-bb1c578cfd02",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "ace53651-8809-49f2-8a67-12855f98edfb"
        },
        "item": {
          "id": "d544fd74-16ab-4a5d-9b1f-a771a71f2f97",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "66a9948b-c57a-4f45-bac8-4a51e011f15c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af1aa24c-25b9-49ab-9160-3a2759a302b9",
        "cursor": {
          "ref": "e26d9567-5710-4a92-bb06-43604e9b36e7",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "d553088e-d39f-4d71-9431-e237efc84927"
        },
        "item": {
          "id": "af1aa24c-25b9-49ab-9160-3a2759a302b9",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "83f51428-adfe-425e-8287-74577bc0b60a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a5e9382-5d78-40e6-b3b3-0b0820951ed9",
        "cursor": {
          "ref": "6dce127b-15e9-45e3-8878-aec8092cef3c",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "416f384c-5a1c-4944-96f2-79e6ce92e61f"
        },
        "item": {
          "id": "9a5e9382-5d78-40e6-b3b3-0b0820951ed9",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "57c33c52-3990-4c7a-8457-833d3a2c63de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4ffbbd3-df81-428e-ba24-8470ca9cfc42",
        "cursor": {
          "ref": "739de3a2-a456-4114-b0a7-7e709a314fe8",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "a072d890-0730-4a9c-8bf0-b7b83471385b"
        },
        "item": {
          "id": "c4ffbbd3-df81-428e-ba24-8470ca9cfc42",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "2b2d99d8-61f3-49a5-b4dc-066b67afb245",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "255e57db-16ec-4447-bde1-35fc9c3a5c5d",
        "cursor": {
          "ref": "26527d3d-11a8-4a67-b7f4-2a2114250d7e",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "b43b4a49-4c21-4747-a7ce-e54e18e43e08"
        },
        "item": {
          "id": "255e57db-16ec-4447-bde1-35fc9c3a5c5d",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "4a578bdb-b3fb-4ea2-aeed-c477a8cdbafc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ceca6403-132f-4d2c-9b9f-8453b0b0f260",
        "cursor": {
          "ref": "f88e494e-e2e6-45fd-a66a-037698f534bd",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "976a1c89-a24f-4613-ab0f-5670f87b8a6b"
        },
        "item": {
          "id": "ceca6403-132f-4d2c-9b9f-8453b0b0f260",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "35093be6-5d88-4bd6-8b6d-687cd65f0d73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0450836-4c11-446e-80c3-41cb7c098b17",
        "cursor": {
          "ref": "802fb7e5-168f-4266-84c7-79652c8e3e52",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "086644f6-81cf-46ad-95e4-1449c4822428"
        },
        "item": {
          "id": "c0450836-4c11-446e-80c3-41cb7c098b17",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "ab6e661c-01bc-440e-bf07-d62d4786d737",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f301c1ef-cb79-43ac-aa16-23d0789c40ce",
        "cursor": {
          "ref": "c3c88872-7afe-4014-9944-edaa8ad8b5eb",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "6e603b3b-7342-46cd-af78-bbbf39ef9767"
        },
        "item": {
          "id": "f301c1ef-cb79-43ac-aa16-23d0789c40ce",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "89714523-bd6e-4967-b9f8-acb53b35971d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 170,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "854e766e-cfb5-4235-8648-9ed95e88d5a8",
        "cursor": {
          "ref": "90ce9542-9552-470b-bd6a-e5f3cfe7a1ee",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "cacf41aa-55fd-493a-8e01-6af465134b97"
        },
        "item": {
          "id": "854e766e-cfb5-4235-8648-9ed95e88d5a8",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "a64316b1-56fe-4e9a-bb90-551d492b3e6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5129e1e9-69ba-4b90-8c47-9b52e225cb92",
        "cursor": {
          "ref": "31c05b18-1721-464a-a6a1-d5d65680fcf8",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "d6a7065e-3727-4bf2-bf10-33d4dea29163"
        },
        "item": {
          "id": "5129e1e9-69ba-4b90-8c47-9b52e225cb92",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "acddfeab-5cbe-47ae-816d-472ec68e97c3",
          "status": "Created",
          "code": 201,
          "responseTime": 2419,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "655133cd-4cdf-489e-bd2d-5f34f7a75f57",
        "cursor": {
          "ref": "f13aa5d4-35df-4b61-bd5d-8270bfea46a1",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "6b3a0271-3854-4fd2-bdf3-2ffd2b4ec75a"
        },
        "item": {
          "id": "655133cd-4cdf-489e-bd2d-5f34f7a75f57",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "7db7f852-30a7-421e-9129-8792716cc4e1",
          "status": "Created",
          "code": 201,
          "responseTime": 2479,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "1c31a770-aaad-4c44-b930-122c4caa36ee",
        "cursor": {
          "ref": "af88b015-debc-42f0-8184-634f22ce8891",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "afb93740-146e-43ee-8fa6-63cb4900e7dc"
        },
        "item": {
          "id": "1c31a770-aaad-4c44-b930-122c4caa36ee",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "48766b77-1de0-4a87-b436-39634537f0c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f152ad78-be2b-4030-be80-1839a3eac326",
        "cursor": {
          "ref": "b9bd490f-5a08-440a-aa03-b1aa82d6d250",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "e30eeb0e-f4b9-48bf-99d9-6c0e246932e1"
        },
        "item": {
          "id": "f152ad78-be2b-4030-be80-1839a3eac326",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "24793a1e-5342-41d9-9699-cf3f05697457",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "141f6dc6-5ae5-4624-a75a-018f56d4e40a",
        "cursor": {
          "ref": "3b96324f-4fd4-43e4-82f5-7b143c18a6eb",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "3b74a823-95ae-4485-b9de-0d4758ddf350"
        },
        "item": {
          "id": "141f6dc6-5ae5-4624-a75a-018f56d4e40a",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "b7e78a07-ee48-478c-86c5-c4f7aef536ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52cdb0b3-f419-4557-9d6e-8552a4956d1e",
        "cursor": {
          "ref": "c7827b33-9e73-4bd1-9f48-7859098bbc3c",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "bb7bb615-2394-4a1d-9e6a-e54995cb15fb"
        },
        "item": {
          "id": "52cdb0b3-f419-4557-9d6e-8552a4956d1e",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "7674d01c-6e07-4720-b01d-aa76ef9c8b57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fe8f79b-8de7-40bc-8d05-befb8fdd3e32",
        "cursor": {
          "ref": "9a1a4699-7b71-4200-b364-a239b42e812c",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "a7bee84e-a75e-41ff-9b8b-5f4c35ac1ba1"
        },
        "item": {
          "id": "2fe8f79b-8de7-40bc-8d05-befb8fdd3e32",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "7bc1e812-1a2d-47f7-bb57-c720f0c3f3cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98fe35a4-c5da-416e-89f4-cbfa4073be5d",
        "cursor": {
          "ref": "171ad6e5-4faa-47be-9e88-bfb19ac7d5de",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "f1bc48e0-e5b6-4d13-8cab-23b365b48cdc"
        },
        "item": {
          "id": "98fe35a4-c5da-416e-89f4-cbfa4073be5d",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "978a5906-cba2-487a-b35d-753f5452b22c",
          "status": "Created",
          "code": 201,
          "responseTime": 2369,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "28936a09-8935-4588-94c0-5994fc6c1569",
        "cursor": {
          "ref": "72856fbd-9576-4149-ad8b-173147a1ba88",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "ab008669-4f84-4946-8112-260a4077d2f7"
        },
        "item": {
          "id": "28936a09-8935-4588-94c0-5994fc6c1569",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "eafed3bb-602b-49e7-897c-1972036ecfe0",
          "status": "Created",
          "code": 201,
          "responseTime": 2514,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "ca2ea8c1-66b5-4942-b6d4-4234f6c20ec6",
        "cursor": {
          "ref": "49157359-599b-400f-8926-493466cf9f93",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "345717a3-ed4b-40c4-8ba1-22faf5b524e8"
        },
        "item": {
          "id": "ca2ea8c1-66b5-4942-b6d4-4234f6c20ec6",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "656ba2f9-cf4c-41c1-b2a4-dd91a2d56118",
          "status": "Created",
          "code": 201,
          "responseTime": 2547,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "f7b236e3-2440-4363-8ea8-54e112ac4d59",
        "cursor": {
          "ref": "1a50e4df-075c-4b80-8134-91c5e4737cef",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "56a83934-69f4-495b-a4a1-482856831d45"
        },
        "item": {
          "id": "f7b236e3-2440-4363-8ea8-54e112ac4d59",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "1fdfa10d-af0f-40b8-895b-0a5b9d5ae5e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "742a139e-5726-405d-9184-2165a4eb94c4",
        "cursor": {
          "ref": "9805d1fb-b924-4c75-b326-4ee67d66fda7",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "c194a393-0263-4538-a581-89fcf2855c33"
        },
        "item": {
          "id": "742a139e-5726-405d-9184-2165a4eb94c4",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "5c17c1d3-acda-4945-b1fb-5c83566efc9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 132,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3363eceb-a895-4724-913a-158f7fc8c75c",
        "cursor": {
          "ref": "6a368540-b060-48f3-a3bd-bf5b22ca2eff",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "52aa9b7c-dca5-48cf-8f40-9f20dc9b97e4"
        },
        "item": {
          "id": "3363eceb-a895-4724-913a-158f7fc8c75c",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "28dfce7d-331b-4c4d-a29d-2b11261b2bfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fb2e1ec-1d31-41e6-81f7-2d9bfcc51d93",
        "cursor": {
          "ref": "b410a1f1-31f5-4246-90a4-9ea7786a927c",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "fc146703-d26e-4dc5-ba28-b39fbd18b253"
        },
        "item": {
          "id": "8fb2e1ec-1d31-41e6-81f7-2d9bfcc51d93",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "d474b9a4-aac3-4b30-b79c-2e34b448a85f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14368d24-022c-46a2-8490-bfccc7b0956f",
        "cursor": {
          "ref": "3091c402-01dc-4c59-9d9d-1b558d8f4ef0",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "e5699449-b3a0-424a-8319-9be2d58f7eda"
        },
        "item": {
          "id": "14368d24-022c-46a2-8490-bfccc7b0956f",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "d1b4b83e-5aab-4e0e-be1f-fe3fca2bccdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b09fe7a-e2c1-4c1c-add4-bb18bd892fca",
        "cursor": {
          "ref": "952b8bde-dbd5-46cb-9252-f835b73b87fb",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "e737654a-bb9d-40a4-a660-728470dafe6f"
        },
        "item": {
          "id": "7b09fe7a-e2c1-4c1c-add4-bb18bd892fca",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "7c83e07b-0564-4ba3-a683-22e00222abb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 215,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1634e426-1a32-47d8-acf2-b7bd5d94890c",
        "cursor": {
          "ref": "219a4ee2-158d-42e8-8396-299c1e9765a1",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "41c78e89-b650-4895-b24a-51124069013f"
        },
        "item": {
          "id": "1634e426-1a32-47d8-acf2-b7bd5d94890c",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "5311e4d6-3aa8-4c57-b608-b607cdc81a0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe1caa50-cc51-48ea-ac28-a030e46627da",
        "cursor": {
          "ref": "b18d51e0-e501-40d6-b4dc-2881e04a845e",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "d2714dda-592b-40ee-a141-fe068807ac96"
        },
        "item": {
          "id": "fe1caa50-cc51-48ea-ac28-a030e46627da",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "442a6c37-e9e1-4696-8e6c-8ca34b1d439b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c549642-66e2-4c19-8ac5-f0dc2183519e",
        "cursor": {
          "ref": "3de43d3b-358c-4cba-a3b1-94c20853efbf",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "cf583af4-1556-4fc1-bb9c-8bff3c4ba965"
        },
        "item": {
          "id": "0c549642-66e2-4c19-8ac5-f0dc2183519e",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "a2e8d902-25cb-49b5-bc4e-cf879448b4dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d47d84c0-25ae-4c23-b2fe-b8d96f650c9b",
        "cursor": {
          "ref": "1646e696-6784-4e3d-a948-acaf644e4194",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "c3c85390-cbe9-4598-ad45-a9a641c034e7"
        },
        "item": {
          "id": "d47d84c0-25ae-4c23-b2fe-b8d96f650c9b",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "be013ed1-1a10-4204-b109-cb5e1e27618e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1758d2a5-2a13-4947-8d6e-f093f9145f7b",
        "cursor": {
          "ref": "59efd78c-aa9b-4aeb-81f8-c822cb3ffd50",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "444f69a4-d0bf-432a-8bc5-482d51b0d252"
        },
        "item": {
          "id": "1758d2a5-2a13-4947-8d6e-f093f9145f7b",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "0cb3d810-14f7-451e-86d8-ad2e227a3b8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ddb38ab-1746-47ff-8dde-1c400967253c",
        "cursor": {
          "ref": "ea010cd5-a677-499d-85e3-3a0bfb4da084",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "4a7a4610-9ae4-44db-bf9a-95498dc62e3d"
        },
        "item": {
          "id": "6ddb38ab-1746-47ff-8dde-1c400967253c",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "f6af4e49-0720-41ca-8313-6bf50a92e236",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9929e68d-a5ae-4289-a9b4-e4a7e88ddca0",
        "cursor": {
          "ref": "af83951a-0eba-4b62-99a9-e6fbeb605c9e",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "5fec04b7-ed7f-4f34-822f-91961430aae6"
        },
        "item": {
          "id": "9929e68d-a5ae-4289-a9b4-e4a7e88ddca0",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "0d5e0e67-a636-4070-9bfb-dfb621077f38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77f2a771-26f0-4ff1-a8a5-fa0c6941716a",
        "cursor": {
          "ref": "02cd82f6-5cd0-42c4-9318-81dc53699c00",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "01f1a781-71d6-41e9-92f8-5d8c641b09b8"
        },
        "item": {
          "id": "77f2a771-26f0-4ff1-a8a5-fa0c6941716a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "2eb08d30-5848-4aab-ab23-111d44d36304",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13b427dc-8ed6-4ee9-bcfc-8ca386214a96",
        "cursor": {
          "ref": "06906cd5-ff9a-4b72-a3d7-a78d2548eb95",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "57331319-2aef-4a2d-be16-80e34e1e080e"
        },
        "item": {
          "id": "13b427dc-8ed6-4ee9-bcfc-8ca386214a96",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "83a44dce-4740-4449-abb0-9007927620d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8850cdf6-e69d-42f6-9877-e2e2cf7d3f3b",
        "cursor": {
          "ref": "f948a5b2-4e62-49c2-b21f-883d972834ca",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "bb6d414e-46e9-465b-a6a6-cb49518bc2d1"
        },
        "item": {
          "id": "8850cdf6-e69d-42f6-9877-e2e2cf7d3f3b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "d9bc9476-d2f8-4452-9b0c-bc4984419da4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2fa745e-c523-4aec-98c0-8cc9a197a3e5",
        "cursor": {
          "ref": "9c962d40-3993-4462-8bae-8101dddb3155",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "56c31e9c-37a6-433e-9a96-86325b4e60a4"
        },
        "item": {
          "id": "e2fa745e-c523-4aec-98c0-8cc9a197a3e5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "d2e433b0-e7ba-41b3-bfa2-4816723bd3ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2439064f-8a46-47ab-b7ba-6ee1b0cb03d6",
        "cursor": {
          "ref": "2cf1df0a-4b05-46fe-baef-484f2121a0ea",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "521bf3ef-8311-48f2-92cc-77cc60eb5d41"
        },
        "item": {
          "id": "2439064f-8a46-47ab-b7ba-6ee1b0cb03d6",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "a5bd4d4f-4cb9-451d-a293-d040aff9f21e",
          "status": "Created",
          "code": 201,
          "responseTime": 2090,
          "responseSize": 977
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "ad245f98-b5e6-4a46-8b40-75d7e33084f4",
        "cursor": {
          "ref": "e8b57a1b-0223-46c8-a1ce-cc7ab8be595e",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "daaa122e-9fbd-4301-afab-71d70f0e64e7"
        },
        "item": {
          "id": "ad245f98-b5e6-4a46-8b40-75d7e33084f4",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "ec4188a3-ec44-4ab2-923d-cedcb8d3dee5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4793530b-d715-484e-b00e-734543365cd5",
        "cursor": {
          "ref": "66f3c328-a368-42f5-b1ca-0e2d61f3db1d",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "239953ac-8f87-4033-8384-7ba7b5cb7b26"
        },
        "item": {
          "id": "4793530b-d715-484e-b00e-734543365cd5",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "c0ee0df7-c24a-4fc3-8188-043e3241a56d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 169,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "613ba3a6-d77c-49bf-9a4f-1d716aceb13a",
        "cursor": {
          "ref": "64c6da1f-77c3-43ed-ba42-86f9b61c9149",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "210ebfbc-a261-4974-baf3-e92bc4f2ab31"
        },
        "item": {
          "id": "613ba3a6-d77c-49bf-9a4f-1d716aceb13a",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "fe04fef9-a3bd-4a7a-aec4-fc71b18846eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e672f41-b8cf-4146-8538-47e3dd34b16a",
        "cursor": {
          "ref": "06bd5f6c-f66f-438c-ac13-8d3cc5494c1b",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "9e241cf9-21c1-4909-88be-fa7bbdd62fe3"
        },
        "item": {
          "id": "9e672f41-b8cf-4146-8538-47e3dd34b16a",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "eef58093-8276-40b3-a894-8ab4cc4107a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "538e91f6-3890-4abd-a53a-16e20f00a9a5",
        "cursor": {
          "ref": "71a8a39f-f8cd-42fa-982c-d27725062fc8",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "477315bd-36e4-428a-91c0-53777d846927"
        },
        "item": {
          "id": "538e91f6-3890-4abd-a53a-16e20f00a9a5",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "c06b8f3a-a7d8-4e8e-80d5-167b1677ded5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17ba6085-13a7-44bf-8a01-2f4b220d7eca",
        "cursor": {
          "ref": "4ba192a4-5fd5-49af-9d4e-b2414d83d2b0",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "10b5a4b2-648c-483f-bafc-cd0ebc524205"
        },
        "item": {
          "id": "17ba6085-13a7-44bf-8a01-2f4b220d7eca",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "35b0c2e0-70ac-4c6e-87b3-bc355ca38bfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69ba27b1-103a-409f-a90d-c334595aa5c1",
        "cursor": {
          "ref": "de41f41f-e985-4857-8218-6bd5f9d4f38f",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "7d90be05-f256-4945-bbca-443f54650ed3"
        },
        "item": {
          "id": "69ba27b1-103a-409f-a90d-c334595aa5c1",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "a22c7c3c-2bb1-4eaf-9149-9bdbe9d2318c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49e17585-8f78-45f6-8620-a854abe8d239",
        "cursor": {
          "ref": "51da8c8d-3dfe-49ed-a71e-91cb645a6aa7",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "c047fcde-86cc-45c3-a909-f653f03cc454"
        },
        "item": {
          "id": "49e17585-8f78-45f6-8620-a854abe8d239",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "f21e02d4-c71a-48c6-9172-4476f776cf40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "706966ff-8e90-4c6f-885b-41f464793542",
        "cursor": {
          "ref": "48dfa9ff-28a7-4f94-85d7-3851d1521b01",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "f9656205-9d77-4a6c-9df2-f89775da8688"
        },
        "item": {
          "id": "706966ff-8e90-4c6f-885b-41f464793542",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "efb83448-5dfe-4ddf-b4ff-49fd7809860e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98823d85-c503-4ff6-b9f6-eb5d4178d3ed",
        "cursor": {
          "ref": "6241edff-991f-4688-904e-4367d232b73d",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "68b55e38-40f3-4bc8-8213-595dda274e1b"
        },
        "item": {
          "id": "98823d85-c503-4ff6-b9f6-eb5d4178d3ed",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "04fde8ed-969f-4dda-b5f3-a7c013370278",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "653de081-4985-4738-8c27-9670f6c2e8b1",
        "cursor": {
          "ref": "f161fc53-a560-48fe-9ddb-110e43e60d82",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "74d10f1c-a5ae-400c-a7f0-3648f1b552ad"
        },
        "item": {
          "id": "653de081-4985-4738-8c27-9670f6c2e8b1",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "bddc0336-8940-4251-a40d-26ab6143b9ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "399f0d19-42e2-4e3c-a968-4423be9a0c11",
        "cursor": {
          "ref": "9c43d25e-1b62-4bad-9111-4281ab9da36e",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "d44ee3d4-577e-4ded-b55b-79bffe756096"
        },
        "item": {
          "id": "399f0d19-42e2-4e3c-a968-4423be9a0c11",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "ccb1a437-062a-4a7e-b123-7a34ad0161fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "454c686d-863f-4ac2-aeee-595c2b1e0c08",
        "cursor": {
          "ref": "4f600d7e-99bb-4a0a-9482-2e1a1367b064",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "61f0d6f8-fa1f-4630-8975-c1c7716777ee"
        },
        "item": {
          "id": "454c686d-863f-4ac2-aeee-595c2b1e0c08",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "3e1e85ca-b98b-4d83-839c-b1eddd9a773a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ca4d1cd-0930-4110-97dc-7c744ea871d2",
        "cursor": {
          "ref": "9ad8b1ff-9fda-4935-b372-6e25ac4e1595",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "2cb10ab2-2523-4790-97f3-931025d7ece9"
        },
        "item": {
          "id": "9ca4d1cd-0930-4110-97dc-7c744ea871d2",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "4d1d415d-5ccf-4de4-a9d8-9840a84b1581",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a33f3284-c7d3-4453-b272-60f6dab053b5",
        "cursor": {
          "ref": "b83dc50c-7673-497d-bb65-c39ddd6425f9",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "cc0d32ad-bf83-4fdb-966c-7aa866c7abbf"
        },
        "item": {
          "id": "a33f3284-c7d3-4453-b272-60f6dab053b5",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "94306b4b-129a-4e6c-bbf6-629fd9a27dec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bae1cf74-a4f4-4a68-ae77-3b408e824fd5",
        "cursor": {
          "ref": "c5dc5e75-49f2-4141-8557-7a51bf749fcd",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "250a55be-04d5-4045-8d68-3849e300727b"
        },
        "item": {
          "id": "bae1cf74-a4f4-4a68-ae77-3b408e824fd5",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "a8c7dba8-5c96-4fba-969a-b71bb6ef3c32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e947b8c1-8866-41ae-a095-46345badd68f",
        "cursor": {
          "ref": "9ed1db62-79c5-42e1-90b2-7c9525046c70",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "e88196b0-f7b3-4d37-8750-ee7dfa8973da"
        },
        "item": {
          "id": "e947b8c1-8866-41ae-a095-46345badd68f",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "f6445b8c-b8e0-4f9c-a62f-b849e92c6565",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a358a8e-9a41-474c-a5a5-fc96c1b63b56",
        "cursor": {
          "ref": "53fa0242-50c6-4350-8b8f-f001c2da7659",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "a5302730-dcd1-4396-a45f-f5b2304cc18d"
        },
        "item": {
          "id": "7a358a8e-9a41-474c-a5a5-fc96c1b63b56",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "d2989d37-a7a3-4e0e-9085-b734fcaf6146",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42466863-1516-4ac7-a662-23e58cd310a4",
        "cursor": {
          "ref": "89ac4d9f-5bfd-4d32-a55d-3a29d804d4bb",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "679057e5-175f-4f1f-92d1-a0b76c7021c8"
        },
        "item": {
          "id": "42466863-1516-4ac7-a662-23e58cd310a4",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "db933bcd-cb6d-4671-9665-ca7ef5c377e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11d58a55-83a2-43db-96d4-5acb2ac6a64b",
        "cursor": {
          "ref": "82a029d4-d3cd-4fa0-8e14-9a0aff05d063",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "92033338-c149-4aad-ab53-7f1f87c89c00"
        },
        "item": {
          "id": "11d58a55-83a2-43db-96d4-5acb2ac6a64b",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "8c2ff310-6af9-4194-bc58-51d1612798c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06193809-1f69-4804-92ac-a2ca11a96b20",
        "cursor": {
          "ref": "d3b38351-ff04-4287-a3f8-d8f8ced6f8af",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "3d3f2df4-87ac-4eb6-81cf-ba2bcc4bcb00"
        },
        "item": {
          "id": "06193809-1f69-4804-92ac-a2ca11a96b20",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "ddd64bdf-0e66-4d2b-bf42-47462d1f2212",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "218dc7ab-b1a0-4657-8e7b-4ecfa191c36a",
        "cursor": {
          "ref": "17f4961f-b090-428f-b4c7-f37bc2295bc8",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "7efde3b6-cbca-4e3f-abd0-8d786d7a9370"
        },
        "item": {
          "id": "218dc7ab-b1a0-4657-8e7b-4ecfa191c36a",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "3711a6ad-dcf3-4258-b281-ce3acbb64b5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 142,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dbb6fc4-bf53-4d84-bea4-df3dd64b6cd7",
        "cursor": {
          "ref": "197aaa02-4782-4e70-998e-175035382fe3",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "4eb13680-93e4-44e4-b0fe-fbaa6d2bc286"
        },
        "item": {
          "id": "3dbb6fc4-bf53-4d84-bea4-df3dd64b6cd7",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "daf9ca2e-e0e7-4e79-b74e-17331b4d70f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5951ea03-f412-46e9-aac2-792df7ebe774",
        "cursor": {
          "ref": "afc443f4-0b20-4406-a65d-55184ed34e67",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "da5f3c13-0f04-499b-8737-7aa2fd9c4416"
        },
        "item": {
          "id": "5951ea03-f412-46e9-aac2-792df7ebe774",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "e24c2f10-796d-4b31-8f9e-8115ca93c572",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f7b8db3-6737-4967-8338-09f5a6bbd21b",
        "cursor": {
          "ref": "47df13aa-eba8-4bea-8536-a757c4e69414",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "190c692f-9533-42ef-a18b-ce2cfaefaeba"
        },
        "item": {
          "id": "9f7b8db3-6737-4967-8338-09f5a6bbd21b",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "c5be7eef-5597-435d-9915-2d52d2e8eaa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e9fcbcf-c6f6-4573-9822-9202ebe6a906",
        "cursor": {
          "ref": "b4051665-8c08-47f2-a9a8-dec2b728e41d",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "450ff3c9-e830-4b36-9cae-956ed6336af5"
        },
        "item": {
          "id": "1e9fcbcf-c6f6-4573-9822-9202ebe6a906",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "f896e348-22dd-4d16-bf38-721c82bfb996",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b4e173b-255a-435c-b0d2-b6aadec49a02",
        "cursor": {
          "ref": "60487324-48b0-4166-a87d-241711e054d0",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "e6f0cfed-fdd2-4453-8521-851637ae8ba2"
        },
        "item": {
          "id": "5b4e173b-255a-435c-b0d2-b6aadec49a02",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "0d43d947-e976-421e-870a-088f07ef8828",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cacf5d2-2deb-4cc0-94ff-a953ea8cd984",
        "cursor": {
          "ref": "4d0316ff-21ba-40c5-9d66-e952461ad958",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "c8e5b772-9e0f-4559-a313-7876cf276fd5"
        },
        "item": {
          "id": "3cacf5d2-2deb-4cc0-94ff-a953ea8cd984",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "998d4b89-28ea-4c4b-8470-85af7b0553ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a2f5558-26a9-4b09-9d77-97a4a8f93810",
        "cursor": {
          "ref": "50e0cec7-cef4-4e66-ab7d-9026ac6cdb8d",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "8b794fc0-79d5-49b1-a5a0-cc23ffc87643"
        },
        "item": {
          "id": "5a2f5558-26a9-4b09-9d77-97a4a8f93810",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "03dd3548-66ab-4ba0-8d4a-150cf4128e30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba06e852-49d8-4abe-87a0-0db98a1330c6",
        "cursor": {
          "ref": "1d487808-7f9b-4b86-9a44-0e3b07973dc6",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "70b59271-c04f-456a-967d-515b9bc0d009"
        },
        "item": {
          "id": "ba06e852-49d8-4abe-87a0-0db98a1330c6",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "395aefa5-1033-4f7c-8cab-3bcfe15bd2e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "901ec773-fd2a-4b44-9dfb-5264d8538a05",
        "cursor": {
          "ref": "587e8480-b7bc-4650-a89f-8a5e7423d5ee",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "c54657c0-5694-4742-b4bb-77f744760199"
        },
        "item": {
          "id": "901ec773-fd2a-4b44-9dfb-5264d8538a05",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "3f2773b0-bb1d-437b-9aad-991b3e64d3d4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "8d629f53-3dc0-4156-adf0-64596dfa73dc",
        "cursor": {
          "ref": "59cedcd0-23c1-4440-9e19-00cfa0292c2d",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "eb4d2d32-5ad1-4582-8c71-0534fab1dc7b"
        },
        "item": {
          "id": "8d629f53-3dc0-4156-adf0-64596dfa73dc",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "8a2cb74f-92e9-490c-8840-7beddd810a6a",
          "status": "Created",
          "code": 201,
          "responseTime": 2170,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "2aa40e51-ada9-4dd9-9b4b-e3e626e5fb8d",
        "cursor": {
          "ref": "1d220e04-7262-4719-9d50-93069feb561e",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "499b2b1a-db98-4809-befc-94081ab8fb66"
        },
        "item": {
          "id": "2aa40e51-ada9-4dd9-9b4b-e3e626e5fb8d",
          "name": "credentials_issue"
        },
        "response": {
          "id": "78cfafba-a03b-4e3d-8c5b-989975244ac5",
          "status": "Created",
          "code": 201,
          "responseTime": 2618,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "25e8d6ff-6517-4b5f-8886-74e9935710d7",
        "cursor": {
          "ref": "bda54fcb-3cbe-4026-bd68-1a090378de1e",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "8a0d1908-59ae-4ba0-9f24-f881b91b7bca"
        },
        "item": {
          "id": "25e8d6ff-6517-4b5f-8886-74e9935710d7",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "4541f646-d6f8-470c-a08b-1a356ecf9298",
          "status": "Created",
          "code": 201,
          "responseTime": 2149,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb702bb7-af20-45f6-893a-a9ff53b83c5d",
        "cursor": {
          "ref": "dd4e50e6-f818-46d8-a5e0-9ffd63f8e0c8",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "202c7590-0ffa-4c0c-b986-c7e6ab3381a3"
        },
        "item": {
          "id": "bb702bb7-af20-45f6-893a-a9ff53b83c5d",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "a5e7f7e6-1998-4cd7-988b-b11ab1f57727",
          "status": "Created",
          "code": 201,
          "responseTime": 2124,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "41581934-29cc-4326-9acb-2dc9e6383331",
        "cursor": {
          "ref": "2679ef68-23f8-4c46-94d2-ee97efbec219",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "bc47ad19-7f58-4751-b166-fef8f42b0c3d"
        },
        "item": {
          "id": "41581934-29cc-4326-9acb-2dc9e6383331",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "30888794-bfd9-4113-8552-624ac3772fcf",
          "status": "Created",
          "code": 201,
          "responseTime": 2400,
          "responseSize": 993
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fcfe459-382c-46ca-965e-9015b0e7fb3c",
        "cursor": {
          "ref": "6bc02a5d-0ce9-4a8e-8d87-6ed43d9f95a5",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "73171f7a-12b9-47b3-989c-ec8832c6ff09"
        },
        "item": {
          "id": "2fcfe459-382c-46ca-965e-9015b0e7fb3c",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "eba0a9b4-3632-4115-868e-b8fe272131d2",
          "status": "Created",
          "code": 201,
          "responseTime": 2226,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-05-09T00:38:15Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-05-09T00:38:15Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "da5f77ea-43ff-47b1-a93b-6040417861bf",
        "cursor": {
          "ref": "f9f799a0-f9ea-4a6b-9ef8-68bb8c94a448",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "d1b59fcf-b992-46a4-a7ea-b29b120833b6"
        },
        "item": {
          "id": "da5f77ea-43ff-47b1-a93b-6040417861bf",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "483170a7-111b-4a2d-812b-4c9c1b928a5b",
          "status": "Created",
          "code": 201,
          "responseTime": 2561,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47d4a20f-bec3-4c73-a852-09e9803871b4",
        "cursor": {
          "ref": "2716559b-ddb1-4f8b-a467-47379140528e",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "ea262f66-3222-4af0-b0bb-4fdd7dcca54c"
        },
        "item": {
          "id": "47d4a20f-bec3-4c73-a852-09e9803871b4",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "79bc66a6-6731-4d7f-a4c3-0a52078dad3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 119,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47d4a20f-bec3-4c73-a852-09e9803871b4",
        "cursor": {
          "ref": "2716559b-ddb1-4f8b-a467-47379140528e",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "ea262f66-3222-4af0-b0bb-4fdd7dcca54c"
        },
        "item": {
          "id": "47d4a20f-bec3-4c73-a852-09e9803871b4",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "79bc66a6-6731-4d7f-a4c3-0a52078dad3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 119,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b6f5184-b6b3-46a8-a9dd-1417737b3dd2",
        "cursor": {
          "ref": "0227a5aa-0f03-4aea-be72-fe3fad71fe5e",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "d6d8d8c7-8710-48b1-91e1-795a5a80e978"
        },
        "item": {
          "id": "2b6f5184-b6b3-46a8-a9dd-1417737b3dd2",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "61c8d94b-5b71-4e15-a81a-f404e7dec690",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33044259-7a15-4722-994f-a9f8e83b5255",
        "cursor": {
          "ref": "6a8e0eb6-3460-4328-b108-63e686052930",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "3486b035-95b6-4bea-91b3-af4f99aab7c6"
        },
        "item": {
          "id": "33044259-7a15-4722-994f-a9f8e83b5255",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "6dd8ed28-2a14-476c-be2e-6920eb255a23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebddfc53-7527-4bdf-8c7b-b03a1b141a82",
        "cursor": {
          "ref": "95efb15c-3916-432d-8845-97a7c3b95cc6",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "dc53f196-b60b-40c5-aa88-35507d3497c9"
        },
        "item": {
          "id": "ebddfc53-7527-4bdf-8c7b-b03a1b141a82",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "d054b246-a0cd-473e-8b25-6cbfa9a12be6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4aa452d9-42b9-4cd9-976d-d86e860c410e",
        "cursor": {
          "ref": "18c2adee-a2cb-4d00-9b7f-148b955fc2e4",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "c0e3edaa-7aa8-4ecf-84a5-b80719d779d6"
        },
        "item": {
          "id": "4aa452d9-42b9-4cd9-976d-d86e860c410e",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "3f8805ec-c117-4fff-b8c4-b6aacf60f5a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50bc90a9-ab44-45d5-b6c0-8cac97b17e67",
        "cursor": {
          "ref": "379d87b5-7dc0-4922-a977-7a094b233239",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "a3432a64-7bd1-4424-b99c-4de668f1975c"
        },
        "item": {
          "id": "50bc90a9-ab44-45d5-b6c0-8cac97b17e67",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "ea8825cb-7b71-4165-a1ff-484a364e2dc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14c8e7d7-d74e-4cc7-a9ca-46a814d87185",
        "cursor": {
          "ref": "9a029b70-2785-411e-906c-6a7d6f3cdab3",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "c087165e-f8f3-47fc-8be2-90876a3e9d64"
        },
        "item": {
          "id": "14c8e7d7-d74e-4cc7-a9ca-46a814d87185",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "f4c4ce7d-68b3-45a2-909d-7bc2c0a89bc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "287e9395-7f07-4e8a-807b-a725dbd7762d",
        "cursor": {
          "ref": "68a90b4a-efee-4098-81b4-b4dbf17f0f25",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "8cc75cd2-fdb0-4f6d-8a43-4b829d5146db"
        },
        "item": {
          "id": "287e9395-7f07-4e8a-807b-a725dbd7762d",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "8f2b07c5-fa40-4c10-b400-82c8c98abf96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63a8dbbc-6d4d-44ca-91ce-33ee6d76298f",
        "cursor": {
          "ref": "ac3faf8b-c5d2-429e-9f02-27b93b04dc06",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "b2a0e557-c684-40bc-b790-60f78a1c08fc"
        },
        "item": {
          "id": "63a8dbbc-6d4d-44ca-91ce-33ee6d76298f",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "0833450c-599f-460c-89ca-c7818e58b942",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a85d49d-d082-4b73-8652-6bdc6f6fad7a",
        "cursor": {
          "ref": "31dc01e9-e3ec-4258-b2e1-5223511a5615",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "0e38c053-05ad-4056-bf53-8bd288470c88"
        },
        "item": {
          "id": "4a85d49d-d082-4b73-8652-6bdc6f6fad7a",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "2645d477-e8d6-47b8-9f59-b162d6e73ab5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e5df4ca-8f10-4e1a-97de-0ac8b10fb2f0",
        "cursor": {
          "ref": "d9d64a4e-306f-4e71-b0cf-d21cecc69f46",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "dfea7d0f-125f-47c0-81a6-4b8d0cfc58d6"
        },
        "item": {
          "id": "4e5df4ca-8f10-4e1a-97de-0ac8b10fb2f0",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "dd98fbeb-0644-4838-bc39-ba79d797e264",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1554663-a3f1-498a-91fc-fa47d63e2671",
        "cursor": {
          "ref": "fc2db453-f94c-4942-bb08-c198a296386c",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "8814a773-29e2-4d6b-be89-0ed144d18a71"
        },
        "item": {
          "id": "a1554663-a3f1-498a-91fc-fa47d63e2671",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "3ae6dca8-ed92-4dcc-a31d-4622ddd30725",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d798c25-e2ab-4ed0-802d-0d4b46501ebd",
        "cursor": {
          "ref": "959c478e-318e-4a14-a1eb-3ecc9e0d46f4",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "faa6fc39-5e67-47b8-b51a-c4cf7d3704ab"
        },
        "item": {
          "id": "7d798c25-e2ab-4ed0-802d-0d4b46501ebd",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "ef3611d9-807f-4673-b52b-c02847300745",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a5b4d77-e417-4dae-9de0-4dbb852c0dee",
        "cursor": {
          "ref": "253b9a2b-669e-44c8-8a59-2fc164b7aafb",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "d52bdd59-7f3f-41d5-8541-36c48ded8782"
        },
        "item": {
          "id": "5a5b4d77-e417-4dae-9de0-4dbb852c0dee",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "aa42634b-eba9-4d99-9a66-98a884da2b97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "503d6632-7cfd-4eb0-86e0-82c683210d69",
        "cursor": {
          "ref": "46761f81-54d2-44e9-aa70-9dfa9df0c588",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "c07ba116-59ce-4644-ba22-0db5e3aed464"
        },
        "item": {
          "id": "503d6632-7cfd-4eb0-86e0-82c683210d69",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "88725450-7e4d-43ee-a853-f1f2079e60ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "911cb846-2cb3-4742-a2ec-fb321cc415bd",
        "cursor": {
          "ref": "e3e7bff1-608d-42f1-b802-80c4e62df251",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "e555c51c-92f2-4736-99d8-f2b5a7ef2964"
        },
        "item": {
          "id": "911cb846-2cb3-4742-a2ec-fb321cc415bd",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "1e5eec86-112a-4dac-a361-2363e8d32f7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0df5f5f2-6db2-4e45-8147-2cc84e4fc2db",
        "cursor": {
          "ref": "dcbe9782-da0b-47a9-b8cd-3f7df13b8d0f",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "c69d0e82-612c-47a7-83e1-fc07c83bd643"
        },
        "item": {
          "id": "0df5f5f2-6db2-4e45-8147-2cc84e4fc2db",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "a343b0e5-cf21-491a-9af9-1b6a1d2fa0de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 124,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaa60ed8-0d19-494e-9fb8-2ce7b2bfa9ab",
        "cursor": {
          "ref": "81032846-45b8-4a13-b65a-c7e61966eb9c",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "e83c9ace-5063-44dc-89a8-2bb13c97af39"
        },
        "item": {
          "id": "aaa60ed8-0d19-494e-9fb8-2ce7b2bfa9ab",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "a104c836-2667-4ab8-aa7a-105c78272c12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53ce2822-d6e8-4f02-876b-25348d712c7f",
        "cursor": {
          "ref": "98f40dfb-d8e3-46c0-934f-fa392920573f",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "cc8e98ae-87b3-4e19-ac7f-bb9e2eaae360"
        },
        "item": {
          "id": "53ce2822-d6e8-4f02-876b-25348d712c7f",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "d753991a-fc64-4002-8133-f97b661c062a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "632bf18c-ee3a-424b-8813-51fec1adb531",
        "cursor": {
          "ref": "18c0420a-3db9-4e5f-af74-c8ac21d0c306",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "3f9dabf5-2c6e-4fb6-a9cb-88d595cfb35a"
        },
        "item": {
          "id": "632bf18c-ee3a-424b-8813-51fec1adb531",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "39b1c896-21b0-48e3-9adb-3a6c82545529",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7170b75f-a06a-4be0-9ff1-a8c194c1f65b",
        "cursor": {
          "ref": "66e4b93e-945e-4b5b-894c-f6829385219b",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "acc79b14-baff-4ef6-b3a9-9c6e533b66e7"
        },
        "item": {
          "id": "7170b75f-a06a-4be0-9ff1-a8c194c1f65b",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "9d5148ca-eca4-400c-aec8-cdea208de2e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fee662fb-31f8-42b2-bbfa-8dc24d5c7eb2",
        "cursor": {
          "ref": "0d67e2fb-dfb9-416d-a4e1-363b68827215",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "72f1235a-c8e0-48ab-8e9c-c7f0acb07f8d"
        },
        "item": {
          "id": "fee662fb-31f8-42b2-bbfa-8dc24d5c7eb2",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "bae38a0f-d0bc-4f5a-bf41-3c72ae594edc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de3cddc2-86cb-44ea-95d2-887ebbd618ce",
        "cursor": {
          "ref": "040e0ddd-1bab-40ef-9403-659b993e4ec1",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "cc1b6c32-8c28-407f-ae53-869c7e68f359"
        },
        "item": {
          "id": "de3cddc2-86cb-44ea-95d2-887ebbd618ce",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "37d3668b-2ec8-4955-a2c4-2e39b095d869",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e02a3c8-1531-4c0b-b9d2-e08cd5fef7a4",
        "cursor": {
          "ref": "445e3960-8522-4136-9808-dc8e3de24307",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "47e598e5-0340-42e2-9bc9-6fcf15d6b48d"
        },
        "item": {
          "id": "5e02a3c8-1531-4c0b-b9d2-e08cd5fef7a4",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "ad2b36ae-3ab0-4e0f-940f-1391e7f4f529",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b10df09-b256-4db6-9c9f-25b3e008b48d",
        "cursor": {
          "ref": "df195caf-9036-424a-ad7d-a759e954c009",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "a23f13a6-2145-4dd3-bd06-9a5d4fcbfaba"
        },
        "item": {
          "id": "5b10df09-b256-4db6-9c9f-25b3e008b48d",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "a0fb7e65-7dfc-4903-a7ae-9eaa894bb32e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "142fefaf-6fbc-4533-bb3a-a2a5f73bb28e",
        "cursor": {
          "ref": "694344a8-b04a-4927-9503-8b0a10b3f147",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "9e85190e-6000-4d0a-a739-ae7b0fedcc85"
        },
        "item": {
          "id": "142fefaf-6fbc-4533-bb3a-a2a5f73bb28e",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "99f6dd16-ca18-4f1e-8343-ebbf7d0a1347",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45591f86-4418-43f3-9eaa-a2d20899f87a",
        "cursor": {
          "ref": "71ee26d2-02e3-4a94-b833-0b1bd0c2e69f",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "46485b6b-b04d-461e-b837-6ee6be7f0101"
        },
        "item": {
          "id": "45591f86-4418-43f3-9eaa-a2d20899f87a",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "9fafcdcd-45f5-48dd-a91a-cc1c25480f79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b236ef3-50c4-433a-8ddf-858ba428939b",
        "cursor": {
          "ref": "728c6f86-81fd-446b-9598-e77ac07a2d51",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "194fb1c7-55cb-4660-927f-34c3443a00ab"
        },
        "item": {
          "id": "3b236ef3-50c4-433a-8ddf-858ba428939b",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "0fe773cd-23fb-42cc-8139-ece70ea626bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18736d22-9eb7-430b-89d1-3bb58e36e948",
        "cursor": {
          "ref": "1dd6abe8-1b8c-46af-b11b-8dbee9309685",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "534c29bd-31fe-4595-bba2-d3a2ed4d3fcf"
        },
        "item": {
          "id": "18736d22-9eb7-430b-89d1-3bb58e36e948",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "132753cb-feba-4009-8327-d5cf90322a4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d83ad6f0-2639-40c7-aab2-66bb9096b1a4",
        "cursor": {
          "ref": "f17de379-3bdf-4876-96da-895f7e27d381",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "d823aea6-8a0b-48c6-b773-0490f50fac04"
        },
        "item": {
          "id": "d83ad6f0-2639-40c7-aab2-66bb9096b1a4",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "3fda248b-6e04-4cae-8959-d39c77bd2e04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a81265d1-ac08-45fc-bdc8-63d860fef458",
        "cursor": {
          "ref": "6f5e5b47-4f3e-49e8-a47c-db028bf4af63",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "92165e64-0e85-4357-8b93-bb8d2a257a8f"
        },
        "item": {
          "id": "a81265d1-ac08-45fc-bdc8-63d860fef458",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "e0f0c193-b95f-4f6c-86c7-044fb7bb34b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f52da54d-5174-4e3d-a7d0-af507dafcde1",
        "cursor": {
          "ref": "fa504016-9645-45c9-b505-2fa4362a76c4",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "f39c3b03-13eb-4cf5-a759-4160a71d10b6"
        },
        "item": {
          "id": "f52da54d-5174-4e3d-a7d0-af507dafcde1",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "955e8203-ba44-460c-9298-3ef451fe0540",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "616a85f9-a3f1-40d6-850d-e88446a6fcd6",
        "cursor": {
          "ref": "b9a4224f-8f6c-4e47-9470-ef08c65a872f",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "85b21216-ad65-4be4-82b8-26468ff2a93f"
        },
        "item": {
          "id": "616a85f9-a3f1-40d6-850d-e88446a6fcd6",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "f8bda18b-366a-4fa5-9653-9225c799580c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "bd31b076-e5e9-4c70-9471-343afc4cb766",
        "cursor": {
          "ref": "e0ad3608-64ba-4925-9541-8f71b446223b",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "5f276c83-7364-484e-aa54-60eb74949e76"
        },
        "item": {
          "id": "bd31b076-e5e9-4c70-9471-343afc4cb766",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "e27d194b-6fa1-4edc-a192-da89eed84e36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "f4da043e-22db-4866-93b5-2ed4cf0d48c1",
        "cursor": {
          "ref": "d68847f0-ed30-4dc4-ad11-65259b155e83",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "48e0ad90-c027-44c2-8329-a44785e9793c"
        },
        "item": {
          "id": "f4da043e-22db-4866-93b5-2ed4cf0d48c1",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "fccd9795-94f5-44e4-81f9-d84d86efbfba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4da043e-22db-4866-93b5-2ed4cf0d48c1",
        "cursor": {
          "ref": "d68847f0-ed30-4dc4-ad11-65259b155e83",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "48e0ad90-c027-44c2-8329-a44785e9793c"
        },
        "item": {
          "id": "f4da043e-22db-4866-93b5-2ed4cf0d48c1",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "fccd9795-94f5-44e4-81f9-d84d86efbfba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1085c03f-394a-464b-9b69-deb2e500ab64",
        "cursor": {
          "ref": "1c00fc0d-e2e6-4b03-997c-a66718d0ed85",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "9f5442c2-7a87-48b0-a127-3b00451f5b36"
        },
        "item": {
          "id": "1085c03f-394a-464b-9b69-deb2e500ab64",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "7b88aae4-fbbe-4990-a4e2-31d733ec40fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e41b0be-8e1a-49dc-aa7d-e31041b820d7",
        "cursor": {
          "ref": "8bbb3af8-ed4d-4c5a-92f6-ebc90f15c575",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "cf3b8247-8c07-4473-9808-56cc9ef6cfc5"
        },
        "item": {
          "id": "1e41b0be-8e1a-49dc-aa7d-e31041b820d7",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "35cbb95e-1bdb-4118-be1e-1e39bf7973a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "098f4c67-da14-41ea-99eb-aa77abf66ec6",
        "cursor": {
          "ref": "d37d45ae-14ef-434b-a7b7-0fd75872550c",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "ac3e6b6c-37eb-4fe8-921f-2b0d78966732"
        },
        "item": {
          "id": "098f4c67-da14-41ea-99eb-aa77abf66ec6",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "0a77ce25-a5ad-44c7-b776-8dc89c5934ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f20fe2cd-5d55-4540-a1ab-a18f7b5a4950",
        "cursor": {
          "ref": "13c96a23-925f-4a6a-8dca-0ec649c6e80a",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "0935ca56-cfb2-4598-9991-78f35424228c"
        },
        "item": {
          "id": "f20fe2cd-5d55-4540-a1ab-a18f7b5a4950",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "ec5c1825-7a85-4205-986f-38bfb8918a72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f5414f7-9f3c-4bf0-8530-e4ba374b878a",
        "cursor": {
          "ref": "9cb7991b-c137-4cb9-b0ee-cfa937bdbd3a",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "907e6a10-91a5-4a0a-b97a-5b6581048470"
        },
        "item": {
          "id": "5f5414f7-9f3c-4bf0-8530-e4ba374b878a",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "9c895f84-114b-48b0-a2d9-ef9cfe851848",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "531214da-9c29-4de7-b994-e21dbf28bc1c",
        "cursor": {
          "ref": "00c83270-be2c-48e8-a717-a6c431e32e3a",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "21134490-d504-4dee-a2ec-6abf25f1f1ea"
        },
        "item": {
          "id": "531214da-9c29-4de7-b994-e21dbf28bc1c",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "22d4e734-9dfa-4ef7-8655-5e76aaff41ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae3988e1-429e-4825-b1f8-05b293f9727f",
        "cursor": {
          "ref": "5a1a8b7d-3692-43d9-b68a-830b61549fea",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "639c97d1-7df9-4fcc-9e25-863ce379b2b0"
        },
        "item": {
          "id": "ae3988e1-429e-4825-b1f8-05b293f9727f",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "c644f35c-3d54-40b4-94a8-508ab76db262",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1bc9434-872f-4758-9ab5-9d7282c5dc16",
        "cursor": {
          "ref": "e75e4096-d6ae-4709-8acb-b72bb90df812",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "d77d6b05-0cdc-4541-a8a3-73abe4e3423e"
        },
        "item": {
          "id": "b1bc9434-872f-4758-9ab5-9d7282c5dc16",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "445243c1-a4cb-4e36-b130-a021ca06123c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "386f9d07-15ee-48a6-813d-e213e525fea4",
        "cursor": {
          "ref": "2fdb849a-9e05-4675-897b-a5484cd5c58e",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "80adb180-4544-49c2-ba78-7a9481b0a28e"
        },
        "item": {
          "id": "386f9d07-15ee-48a6-813d-e213e525fea4",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "3cba1985-be31-4087-8aee-2de724dd4306",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89281fe2-bb7b-4a9d-86bf-234bcabc01c2",
        "cursor": {
          "ref": "67950da7-b5f8-4fdd-aa5c-9f60ca4a2513",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "6dd7838e-6799-434e-b030-8603d3d42293"
        },
        "item": {
          "id": "89281fe2-bb7b-4a9d-86bf-234bcabc01c2",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "080f8fec-5b3b-4ee9-9b5d-38aff181d499",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49529137-1064-451e-b59b-f8b1306addd5",
        "cursor": {
          "ref": "19add931-1539-47e8-9f13-30ad86aa9e5b",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "a2e240f8-ee8f-407d-a94e-24f8dbfb512c"
        },
        "item": {
          "id": "49529137-1064-451e-b59b-f8b1306addd5",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "a3f5616e-f0e5-4ab2-8ced-8182c8508619",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f13e66e-87ad-4926-9a57-ec169afcb7e6",
        "cursor": {
          "ref": "a089a27c-fec3-458e-b283-403526b230a7",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "63ed341a-bf55-4aa0-8741-63fc4eb386ab"
        },
        "item": {
          "id": "4f13e66e-87ad-4926-9a57-ec169afcb7e6",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "42caec6a-0b91-4842-828e-352ef09d0e66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a4db737-8040-4ff3-9f17-bee51a1f4535",
        "cursor": {
          "ref": "df00f7fa-d165-4712-be3c-ce279fbf44c9",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "b3810350-6a9f-4476-916d-5aa4e4ae0f82"
        },
        "item": {
          "id": "8a4db737-8040-4ff3-9f17-bee51a1f4535",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "bc7d6165-a379-4db8-bde0-889629b23771",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e16b032e-9a57-441c-97a4-af0e44391a0c",
        "cursor": {
          "ref": "dc9e1e35-7d07-49da-818a-4e5fef5b1ba8",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "d2374837-bd90-417d-b7f5-5ffdd3dabec8"
        },
        "item": {
          "id": "e16b032e-9a57-441c-97a4-af0e44391a0c",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "ea3e9aca-4f77-4803-b796-c2eae2c26b5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb605448-dbe0-44c1-b918-dea5a21122c3",
        "cursor": {
          "ref": "894a02c6-8583-4f98-b13c-09dd1c7b97e8",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "46ab8655-ecea-4955-b039-2f9ff1a36321"
        },
        "item": {
          "id": "fb605448-dbe0-44c1-b918-dea5a21122c3",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "6fe0c72f-7b17-4572-98c0-d865a2d7078e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e533a41-74b6-4dda-90bc-e1358666c134",
        "cursor": {
          "ref": "5012b504-0d73-4979-a6e2-5cadffc065e7",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "114cc0e8-1a49-40c3-95d2-515ca9537d9c"
        },
        "item": {
          "id": "3e533a41-74b6-4dda-90bc-e1358666c134",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "b9510dbc-e833-4542-958d-1163726f04e3",
          "status": "OK",
          "code": 200,
          "responseTime": 204,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "c2ba995d-e9dc-471f-b4fe-7e8715d610e1",
        "cursor": {
          "ref": "d71047d0-093e-4f36-9862-6b27f04cc742",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "137a6c76-0281-4286-9a3d-2da16f087f86"
        },
        "item": {
          "id": "c2ba995d-e9dc-471f-b4fe-7e8715d610e1",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "d9a6f086-3bc1-4fee-b778-a53576adb8df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "801b5133-a476-414c-ba08-76a51f941714",
        "cursor": {
          "ref": "aef60e99-1907-4e81-80e4-3994b95844b7",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "ad7b5a2b-b34d-42e8-869f-c7e598fb2bbe"
        },
        "item": {
          "id": "801b5133-a476-414c-ba08-76a51f941714",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "b72ffea5-71a6-4192-8e00-4ff72d0b2eb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66f70302-8400-4d85-92f7-2be75552d417",
        "cursor": {
          "ref": "e975118f-4038-49ad-9a51-d8d3ea502bb4",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "2ca83b1c-16e3-4ffa-b6b7-13e44dec2397"
        },
        "item": {
          "id": "66f70302-8400-4d85-92f7-2be75552d417",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "bfde5cfe-a5c5-4eed-abee-d37b8ab024b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7997a5cc-04b4-4ae3-b042-87c14ace845f",
        "cursor": {
          "ref": "65c4fe77-07fa-422c-9904-9e92079d0b27",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "492cc90d-b470-4354-a3a1-3165ac0f6023"
        },
        "item": {
          "id": "7997a5cc-04b4-4ae3-b042-87c14ace845f",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "0e310f04-edbe-4162-b7ef-a1c5fa7fbc4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "536a40f0-53bf-4cc4-a679-678da28088d8",
        "cursor": {
          "ref": "a74affd3-7e5b-4f7c-bb24-5bdbac46019c",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "f0a2884a-0b82-4c9c-82b4-963446562b97"
        },
        "item": {
          "id": "536a40f0-53bf-4cc4-a679-678da28088d8",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "d4a4ed84-c743-40ad-ac18-eb94fca5091d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9281a8d-25a1-4779-a127-54144c8a731c",
        "cursor": {
          "ref": "957d818d-d123-4a53-bcdd-9a8aff4581fe",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "481a6971-64e6-4ff1-86ed-347a0bc89116"
        },
        "item": {
          "id": "b9281a8d-25a1-4779-a127-54144c8a731c",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "47a1bf0b-1fec-49af-a672-f16dac910bb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "323c21fd-e5fd-4cb3-b8ec-cf0933465931",
        "cursor": {
          "ref": "efe0a8a7-ebd9-43a1-8479-94fc340a9f32",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "63a74c1e-6832-4532-8cb7-f5f250629446"
        },
        "item": {
          "id": "323c21fd-e5fd-4cb3-b8ec-cf0933465931",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "6788930d-abe6-4879-8323-757c168b2395",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e421cdf-7011-48a4-a57e-c128ae597e25",
        "cursor": {
          "ref": "402852a2-7a0e-4a8c-bdf4-58b90067c545",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "00fbfeda-125d-4148-a737-7de178a66e21"
        },
        "item": {
          "id": "2e421cdf-7011-48a4-a57e-c128ae597e25",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "f22f9259-6557-417d-b16b-9a328fb35371",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19a17216-73f9-4df4-abdc-10e27b8baea2",
        "cursor": {
          "ref": "537e8f44-2c52-4eec-b2bf-78ebcc31fef3",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "4605248b-201a-414c-b8de-cf58d08c1916"
        },
        "item": {
          "id": "19a17216-73f9-4df4-abdc-10e27b8baea2",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "16a3f670-e3c6-45b4-9e66-55d049a9494f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17cfc8c6-82b9-4a8c-b632-77da2504b75b",
        "cursor": {
          "ref": "d2c7dc20-85a0-45c5-aee5-d6548408f2d7",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "8f5a4051-caa3-4106-a288-d4ff8ee8c97a"
        },
        "item": {
          "id": "17cfc8c6-82b9-4a8c-b632-77da2504b75b",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "5de3ff38-877b-4b73-b6ec-e961b8c1541f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9f67555-5109-4cba-82fe-d9adda0c8991",
        "cursor": {
          "ref": "a75f7784-4726-4f6f-882a-da9adc5b7d63",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "216cf37a-90ba-42fa-b17c-6484f0571b5a"
        },
        "item": {
          "id": "b9f67555-5109-4cba-82fe-d9adda0c8991",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "e0e38357-1de1-45da-9706-68013993eaa5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3e99248-d24c-4fee-a15d-71038436cbf5",
        "cursor": {
          "ref": "17d1edf6-609e-4a3f-bf91-4c633bfaf095",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "d7a4cbe4-cde1-4c39-8edd-f07eba081d35"
        },
        "item": {
          "id": "f3e99248-d24c-4fee-a15d-71038436cbf5",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "2d02f0c6-69d9-44d9-b692-6f68ece6e6a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50ceb096-116b-4417-940b-93fda09af09a",
        "cursor": {
          "ref": "62a19808-6663-48c9-8ed3-8da1549cb01f",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "19e04658-53a5-46ad-a451-27ef33b50548"
        },
        "item": {
          "id": "50ceb096-116b-4417-940b-93fda09af09a",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "aa49e4e9-ad1d-43b5-af52-5d007cfd557d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66937bf6-d00a-4329-9d7b-6241519c6c0e",
        "cursor": {
          "ref": "150b7be8-5b4a-4152-979f-3c131ca24920",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "1d198b83-f2f2-414a-954a-9871a0e782fc"
        },
        "item": {
          "id": "66937bf6-d00a-4329-9d7b-6241519c6c0e",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "6eeb605c-7daa-464e-ac5b-2a88aa1af27b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7ca0de1-1e6e-4515-bd92-a95643961dcb",
        "cursor": {
          "ref": "175b6230-2766-4ecc-8ee5-a1c8cf7744bb",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "fb7fedb1-3ba5-488d-a929-71e307d8a387"
        },
        "item": {
          "id": "d7ca0de1-1e6e-4515-bd92-a95643961dcb",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "401fc93f-93e9-4779-bdf3-de60ebe48fbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc1580a7-32ed-4b8e-b83d-4b6b145d5cd4",
        "cursor": {
          "ref": "0a2c469c-9a0f-4a69-8249-5cdf1beea5bf",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "d1721c03-ba4e-4a9b-8129-dc74435c7447"
        },
        "item": {
          "id": "fc1580a7-32ed-4b8e-b83d-4b6b145d5cd4",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "1b2707a5-a503-49f0-908b-87c8a9039592",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf23661b-575b-49ee-9baa-b1c3ec82121a",
        "cursor": {
          "ref": "17db7f28-c485-4807-8e76-37e342911320",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "56bab655-790c-4c6b-871b-628847767552"
        },
        "item": {
          "id": "bf23661b-575b-49ee-9baa-b1c3ec82121a",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "03880ba5-9693-46e1-b81f-8b2795e40ad7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbec42b1-7999-4e17-b98f-9e6aafb4b1e9",
        "cursor": {
          "ref": "5a887d5f-662d-47cd-8eb7-35dad44ee690",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "d4a9a368-ce40-438d-a4d8-0532c3573875"
        },
        "item": {
          "id": "fbec42b1-7999-4e17-b98f-9e6aafb4b1e9",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "3cf927b4-0158-4c69-b7b2-e3cb0c6efa4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f32bce8c-40be-471e-b184-08a8ca0d483e",
        "cursor": {
          "ref": "d252bb18-2970-4b72-8983-48a9cfe384f9",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "d87731f9-bd89-44cb-a4f4-361c8a17bd0f"
        },
        "item": {
          "id": "f32bce8c-40be-471e-b184-08a8ca0d483e",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "572bd5d6-0288-48a7-ad22-763d213feed0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2b26310-a80d-4c42-9b4b-149319a2e24b",
        "cursor": {
          "ref": "4fcc5f89-978c-4cdb-bb8f-20e10442c130",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "e1d127b1-6e21-47d1-87b8-ce9c500cf994"
        },
        "item": {
          "id": "d2b26310-a80d-4c42-9b4b-149319a2e24b",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "1d7bd6d6-c793-4210-9848-89a4e4a080c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53c7a4df-6f26-4993-8278-7b17e2e9f9e4",
        "cursor": {
          "ref": "5122dc34-4d8d-42c1-b8c0-be39e80ab473",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "b847a465-acd1-4c97-8591-7797c3dcf1c6"
        },
        "item": {
          "id": "53c7a4df-6f26-4993-8278-7b17e2e9f9e4",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "a4d536a4-2d44-4c87-b5ae-0658d736a7ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93d29174-606d-4496-97ad-2e7b92d4a73e",
        "cursor": {
          "ref": "0a52d5b0-5d1b-4350-9fce-4968c96d3565",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "6995b66f-884a-46cd-9af0-acf906e69d56"
        },
        "item": {
          "id": "93d29174-606d-4496-97ad-2e7b92d4a73e",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "6de95a3c-154a-44cf-95b5-dc0f16643ba2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fdd3cc8-cf53-47cc-b702-bf20ad9d80a8",
        "cursor": {
          "ref": "9a0318c5-da61-490c-b4b6-40e353dad58c",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "b5fcb07e-a4ac-4796-9505-c4d689c93782"
        },
        "item": {
          "id": "0fdd3cc8-cf53-47cc-b702-bf20ad9d80a8",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "32267e05-5e4a-4e8f-a641-aa4e6432d055",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a737e03d-26a5-49ec-8e50-ba4cdc2f0dff",
        "cursor": {
          "ref": "b2a6bdf2-58d6-49ca-a2dc-da23de72306d",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "1ed951e3-e643-4c4c-8c3a-e8d209c5dbb6"
        },
        "item": {
          "id": "a737e03d-26a5-49ec-8e50-ba4cdc2f0dff",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "4f3b227e-ff30-4f77-bce3-d4eef7f45227",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7be03853-a6b8-4b4e-8fc5-08524fa862aa",
        "cursor": {
          "ref": "60d1dcf5-7a9b-488d-9ee5-a58e58096f72",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "ffac393c-e998-4e2f-b036-274dc9a18840"
        },
        "item": {
          "id": "7be03853-a6b8-4b4e-8fc5-08524fa862aa",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "ffa424a5-88a4-4411-804e-8e068d30fedc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e1aa025-fc6c-4d58-98a1-399cd14b32b3",
        "cursor": {
          "ref": "1bc4f4f5-3430-4335-b159-4e71164a2edf",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "99c85578-63c2-49d5-80a1-5daad7dba9bc"
        },
        "item": {
          "id": "3e1aa025-fc6c-4d58-98a1-399cd14b32b3",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "7588f7f6-a924-4b19-ab60-aa9ff94c7526",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e848402-40d8-477c-b92f-1be12a67281e",
        "cursor": {
          "ref": "75d78861-2eb7-4b4e-a4c3-80ac5eec53d4",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "3a028390-5b0f-442a-a6f9-acc8b0f0d5e7"
        },
        "item": {
          "id": "9e848402-40d8-477c-b92f-1be12a67281e",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "eb34ca04-e37b-4f13-afd9-03983efac105",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f231895-9bd7-4be3-9a62-0e58a3fbbf24",
        "cursor": {
          "ref": "5f15a557-0e23-4fb1-8f7a-4031c4573c60",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "4e4d74ad-5973-46ef-95b6-aab6ea74ddc4"
        },
        "item": {
          "id": "2f231895-9bd7-4be3-9a62-0e58a3fbbf24",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "1119311a-d4fc-4ddc-ab5f-114e927fef5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88589a70-ba7f-4fcf-80cf-f66936f9db56",
        "cursor": {
          "ref": "e11441b2-30ba-4404-bfd9-92e8c772a937",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "ff8afa66-8d9c-4917-8d31-97b979bd1db5"
        },
        "item": {
          "id": "88589a70-ba7f-4fcf-80cf-f66936f9db56",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "3e9a4190-24a3-449d-bbdd-bfa3bce97b46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "623e41b8-06ed-4fe9-b677-295ff7f7cd8b",
        "cursor": {
          "ref": "627c3049-bf97-417e-8180-f8c598423e48",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "34a08598-1345-41ad-bb33-1988d3aaf93f"
        },
        "item": {
          "id": "623e41b8-06ed-4fe9-b677-295ff7f7cd8b",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "5550974e-39f2-4c98-a891-50185713f90d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14ddbbf3-0e49-4676-9933-5c9db249fbae",
        "cursor": {
          "ref": "5d1c9c02-0430-4849-ba0d-69098ff96d97",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "241263aa-5bdb-4e0d-8c79-5b185575db96"
        },
        "item": {
          "id": "14ddbbf3-0e49-4676-9933-5c9db249fbae",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "9107f8f3-219e-41e1-b949-ecfcf920472e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88dbf207-ff78-45d5-b056-11b2b5d90fb9",
        "cursor": {
          "ref": "648f20dd-bd97-41e4-874f-c974a74314c3",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "91411792-46ef-47fc-a1bd-2455a49d9d44"
        },
        "item": {
          "id": "88dbf207-ff78-45d5-b056-11b2b5d90fb9",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "77b842ee-8b2b-4c1a-9a0c-1650a0e028d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c415a3f2-b535-40c2-af0a-4aa00425925a",
        "cursor": {
          "ref": "8ccd1ecf-2db9-4948-95a0-acf7ab074a49",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "d9d260ca-9cc4-4a5d-87dc-82c9e7c22b89"
        },
        "item": {
          "id": "c415a3f2-b535-40c2-af0a-4aa00425925a",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "4e5b5bdf-009c-4155-a763-bacc92a6594f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11b05dfa-16bd-481e-8cfb-785914635994",
        "cursor": {
          "ref": "da5a9b6d-e153-467b-9974-d41d0e63819a",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "3b7bc40d-83ef-455b-a4af-3ed363b8c4be"
        },
        "item": {
          "id": "11b05dfa-16bd-481e-8cfb-785914635994",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "4dee9fab-db3f-4069-b7d4-7590d7c33096",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fce4a2b7-95b1-488d-8bae-9c572b91cac1",
        "cursor": {
          "ref": "9e01e786-36f3-4909-ab0a-c2dd8b94e846",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "4361371d-ead0-4419-ad9b-4df863022488"
        },
        "item": {
          "id": "fce4a2b7-95b1-488d-8bae-9c572b91cac1",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "eb04b9cd-85a8-4905-9f04-4892f7127afe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1140a855-f655-48e6-a6fc-f57fa1589258",
        "cursor": {
          "ref": "15dab7c3-8787-415a-8543-9a0f3046726b",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "2f2a3ba8-9614-4217-a898-481afeee6954"
        },
        "item": {
          "id": "1140a855-f655-48e6-a6fc-f57fa1589258",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "c7314ef3-4027-4441-9153-f015febc8daf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d02da9d-e07d-4538-bbb1-88b5ae7f6cc6",
        "cursor": {
          "ref": "934a1204-e64a-4fc5-9551-f569d5c0aa6b",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "e8023eb6-c6d1-4f3d-943b-a2884c500dca"
        },
        "item": {
          "id": "3d02da9d-e07d-4538-bbb1-88b5ae7f6cc6",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "95b06932-0540-4906-a7e4-f6fc5870552b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dfb86dc-45db-446d-92bf-b1d3dc3ccbd5",
        "cursor": {
          "ref": "bf0328ea-dc98-413e-872d-02cec177402c",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "5fbfbbd9-95fc-4255-87f3-8cf56badece7"
        },
        "item": {
          "id": "3dfb86dc-45db-446d-92bf-b1d3dc3ccbd5",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "74ef3286-8e0c-41f6-a479-8a379feb1332",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b5ca987-400c-41c4-b186-94c7fd780f5c",
        "cursor": {
          "ref": "4412dfdf-cb2f-4951-ade5-d8f3112e74d1",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "6dc24da2-b67f-4e8b-9511-f67aa4a2cb63"
        },
        "item": {
          "id": "5b5ca987-400c-41c4-b186-94c7fd780f5c",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "a2d7b769-8893-44bd-9ae5-505b4650cef7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "002ccea7-f2ca-4a84-86dc-7bb231b78ea1",
        "cursor": {
          "ref": "eb8de55c-05d2-4e28-8ea0-e1d033fce64b",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "45970995-e563-4f54-bd21-47001a0cd17d"
        },
        "item": {
          "id": "002ccea7-f2ca-4a84-86dc-7bb231b78ea1",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "5f532e0d-aea5-4380-9e00-772460a36087",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "728aa25f-7e58-48ea-ab32-b5cb3dd57997",
        "cursor": {
          "ref": "51b6f0fe-1544-4975-b588-4dde88647bb6",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "ff507bb0-9403-4257-a805-d848a86b6eee"
        },
        "item": {
          "id": "728aa25f-7e58-48ea-ab32-b5cb3dd57997",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "6b62752b-ee42-4d83-aaa4-b34320f52c7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9da41ce6-c318-4ef4-ab2e-541015b1c025",
        "cursor": {
          "ref": "f26ebb94-02d4-45e5-96ff-4d126b6cec3f",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "840b1738-a4a7-4365-8f24-8cdc5782f034"
        },
        "item": {
          "id": "9da41ce6-c318-4ef4-ab2e-541015b1c025",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "20e3a476-b7aa-4804-981a-acf6598f89ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79123d92-734c-4e6d-9c91-5d7a159bf4b2",
        "cursor": {
          "ref": "ab74a0df-19e2-4dd8-9de7-ebfeb4721fd9",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "a37a8d81-f3fb-412b-8f90-1b1a7f2766c4"
        },
        "item": {
          "id": "79123d92-734c-4e6d-9c91-5d7a159bf4b2",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "51b27694-206f-405f-99b8-c977aa2046d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60348e97-e243-4758-b731-95f4dadf98df",
        "cursor": {
          "ref": "17c50586-811e-4ceb-86a2-942474926659",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "79c47275-05e2-403f-8482-12e53fdcd14d"
        },
        "item": {
          "id": "60348e97-e243-4758-b731-95f4dadf98df",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "f7e44831-9ec5-451c-9e8e-18aef45dc7fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c581510d-b4f0-4069-8b5f-e4f6eca30407",
        "cursor": {
          "ref": "e416f409-ea4c-4722-95dc-af223f261873",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "a5797790-6f77-42bd-a355-e02ac17e627e"
        },
        "item": {
          "id": "c581510d-b4f0-4069-8b5f-e4f6eca30407",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "0ea194ed-f3e9-462b-892f-8afea981cb48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9911bed3-d5e2-4629-9054-e49041e8953a",
        "cursor": {
          "ref": "138cda5f-9d06-4171-904e-a98d3851f552",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "70ff7bc6-ae81-4ec5-bcf1-db67fd822cd9"
        },
        "item": {
          "id": "9911bed3-d5e2-4629-9054-e49041e8953a",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "e3ec91e9-27f0-4394-9dba-abd2cb094deb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d1c5419-2d7e-46ed-86a9-0d18f97c5698",
        "cursor": {
          "ref": "9c864eff-ce02-49d6-8fb8-9288063a2b6f",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "ac34f067-9f14-43db-87a0-e82e93105a11"
        },
        "item": {
          "id": "3d1c5419-2d7e-46ed-86a9-0d18f97c5698",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "07b58033-d303-4132-b79e-4e70fca86821",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32e4d9ee-572f-4a18-8fd6-d2445da60c61",
        "cursor": {
          "ref": "1ab7b126-2354-42c5-b16b-77e9cbdd953e",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "aba0b2f4-9f3b-41c3-87f0-8b94bfb781f5"
        },
        "item": {
          "id": "32e4d9ee-572f-4a18-8fd6-d2445da60c61",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "619736ad-656d-4ec0-a373-76e49b93248b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad6ae48c-db66-442f-83ef-541313690399",
        "cursor": {
          "ref": "b008f670-2918-4165-a27f-021442da3717",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "ed45fd50-ba20-42ae-9869-3c05b3a5c5f8"
        },
        "item": {
          "id": "ad6ae48c-db66-442f-83ef-541313690399",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "b69a5362-d724-4b8d-817b-3b18833ded5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4921dde-f01c-4af6-9328-658d327c9500",
        "cursor": {
          "ref": "6a2ed18d-884d-4c61-b701-b3b02abc259f",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "568ff655-3c46-48d5-8b6d-886aec6a7396"
        },
        "item": {
          "id": "c4921dde-f01c-4af6-9328-658d327c9500",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "c9a451bb-7da6-4ad3-9ad0-2f82cda2e6b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5c9c3f1-a0cb-48df-94e4-58dae98575c5",
        "cursor": {
          "ref": "e45ecff0-7d46-4dfc-b1a6-adde976beebb",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "3b3c17bd-0048-47f6-b3de-9b1282c86127"
        },
        "item": {
          "id": "b5c9c3f1-a0cb-48df-94e4-58dae98575c5",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "d907d8cd-22f1-474f-b842-447a6113f0bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a1e77e6-94cd-4a0b-9e42-5432e1af3ebf",
        "cursor": {
          "ref": "92767b83-b2bc-4f5e-bf01-e82df1ca328a",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "5485b48c-e290-434c-9a4b-21af4b2205f3"
        },
        "item": {
          "id": "7a1e77e6-94cd-4a0b-9e42-5432e1af3ebf",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "c4c9d5a5-58e9-4f0b-9d15-a6f4c2acc10f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "184ca6d3-4655-4caa-9859-2c2b89a06f73",
        "cursor": {
          "ref": "86f71c2d-5bef-480f-84eb-87e054fc7744",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "01719eea-fb7e-47b6-8a94-2673db25d903"
        },
        "item": {
          "id": "184ca6d3-4655-4caa-9859-2c2b89a06f73",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "b76c3ee4-37f9-4e6e-8ba0-0ca3c96c0622",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91fa3fab-d9ef-4e89-994f-8220dc46de4f",
        "cursor": {
          "ref": "854b97ea-4f64-409d-83f6-e6109b5f7ac8",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "2b694c8e-f64e-4364-8636-2f61ac79221c"
        },
        "item": {
          "id": "91fa3fab-d9ef-4e89-994f-8220dc46de4f",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "b8abba83-f366-44e5-af12-ee82b1c46366",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d384f6f-21be-4de8-8fe4-3efa74d4ab01",
        "cursor": {
          "ref": "9825bb67-4340-4c5b-a978-64f573ea4472",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "cc2958a4-cf5e-4993-ab38-9079a988a0c3"
        },
        "item": {
          "id": "4d384f6f-21be-4de8-8fe4-3efa74d4ab01",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "e56370ec-89e6-4d86-9e1a-e31593f3f233",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08e2ba91-121d-4f99-9dd8-6dba063f0ace",
        "cursor": {
          "ref": "eae26f1f-c6a4-45ea-85dc-15bce65593da",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "1f9e39b5-706f-4827-801e-dc97eaf35ad1"
        },
        "item": {
          "id": "08e2ba91-121d-4f99-9dd8-6dba063f0ace",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "3eb91a51-5711-4672-8f37-a6b8789fc747",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b93e6e24-773e-4fe0-937f-9df77800c123",
        "cursor": {
          "ref": "7a37b597-5b2d-402c-a651-a6f86d7aba23",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "e3582955-947e-4a06-8d91-f436d0fc7331"
        },
        "item": {
          "id": "b93e6e24-773e-4fe0-937f-9df77800c123",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "64645285-a9dc-49b8-8364-a67b751711ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b824640d-9843-495a-afa7-901516b0f79e",
        "cursor": {
          "ref": "30e23b58-9b2a-4fa0-bd12-dc4b6265fff5",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "564064d7-c6fc-474f-8740-2358a0f8202c"
        },
        "item": {
          "id": "b824640d-9843-495a-afa7-901516b0f79e",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "8957ac89-a135-4f87-83d6-d1577e4f4cce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f70eb14a-3240-45a9-b9cc-c6556299dc17",
        "cursor": {
          "ref": "b04f00e6-f0e3-44c4-9ba8-1ed875c7c982",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "fc125da5-b1f0-47ad-9847-9f0ca67be29c"
        },
        "item": {
          "id": "f70eb14a-3240-45a9-b9cc-c6556299dc17",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "e6a2cc37-93d9-4740-9448-b29a17c2accd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0dd5210-d8da-4222-97e7-2dea53330fb5",
        "cursor": {
          "ref": "7cf77a0f-cd5d-4c50-8bce-dacef17fa568",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "198ffba1-c0b1-4cc3-9631-1d02c1eefcb8"
        },
        "item": {
          "id": "f0dd5210-d8da-4222-97e7-2dea53330fb5",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "79023f31-dfeb-479b-bffe-d8091df8b422",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1439a5fa-c4f0-4cfc-90c1-6a673d5c3458",
        "cursor": {
          "ref": "44b8b847-4c83-4eaa-b722-879013850fb3",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "95d70efe-93e6-49dc-a8f8-5ca476168c71"
        },
        "item": {
          "id": "1439a5fa-c4f0-4cfc-90c1-6a673d5c3458",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "79abe3dd-beaa-4fa2-b30f-401540a5ac9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d256b54f-b124-4674-b744-7960b98e791d",
        "cursor": {
          "ref": "bb1449d8-43f1-4eff-a014-bd5eba41b1bb",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "9265e6b5-22a3-465d-b90f-aa2095c94f28"
        },
        "item": {
          "id": "d256b54f-b124-4674-b744-7960b98e791d",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "b8ef2ab7-9687-423d-ac7b-b364b3daba8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 203,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a629da0-c846-449e-8985-723e192e913e",
        "cursor": {
          "ref": "ff75d98a-5595-4a5f-b4ff-fda52244edf8",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "cadcc30b-28bf-4c83-8658-791857c05b42"
        },
        "item": {
          "id": "4a629da0-c846-449e-8985-723e192e913e",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "790a34f0-762a-4e7c-9b62-283df4c37e17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeb2d39e-4c46-4832-9b45-1377a097e9ac",
        "cursor": {
          "ref": "26af3c03-2ab1-446d-b577-f685ad409e6d",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "009d256c-2941-4de7-bff1-f5c557607089"
        },
        "item": {
          "id": "eeb2d39e-4c46-4832-9b45-1377a097e9ac",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "bc0695de-173c-4ad5-9e0a-24bc08b5bbe4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5deebbe8-f3d0-4a80-a2a2-57e5100cb92f",
        "cursor": {
          "ref": "d3d72016-a082-432e-9fe7-23d05425427c",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "b0a2a791-594a-411e-92c6-520294e530ad"
        },
        "item": {
          "id": "5deebbe8-f3d0-4a80-a2a2-57e5100cb92f",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "7820ea50-69c1-4acb-a461-dd0531e7d625",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b587e0ef-e6bb-4f3b-b590-72c8a2d0550a",
        "cursor": {
          "ref": "5beb69e6-445c-43ee-930c-6bb866298783",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "20c13c03-129e-4359-a3d7-7b03550dc111"
        },
        "item": {
          "id": "b587e0ef-e6bb-4f3b-b590-72c8a2d0550a",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "103c2348-dcb7-4432-aaca-565fe8e39a02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49f304c8-2807-4c51-b2d5-a68f029c1035",
        "cursor": {
          "ref": "b948eaec-63b9-461b-973d-555f674fe47b",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "dc60246a-925f-4bca-bbbe-c203669bbaba"
        },
        "item": {
          "id": "49f304c8-2807-4c51-b2d5-a68f029c1035",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "ad3540c5-38c6-4f69-8057-f93928b3229a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9024d603-b1ad-4e16-9e86-fb13eba094ed",
        "cursor": {
          "ref": "20e1f407-8339-4e21-aba7-c0ec32f74d1f",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "bf62f5c5-16e9-467a-87e2-6351c593de04"
        },
        "item": {
          "id": "9024d603-b1ad-4e16-9e86-fb13eba094ed",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "906557b3-f1ad-45dd-8442-02874c95cf9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd084551-890a-4551-8f68-9f78ac0b7f58",
        "cursor": {
          "ref": "c3496bb2-139e-404a-94f8-3ad8214da25e",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "1d6423f6-86f4-4bfb-85be-d7f74a35af87"
        },
        "item": {
          "id": "dd084551-890a-4551-8f68-9f78ac0b7f58",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "5b559656-e16a-46f6-9458-2eba58d61720",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3436f270-304c-4c18-8357-100e94d58b0e",
        "cursor": {
          "ref": "fd636203-ca0d-4f3b-a6ab-0c571d431075",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "322a01e5-3551-42e4-a3ed-a50941577da9"
        },
        "item": {
          "id": "3436f270-304c-4c18-8357-100e94d58b0e",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "8323b667-a78a-48a1-8dfb-61298e1f9fb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68a461f8-fa13-4de6-96fc-f78ecb351b98",
        "cursor": {
          "ref": "eda5a552-9242-4751-864e-fd12e5d5b870",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "5d99c882-a4cb-4c2d-94fe-b641b0d12dbf"
        },
        "item": {
          "id": "68a461f8-fa13-4de6-96fc-f78ecb351b98",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "6088e62b-8dc9-4e85-b5f4-e66181fe0d91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe07a112-9464-4efe-b421-98b3b44bb23f",
        "cursor": {
          "ref": "ad4d5ac4-e1fc-4f12-97e7-42fd9c05cb5b",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "53e9ce11-506d-4444-9f03-59ecc4659010"
        },
        "item": {
          "id": "fe07a112-9464-4efe-b421-98b3b44bb23f",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "21b54deb-c486-4d12-b6c3-50c5a120563b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1823a261-ca6c-4391-9a97-39b8f7929a5c",
        "cursor": {
          "ref": "981da4e0-84a0-4e37-8277-652b51c20efe",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "99f5fb54-a9f5-4496-adf4-2f657d76bd9a"
        },
        "item": {
          "id": "1823a261-ca6c-4391-9a97-39b8f7929a5c",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "3faa65ef-9890-4316-b4d6-e71d5e5f40c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "135ec936-71ae-4c9a-96e0-f636634af2c4",
        "cursor": {
          "ref": "c805cc83-7e7e-458a-ae8d-17571a5a6d29",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "4b6e6fef-c8a0-4f73-b247-28426342a729"
        },
        "item": {
          "id": "135ec936-71ae-4c9a-96e0-f636634af2c4",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "c39f07f3-69b6-43ba-ad44-34bb7461d6b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6a61c6a-a639-497b-995b-4f9bee69fc2e",
        "cursor": {
          "ref": "50df0719-e00c-424b-bff8-2a1897baddec",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "5e44ec7d-68e0-41c9-86f1-f842bedf86e8"
        },
        "item": {
          "id": "a6a61c6a-a639-497b-995b-4f9bee69fc2e",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "54b43034-b533-47c3-abdd-73f33754b187",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a35cee01-8023-4708-8f44-7c411b8f73ce",
        "cursor": {
          "ref": "896e1031-1eda-459b-bcee-f62311e621c6",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "3280e2e2-db9f-4f24-87e8-ab885f451a20"
        },
        "item": {
          "id": "a35cee01-8023-4708-8f44-7c411b8f73ce",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "bfdfb294-4367-452e-a6bb-d378c080a1e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f20c4a8-267e-44e9-b87e-f99f4c8f8f79",
        "cursor": {
          "ref": "003080e1-ad58-403c-8f3f-5b3a2ab7562f",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "60d4df2f-015c-471a-b68b-e5d0d5e9c1cd"
        },
        "item": {
          "id": "1f20c4a8-267e-44e9-b87e-f99f4c8f8f79",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "66543a83-ca2f-46b6-8f8a-2df32d854136",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05ea11d6-54e4-4280-a7ba-f4bd8d2ef6cb",
        "cursor": {
          "ref": "675adc13-7e85-4873-b028-7eb3316a00be",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "868d5b77-9a38-4a3b-8b44-85c1c2d68f22"
        },
        "item": {
          "id": "05ea11d6-54e4-4280-a7ba-f4bd8d2ef6cb",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "af33eef2-4078-4ddf-b7b8-d5d7f69367ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6673d1b-3eed-48b4-b878-c5271d46104f",
        "cursor": {
          "ref": "dc1041f7-7a23-4d87-98c9-b4a15f23040c",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "8f699e21-156f-48a2-aa70-245f3dd1fa0d"
        },
        "item": {
          "id": "e6673d1b-3eed-48b4-b878-c5271d46104f",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "9cad9420-745d-4b9e-9c3a-e1dcb173a362",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b208856-92c8-4025-8f1d-8acf00fe30b0",
        "cursor": {
          "ref": "d251d958-73d8-40e3-ab8c-9bf0c289a725",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "eccea13d-79eb-4aec-af3b-292c6b794454"
        },
        "item": {
          "id": "1b208856-92c8-4025-8f1d-8acf00fe30b0",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "05c2feea-2815-43fd-ba62-7e3736d40d1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7a959ee-2e28-4b1e-bcf6-94a239337c6b",
        "cursor": {
          "ref": "8f3eff55-65a7-434c-937e-53e0c08cc350",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "3d6bc65f-2c1e-4b28-8f46-df0bd119f3ea"
        },
        "item": {
          "id": "f7a959ee-2e28-4b1e-bcf6-94a239337c6b",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "04082cce-4ac2-4edf-a19e-e0265fe4de40",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "5ba3d09f-87a9-43eb-b326-40e9fd510372",
        "cursor": {
          "ref": "ed0bb28a-5db0-46b4-ae5b-b56aee2db680",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "a93ede52-6e81-4325-a6ed-a686ea449f55"
        },
        "item": {
          "id": "5ba3d09f-87a9-43eb-b326-40e9fd510372",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "409e639c-b1fd-4b32-90be-651f98c37955",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "4ca2084e-d6f3-4bbf-9891-69e97edf6e9c",
        "cursor": {
          "ref": "86f9f640-2357-4a10-84c7-9a1bcadf6e14",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "9b653cfd-f037-44dd-8398-42a21b8d0f79"
        },
        "item": {
          "id": "4ca2084e-d6f3-4bbf-9891-69e97edf6e9c",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "aa1976a3-4c2b-43ae-82d5-0cbc0980a5db",
          "status": "OK",
          "code": 200,
          "responseTime": 118,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a876407-3ab5-43ad-860c-5c4e91c99eac",
        "cursor": {
          "ref": "87c7fca1-16d8-4b64-bbf8-b0665eea16c4",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "260d8452-5602-45d0-b990-a727de8b33b0"
        },
        "item": {
          "id": "8a876407-3ab5-43ad-860c-5c4e91c99eac",
          "name": "credentials_verify"
        },
        "response": {
          "id": "8d51ace3-fbd6-404f-935a-a24b12344332",
          "status": "OK",
          "code": 200,
          "responseTime": 1767,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "b82ba5ae-e806-4b57-a7cf-0257b1c89096",
        "cursor": {
          "ref": "cf3a8e02-a0bd-44fc-894a-435b385f6b9e",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "5f1cc256-bb69-4e38-99b5-aa0da67e3fc2"
        },
        "item": {
          "id": "b82ba5ae-e806-4b57-a7cf-0257b1c89096",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "10f034f6-dc71-431c-91aa-0d33145ed002",
          "status": "OK",
          "code": 200,
          "responseTime": 2099,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc2b14f8-41e8-4f09-84c7-1e02d52fa254",
        "cursor": {
          "ref": "1152c2f5-697c-49a5-8828-eb2dbefcc0fe",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "ca3d5236-b919-40de-9af7-be5e9e844a51"
        },
        "item": {
          "id": "cc2b14f8-41e8-4f09-84c7-1e02d52fa254",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "7dd65edc-4a07-440e-8a87-d43886ddc8b6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "cc2b14f8-41e8-4f09-84c7-1e02d52fa254",
        "cursor": {
          "ref": "1152c2f5-697c-49a5-8828-eb2dbefcc0fe",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "ca3d5236-b919-40de-9af7-be5e9e844a51"
        },
        "item": {
          "id": "cc2b14f8-41e8-4f09-84c7-1e02d52fa254",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "7dd65edc-4a07-440e-8a87-d43886ddc8b6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "cc2b14f8-41e8-4f09-84c7-1e02d52fa254",
        "cursor": {
          "ref": "1152c2f5-697c-49a5-8828-eb2dbefcc0fe",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "ca3d5236-b919-40de-9af7-be5e9e844a51"
        },
        "item": {
          "id": "cc2b14f8-41e8-4f09-84c7-1e02d52fa254",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "7dd65edc-4a07-440e-8a87-d43886ddc8b6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "0d8bf0d4-df29-4e04-a85b-f4e6c4a1057f",
        "cursor": {
          "ref": "b0ce836b-35df-4952-a24b-1633889f5b2a",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "dcc0d6ca-7dd5-4941-aee0-5195946d4cff"
        },
        "item": {
          "id": "0d8bf0d4-df29-4e04-a85b-f4e6c4a1057f",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "f2230602-f0bb-420c-bff1-02c2df3b988b",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "a107850a-7463-41bb-a04a-f5f4a9bd4197",
        "cursor": {
          "ref": "7fe7a855-a894-4d08-9efc-d279c1cd909c",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "18eb0669-977a-4d52-a5ca-a3159cfd6fb4"
        },
        "item": {
          "id": "a107850a-7463-41bb-a04a-f5f4a9bd4197",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "d655c773-ce2d-456a-864c-740f2bace211",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "a107850a-7463-41bb-a04a-f5f4a9bd4197",
        "cursor": {
          "ref": "7fe7a855-a894-4d08-9efc-d279c1cd909c",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "18eb0669-977a-4d52-a5ca-a3159cfd6fb4"
        },
        "item": {
          "id": "a107850a-7463-41bb-a04a-f5f4a9bd4197",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "d655c773-ce2d-456a-864c-740f2bace211",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "b32484ef-7871-4064-b616-028244563c3c",
        "cursor": {
          "ref": "a1fffdea-0b7f-4e6a-a968-42d66e522aa3",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "2e0e64a6-bd26-454c-ae11-5901c97efd93"
        },
        "item": {
          "id": "b32484ef-7871-4064-b616-028244563c3c",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "befcde84-f73f-4ec3-b9b4-3b789f720ae7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 169,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "1d070ec1-08ab-48b0-b7cb-9467df79debe",
        "cursor": {
          "ref": "878e9650-c955-45d7-ae57-44f2827ed517",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "495ab755-bda7-4466-b466-13bb46213550"
        },
        "item": {
          "id": "1d070ec1-08ab-48b0-b7cb-9467df79debe",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "cc99a08e-d76b-4b08-9a8f-77b302e849a5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "1d070ec1-08ab-48b0-b7cb-9467df79debe",
        "cursor": {
          "ref": "878e9650-c955-45d7-ae57-44f2827ed517",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "495ab755-bda7-4466-b466-13bb46213550"
        },
        "item": {
          "id": "1d070ec1-08ab-48b0-b7cb-9467df79debe",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "cc99a08e-d76b-4b08-9a8f-77b302e849a5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "9bbdae1d-7249-4b05-b039-d1935e11df1d",
        "cursor": {
          "ref": "62e48ee6-cc04-4f2b-a07e-98830a5a13f7",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "26e773f8-1a2a-4252-a599-bb7a8fcab476"
        },
        "item": {
          "id": "9bbdae1d-7249-4b05-b039-d1935e11df1d",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "5b930642-1437-42eb-afa8-8334c5bf3509",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}