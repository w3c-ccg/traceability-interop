{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "13723d00-af2d-407d-8bca-43358065dfbe",
        "name": "Clear Cache",
        "item": [
          {
            "id": "12a46962-e212-40d9-9e4e-458a8a576de8",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ae89bc19-0e32-4713-ad1a-c9eac2839faa",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "a5b1313b-dc22-4b76-871d-c38f0cdb0d56"
                }
              }
            ]
          },
          {
            "id": "8a9479fb-3673-490b-bc78-5977bb35b7c0",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7d291e4f-1314-4b34-bd7d-06a86b878c1a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "7875e483-921e-4947-a5ac-62e99f44a756"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "8b931611-4c40-4627-bd90-5e77fdb01527",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "6c43a3a1-1d91-4fbf-98ca-1d3c5a9efee0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "fe1b2d78-323e-46cc-bebc-5f39e541583b",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "eb6decca-7d0f-4385-a87f-a602fe7fab29",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e4825297-51c2-473e-b33e-acc544844cb6"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "79b01dcb-1317-4b45-88dc-0c921947f9a4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "23dbaf62-0a3b-46f6-8c6b-16ef21a59c37"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c0018a98-f470-4dac-a1dc-94a7e7c16dcf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1f858854-3bec-4803-8c1a-38287c2e58d0"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "deabb69e-0153-4c5c-8488-eb014c66cf78",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "a65e6eab-ad1c-4557-a476-7e26410628e9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0a207b6b-ddd7-447c-bfd5-d1132aa63e65",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e3901343-05b8-4306-9267-12d46254511c"
            }
          }
        ]
      },
      {
        "id": "2458b386-332d-4b87-aa4c-4f5c0c4fec07",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "79d3c659-8250-4935-b0f1-8d7c375468bf",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f5b787b7-46c1-4289-89b0-f9f14e26537a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6d5c8670-f64c-4cc3-9873-8f3e17e193e8",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39ff3799-2e06-43f4-89cf-a7cd066be5bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "be439b85-c85a-427c-825e-aa87b04deaa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7171670-74ea-48b5-a3af-833ea3076f2b",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa79d55c-4e9c-492b-b81e-5cc1828103e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "18e0a6d9-0106-466d-9c2c-8b296dfa6a1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62e886c5-ad06-4660-a0dc-291c46fba8f6",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f12b3cf-d1f6-4242-a188-64b441953310",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a7b57087-6632-45c9-aee1-620e761fc169"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7a6cc94a-e497-497f-b318-1904986a01fc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ca55736f-61fa-4e1d-be79-424a20ddbf93",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81997818-5d6b-4647-9126-5ff2bd1badb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "24e22548-a1a8-439d-acf7-facc3464b635"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59ae269a-5f25-4eef-b8cc-5a3602f76f56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "712f9ac1-d717-4023-aeb1-03a326561b90"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ac4b9aae-d6fd-4c79-839b-9ef86cd14ad3",
            "name": "Positive Testing",
            "item": [
              {
                "id": "fb5461e9-2a96-40ff-931f-40f14dfb372f",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f690af76-6cca-4206-9b77-34e4e9ccac4b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "ec07b752-d112-4e02-a2f8-daf7e62e861b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1327caff-7aa0-4b10-a296-38e2689f74a1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "27f17a05-a705-41f7-b1a4-cc24acf0057c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "adcc5a4c-07d5-4914-9f7d-7602766a7685",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4ddea5c6-b81f-4dbf-b649-4c82c24cad30"
            }
          }
        ]
      },
      {
        "id": "93caa81a-03c0-4c9b-aa11-93c68bc7151c",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "c83c44f4-9a48-4a66-8140-b2847d4f2eac",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b820182f-d073-471e-9f82-055a7fac70d7",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "5bd2dd5d-d076-499b-85ba-185e8897faed",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c414eb5-7f94-4bf2-9a74-c4cec070ee62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e79c60d-ce8f-445e-88cf-4af8803f254c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c0e759e-0b7e-45f6-a600-7cf67103d5bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fafc68af-7e07-4b23-8629-8f1309844b7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c947beb1-2dcd-4388-b697-c3a304160ad6",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d842a2be-b0a5-4851-bad2-9add183d2e3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e981059f-b519-4edc-b8fd-28e8a2e506ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94ebe90d-df5f-4223-8aaa-49758cd4af37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a233fa8f-b50d-424d-9542-5ca025f45514"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bc071ed-b54e-4e9e-a547-773a48960ef6",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a552082-e75e-4337-85d2-23d6e4f842d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9270e609-64b6-4409-9874-a7c5f50975af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3b1c43d-f24c-4279-917b-6c65418c22bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9d7756ab-3151-486a-9ecd-f8cd896365a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "333d11be-8e1c-4bd8-baf4-36f533bb4fc9",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21d51069-5621-42d9-a095-1be3d5f072e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9e417ef-2f97-48a4-80b0-41c6e6f33431"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c5bc239-6ba1-45a5-a0c9-ee8d6e171721",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "99d7cba3-c56e-4fd6-b073-09e3d14614ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa7354e8-1816-4e01-8da3-2a7405932830",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "596ae35a-35a3-42ec-b542-4acb647ec1ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33166b79-96fb-40e9-87fc-b0f98a534277"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2acc5fa-5803-4325-8ccf-87b244b60acf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "da75aa56-97e0-4e28-9d5f-e2f439ba9e3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48704158-af42-45b9-8472-3bf517b6e1cc",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a71a35fe-b790-4b30-8d7a-7777b512e1ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50075327-27d7-49b2-a9e5-b08e9752f816"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a49f2a90-78be-4f5d-b568-7ae1a7a00426",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "47258c89-9553-4311-89da-7aeeb1e3f05c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de6c6f5a-dc25-46c0-af62-417becb75504",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fd22f10-057d-4e81-9516-807921212d39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "974bba57-06e2-47a0-a940-66757f51ab7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adf8696e-6280-4374-8ecb-f4499cfafcf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1bfafee4-1956-448c-afb1-14f9306c2811"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b7b9d13-32e9-4104-925e-91577d546441",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45ec9472-d741-454d-84bf-1df83648819c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4b55248-7ce0-42b5-bad0-9c313710f185"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba5ea042-dabb-4afc-b972-9fa3bb417398",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4f86508b-2493-4825-a591-68b0b218e9f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52250289-980f-4be3-8499-62dadd86b335",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a358fbb-a644-4059-af53-3b22dc87463f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63352e68-b263-4520-87ad-909196181f32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddfc76b3-4d76-414a-974f-e3c96934aedf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "850189bb-b524-4d0f-b572-6023dc51a3b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75b82eb4-b37f-4793-890d-0f6f9a9fc5a2",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62a8d731-ce4f-4d78-a30b-9dd6e239e063",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a6453ec-151b-4482-b73d-959743d48bbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6130b791-ee62-4e41-a8e6-c035700a437c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "37b03d75-5bf1-4350-a853-80525b5679bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4812549-0673-4e85-8473-0f5de7bf38c8",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a470fccd-94dc-4d90-96a9-a1087734ce2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3ba90df-d4ae-46e6-a0ec-cf5127981ce0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a916655d-f398-4051-9ecd-67200c5fd389",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c15a5c20-c022-4cc6-8c78-6b76ba410275"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5424daab-3b84-4bf0-a452-bc1d91ff0f0a",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49ec67f8-d48b-4f9a-a115-8d7e16fe93ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "957257f1-7401-4e16-b9a5-af977fe91329"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad7a91de-f24b-4146-bb77-78f52bb7fe2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2dfb610a-5e46-4671-9977-5185ec6032b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c58e7d4a-ceea-42a0-ae74-ac0bc2234359",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15267ea4-efc8-4eec-92c9-a426f39ed0ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f23c5cfc-f9e5-47cb-ad88-d2496aa4320a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e58bcc0-f53f-4389-b2c6-8d1b5a1a2408",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a7f6fce1-beb8-4821-96a9-f8e7b3a36775"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b971a4df-cd2c-4727-8ab2-2b30e765770c",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ce01f85-c55b-471e-935b-afc94c66fb1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f69fcee-6011-4e24-8f11-87afa4850799"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88a55b47-77f3-42e8-9f74-ddeccecc7df4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "58ae4d3b-0656-49b8-8919-bd7921c85881"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a502935-66ef-4c57-bf09-2bd0808fd68e",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e67285d5-ca12-470d-85a5-8a1b373d2783",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8068cc4c-ff8e-4612-8760-6071ffb3accf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22569fbc-709b-4a70-bab0-908660a83c26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b31daca4-f24f-4913-9ee4-dc8db594aefa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9463f0e6-f3d5-4df0-89e5-52a4577e81d2",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb2fe63d-c881-4a12-abb5-31003f8f779f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "010d5d6d-6db2-439e-87f3-aad0e06274c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8137bd2d-f7fc-42cf-a800-a7093614c0d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "66934d98-b8d2-4a0f-8846-6a5fc4a999d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e07e9fd-9107-47ba-b81d-fa3a55ea9a1a",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dcb4938-7cde-4d63-87a5-669266f0bc0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dedb6f02-3afc-47c6-981e-02f681ce63f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e9aa9f9-1fdf-4055-9d3e-62cff88f7482",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9182f204-24c5-4535-b04c-16f7eff1379f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfaa2ddf-a136-471f-9083-92c8f96f45a5",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44b0ac8d-8d9e-4bd1-b893-2efeecb7c61e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aba266a0-cbd3-4987-bb35-5080cf1ef130"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77a3a6e7-21a2-459c-90c7-641632a58564",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "b8a222c5-c709-43f8-8ea9-bb5b3510d792"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf14dd45-b99d-45f9-948c-6f7dd6bd8b0b",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8991888e-513a-44e5-8fdb-edcb3d833cd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbb30a3a-1203-461a-bf5a-6acc25f335a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6058ad64-ee8c-4808-95b7-dbf9ee15af6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6af63b63-2bfe-4403-ac0f-0505d7b097b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af893e7d-face-4c21-8054-15025e14b28b",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cfb0383-efe2-403b-b4f5-52933d000d2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "530b5a70-0c86-4504-b477-99444c8007ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a11f7752-779f-4467-862e-4a9a631cad3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b35f42d2-81fb-4262-a441-0d7ae915b8db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77ccfa27-34da-47f5-a722-0144a17b7c0c",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5d03a8e-8250-49a8-9b0f-b70ac8f52552",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e649888-a2b5-4d36-b2d3-124f744c0085"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dfabdb2-3c7a-4cb1-b781-78db8a9c8cd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "70fd2608-a3b0-41ce-9166-a12f1f001c4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dbb1184-4cd7-407a-98cd-1cfd95edf520",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17e9e9a1-ee76-4eae-9d1f-0b752aa87696",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c70fe60-f0ff-4c28-8c7b-aeeddb102a03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c32bbab7-1d26-4939-a3c5-8c3fff71d51e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ef92bbfa-2752-447b-b9e9-813f01dc6b6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93b01482-6142-480f-b645-900297f0dc19",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e03c20e-0080-434d-bd3c-061a37861304",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fd6cfce-d410-4881-a547-e91745824585"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0535a728-2787-43a5-98a3-eb67f8c3c29e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "320918c3-f59e-48db-80d3-0b4ac0000081"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd3ecaa0-80e2-4ad0-bfc4-5b213ec97f83",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66d1f4ef-0809-4843-98c3-36134359abe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f01c1a2-639a-4fa5-a63f-841b634f6c75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aedd776-0b83-441b-b88f-aa8a32efdfb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c2d21b8-c590-4071-a287-5b9e23e22331"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6de4e9a7-0078-4827-8f4e-e005db94da9c",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af073061-ddef-4e0a-9edc-966843f431e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22fe2ecf-38d5-49c7-94be-a407d6dbd7ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d32af2fa-eaa4-40d7-ad0e-5822318f13c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e94e9037-6ff1-441f-8afc-68a1272f50b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5771b1a9-f574-4cec-9087-90e040712da5",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f91c3b3-5321-40a1-b2c9-70b3e1a230f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68283fd1-c506-46a4-be0f-40fc893da0d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b2e7272-cb58-4b4e-a257-0c4f66277ee6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "74c5172f-a507-44e3-bdf7-596bd2a9f820"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f330f32f-a8ec-4f28-8fbc-a4bebb1d36f0",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "111e1bef-f468-47d5-93db-8ed653d93662",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00a3fe22-54e3-4e19-bdbf-3f3a013a4e3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67c251d3-e6a8-481a-b760-dc421d7e031b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bdaa42c5-f5dc-483b-81d4-9e1b066e9a69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "577d4b7d-0398-4042-bdc6-3d88d7ae01ea",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "667bdea5-0a6e-4c27-a113-78f0048628fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27acd26c-58ff-4b0b-9580-85b841ef468e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92057e5e-f841-4f80-be0c-1e5d884d8eb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa9eb5fb-3cd1-44ef-af76-3e1477b83710"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f8f2c7f-6da6-4d32-b194-dbd0ee0c71cf",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e49e0a2-6df8-49ac-8388-226ee639525e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9aef86a2-4689-4f86-a4d5-51c198b586b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be5d8366-1314-47ad-80df-e219d72f1082",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7bbf7638-47e2-415e-92e5-1c2f2f2b4b57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f6c03f5-2c92-4061-83c3-43b1574bab46",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ca640be-c9a3-49be-baac-cff006835313",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2920a4c3-62d0-4e23-a0ad-da0c1a3be4c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7467f7a6-743f-4c83-975e-98e8ca69ed67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf690f70-6ab5-42f2-ae07-c601fda5b40b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6fa665b-9470-4f39-9026-a10f4f995089",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f456388-2b81-404f-ad4c-e3d14b85682e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a29c794d-d78a-42d6-8112-787a0ce9c8f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7679d6b4-926d-4457-a599-bc269472ce30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0109824-f9ed-49d4-878d-9fff62f2f4fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e4afbdf-9804-43cf-b999-91d89545e394",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a74c78d-d14c-4dce-a7fa-5b0afa6a5033",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f64950f-f0be-43f7-8aa8-a91cb0c3fd3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f34cadc8-a00e-4964-883b-61b4748df625",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d701332-b308-4248-8217-af520902b1e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f601def-7ec9-45a1-9c56-a61a632d00fa",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77e6e276-b3c4-451a-8af6-06ea32891f73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3895cb03-2924-45ab-83c0-0ea958f3a506"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93ee9310-58b6-4854-9f36-c9c7f3b286e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "552c2067-70a1-4b70-af84-8ceb582fe5f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "440fc781-0a36-4e71-bb04-3cf4f972938e",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a59e67bc-3ec5-4f6a-800b-49d572b7a91f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b39d8a41-48f6-48e8-a456-4e04c8378209"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea18642e-8cfe-4ad3-abc5-a0dc39c7a180",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "543ec33a-3832-4e36-a07a-494e72622343"
                        }
                      }
                    ]
                  },
                  {
                    "id": "648a5b0f-cdff-45ee-884d-3aef5ffff633",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6740864-5f22-4898-954a-ef7e2de34d8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97519ccd-6956-4d22-9a45-a12bcb30f1bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91862842-55cb-4cfa-a3ae-aff32f2f63ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "a7a3b5ad-2eff-4755-9cad-f941c3e5d50a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df44c014-3c45-477c-8bab-b865adf2561d",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "873fab36-e512-408b-8e4f-aabcddba2535",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "637635f6-0661-43f4-8a0f-ddf0f228d1ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16504fd9-2f0c-4c7e-8164-bcba8fe574ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c4f4195b-f256-4977-a453-98cf2b30b921"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05432fea-040d-4579-a49e-03619915ca80",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab415ba5-ead0-4570-97c2-027350b4b949",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "724bb950-af63-4ca0-9616-c5c025125f3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "445fa08e-bd1b-4f78-98d4-891e4625ee8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "646e6f16-5199-44ec-a9af-a95fd3af15e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "815ae494-afff-4975-89b8-3e8daa75e66d",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ba92d9e-d73b-4293-b651-c476e731af2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b86c677d-811d-4ded-9daa-cfa7a7c1cee1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2565c14-6d3a-4274-91f0-63f7a5b66024",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d9d5b92c-6344-4f40-b0e6-0332d0cff27e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8db7a779-6d0d-4163-aa51-dea24a166ae2",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbe4cf07-31c6-4455-b930-f653a908e8e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d0ece5b-a6ef-4a54-ac69-7c534be88d70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3e5ba65-6b29-4645-866f-af45c8d946ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0e6dd462-c140-4eca-9d3b-2ec006e11ebb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73e9f1b9-6e67-46f0-a39c-ccbdbc8471a2",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "091d5d0e-298f-4b38-bb43-17f91ca9dc47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a89c7fa-e716-46d8-b910-ce25168bfc25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcace369-e732-4601-822d-0c4bc88b9981",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "781a79f7-5cfc-4fcf-8728-81d5d27c0078"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56deaa8b-d860-4132-a262-d840ec50d85b",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec9654c0-e026-4c2f-a984-718a4ca3b092",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0b7573f-05b5-47ef-9c35-3452d53a533c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf0fd383-fc9e-4ab7-90aa-52fd979a6691",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a88401a9-f9c3-440b-a90d-3c7fc2302b52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "481fd59e-b316-4915-b24d-8f189883d586",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84aea6d6-4b77-4c0a-88fa-a7c9f8a43bb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7debe4fd-280e-4d58-99d7-410d5f86ef9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3e86a49-919c-404a-b591-8b8be5557b66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "c643154e-960d-42f3-9868-a7cc50e0c9f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a0f7b2d-2d69-43e7-8dbf-c6573613ceb5",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e51ef55-80b7-4ed1-9aad-ae08693245c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6329f0d-081f-4460-a36e-5a174e4d4fd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1602f44-8162-4930-997e-5b021d0af191",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "9eab8ca9-7467-4ff4-a44d-8dd00a14d18c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fedb867-a6a5-4f2a-9556-a3ba426f5b1c",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09c6c1b6-0c57-4e18-9b48-4472973cdbbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4265862-79a2-4b06-8226-d41b7a785f3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0421f0f-e7e5-44fe-b7c3-b71560bf3ee4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "bb28b975-9f8b-49e9-be71-faf561fe41ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a9f31e0-8994-4baf-87b9-d62e50deb466",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4be6b6db-e8c4-4b54-8c32-22bd2f6243a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "689ebe74-5191-483e-a1a2-da41bf254666"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ba02e0a-f8d0-43b8-9ebb-4e25cd73ef9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c49fb36-de93-46db-b687-3b2e3c9ed4a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b9cb0a5-4925-4026-af0c-4764d2b32f10",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e93f48cf-b490-4cfe-a203-fae2e537422a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "261a36ce-f558-4950-8485-91f50dfb25d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dc9c1fc-fb60-4e3f-9db4-f0d2aa70e59a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff41110b-0ecd-485e-838c-7f5712b499d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64e2cf01-65b9-483e-b2bc-98a49ed2396e",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90e180bb-2e56-4115-a745-ebb90e427a3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e66a000f-b266-4257-a3c1-812ffd637ddd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40d7a056-8b50-46b0-8350-1f178020b54b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "565cb07d-7d58-4c47-836f-c6a139d71844"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aff55ba2-55ed-4702-8a59-061bc5d977f8",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "718c45f0-d32e-456e-b8c8-a366b722fca0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87de6d30-25ce-4e53-ae95-a5df8acc3c90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df8e093c-a464-46e6-8a61-14172eb3b64c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bdba36b1-74d1-44e9-a339-992530b302ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb0b0738-4559-4b0a-a643-c2444b4e38ed",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d99c436-18cd-44a0-8413-fe7e3170f16f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a91780b0-d00b-4b44-bba5-1ff234f87148"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcbfb69d-7f87-4475-908e-531edfdcb1cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5a6b87d5-3fef-4810-b07c-63663a265ee0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aeee856-e5af-4908-ba51-89cf69e1e899",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b97f758-7f22-4e53-ae98-571c72dd6574",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f669697b-deb0-4971-9821-bcdae7b3c175"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a64e4a3-afe5-459b-9697-6f1dab50f9e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dcdbb524-0e9d-4a28-b4fd-8ebdebd6867c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f1b39aa-0eb5-4d9c-9db5-33b4aeda2002",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87b1fb81-9565-4293-b558-f38a70d652c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78103e08-5905-4c91-8cc5-3c4102f7c154"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f72f6bb5-b5dd-40ad-ad08-8f38f85b7b74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "a23cf29d-9833-4d2e-b360-f030ff3588a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "350f6c80-3884-4f7f-9878-8bf4ce1145ac",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a449419b-a87e-4c82-8335-909995efb7bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15124190-399b-4a9b-82a2-baf94e465b64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c14ec6e-b16c-4dac-9180-f748b123efce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5bfe49b1-dbd3-42fc-b319-525a27c364b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b172029c-4095-448b-81ea-487887660b71",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a6c421e-6367-4e55-9ec3-863bca67c7e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "285e0ff9-b87d-413c-b0cc-496595d88e8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31fbb03f-5f88-45eb-8efa-8a6298b3657a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab54c25d-c196-47be-aa93-fa8cc04e9273"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53f84af4-d0c9-4c83-af8f-e2069a182600",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57e1c1f6-1ef1-4324-a844-29c7aa21c5bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49723f0d-089d-4924-b540-de362993afba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5b2e70e-4c5d-4bea-8935-0ab9b14b79e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d939577-5733-4807-9bad-f3dccc4aae88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2165baae-6455-45eb-92cd-48702355164e",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3598881c-45ec-4753-bf72-2f38768b0d65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b343ddcb-efea-4398-aa4e-9ab000e5d30d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58cf340a-8b6d-4969-acdc-07177980d2bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "84963c1c-8af6-4b88-864c-5655ff6cb0da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "863fa950-b372-4c2d-b162-ea96ebf2adb6",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "852dfeca-f895-43d1-89a6-19ed85bd4ae6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6928f3c8-ab3f-4a82-bfe2-dd81ac086947"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14a5b307-cf8a-4bfd-aa92-4c0290e059e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "55fbd541-6023-4131-822a-e377f8f0bd2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4c3a7e1-b93f-43b0-81df-a72328648b5a",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f9628cc-37a1-4f26-aa14-595ae7159f81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71f90f3e-08e9-4ffc-844b-637c10944000"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed5dca66-efd8-4c4b-be77-c450b49cbeb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ef73332b-06f0-44d5-942d-23babf2230af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ced50687-6fb6-45d1-8d6c-62d162bfd97d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2425d133-ab82-4b06-8ce3-bddad2bea0a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee19ad2b-85ed-4e5e-9c2b-6c187e6c1a80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4137abb4-94d3-4358-bf8d-bf64fd0ca3ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "68d24192-da94-4192-ae02-95a61cc691f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23d1b58e-04eb-4624-81a2-2810181eecf0",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40b9f47a-6d7b-471a-9b0c-da9cb8fe3df6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a095c9b4-4723-4dd8-841e-e442570f2d9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3d453cd-ff25-48d6-8c63-389df6cea222",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "00a72f45-5713-4d0f-87a5-87414de8f857"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dc93241-b19a-47d2-af44-1296f1a0ea04",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36aa5ba6-0fa9-47a9-99c9-36e7d9265134",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42056cda-1977-49a6-800b-9fe46cb74252"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "975308a8-115f-4c87-9a72-0fb03e96806f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "38a59e65-81cd-43fb-90f8-1aa28c7a6d7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "142791d1-56c2-483c-a9ea-dcdd5683a4a7",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e29aada-c09a-425b-ae3f-66c3e96c61b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09f39998-fb26-48ef-839c-e38bcf03b631"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ccdebd2-0ee7-4fc3-bfd0-a191a3596a97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ca9df820-dd54-4450-ae20-6e6f38e9a7cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3116fa0b-0feb-4f2f-af23-705979a5aba9",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c07c4718-e0ac-42cf-8f89-388a044845f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "232ee22d-79e9-49b2-916b-73e2e46d4425"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a44ff69-9cd8-437c-b9fc-bb3c919bd636",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "31668a25-28dd-4bf0-9af7-bbfd9435d47e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36e099db-52a8-4faf-b678-352362926db6",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0858c80e-fb15-463f-80c1-3ec80d85abe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fa9813a-0dcf-4331-840e-5e9c1817af64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73e0d4c4-2afc-47a5-8a20-9b9af5dd02d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2257c4c-aa74-4cc8-9894-72d8e3a91344"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d06bfa7-550e-451a-b7b5-edd314662668",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f8fd3fc-1462-432c-97f8-e6263372c649",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61c3c4c3-05e4-4e6b-984f-b60d4eb068fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7583b6d4-dfa7-4b69-bc7d-b5e9afd3ba2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7764206c-0dfb-49e0-a0ab-fe4f0b318d51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a59fcb1c-889f-4ae4-a234-ca38eff94049",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3c47e79-e8a5-4d3f-b797-9b0042f84e87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a19922e0-df4e-4ea1-80fe-a63b7e926e8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a70c8b18-25ac-48da-852c-5bff2a08e45a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bef7ccc8-3c85-4850-b12e-4eec6a893eeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca0c6760-947a-43aa-9f7b-3fdeb9d460c6",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f5cf08e-2968-459f-a840-e88534cecbef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8902a80b-ba23-4074-8d1a-11dbe498e4ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37480e38-c393-4bb5-a024-0d070b9903f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1467238c-f0f6-4e81-b7c2-a1c1acf73d51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c56c4b54-fcb7-46f1-b937-c739756cfa45",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfa0086e-7b8b-40e1-901b-d846731883ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7bef1a4-3b7c-486d-a6ec-b2461114a742"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4b5c995-f680-41d7-905a-1a8bf0160092",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e00fab24-2e37-47cf-a712-51d71c76e784"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc612f7d-d23b-447f-a39f-b34119132490",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b11ce3ac-a9d9-4af3-8751-9e294d22d4be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29b826d0-b535-4bad-b413-f13055d4e751"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f12251dc-fbfc-4235-b0c9-1bb6910493ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab803a1a-47bf-40c2-9ad6-6b92f8bd5ca5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b0d4deb-5296-4598-88a4-ea1a3430dc7e",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1da98e94-d80a-4532-bd85-23297edc873b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5d8cc09-403a-4d08-a936-5d100e392406"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4880fce2-6bb2-4e95-a85f-fbeff2cd8131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "eaa5f11e-9e90-4d9f-b1f4-f5c6ff094d70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "452d2aec-7fe4-4889-a07a-69cfa5f15fb9",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b72b2a24-2600-45ed-b1f9-9902652a5773",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d62e353f-20b7-4cac-a604-07eb343bbea7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bd9490f-c151-4dc2-a900-3161bd719b72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "599e6b1d-d075-4fae-b0f0-33f899b79035"
                        }
                      }
                    ]
                  },
                  {
                    "id": "643f1e38-00aa-413e-9b1d-61a64cbdb137",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1418bbbc-9f23-4a54-a4a1-01755d449526",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd5a5e09-b0b5-45df-863c-89a9660f4ca9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41c1b887-eb42-47f7-a868-324b2240378f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7acb981-68db-4734-8b65-8dc7e8f42183"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b0cbcca-185b-436b-934e-c3d0b82c9c23",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3778960-435b-4200-a8d9-98b7e9124d0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a55d22d5-bde5-48c2-8021-20d9d61b2de3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61b8be9f-0530-458a-931f-751203e0ab15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bed0ebbe-47ae-49be-8146-79e7abec7f6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fea46ce2-fbad-4d8e-b975-b1519512285c",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f3f8ea7-65c4-4c4c-9d01-4eac942a7e97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb3ce95f-15a3-4059-b5e2-f33b90b7aa5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b290f41f-3910-43af-ade2-8cd24a30a2bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1aeaf5c3-481f-4794-9903-39ac9564eba3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f73a739-e6a5-490e-804e-62597e6df36e",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86449d06-0678-419c-bda5-4c18f9289172",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56430a2d-d13c-4bdb-827b-7986458cc48c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea53b13d-db10-4052-8b6c-bc55f68687ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0f13edf6-f189-4a2e-b2df-f39821062bba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18cdb092-6449-4ced-a91a-58622172de02",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b616d124-4fa5-4fbd-b597-4b0600491013",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edb556d2-fd8c-4ca2-b1ed-673a9b164354"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c70c7577-e760-432a-ad36-36f16418484a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1460c130-a7e3-4946-9c20-46d8afadc3e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2810d4f8-c446-4506-bcbb-ada6d162b88b",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ada5307-60c8-4923-9e40-6b47916eb0fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fce8447-9b8e-4789-98d9-6a3c0561dcbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcbd73f6-8e0a-4f35-88d5-31955389c8ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "90f9d30e-7056-4d3c-95e7-a76e2be6114e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a71c3f5-f9a6-491c-a5b6-29bf1f4a8fef",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53a97882-51c1-4654-83a1-918c37ffa6a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "006b4510-f8d5-4d46-82ef-cea53bcbc283"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad2a2976-27e8-4904-9bdc-4ac28e552326",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e9b9d1e-f7d2-48cb-b590-da7cafd50d67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "225967b3-0105-4857-8a41-c4b3c643fcf3",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14322268-7587-4f1c-a941-58323590a5d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fd5b2ab-ae8b-42c6-897c-6903232a1448"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbb749e3-bcdc-47f3-8f54-0c145aa30c3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7409624a-d469-4923-8938-9138705612e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef2093d8-f103-462a-92d4-989615bbd9f2",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0f1ac06-2723-4915-9c73-b9be54de1f27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9061882b-6fbc-4da6-b4fc-020bab2fe7ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d2da10b-e747-44d2-a2d4-41d1c4ea0fe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d8acaaa5-fbd3-4b31-a9ba-f71f2efbaa3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0802b718-fd9b-4fb7-9205-dedacfbe7a9f",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a7e34b2-b570-459e-8905-f53b84d44d50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92ad2350-7938-45f2-9709-d10ad535c968"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d6ae427-091a-4ca7-9f0a-570426e9a90e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ed5e06a3-048b-463f-a2e4-b9d665f77099"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f35980b-75f6-41f6-a712-703eb178f7f9",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab9f4edc-87fc-43ec-b782-e37f9b5882a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36d4cb52-b82c-47a4-9fcb-952fc265842a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aeca5b13-347a-421e-80a0-2e176af65031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d58cefa3-8151-4b98-84a7-5df2298373e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9575e168-15b2-4c80-ba2d-117a01268721",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a1d33fb-be4e-42e2-835d-83b46088cb96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbcc96b8-f9d9-4d13-aa28-bbd464c42af7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f17869c-5af2-4ec4-96a0-fcfea1f0ab95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "44705406-8efa-4886-91d9-fbf72efc399e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c3137b3-88c5-416d-9f5b-dc06089953c2",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e51d3e5e-51df-4a9f-9d48-896d97921104",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "967816e6-f67f-4b52-b25b-ab37e57a0c1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "663ee6b7-8d5e-4372-af6c-4545c2ee5acf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "93b77ba8-fe78-4eef-b788-917d524bbd9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c69bc26d-3db4-411c-9cc5-62fda317c029",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e6fd17a-27a2-49fd-89c4-b3300f9e8814",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18e9534c-f815-4161-9183-ba979a75e6f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b469d2c9-4ebb-405f-96da-981ca8749a3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb3c3f55-6c36-4c9f-885e-9f87a29e563c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "994f70cc-0b67-44cd-bcd4-ff01422b5db0",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20b86f4b-cdbd-47ea-8272-d8c49602726c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a630d534-5aa1-4971-a0e3-adf6017a8943"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56ba2e3b-9cf9-4a32-adbf-49b411bc17ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b12eba4f-24a5-4776-a7d7-5af34bc12c87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "930dcab1-ff52-4d8f-bd4e-2355faa2b405",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06c2ea71-2443-4fde-882d-d1c4e8fb65ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59ff82c1-6271-4e41-ad06-03fef19c2a51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "084aa24b-ea1a-4bde-96f2-1a03a7d292fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3fdff4c5-f706-4f28-b97d-5e722c1be1da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9893d1dc-3d61-4feb-a602-9027bcb9fbb7",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "270163be-6227-41aa-94b8-4303e38632af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38b1c587-7c67-4e47-9c80-c0516e730c58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e819a50-b1e8-4288-abbf-649819b6bb93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0d064129-c7eb-43eb-ac98-26c29f56f057"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e9a19fd-b294-4731-9074-e98ae4841de2",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d58590c-27fe-4c9a-98b3-2a5df8375180",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dbdb090-0351-432b-a4cc-75808f9c0ebf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "403be52b-d2d3-4340-8500-9e7e2ddf8b36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f1e3661e-e88d-496f-bb25-dcf6d9ac4c2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7f5e4ee-60c2-4ac1-821f-055b3144becc",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17506e46-bac5-42cf-9686-e198ab7fe939",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cdd3da1-41e4-48fe-84d7-4aa890092ba0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "480edd7b-ce29-4816-afe5-f0adaab757be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e700682b-7ced-46cf-9e5f-1ecb2f95d7f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "352d7589-0a66-4e82-ada5-acdd483ce503",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7afc5c3d-34d1-4b0c-96f7-2b92cfcf803d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84b41a91-dc5d-42ba-b2cc-f2ce930db0b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4b837cc-93ee-4573-88bd-5a830784e3aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7edb1111-99e3-4218-a451-3ccd11e74dd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d552408a-2964-4d9b-9562-efc710454e94",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a3b7842-fb3d-4d70-8cb6-dd7793a70dd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "871aa875-3111-4394-88e9-06da3d1fee9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dfba193-564a-4df6-8628-fde4384d8551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "288fdf49-b300-4a9f-8386-a760f934eb2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db6eab98-37c9-42b1-8d8a-c4868cc53529",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb0238ae-d6d2-4341-a09a-8c9af245aec7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "faad497e-a879-4117-8423-59596ab491e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36d65e74-f742-4d3d-ab34-7e1c3a5feae6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "1431e807-1dcb-419d-b8ed-386818fb9984"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "87e0018b-a352-4e9c-b299-a0198710c500",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b996b947-213d-4bcc-a7e8-9e5929f67d20",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d13379b0-a862-4ca0-86d8-6745e93a2c46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c8b7d7c8-c3b6-45a4-bd1b-99e51b6d9310"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c623f1dc-f663-4dcf-a629-58cc69dfc0c2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6897f741-7f94-445b-b8c5-e5a002795810"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "abc295b8-9dff-4b94-b9c9-4f160c86a5f2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c1da0b2e-ce5e-4a79-9548-31e5516ab1f8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1889921d-ed56-4fba-800e-b91d129f1810",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "96bb4957-75a5-402f-abe7-68ed1bdc13bd"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bd423e0b-174a-4312-ae1f-b4c1473c8fdc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9f42a80e-5d7a-41f5-af6d-46aede8f4192"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6ce49b28-d2d1-48a1-ad22-6a39f0fc71a2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9da86b69-55bf-42d2-87af-00dc1c735641"
                }
              }
            ]
          },
          {
            "id": "1db0dc08-6b38-4c8e-8a02-37d2bf665399",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ab331e90-4184-4683-bd6a-7dea1a6579f0",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "c516072c-e37a-41da-bdef-1225957da1e2",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ece32b2d-9a0f-48a5-a25c-ed187ae9d1e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "e2c5f2be-1aea-4307-8e19-a0b48b8530c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9871d53c-4864-4bbd-927d-a9f074a5cc78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e1d51dd-02d1-4dd8-9c21-5c1fbc6e637b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1cf94f2e-a80b-4a52-b98a-4d946eaa516a",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7af40a3c-e59d-423e-8416-06afafd4e27f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "83d768ff-cd8e-4e6b-807d-646b1a08d546"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "05d6df96-bb7c-42b6-b9cc-f66a3b3fbc5e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "190cd96a-7284-4419-8f41-2a32849f3dde"
                    }
                  }
                ]
              },
              {
                "id": "a5332849-5711-495c-91cf-35f33e530970",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dfabb781-c6a6-4a32-8279-816239514ff9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1f52f932-4721-4afa-9ea5-a552cd6f1b71"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "76e42006-f11a-4306-b602-db36689452f3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "823d3aeb-1d19-4666-b384-8dd65c3bdd5e"
                    }
                  }
                ]
              },
              {
                "id": "5694cd59-2cb6-4ab6-b63b-dac2b6880580",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1682fb5d-bcee-4b7b-932f-eac1588dec5c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "03e2ce74-7cbf-4dd7-9127-4f2b52170998"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9907f333-19b4-4270-a725-4771ac5766b2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "01ded613-8818-4028-a16c-730e2b2d5968"
                    }
                  }
                ]
              },
              {
                "id": "74fdcebe-39a3-43c2-8b46-c527bd5141b2",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1222fd05-b932-4902-8a53-40ea79255184",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7e21570e-ef6d-4d79-8464-dce35944f557"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "56cbe6ec-2555-44c7-9633-80e725f9d7a2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "cbfcf5d1-711b-4435-b41b-e5572a1a346c"
                    }
                  }
                ]
              },
              {
                "id": "2c82a7be-10dd-4ecd-8b8a-0fa4b37df911",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "048c9b40-c5cf-4d0c-8210-ab2a56334117",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2b8bb054-3a6b-4d7d-8976-d9bdbfe306db"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cb6a94da-ff96-47af-a552-bc981e496ac5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "898dcf10-2a7c-424e-b53f-d76f31376793"
                    }
                  }
                ]
              },
              {
                "id": "58161b00-7249-4256-aea8-04ce654301ab",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a7210dcc-9d8d-482b-8f2e-7ca88427abec",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3482340b-e1a4-4a09-8d98-4544a1330a5f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7b5612b0-079e-439a-a292-d6ddb9429512",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6cb3536b-2f12-4004-a28a-dfb8040c292b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "00532049-e3ac-46d5-b8e5-69e14e4b21df",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "191c3126-3122-4bc0-a5f0-35d21c80f686"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f30d528d-c777-4cc1-bed5-32f0aa765433",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6d1c5127-666d-47c6-ba25-79da54e99d47"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "17156d41-a6c4-4e39-96cc-fb82c757069e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "75d111bb-141f-438a-9bcb-3424b54660b0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0aec4f32-d4d1-49d0-811b-6f7a7093c81a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0d832c54-8bba-4e43-a0e1-2e570e642df6"
            }
          }
        ]
      },
      {
        "id": "f79338f6-bcfa-4c62-8cb7-e77a784a0172",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "bb47f4d8-f323-41bb-a99e-cd6619070068",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0108b7cb-355c-4ed6-8ba6-84157ffa6584",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ade06510-9835-4c44-ab54-e71668c3b250",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78dc4341-5a0c-444e-b7d6-c22c6f66db72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db10c61b-e497-478f-a68d-05ba164fbfbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bac4b5f-3ebe-4cb2-9be0-6e2d45c486d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ce7aeb9-e2f3-4827-9aa2-c20c14635854"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9482898d-6cfc-450c-9032-6d26635ec392",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d79673d5-595b-4f93-bdc5-65a449ce37a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88e646eb-e1cd-4160-b48a-c384c15d7b4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0afb5fdf-cfea-4199-a644-8aeba2ae78ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef9d8784-6049-429d-895e-5e5aa76dd3e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc682abc-bb27-4e9d-abb1-ef223fee8b8a",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23bf0062-75a4-4307-b722-74ace2541489",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e6e3851-6c03-4dee-b4d8-f9f2cf3f77e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60cb7ca7-7b1c-4b43-a5ac-c476b8f49f50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "46278c65-3809-4a52-af0f-91727ffafc23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83127ffd-141e-43a5-a7dd-a4f7d0457950",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b1ac967-c4e0-463b-9e92-e170c64e9892",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12aaae07-6718-4e38-9e94-02510aa15cc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c467989-c211-4cb5-9056-9f71becf8430",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7924732-8f9d-4ead-b07a-79ca5acd11e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eb7c68f-5d91-4a69-b399-419764925236",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a03a321-2d1e-4e27-93a7-25086705bb8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9584317c-9563-44c2-8346-0bc15f5e6839"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dc0f785-c3b3-4646-80d8-5d4c86efb4e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9cda7fa-bda7-48e6-a0d9-6b6085abc9e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c92d458-b7f6-4a70-a8cd-9b07eb0b36ef",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a40fc36-19e5-4c13-81fc-e066d00fb406",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "473630b9-19ac-417b-abfb-5bb2ef78224a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e9ef0b5-c555-452a-ac73-f93467dfd78f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fa926858-d75e-4475-9546-cb2396356774"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0379f89-4848-4748-980f-953a98b2ee04",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47237653-5d1c-405c-aaff-e62b00a82af3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b945c61-aee4-42c5-9c3b-7fa05ac9e969"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "811d010c-9530-439f-a18d-712f3ca4eda6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "204e46a8-e88b-4022-b6e6-a2628fd9538f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ac69417-544c-4153-a56b-884c897fc17e",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c4e421e-e9ed-4aa5-aca0-41e762d6c61f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5ff022e-5730-467c-a5d4-f8c30620f467"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b40b03ec-90c6-4d22-ac59-02508d2e10c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2bc29e57-9e3c-4a9c-81f6-5e6e64059033"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a427efd4-ad5a-4b8b-9eb1-00345ccc073f",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aa70cab-4114-4110-a63c-a316ee28b309",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07c5926e-2a79-4956-a9dc-06ca8fd4ecac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "158b440d-215d-443f-9516-d1ec9a82f68a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5b4ad35a-6101-464f-9e53-a8d85b5b59a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec644f6d-ee0b-45c4-b859-d5d71a9a8d6c",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90ca8f89-a2c6-4862-af97-1cceee679d52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22688ec4-b379-48a3-ae2a-6bd3a21851b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae166cf8-e669-4ab5-887d-bb1480bf1e34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "88acb4af-301a-4373-8e3e-9a55ab6ee6ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d5b25a2-288e-4a2a-8871-81e7ee4d462b",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57e8125e-cea6-4d54-9fe8-96d9451d2e6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0755ec4-bcdc-41ed-bf87-327349d16d23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33e54040-69f9-480a-8464-876e28320cc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "cd1759f3-ee5f-49e1-9b61-9efcfd674c48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72abfdef-ef27-437e-8d22-cba46e3beae0",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23cc4bef-3a21-4de1-9825-f1835e0d89ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f690c90-f4e1-4f0c-92cb-0dcb38dbb9ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b86a84f0-10e8-4fdb-b8d6-4ecfb55a57e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0c6875f2-c8cb-4d3e-b6e4-16fb8f576729"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebadeaa0-242d-4091-9d2c-26bd7695ec89",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe6cbd71-c774-4901-9e04-b804a56f56b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13393215-0a31-4a4b-b836-9ab5376e8cd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "011e62e1-6b51-4a99-83cd-ffe5eb0b8699",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b79043d9-e5b0-4b53-b092-12a2e4c2d555"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b87f454-37b9-43b6-8def-df7937b552ff",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1571c999-d9bb-4d2c-816e-589e93e682f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab975542-be9a-4851-af62-2c2c17285dde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9c34650-425f-4629-9737-0d8c34e5e4a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "5017d256-3169-474d-90b6-76729a2a4e77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8db1583f-aeec-4a1a-968d-fd36ad97770a",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99433d29-4534-4f55-94b7-841049039552",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88557f0d-911c-446f-8b48-156f9bca6417"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d50008c-526c-41d2-be09-2c491d60ed9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "df8bd56b-9a06-4aeb-acfc-c1acfa60d2b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebe12c0d-8fad-4677-aa6e-a7d399a33151",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99bfe9bf-9e02-4c6d-b481-6ba981966f05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86df8b71-f1ce-414e-84ca-27f9f7d7dc64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "427c0376-0be3-4a19-b79a-30d211ad2bcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "43b4e368-a804-4cf1-903a-9ed0fd4b0708"
                        }
                      }
                    ]
                  },
                  {
                    "id": "541c0b1e-7793-492e-bbda-fb98d5d3db33",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba943bf0-7978-4844-b424-dd8b007dc625",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e67a836-be4a-4ba8-b511-6b6e73ecb7ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91dc5323-4839-43c5-94ab-77972f93dec9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "86bdcb2a-7d03-47de-9932-2d1d4d3ac6ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c41b775-b79d-480e-9d62-a8ae599210e1",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cb75dff-c887-40f7-8c61-d22da44dbf43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b5c23a6-7b5e-4c3e-be1c-255b1789efdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27a63afd-1d52-498c-8839-1a06994db964",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e903fb0a-43b2-4315-a08a-9d2eaa499148"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac77ac01-0ff5-4653-9158-61b883b21aed",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ba48e3c-112e-4256-8127-18feafb7008c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98458d6a-2847-46ea-ad43-cba6f5f31fc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e0dbe4f-fe26-4cdc-9de5-900787b1f299",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3ea6cec-e361-4b3e-8ff2-01f0dc73d03d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f10a3908-bc4c-4cfc-83ad-09ef4895fad5",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2381689-6e51-4375-9170-728dca01f8b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9df0837c-5669-4a64-944f-7a7593289700"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9341fedc-0334-4457-b5ed-4f7a74ca9a87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "543ca89e-d11f-4f77-ba0a-9cce7f71f112"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11489546-0733-4be2-8d76-9288f292790a",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2acecddf-63c6-49c8-a2b2-029a107bc9bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "894c1a46-aa02-4d97-8192-100107b7b289"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e77c96d-6cf1-4598-ada5-064d3e7d7dde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b211d0e-654d-404d-8811-dd9bb3825608"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02509303-998f-4b7a-8ae8-02184112e516",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e601ac56-8ce7-4fc2-b3c3-b8147effb138",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef080a83-d174-4476-9db7-47f07a9f2b1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6879693f-6e19-4581-8d01-a3c8beea5c7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a69296c9-ef88-446f-97e2-cd5eef3c47e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02c66453-e2bb-48d1-94ea-206e54e23e53",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ee845b1-23a3-4d8b-9094-d66679ff9920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce8288f9-4bb0-430d-9d53-bf6a3da14f66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74e99fc2-71ee-4573-8f0f-5cd399dd67bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b40251a-013d-44ea-b1f2-b9eddc3928dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91c0168a-a89b-4a36-82d0-a564f5634257",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb5e4d05-5b45-40e0-9d98-c0fda8ceb546",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e231dc1-c05d-4308-a61a-db21619ab6bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecc0af65-4761-4bbb-b2c6-b20db7d003fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "71d35e87-314f-41e9-b078-34c9bc97a375"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03e9635c-7b6b-436c-8ef2-159a5f3566d8",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19a27715-18df-4a11-be7a-8705fb66d0f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f4ce03e-75f8-4d54-9e70-048a3f48c7eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f23880dc-93c7-43f7-a794-2acb63abf642",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c44c05e9-e27d-4c6b-b24c-3b5011ab53de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca2ed765-90bb-4c41-846b-6cef05a065b6",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee848bb0-b54e-4b2c-bd8b-cc2682659026",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36d20888-439d-4fe8-a88b-68eef17b6ac4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17377790-5b33-4286-9919-316f23a94e3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1e4be2d0-f54e-423c-b684-dc1111340a07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edd3b331-0df5-421c-9754-d97422691623",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d733f48b-b3e4-419b-a940-2d540d727f78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8b72c9a-46e6-4cbe-b576-f84d9e46b814"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6130b6e7-3540-46fe-9aec-e034c998957c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "685abae2-49b2-4fc8-a8d3-65fd3da1d0ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ae2fd15-4653-45db-97dc-5035874e0d34",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e878877-ab70-449d-b92f-82f4ed1dbf4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c62437ae-3213-4258-829c-6bd68cb27f59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d35d2b4-55db-44bc-b3c8-6b9b5929a4da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f5d7375-e6a8-4b03-af3d-cc29197a9449"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d92a8e52-32c5-43f1-b6c1-7f519061fb1a",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46c9da00-951f-48f2-98bf-4985f5541966",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbd5b05d-2cf3-4b27-87f5-682116952dd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7482b051-51d2-40f3-9d2f-de6d2df11f9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff7ac02c-3b5a-481d-a3ef-6dbf0773bd42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fbca310-cdee-4b2b-a1c4-88cc9f34e4e2",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00175760-fe64-4386-803b-04c9c9f32497",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44e0b9e8-e33c-4ae3-9a82-0291e8ac3c74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d3435eb-347c-4eec-9f8f-578f07b694b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4eb250c-cb5d-4808-bd46-28389ad89bb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fb82c7f-db45-47e8-8efc-b6b13a4107ed",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ae6e51a-d134-4736-b855-66cbf479d614",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "875f3458-9ec3-4175-b40d-ffb1004ae798"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4a31e8b-c34b-4721-87a0-df31f5ac3aeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ae0e94e-141d-4903-bbc9-ad92bf58e13c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "278c7d76-00e2-4c81-b019-196821393ee3",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9abb9aab-7f6c-4a51-8ef7-6f8e6645b478",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e79d7993-df8e-42a5-b09b-4b043a90c88d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f8d626a-cbfc-421d-bc61-7b6fbf61129b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "710e9d61-e59d-4899-ab3e-2c0c312fe849"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a0b23b4d-b584-4f61-9964-7eaf292a5d1f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "717e3762-b847-462c-92fc-d6c049f5b46d",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca0ad05f-cadb-439e-9d6a-aa9e936455d9",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "b76959a6-ab02-45fd-b96b-970373c781f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e5c65bb-4c3b-49f3-a2e9-33778f5c68da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "17f7acb1-d8b4-47f9-a674-f3eb43b22605"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "93049fb1-0ba1-49ec-a6bc-1933a6623940",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e871d946-09b5-4702-a651-82e9ad8c96df"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2a88afeb-35a2-4350-800a-45d297ddaa81",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9ba325f3-ccef-4ec6-9895-0ad7fd31acf3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0f822054-9c4f-4564-97be-4377b68aec4b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "6efc44ae-70eb-4af1-bdec-44b7379eb8c4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "edf95807-4a86-4149-92aa-ec45c0b6786f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "174a3671-1fbb-4995-995c-299617079e8e"
            }
          }
        ]
      },
      {
        "id": "67018123-55c5-4507-9733-24e3480ed56c",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "a2ad302b-7826-4817-a78d-72aa3c20715e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e4a37a57-09cd-40bf-aad3-2428260d6335",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d3f72240-692f-4625-b86b-851737cf3edd",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4228d2c-9c8d-4a6e-bcc9-c6cc68af82de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a118d25-4334-4d6c-a022-e308aaf1f5eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db28452f-d30c-4e06-a35d-456daf4ee412",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d65f05f-f36f-46ac-921b-e35161c174ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4527a90f-b0a5-4c98-b7a7-5e97e28bf17b",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c333e05-2c64-4d06-b61b-a7d30909ac63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66c3486a-a260-4aad-87e1-a81bc8d21a77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58a13a6a-c45c-49f4-9be2-75cbd4c2205b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "67c98c16-0db2-4afe-ae5a-8e6ffd180643"
                        }
                      }
                    ]
                  },
                  {
                    "id": "323c70fa-6de8-478c-a5ad-97a83088af51",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6da7162-35db-4551-a0e1-32789b00c0b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "984053a2-efa4-4e67-8b33-a4dec992ba53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b4cafc8-5da3-46ea-8070-db1dec2f4160",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "775fff44-2aa1-46c6-84ec-79503d32f172"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fca39bd-d315-4b3f-b003-5db5db0bb900",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3539b733-092c-43ff-ad92-38913bbb707b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "083e9279-23c5-4597-83a3-d86e9e81c9e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "030e8c87-f7c2-4be8-95a1-c9ae493b7651",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd00d9b3-15fa-40d2-831c-9ce4de38c3ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a6ed64b-6221-4d12-bf05-ac40c505aa49",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95747026-d8d1-4cd7-b208-e0166e35df74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9367f411-beb1-4fc6-8524-5b9293bb4eeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ed2f91f-d36e-4282-a8e3-91d0caec9729",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e823e5b7-60fd-47a0-86e3-76ca065e6557"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c03c24f2-6a39-48c4-8d2b-f3aa07202d0f",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c31f16d8-a39f-41e0-bafc-40e1628b0b20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7014f035-b22e-472f-b237-d9a661752d90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f75c178d-ddf4-4833-a46c-c2462305a735",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d39faa5d-ed19-4466-9b10-82328e26bba3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "674cec3b-13ee-4b68-a875-2e157f53f534",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ed54ddc-9bad-478e-9682-303481b33ca8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3af65cee-2b14-45d4-afa2-0fa1061ac489"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a13248f0-f1ae-42ee-b93d-2a25336b5956",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae696f2e-d95b-4012-83b5-a08a2cb369d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b99ec155-d8a0-4ebb-a9d6-fae3d6f9da53",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0a9f71a-9167-447a-8a2e-5045f461ea72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00c2740e-4c56-4d43-adde-3df18fd9f18e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da5c69bc-b73e-435f-a2b5-2cc5040151ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bab5416d-7ee4-4bdb-bb78-175d9b831d40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccf991ae-b9d4-40d1-b406-d526a79e632a",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab6c43b9-5811-46c8-bb6b-307c0360cfe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ece2a5dd-9196-4bbc-8107-41964eb35622"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8adbd91f-9322-4475-a028-f5d9610b9f52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "13d53135-7732-4575-a910-2ee5623257a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d906f33-1d71-4cd5-85e8-fe6a1a7185d3",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ef1718f-d329-4834-aad6-4f9ddfe8007d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95ac3c3a-b962-42b4-aed9-5be93907de95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0b5f316-4077-4eee-9d7a-b7816b2ebca4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c137d7ab-2656-4176-a326-c3a82cd2c7de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e187ffa3-0c53-4ace-96cb-cbc0d1848b6c",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb680584-0c6e-48fa-8077-9ac1101197de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b47beae9-2002-4d08-b5b8-71d812435e01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b661fa82-8b70-43c4-9c67-54a5bf7b6a68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "e37a1798-baab-4519-a4f3-ce9a79c5d1ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "598adf76-78fb-471e-917e-3e858fb8c0b0",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51e30cf7-43f6-4539-9f38-68c9721e21d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf9da560-62a3-4076-9cc6-10f776ca2a67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e52bfe6b-30dc-44d2-a311-968c072373ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3aa75b38-99e0-4e77-b07a-3fa8d0a01b14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8245118-b9ee-4150-bf4f-4339c394376f",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42b33b82-64de-4c33-8851-49334098bbc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3ab5ee5-7c92-4cde-b48d-7637f78ca646"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6b35adf-5b16-4622-9d69-5edf011939b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7330ae7-52c5-45a0-9608-9da911be67d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59176970-d3b2-4ade-a1e9-c6892fea09c2",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b472ec1-2005-4b12-816d-9ecdbbd9874b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c6534dd-412f-4465-bdc6-7498b6041e25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9469299d-3188-465c-b209-459d35b9e4c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "36718d5b-30c2-4dd7-91a2-1342e13126fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ffa9f49-6674-40f3-8c5d-64c15a405520",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fd5c07f-bbff-4b93-850e-67fa24a5ea9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1925ec74-1776-44ae-9747-8c137435be68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f21f403-41b1-42b6-b5ae-c3f58d245c85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "8899ac60-b09d-42b8-93cb-1aa5b6f3144c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3931e15-303e-4be7-a2df-25a84948434a",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79a5171e-f27a-494c-86f5-bce45bba9836",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "712aa3ce-985d-4ccc-94c9-b7dcbc5b00ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0306f239-a9ee-47e6-977d-18da5923309e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f4b6e0b-1e01-4f9d-ba7e-699b5167fecb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0a0570c-ef9d-4ad0-812e-233256fbe88c",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00da31d3-c475-40bc-a699-66438c8ece63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90617594-f7cc-49e7-9051-a016b5e9ef7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "681e5b5e-0193-458a-a6f2-95e8b2a89c3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f2059c3-c15d-458b-aba6-1c4cce537d7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e50e95b-0564-4afa-8e52-acbf2de7cc01",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d23ddfea-c177-4b8f-be05-c11819699feb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62dcb519-e87f-46df-b63f-ec8a10007ced"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "326fffae-d6df-4325-95b3-917d616a115c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8dcfdadc-3c84-4c66-8097-8d50cc25d1a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "910b9825-212e-4648-883c-129389d833e6",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a62982d-2908-4288-a6b1-7920c652e3c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1b177da-84b2-4060-9762-d0f7e72fb7de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0b78c3b-4463-4174-8649-fcd7b61b56f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f2b05ce-2050-41f5-8aba-7a303dd0bf37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "573ec2be-a676-485e-8f31-f05bea688178",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04a6e223-217b-4c6a-b9b8-ca6bff917d85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "207bd2c8-3a94-4b9e-9995-18500ced77c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56dfbc48-8c34-407b-b7f0-7569dbcc03d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a6c73ff-9f72-4fe6-bfa8-d3b89aa56c58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b19a1847-6cba-4bd5-a042-2fc2d55aed16",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "210d6eff-c19a-4f42-97f9-1ba9d8baa58b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23df47e0-6e67-4abb-b4a1-04962872bc98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dca1f51f-1390-45a7-bef0-f3ea4dbb031d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f55ae615-f262-4fc4-a119-6ae18af8fdd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7ea6896-e6c8-46f0-878c-67b4bb761830",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "618d8647-af6b-471d-9ca5-3f940870297a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f2d7600-6db7-4555-8881-cd93a1ce641c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8877ae7-e096-4c65-b572-bdf33c59822b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "af655a86-14c4-4480-b548-32d43ffd19cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04056ad5-a9c8-4439-a086-4c5df7573574",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5d5117d-bca4-46cd-b2da-2d5d93f2b0d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "898185f3-d785-439f-8db3-fd02cc625fec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f6b26cc-2d5d-4423-8da9-2d5ed0a9cea8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd054968-a74d-49a1-aab9-2345850746a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36d5ab87-3db2-4f5b-8e22-7266bcb6eb03",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f0e3bd5-ea8f-4f96-b760-36e23ad46bea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2e54267-fc25-4315-84c3-8e6808c1774d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf3e3a2e-368f-487f-86de-3da4e8e13a1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ecc8702-5f2f-4e50-87c6-2f57d02ea83f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9899305-d061-4cd8-9816-b0ab30ae980e",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64d58c11-797b-49dd-8cb7-2f7d44e7a639",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45cb250a-e879-4bdf-956f-2ca3c8586fa2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37441895-690d-4357-9a3d-d1ba0199cb24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "40ff8ece-b2e3-4b7f-b42c-dbb889f17254"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62897552-80e6-45e9-b54d-b4791c7a7a80",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12eb0df3-5691-4cb1-884a-acd7006e0706",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a1af9cc-167b-46d9-9f2e-239e1358e3a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3208a32d-5fc2-4cd7-8fa1-d4302ca0ba50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7471cd58-a4e3-4270-b436-300fb8fe9c78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7243b142-2bce-4947-bb32-fd438f9ac350",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96fe047c-17eb-4689-9657-1322a5f443d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "daaba596-2270-4a2d-bead-3edece1a8bde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c10a7c4-cdcf-4056-aa96-5a4bdf8b5117",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "15c468bc-df5a-4aaf-a53b-3d4472216995"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5811a569-4196-4f01-8262-8a4379162d5a",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff2d155e-5535-4f77-a699-968d6373154b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1988b8bc-d984-441a-bad2-2a832738707c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52fd3d7a-39d8-4af0-a764-14dd3b1c7d36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "782fdb2e-5734-4332-97d5-d7f97920a791"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b6bc940-7455-4120-8bfd-3feddfb0f9b7",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4c50e3f-0232-4dbf-affd-2a9eae3f9c10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8c01a21-96c0-4470-b7b5-133f65c1148d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a2a3d25-939e-4512-8f31-d3561f463afb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a270940-4dd0-4ba0-9f77-18c2e7cdd721"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5045247f-7d91-495d-b970-cf63081817c6",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe8e0659-cc9b-4ce5-bcb8-3f778b438bf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f75d70a-adff-4d65-b4b8-b53e49f5e798"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3389e259-c7ba-4526-838b-ecf4edae32c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1cd7d0d6-d465-4110-8c99-22245d0095b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37a2bb6f-ecfe-4750-8d5a-d113e15d11aa",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "481c9cad-186f-40f4-9665-b5ff0014f4f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a58fd341-36aa-49c9-89ca-aa11d8ae8445"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1bdcb0c-cf1b-4041-9083-6c73d6309d76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "99f6110e-f94a-405c-bc22-0bab793b346e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2c6f7ce-f13c-4e3b-b7df-e2ae05206d2b",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cbdec34-b73f-4c9d-a7ce-83e2cb72dbb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faaa9f6d-030d-4b9e-ae68-e08565ce9c38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c23552cb-25b0-4e53-9021-e337d9087002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2fe99bcb-fa54-43dc-98bd-d7fd1b58ac39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6c7bdd3-5102-47e0-ac8f-b6c8e0ebe61b",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "475faef2-f604-4731-8f1d-fb3b54b02d07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e6e9291-98ad-479d-ba6a-9d5c9addfc30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e926cf89-f4b5-4e06-bfcd-1577ee37367e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "27b7249c-f0bc-4e9c-90a0-6a2abbf1d2ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f097733-9e04-4333-91e6-18726c577bbc",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21b471cd-9fb8-4070-99be-c0e1ae2fb682",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "000091ad-fa60-4bee-b45f-f24b1cb37b65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c775cf0-4e3e-4a04-a00e-4ba9ccaa8a0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "358f01d3-619f-4dad-85c3-10306baf8bcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e89bbfcb-cd39-491b-9ca2-b3133f45e31a",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf174e05-fadb-4c10-9e3a-e52f1ed1c95e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbd83405-c90a-43e0-8fe4-f2b93b05e089"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2072fa3-1b13-400c-a47b-540ec5581eda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee2921e9-47db-4d48-b0db-06184fdaa249"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7bb2ce9-f137-4215-ad29-c1fb19bebea2",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80aec5b6-7b0c-46e9-a6fa-5d3be5261957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb15f375-6e60-4290-9264-da44ac1d217d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d74d8ae-8bfc-4850-8e57-b848ccef7199",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "11715e96-6c85-48b5-887c-b8f25eb1f07d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bb36ad9-2ea5-4f2f-a333-1ba18930285a",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9323d360-cefd-483d-ba0a-3c17d3bf72bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40797643-d07d-4fb0-a98d-dff61b809227"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a14e1256-d19a-4187-9857-8802ca26f820",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d301129-15b8-486d-98f5-d1c535f3f5a7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9d4c2719-e594-4a80-bf11-53c83870cb00",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1eb20310-729e-4d67-a303-a9d78da27dd4",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2e7e92f-bdf8-4603-aabb-d0969730950d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "2665cf40-0f50-4ae1-880d-f7ead6076571"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "873ada24-3dca-430a-8774-8439e5e2b1aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9f884458-5d2e-42a2-b5c4-aadb012ea8e3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3f8c1557-c04d-41c1-ada3-22d1c70a2f68",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "83922a5b-ebd1-4c06-aa9f-eb3a4923c9e4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6dda34ca-5f10-45b6-9359-65793cf5eaa6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "982cafe2-6737-4932-955d-d5ae73b8408a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ebdf4315-491c-44e4-adf2-c7c7a9dd26a4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0e697743-bbaf-437c-89f0-52c4a8a1a297"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "22b57cc9-7319-494f-9a33-f0da706077c7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fd0d3590-285f-4a54-a219-9abb17ff29e6"
            }
          }
        ]
      },
      {
        "id": "9fcb036c-2172-4403-a3f1-c646b1db03f0",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "95d27934-0f39-4ad0-8414-5c9b9dbc60a7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d5b6b9a6-e8ee-40a3-8002-a0ecf2483a96",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "69f655e0-7d4f-4586-9c9b-8ba43395e6fa",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "420d18db-d954-4ffb-a865-f5b96e6e372d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9b77c82-9003-4b63-a717-d89e37c90ad0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7756e668-0180-43e6-9d1f-3ef6f7ba1288",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28712c53-bc12-4357-9548-67a82b90a89b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c152828c-ba36-4961-8ada-b95366687f6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b050ed2-8c65-4e87-840d-790a7147b90b",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d64d714b-69c4-4c4a-96f2-84574f6c0425",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "020f8494-a604-4c91-8546-2234da3318bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8233b9d-a1f0-494a-ad46-1cc7c2b6bc4d",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43010378-4efd-417b-b4d4-0a7255517c82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cc3eda2-ff28-43b4-b7a4-3938943711bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16fd4ce7-f9ab-43bb-b70c-fbea904426b5",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53335029-5ea8-49c6-a7c1-eae010f1e9b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "443b4e8f-3293-41af-a227-68e74aa6597f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0b5fd95-46b3-4873-a502-8e2f6a24d8c9",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc2e6f57-941b-4ab6-a6d0-a6700757562a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed6eb76c-70c7-4a86-a204-ee53efa76707"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fed3749b-acfd-43bc-82e5-f0eea6be8fcc",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35303ce8-fae4-4039-b3af-d50680a402d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffc4ce68-1265-4dfc-9e27-d8cc341ac0d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8269e8b-c19f-403e-a522-7516a4ee576c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92797741-8d27-47c6-bf68-43882765edfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ba59dca-12ba-482b-aefc-b5b31b9aadc5",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd7a2bcf-b3c7-4216-9c0f-58ae9503f68a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "605b2ac4-23ee-4980-ab51-8267d1aa0d51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "733e2306-2871-4f9d-879c-2d4b94caa10b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8debc83f-b7a5-47be-b234-307d7de6154a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b5a83de-6501-4b78-8dfc-47145908e3d9",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26594443-890c-46f9-b8c4-2f84a6835bcc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62eaa409-d8fe-4a33-b94e-fff105aad871"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c459325-97f7-43bb-a522-0645be79f62a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c3f463c-581f-4d11-8e95-07a14b8b4204"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5474c9a-ed62-42f4-bb3d-d03d3062e083",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9deb1349-8c6e-4120-985c-ccb6443e7c8e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8473b8e6-95e6-4af7-b328-a27f40db9430"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6202898f-6fa5-4249-8f87-0788bb0e8286",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e85b737-10d6-480a-adda-aedf9e0b8061"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c81392d-e38d-47f4-b746-810fa11e1faf",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e422863c-2dce-4915-8acc-0620b1396e45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "328b54c6-687a-44d2-ba59-00dfe5b6022a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb33fd32-3584-4ecb-902f-f90491e11a5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b045993-7e21-422b-a3c9-9bd0dfa96dfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d423ba17-d32a-4375-ac3f-ce1e7ce08fae",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "310a73ad-572b-4190-89e5-0ada8da73f32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58f1984f-948e-4c89-95c9-e239e8fc34c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ae3ef76-719a-48b8-acc1-d4c3a08f1ac5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f2824ef-ff7e-4b07-aa89-441b068ea76e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5397e339-41f2-4045-98af-e5170c30ae8a",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "532922ca-0576-43e0-bec7-d08726b07f07",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93cf748a-e680-4176-aff6-4466396621ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b8a9428-896c-4208-a420-60d332e6ee00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd31540b-5283-4605-b3ab-a1c5f361c0af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88bf3873-0c11-4db9-90b6-9d45c0c1b342",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbe2f098-1f27-429c-956c-e4d72314007e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98a5948b-32f7-469b-ad45-3486e51647c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "597ad395-c801-44ef-9619-3c7dcf49ffaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d0883e2-6cde-4bfd-819c-5cf970925b93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aefe7c73-592c-4a3f-834d-4154d3ab0dd1",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11c15ccb-014e-47cb-b623-48bb8bfa2c61",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e39626f2-1727-4690-88e5-9ef312db62c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "336309fc-fc94-4a4f-9e90-a4a3e87fd177",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4ac7b18-6698-41a7-9ca8-3b3d54697ed9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "707d0089-b9a4-4206-91f4-08715bb92939",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22299be4-a5bf-4173-86b5-073f0cb55b76",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23cb229b-175b-4a75-b4d3-5e4680080e6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b87a993-a6e2-40ed-8d24-48032e7f13f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c994661f-149c-40cc-90df-faad81f33e93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72c81da2-40ad-4a01-82ff-84816f89ecbd",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea8a3175-02c7-4584-a02c-1f809851d4c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "447f0d17-f67c-45d8-a6c7-d4f2e97f4b56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b97d4d49-be8c-459a-8773-541b72f78c2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c60e5ab5-9383-4512-8526-b98b8bea57d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c920fdc-f837-465e-8cd6-aca063eab17f",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc921e22-8bab-437e-a3a9-cf4a181b8f52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43b7d443-a4ac-4022-b6bd-ccec52dd942c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "197e0c43-2364-4cda-a2a6-b950d45799fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5644b9d9-0e5f-49ce-9d1d-f3e099b1259c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c13d58d4-4a0f-47fb-bda1-e4ecceeddd08",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32aa408f-b495-40c4-9b36-a40c03d0b028",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5faf5404-289b-4725-ba7c-54a5961756ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fda4a65-daf2-4e60-a715-5b0c9b2e0a0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3db22663-5fea-482d-a4c5-2b68b4dc7960"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2637e5fb-f82c-4ea9-9c77-a4b79d04652f",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38b358b4-27d9-46f9-bd59-4443db68161f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0f2c3d4-1918-4725-b56d-dd25f371edc5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8f6db53-c85d-4aa0-ae8d-cbbc8ee1ac15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c12948c1-5b2a-4a74-9070-331707ca5dc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2960e59-34d3-4099-8381-8b6f3a747b1f",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcd05eb4-e478-4917-95f9-e00ba3520dc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bd2538a-0dec-4802-9489-da5cc32cf775"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67089114-2026-41c3-ba7b-d34bfa7232c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90bf1e5f-58f0-42b8-b7e7-ce983d7c52ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbffb43b-5de8-4eba-b781-6fd0341fd835",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42fc5f30-16a0-420b-9e27-f71361bdd0e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd68aa3e-01ea-49cc-840f-2247b2d740d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0aa374ee-aff3-4da5-9178-99d1970f287d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18ac44dd-b03c-4193-9d79-ac2b8246ad09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dbfd7a3-48ac-455b-bac0-adcc575ac58c",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "254ddb72-e593-4fd2-8bde-446373ab1e5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b00a2261-7f02-40b6-956f-3850ff46e7fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "181942ab-738d-4c07-aed3-192ec9d988bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b2a2af4-a75c-494e-b5e8-5645adf985fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61962e4d-be8b-49ea-b80e-c066905a5638",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a4efab7-ddaf-4d09-9689-4f9245f8fc3e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e9de105-dd12-4469-8629-14d984180e4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da569f11-f1e5-45a2-99c2-9cb3728f3293",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd528fc0-a35a-456a-9b7d-462251149cbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b149ccd3-a911-4467-a985-ef2224cf262a",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea227c0f-839f-4206-b7fa-3561140d9f8f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e2cb0e9-6cc4-4a37-914d-5f00942d170a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "033c8eef-4489-4a87-ba29-8aaf8e2e55d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d46ec35d-58c3-4cd2-b064-6ddff14d5326"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4689bd82-9c16-4822-a394-e864ec65002c",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e79ba5f-4bcf-4644-bcc8-05fb4cc9b419",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c917410b-aa2c-493a-9007-12bc656f7983"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b70e5c17-62f5-48d6-a0f2-c0fadda80d39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e32d7461-72e4-4d92-b382-3260e531a9ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a71256ec-b153-4977-9561-e1827024ed50",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72be7b31-e0f7-489c-93f8-eff77a8402e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86f2d6a7-8e95-4866-a451-ff86d8bc0197"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b735bf14-72e2-4a96-8540-9f22f1a10d73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9b959b9-e0e1-415e-b28f-3c14d931382c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f788dd9-14a9-41e2-be8c-445e7111cfa3",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b41d2a4d-74f8-4d04-b6f7-4d4fb56c59a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69a1523c-fcac-4c53-8bf7-805f3ec8df0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b57fa71-b2a2-4ece-b9d7-85655bf5af91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9693580-838e-4022-a52c-c5a1635557d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "894cc2ab-318d-4932-b822-8dd40fd0e2c4",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db05cff4-02e8-4b13-a5fe-312e887a1a30",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "109572f1-8777-4433-9217-44303ed3d2b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2be2e758-6b9c-4c25-bf61-8c915c3af444",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f0f1494-6140-4301-80e5-408e59b3ea9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d8fa16f-092b-4cac-af22-2bf5e64edd05",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee51b0a4-233d-4505-a9c1-0ef69ac2fbe9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c3e3242-cf98-4fee-bd25-3633a56a26d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7cffbb2-9f34-4131-9ceb-5bf19b984e0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e37a881f-f513-475f-aac5-f6f55e6e6484"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc2f6ac9-d628-46ff-81ab-eed79dcba692",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82a2cdf3-78f8-4f33-95b0-72bba79c9fc5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f940d7c-f832-4332-ae47-081eb58926bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "484f1b06-df57-477e-a662-e9d694b33ead",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "198f92b1-e26c-49f2-b0e7-dbd3c315e31f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99f5bcf7-b0c0-45c4-bc59-dcc6a515d72e",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cca8491-66c1-4a3f-8337-2a730dae4c2d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "909dfbb1-04e2-4213-82e6-94d2c9c2d6f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f579e710-2497-4438-8540-eaaf6c1eaa68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a24ec331-1536-43c2-b3ab-7f152f1a98a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50600d4e-f035-480e-8f34-5b351cbc9e41",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7140252b-2ed6-49ec-a330-652a9e3c773e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af35bab6-fa98-4330-b8ae-026fb1996e63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c2d1a08-ef3f-4f5b-9a11-3bf89e130e2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5303deab-d35e-4e64-a995-f9905974990f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4735d036-6751-4cc5-83a6-31af15a2ebd4",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8ca4d0d-ae77-481e-a99b-05921b2995c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fff0ae8f-e024-4408-8456-2b10a5cf5161"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb01dbd2-3345-49fb-9211-404633eb63b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9b6f230-2f9a-492d-a708-44b667a7b441"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2a5c03f-d228-4f33-9b32-1698a6eaec22",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3880b8d2-bc53-4c7c-a3e2-1dfea2b7c6f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4907492b-0408-44d3-b3ba-1e3226f75da0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76fac157-e0d1-4fbe-b8fc-40a2ee869084",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dce9246d-2234-4f89-b317-99f51f6c03f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c8cd48e-2558-4df8-a1c6-9290faca2254",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e99936a1-52c3-4c97-9fe4-f619cde8db20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "580eab26-4832-4184-8ff3-8c60a1396455"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcd9db08-3cc4-4781-88f4-6e428ba265db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1687b85e-fe04-4d59-8525-933811347301"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4423735f-c987-4b92-b94c-c169b790aaf7",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8178dee5-0a0a-400f-8a4f-4b7484f3e569",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d2e0e30-ff40-42c9-8034-23e551b5cdb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "926fa0f0-31c5-4361-8f3a-62aa5855f40b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f53ad84c-12a1-4fbb-8807-5222bc0170cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6916b3a9-b04d-4e48-aa6e-cfe96b687696",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab6cb887-e3bb-46e1-8653-c7b45d75a071",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82af0d65-7d6c-4b68-bf34-f44add41a045"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0b97f3f-1d5f-4f65-aefb-8f982a002b0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00aec117-11f4-4594-a025-0834663a15d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a67b1db5-177c-46df-ada6-7ec91a56703e",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b763bda-ada0-4d9c-8801-7b683ed200bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27265097-8606-41a6-9c63-ffb56532d20f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dde74d2b-96e7-4b5a-a6b5-84f27d2e4816",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d66d8716-3c64-4760-81b3-d6a25cd2d80e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab0b6dd2-7b30-4729-bf8b-3fe083cb73ef",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8f3a7cd-d992-4661-8778-279a695212e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d0a09d8-b2e7-4b8b-bda9-8ea459028bfe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c7f9e57-3bf6-434c-98f1-d77a7ff4ece7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72589e7a-c8ae-4215-b2c1-9e670004f8fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcd6d700-6bcc-4ed5-999a-935dfb6de794",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35201542-b178-4c19-b106-54885c01f8a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94371feb-d76d-4fa1-8471-450bec23dd48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaa13a94-4317-4d5f-819b-8e30f90838dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "731f086e-86a1-4bf0-8de3-ecc77c2ad7be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d18c262-41f8-491a-bde3-2a3237823019",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99eb9d90-819b-46d8-b7bb-d443c85665b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0152a800-275d-4a4d-a0ce-39a08f0318ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a1f13ed-4b5f-4850-9bad-7f490fa54617",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c6a4573-650d-485b-b33e-a37431fa62dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a173202-8fea-4c5a-9439-584fab912367",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed79eac4-0e81-4aae-8b4d-05466f71db22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f0ed9d2-4f67-4113-81c7-85793ea1d9f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e54d21ef-de69-4a84-8400-dc6c62035952",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c56304a-2d08-4ca3-87d3-8e13143abfa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5202ef6f-7016-4181-9017-6ba68e898887",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c511bc8b-0abd-47cf-b8d3-df41e45cf2aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3dde022-1195-4c3f-8129-2181e55d4449"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05ff6a1c-a131-458f-b3e5-1011826434b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2629ded3-c6d3-4dc3-9879-850509b159a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "713b5d74-e33f-46a1-a934-e84fbe6a79d5",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e58a10bb-6fca-4598-b4f1-1ee9b451f596",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b8173d4-a05b-4bcf-b18b-edea2c34e858"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f7e3e5c-d18d-4465-ba8b-e7040ba92d9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f784321-54b4-43ff-87ab-71875541c988"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79e8bb26-0268-4d3a-abf5-8723c645ac37",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "898e5e7b-d660-4c6e-9a84-9b71c6758f5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cd6e948-4a16-4806-913e-642f5a0a2c5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "491358c2-0af8-450d-902a-11988984ae1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8aad1b32-cfaa-420c-9d68-d18d9ca297dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93751958-d824-4a0b-b2c4-5180f668e911",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa8fd382-df45-44ed-9eb1-ce92d82f55b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c9c1a3c-2a7d-4f54-9758-dbc79eaa93fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a7f1c6f-23ea-4a93-b65f-7ddc81c478dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "487836af-4b94-457f-8d11-16143b43b75d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53fb58d6-ee51-49f4-85b2-34050a6fae41",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fae3d2c-beaa-4ff9-82b5-2b48240b45ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb1480ab-1a91-47f1-9c24-bef74a01f817"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1af144ff-1552-4833-8900-6ca611a91d6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d506380d-5059-440c-9ece-1c8bb9b0a257"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0199ad6-e8ca-4e6a-b759-be357c5d36d6",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b868628-05e4-4fd5-913b-abf6c2c49ecc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7edab22-5b47-463b-90d6-b32380ff5bda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6ec2b30-83a7-436a-bdbe-e4cdeadd7f61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "969d40af-3344-4753-ad37-bf6d601e0ce6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4729939c-b15f-4a98-8fad-2fdce7f12261",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7789a4f-e4b8-47a2-afc0-c727d01ffca4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b63786c5-5535-41f1-8fbb-87428bfaf92c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86d4e456-1040-40fd-b828-a7be551397d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70d86e92-1737-4586-b2c5-24692aafaf0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "384964a2-9158-4d33-ad10-13ec09da09ee",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9923cd9-e976-4c37-bdd6-b0aa165b3d0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0d69397-6350-48a5-97be-fa8cd862db9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "137c810d-7cce-4b54-8213-b56b5d06a7b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5570b74-46cc-4019-a53e-bb83b9fd49c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3ca95d8-4cad-4cc0-bf72-83a3e3460bae",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b8eb7b1-2c37-40cd-a737-08640c5b8df3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e933d2d-b711-40a1-b53b-f6b964083b22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c44bc465-7ce8-4168-a168-f50e96a80301",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7df7ee5e-8e9c-47d6-afd1-25d1d4aeabe9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e66bb4f1-f39f-465e-9e77-2cafa324f1ca",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e369dfa1-b83a-417d-a87b-d2287cbde063",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2338efe2-3a98-4a6d-bcdb-61ae7d9c67a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3569677b-4184-4ac1-84e8-d724619151cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "610e5f60-56ae-4780-af53-810edd20d566"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc88619a-2950-416b-9796-8424a3679174",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2842c0f6-f544-4afe-9004-87d7e379164d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9c66916-d5cd-420d-9603-b333f4768834"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c95e371f-d22d-4eda-8937-b640c5e3a7c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b86bdae2-f891-455c-957f-3a26ebe47253"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3edbec0-8385-4521-a6ff-e84836591003",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76181136-cbb1-4a78-8330-8b7a4f7d548c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b353f6c9-9584-4ca8-81c5-a80e3733d3c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c431f332-f341-4df6-b3a0-592d3aa3e0cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29331e0d-0ae0-4820-8372-762609bc1e4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87737095-b6f7-490f-bb31-95ea95b2cb80",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecfaac8f-10f8-475d-8626-c64412bdbb41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07fe8d4a-d25c-4a1e-99d5-0fbdd05b30ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "004ff64d-34f1-4068-9993-b1646936822e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7f189c2-d58e-417c-aeab-17d9dbd6bcbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f61024c-4b72-498f-a815-2459d7203b63",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0537a685-406f-4424-8be6-49815c214a06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10fc35dd-f24d-40f4-977c-6273547ff096"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2296ad34-8dfb-4ae0-83ba-a9e3bfcab60e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d7e07fc-0401-4019-81ea-7a10a87718f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbafaec9-6a43-44c0-8839-3cf2fc951128",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5d31d04-a5a0-401c-bb96-4040beaa002e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1913a7c-f7f8-4da6-8c53-16864ebf9b4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6f75491-19f2-4c45-8b08-1b96cab137d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44984dec-7b45-4b98-b9e8-67415459a48e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffa3eecb-c428-4a9e-87b2-63ee3ff2e154",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f7717af-a238-43b3-ad79-d0e4dc5a760c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c7d325b-db0d-4755-a508-c3c57dfc07d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa1869e8-cb6f-48ef-bbbd-024c20ec6996",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "888a6f34-dffa-4f83-87c2-be8ded4e97a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ae5af99-fa59-46a7-87cb-54c60d228547",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ce18e2b-3ff1-4360-979d-7c5da4600765",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8acc3d1b-1b60-4f37-be42-e42b60587207"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43e98902-d8bc-4444-b496-41c20c18f6b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cabcf611-0859-4db5-9c78-60d417d7ef75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f2347f1-d119-4fe0-8fd7-2cca176351d2",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2677c09d-b011-4c8c-b2fb-628c09a41c53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "288ab811-4991-4033-8df3-446185a7a618"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4aabb903-fee7-4382-9f13-14a05d3998fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0ed5bd4-8c8f-4182-8dcf-9f9ef19197c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ca07541-4894-480b-86dd-cd63080755e2",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f36db9c8-ed1f-4dae-8685-41b3e4813ad5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed158b44-1bb1-4bce-b081-4f7115fb9a5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "944d7153-006b-47c8-8006-8606e1ab6116",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac74c4fd-5a85-45b5-9560-6684fd65f5ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98ca2aac-c4a1-4f61-9dd3-20899e73edf0",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29658b8b-d8fd-4e0b-977c-ab4b9c5f4edf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71b96d27-830d-430c-b0a3-f2a111e31500"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "485dcc12-50a2-498a-987a-86a1d2b38be3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "704fabad-e5b0-48c4-ab7c-8515120ca294"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ffc1e06-74e7-47e5-9906-0b29263b44a6",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e46abf6d-20cb-4438-9ca7-cf6049762d2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c5d104f-7b66-472d-a665-e482a5de2e14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1635990f-62c7-43b8-94ad-43eb1deb96e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccb11490-f92d-42f1-a770-7c2815507828"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14ee7c03-fa7b-412c-98c0-97ead0c805c9",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9365b65b-4609-445f-a814-a202ab2ad165",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "571a1fc8-1e1b-4850-9aed-564069ee35b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "001f2497-59ec-44b7-9ed3-580c77f42928",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4afd7a86-35f0-4a41-abd2-caad17636e85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dbccce3-a678-4814-b8d8-be6cae9bfebc",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49936d29-043f-4388-a5b5-71cc47d8a075",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59ce6298-e638-4dd6-87ca-22da7c6370f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ac68715-7cfc-44db-89c8-f082eba74c37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db35fde5-6c9d-4fef-8ff2-8bba6dd098a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d48288e5-04e1-409a-aa72-7d8d493402ae",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a53c689d-cdd7-4bb6-ae43-7b1726e1429b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af84693f-31b8-4469-bb6d-df57bba5c296"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdef3b72-4d76-4b9f-b9ab-87da97b46338",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b15b05bd-e6f0-464b-9394-20b1e8dc95c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd7243a1-2856-4a1e-9596-649d8620c34a",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8e2cb40-7d89-43d0-811a-882a52204d5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e19b044-d456-4f2b-882f-a4ee6a4fa852"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa631f97-114b-4408-89a9-6cf371b80cb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34d562eb-7c49-405e-a152-847184c8d94c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "215f4cb5-c889-4cd4-a45f-f4b5df4a523d",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6385201-c9c0-4dc9-84c7-fe6d0fc59aa2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d26b32e-3ecd-4de4-a0d4-9e3ad6b0367f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db41786e-53c8-405f-a10c-3f2b659b0d2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cdce23a-04a5-4caa-89c6-97d84792ddce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "554c3567-9087-4c9f-a3f0-1f3a5d1c6dc5",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58528ba7-c6dc-4f43-858c-4926eaaba8a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ce212da-cc15-4b99-9591-58337203a932"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ff1dea1-ca29-4497-a2ac-d7e5bf69db98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "714785e7-a99b-4bd8-af2b-7931e0fe0aab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20f48eb4-096a-4507-bbaf-0ce8c0e68c53",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1823457c-095c-4199-8d19-01c3f5a3ff51",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af248e5b-b620-4c0f-bf0f-40dc295db8e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ad672b0-c98f-4595-ace3-53b89f544099",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26dff3f1-196a-4cef-8036-1ebbca82b85b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a78fe8c-7922-4cc5-8dba-c9cebe6817c5",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96cfc505-ed78-4e47-9221-94c19794ce56",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5dcde00b-63f8-49e4-adc5-65a630405ae9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e4bca58-c17e-47f5-a826-60ada3fb4f30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f0db590-880a-4075-8664-c72cb9e1b860"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4db84c9-43a7-4a0a-804f-d7a5cac50e91",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5277386d-03d2-4e9e-80fd-b31ebbbbd196",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe40fb01-dde0-4a1a-a96c-c09ac45cd292"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "852402da-41e2-4545-a5a9-1d6773d2e585",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2145ca50-468c-4f2e-ac0f-be02a513e16d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7215dce9-5f8b-43f7-8644-2837cce50d2c",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2594a208-f13b-49df-91a0-572b37aa70d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de76f63b-77fd-4c59-8f41-7161f1f885b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6da16b7b-fa7a-4238-b893-d3342731a740",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a5e232a-401d-4024-b077-edcbf66dbe50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "114c550d-21ba-4c2b-b717-93a940847257",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "375af16e-8409-4e10-b4bc-020ff04443c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fffab83e-e710-4a42-8acc-a1ab4c0b3385"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26f2f825-d4e6-4f31-bfac-accc4406faf0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b309db3-bcc2-4a8a-a2e3-2d534b62f16d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c166f0d9-0f4c-4f57-abfc-5136802e808e",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "013e1386-5fc1-47d5-be7f-0f9bc4f265fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "391d164a-50c5-40e8-9d5a-03f96fdaa256"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8c45b87-d923-44b2-9cc7-3e594bc98fb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1ef9225-960a-4ee8-986a-83a12290909d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acbbcf38-5a87-4005-ae7c-00b15592d581",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44483127-446f-43d8-baca-f8edc1343b23",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97d98fdd-ea59-46a7-9f10-07cbb31e0168"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b67d34a-9d5a-494c-8dfe-5bee514f19b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58ab7d25-f066-4994-a469-fcd75b4ed55b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18994398-cabc-4b2e-97e8-a5494321c596",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddba558b-70ee-48b4-a531-b8bd306fe18f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "333c7aef-c261-45b1-8061-b36f6c83f704"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98e5b5f6-9920-400a-bf1c-cdf78f0a8b69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11c34374-2e62-46de-a520-369d43708241"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f7f61f8-f1cd-4db3-b053-98d2816ce674",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af0ddd06-8010-468e-bf06-2ca68b300209",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9053bf6b-5ecf-4b6a-ad8e-620238a2c2d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce03b791-f19b-44d5-84ee-e7a5f708268e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39c79b35-5219-4bef-ac27-53c1d8f0aeff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7399007d-73d9-4b14-8bac-a886025a955f",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "365747ed-e1c9-41a1-8fd7-8309adbe80b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7e1b56e-f1d7-487d-ad38-7130020c6e70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c83b6f43-ea75-41f2-a7e4-e2bbe48c9631",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72291eba-960b-44ac-acda-7c67765f7cfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "080d1838-b38f-4262-95d3-af9ed5cac65a",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5fcaf02-b555-4ba7-88db-780f6cf7e27e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18795f0b-cdd3-4bbd-ae92-33b5ce5b4e45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a070d70a-155b-47f3-ad4e-ba03886130c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41442952-a5bf-4529-b8df-88d9a3f2ae3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "775562fa-ed30-4997-b9ef-6e57b5c8d672",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c408b1f8-866a-4c44-be0f-ecb60a57b90a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8417313e-c961-435d-85e2-f020eeb3de47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbe15a98-3edd-4a68-81db-39733948ae11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7f74985-df6f-4813-9e11-5fd91741a1ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a1b3024-28c7-41b3-8ea6-7b325f26d24f",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "882c28b4-5e4d-40e0-8372-fe479b401af2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53fb0fcc-4b8b-4c21-a40d-c711cb93ac36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e4a5c02-5ce8-4215-b26f-7bcb28daa45e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05ab5d2a-cfbe-4166-9f3d-dd0bea9b5644"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8695c5f5-2966-4d88-b873-34c85c3afe54",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2e96fa1-653e-4488-ad48-45da3a84eab9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c39374fb-0a17-4af1-bfbb-daf72c4f8c9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1477594b-9b76-4487-9679-8edd15313be2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ca0df2d-a03d-41b6-bffc-1bd000b75d1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d3c83a9-bfb7-4eeb-a99a-cefe512152ac",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b8ae40f-555b-49d8-a2aa-d5a600ecaf01",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aefade71-1a28-499d-8756-aa40ed6d28d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95960f23-0ee2-4835-abaf-495f6167b718",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a1efcee-141d-4ca4-a9e7-27c7db866346"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a941504-c0c3-4c20-b473-87abc07303e7",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "217167c4-5af9-4257-8b0e-750ae278f04b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b73cf26b-e2c7-478a-b1f2-4dc5922b3fb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3837bea-1f2a-41da-8914-d3d691c3f74a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32021cc9-2e45-494d-8d21-59cf6c14c8bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcced248-3c45-48d9-9571-d33c30685a9f",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36eee34e-97c9-40d0-bf2e-d7b022f0bf1b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3b88e7c-0e69-4eca-9423-230f2b9b0d34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b1bad60-2b5c-4fd3-b76c-457eccf31389",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbf9e6af-5929-43d4-9e1a-6b165be94e62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be3b9f22-aa69-4301-bd6a-ac3691611d60",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38cc86ad-f60c-41ca-ab08-eba03e40bec2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04c25a6a-5304-44ce-9fcd-ed39843623e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b887610-97a1-4189-a871-ad47790e0021",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bf9dad5-1942-4499-806b-539a43418936"
                        }
                      }
                    ]
                  },
                  {
                    "id": "295b17b1-b861-473b-b024-8eaeb6e61bdc",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac015096-588c-4529-88a5-5859cfb048ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7947487-7111-4769-88ce-56bea8fea947"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5f798ac-5885-4431-9276-e8b8c2faa10f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "658fb20c-d677-44f7-9d1e-ee55350903f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8acc34c7-b4d3-446a-8603-ee5fadde3587",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "328f5bff-368c-452c-a1f2-063b9ebc647d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a4d7267-5dd9-421e-be09-622a4ac67123"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb77e4de-aedd-4261-93e9-11a2839e2e03",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "953dae58-23e0-4999-844b-64689d103e42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42f6d24b-81e7-4c05-962c-992f98fbe558",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a62ee37a-6781-4899-ad69-6e207549afd5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae0190d3-338c-45be-adfd-2b1067edb4c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "265c3a23-8dfb-40ca-b4e7-fc376dad2db7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5ec3a73-a1ac-4d9f-953a-cf7509d0e634"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdf6e7f3-8b74-42f6-aca2-044d96e19afa",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff899cc4-3759-45b0-a866-ebc7ebe025c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c01cd187-74a8-4d95-9166-9eee87d8c55b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab35944a-b062-4f3b-8b71-69baa7473a58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11430d69-d86a-4ab2-b097-8b08608db648"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dedcb4dd-abd6-4708-93b2-a9bb996aa43e",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64604f70-efab-4c38-96c0-cf111312a481",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac1b9f10-9fc1-4dee-847a-7277b6ea5ccd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b3f9844-4f1f-44c5-b8b3-d38d412dd760",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e28e98a-448e-4d67-8e49-a5d773e8762c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0f5df73-2ff8-4d1a-8338-8b3f0993e8aa",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2b79582-61b3-47dc-89a0-e4eafdcb5905",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fee5a2cf-2b0a-4ed0-9b41-980c66f29e46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c9d2069-27c0-4840-a3db-72342b6abb80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66c3fbff-a0cc-4476-b4cf-c82adea30079"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0f924ee-5703-4f3a-96e8-37112b9f1ef4",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b47add9f-6160-4641-99e3-302d9f5722bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e91cbbb-143f-4365-b678-ab57680994d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1248660a-5b1c-46dd-a1fe-8d5a73cbbd1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "585e36d2-4ddd-4c18-bcd3-3fc758668077"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8bab214-b8ed-4ea1-b655-7f3b874f3e30",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afda276b-f616-4e22-ae2d-15b2d87d0376",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a93ecef7-eecc-40e3-b424-228d9afc9faa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be44747a-f3db-4cf2-a19b-1f89d0063c3d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13126042-9568-4883-a839-d54b4a5c84ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f4c1747-2286-4e20-a396-abe1b3bb4aca",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21673054-2891-4cfe-8581-a4668f475e22",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "814522e2-69a9-43c1-9b03-12a6a727f210"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b65ec1a-fe8b-4d42-88fa-6ffba2d19691",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "950104d4-c232-480c-ac05-5d4257b7bf9b"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ba4e5091-8a39-4f18-a7ac-caf3b7cdd2fe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a77259d1-a780-4add-a2d2-14e04ab7156f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "299c49db-244a-4de8-95bb-78f892cc59e6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e74f44b0-42fc-40fd-99c9-294197b1a595"
                    }
                  }
                ]
              },
              {
                "id": "a38aaa5b-52ca-492d-9ded-7a5273e95a0b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b5c01a62-7a87-409e-bc59-29cfacbc984c",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5af96b71-7be7-4cd2-b76a-f68fba6726d2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "fa4e19ed-db00-4b5a-970f-240380f4cf1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "842bd6e5-4c8a-4c72-ab4e-a1e4a9e5db0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7fea5437-d86e-48b1-98f6-43fc2c7d0d61"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "572baed9-a17f-46b7-89ae-9c2e1cd706ee",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4d4dfb0a-5f93-46b7-b4dc-6dff053c2374"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "186edc54-beb9-4c19-aeda-0df19038304f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "55335ca3-03e6-40b8-876a-939c722977f0"
                    }
                  }
                ]
              },
              {
                "id": "7bf21e7b-0441-488e-9ee8-7cdce1c9e4a7",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "fe36ed0c-332c-48cb-84ef-5fffbcd918da",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f397456b-6189-45bc-bc4d-c6324e3093af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "a0a3be54-0e27-4236-8ef0-3d41552646d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57672c57-384a-4995-8b29-dc91ed2ddaff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fd0e82d-ad67-48c0-93d2-e1fd9573eeec"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ebd5fb8d-2491-446b-8164-03767007601f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ac813e0e-8a0f-4c95-87d3-b96459dfaf2c",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fdbe6922-b140-41d5-aad5-c5204bc226ad",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "8637a3d6-ad2a-4edb-8541-f59a5f5be725"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e02c8a18-4f38-447c-a2c3-27f17fb128fa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "341855e3-6c13-4b3a-9868-aa26f56d0cec"
                    }
                  }
                ]
              },
              {
                "id": "544aa2a1-8445-4334-8f9f-8c3c33889b53",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "87ae7674-8fad-4bac-b265-b352568ae91a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "abb5d0a3-a707-4047-87db-41fd930b228c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5002b11f-0cf5-4bf9-8e15-f8b5f04110f7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7f1b41db-7099-4546-a9cf-7c31b3d85c7d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ce75ee78-131f-4b22-919f-1a34f1d6449c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "a3791713-c53d-4dc2-9c79-636472292e4d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "805e57d0-5c70-455e-b432-718e3a3d192b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c3cef9ad-b63a-4201-b6b8-cbd2459a75cc"
            }
          }
        ]
      },
      {
        "id": "c04bb5b8-356b-4e6b-8fff-0880dd3198da",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "6243370e-f43d-4cde-8529-1e84f820480a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7aa87c4c-7fe9-4272-81a0-191ef1909439",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2a73feae-5cc4-479b-8de4-cf9fcb3e8cf6",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b3bfc06-e834-46b4-8d96-a7fd059acd7b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "c23e77e9-76f9-437c-9a3d-8611fabedb32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abb37bf5-63d8-4db9-b05f-f33ec2bd3fc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6a24b4d7-d75b-4662-92e7-b71f76d38506"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4be6c52f-a221-4053-b23d-9f1ddaeab119",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "02233add-0555-4c3a-aa1d-6ae6fb2c3d28"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fa9939cd-03bf-4c2a-8a05-41aaa95c8cf7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bf788e41-20d3-432f-b834-ee7dc60bb329"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "38a7e68c-efba-4705-966b-35dd1d0b9303",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "4973303a-7ca1-406e-9e13-cf017542c0bb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c17ff52a-1018-487d-bab1-49c0c240524f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "eb1c9e73-e039-4cf2-b92c-52a9d90ada11"
            }
          }
        ]
      },
      {
        "id": "7ccf06fb-45bb-465b-aca8-072e61121528",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "53603d57-dad5-4c51-8723-ae1385dbe45c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2b74954f-523b-463a-8b51-94e46914ac5e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "229f54c4-8910-40af-90d2-8ed684e6bcf4",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53f6dcc3-8a02-4eaa-9120-175eca89d207",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "890ea2d6-7e2d-442b-a6b7-9162d040118e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa2bb67e-0b20-41ea-bf75-cd6b7227c61e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b550ec5b-658b-4987-aaee-db8abe19dd8f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a35a9706-da3e-4a52-8c53-a558ea0dcbaa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f7015ff0-a02f-4b6e-84ff-080e3f3a1606"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "af8da14f-6727-4af8-a523-fd59ab64a248",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a4645a69-09fe-4e2f-b498-a3f1e8d0162b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "74ea10b5-55b9-4636-b1de-b8ad573218a0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "3cee26bc-7db1-4c0b-87be-37abb13dcbea"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ae185d1a-d05c-4e70-921f-fc0d6e1ef86e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "889dea89-6eac-4ca3-920b-ffdb2aedad9c"
            }
          }
        ]
      },
      {
        "id": "0e03cf93-336a-49ca-ac79-b2d952983f02",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "889bf136-a2e6-46c1-9621-516dec21d04d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "66a8e871-1959-4ec7-9fc1-d9f3ffb17b55",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b280d1f9-28e4-42d7-8c26-dc18680aff19",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5010694c-ecb8-45cf-9c0e-fa5d121238f6",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "927e9342-0d05-41dd-aceb-bcf2d822ffd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d7b7ad5-0e2f-4590-8433-4f0a6a3e5dd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fc7b491f-8f26-43c5-94b7-c7931a293cde"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8efe92ba-d1ce-46f4-b850-0009d7088020",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "862781d9-7450-439d-b44b-7a4d472a5c36"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fb096332-2f16-4706-8fed-edb2042e5338",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e87f2cc8-a519-4fcd-a5d3-5f3d265338e0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6eb5bb49-c931-415a-b7d2-3f92d4fb34b7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d9b8f9cd-c60b-4db8-a3ac-3cd4a8b8d54d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "738acd67-2ddd-4599-9ce5-2e70cc62a22d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9aefbce2-7e78-4813-8e7b-0d07b5de02c7"
            }
          }
        ]
      },
      {
        "id": "bd347d93-b48c-4838-8ccd-05d5b9f9b5f3",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cc8a30dd-10d0-4a56-b517-5211d65d22d8",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a01412fa-b4e7-444c-b99f-2f0c16edcdfc",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "3df78ef1-b375-46dc-9941-0cc45014118b",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "28a82e10-eb4e-4f87-98e2-f1166b288bd2",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "581a71c5-bb37-47c3-9b1d-4b524d8a91db",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 564,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 294
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 56.994680851063826,
      "responseMin": 5,
      "responseMax": 562,
      "responseSd": 27.964611122859466,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1706402201534,
      "completed": 1706402243785
    },
    "executions": [
      {
        "id": "12a46962-e212-40d9-9e4e-458a8a576de8",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "e6585ffa-69bd-4f05-9e43-8988148aedce",
          "httpRequestId": "91b3644d-8008-4d84-b04a-5a4722631b66"
        },
        "item": {
          "id": "12a46962-e212-40d9-9e4e-458a8a576de8",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "2119b2eb-dcd7-4eb6-a8dd-868b6726c5ce",
          "status": "OK",
          "code": 200,
          "responseTime": 61,
          "responseSize": 0
        }
      },
      {
        "id": "8a9479fb-3673-490b-bc78-5977bb35b7c0",
        "cursor": {
          "ref": "c02d6d9d-90fb-453a-9680-2419022fd778",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "6fd7740b-147d-48dc-a821-f5d95d004118"
        },
        "item": {
          "id": "8a9479fb-3673-490b-bc78-5977bb35b7c0",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "be296e4d-d58c-479e-aaf9-442dc9d11335",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 0
        }
      },
      {
        "id": "fe1b2d78-323e-46cc-bebc-5f39e541583b",
        "cursor": {
          "ref": "8c616b11-2ca9-4787-897a-f6ecad1b255f",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "b193bf56-1fb7-43f2-b3b1-4412d2f67cb3"
        },
        "item": {
          "id": "fe1b2d78-323e-46cc-bebc-5f39e541583b",
          "name": "did_json"
        },
        "response": {
          "id": "322119d5-b4e4-4a5b-adcf-20b724c199d6",
          "status": "OK",
          "code": 200,
          "responseTime": 562,
          "responseSize": 1640
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d5c8670-f64c-4cc3-9873-8f3e17e193e8",
        "cursor": {
          "ref": "9f75ff1d-304d-464b-8939-56ea7f1a91a8",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "d1397f0a-4389-49da-a055-b73a50977b34"
        },
        "item": {
          "id": "6d5c8670-f64c-4cc3-9873-8f3e17e193e8",
          "name": "did:invalid"
        },
        "response": {
          "id": "edcaa690-5849-4e9b-89cb-82e25dc714ec",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d5c8670-f64c-4cc3-9873-8f3e17e193e8",
        "cursor": {
          "ref": "9f75ff1d-304d-464b-8939-56ea7f1a91a8",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "d1397f0a-4389-49da-a055-b73a50977b34"
        },
        "item": {
          "id": "6d5c8670-f64c-4cc3-9873-8f3e17e193e8",
          "name": "did:invalid"
        },
        "response": {
          "id": "edcaa690-5849-4e9b-89cb-82e25dc714ec",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7171670-74ea-48b5-a3af-833ea3076f2b",
        "cursor": {
          "ref": "f7b74677-bd1a-4661-aead-e2ab9d4c7b5d",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "415d57d3-cc69-475b-b735-25cc734d0f4a"
        },
        "item": {
          "id": "d7171670-74ea-48b5-a3af-833ea3076f2b",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "4d79dc49-a575-4b7c-9f87-4c4455f9d917",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7171670-74ea-48b5-a3af-833ea3076f2b",
        "cursor": {
          "ref": "f7b74677-bd1a-4661-aead-e2ab9d4c7b5d",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "415d57d3-cc69-475b-b735-25cc734d0f4a"
        },
        "item": {
          "id": "d7171670-74ea-48b5-a3af-833ea3076f2b",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "4d79dc49-a575-4b7c-9f87-4c4455f9d917",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62e886c5-ad06-4660-a0dc-291c46fba8f6",
        "cursor": {
          "ref": "7d3f14e3-0bef-4d57-97f6-5fab56c6b3a9",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "f376a71f-7b13-4c6e-a0da-0534b94a4646"
        },
        "item": {
          "id": "62e886c5-ad06-4660-a0dc-291c46fba8f6",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "8c84afb2-b30b-49f7-808f-80321897036f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62e886c5-ad06-4660-a0dc-291c46fba8f6",
        "cursor": {
          "ref": "7d3f14e3-0bef-4d57-97f6-5fab56c6b3a9",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "f376a71f-7b13-4c6e-a0da-0534b94a4646"
        },
        "item": {
          "id": "62e886c5-ad06-4660-a0dc-291c46fba8f6",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "8c84afb2-b30b-49f7-808f-80321897036f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca55736f-61fa-4e1d-be79-424a20ddbf93",
        "cursor": {
          "ref": "b2c3c714-a14f-45b9-a27b-307a6a2b7124",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "d7df895c-2c87-48ab-bce3-48a82144d606"
        },
        "item": {
          "id": "ca55736f-61fa-4e1d-be79-424a20ddbf93",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "972daf60-8ac8-406e-933f-4da4f2f6cc7a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca55736f-61fa-4e1d-be79-424a20ddbf93",
        "cursor": {
          "ref": "b2c3c714-a14f-45b9-a27b-307a6a2b7124",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "d7df895c-2c87-48ab-bce3-48a82144d606"
        },
        "item": {
          "id": "ca55736f-61fa-4e1d-be79-424a20ddbf93",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "972daf60-8ac8-406e-933f-4da4f2f6cc7a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb5461e9-2a96-40ff-931f-40f14dfb372f",
        "cursor": {
          "ref": "f5290bfc-972f-44aa-9c29-378af0344bce",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "8feaa369-723e-45b9-99e6-4a9f32f393a2"
        },
        "item": {
          "id": "fb5461e9-2a96-40ff-931f-40f14dfb372f",
          "name": "identifiers"
        },
        "response": {
          "id": "c7e80e7f-afd4-4a29-b013-efbfb8ea2c8c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "fb5461e9-2a96-40ff-931f-40f14dfb372f",
        "cursor": {
          "ref": "f5290bfc-972f-44aa-9c29-378af0344bce",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "8feaa369-723e-45b9-99e6-4a9f32f393a2"
        },
        "item": {
          "id": "fb5461e9-2a96-40ff-931f-40f14dfb372f",
          "name": "identifiers"
        },
        "response": {
          "id": "c7e80e7f-afd4-4a29-b013-efbfb8ea2c8c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "5bd2dd5d-d076-499b-85ba-185e8897faed",
        "cursor": {
          "ref": "8091b4f4-ee20-4c93-b5d0-698bab9053fc",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "5cd63306-832b-411c-9b2f-fc5aea75965a"
        },
        "item": {
          "id": "5bd2dd5d-d076-499b-85ba-185e8897faed",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "786093f8-cf83-4e47-9dce-2c3530504647",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bd2dd5d-d076-499b-85ba-185e8897faed",
        "cursor": {
          "ref": "8091b4f4-ee20-4c93-b5d0-698bab9053fc",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "5cd63306-832b-411c-9b2f-fc5aea75965a"
        },
        "item": {
          "id": "5bd2dd5d-d076-499b-85ba-185e8897faed",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "786093f8-cf83-4e47-9dce-2c3530504647",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c947beb1-2dcd-4388-b697-c3a304160ad6",
        "cursor": {
          "ref": "02e7b6cc-ea2c-47ae-a6b5-62efd4799a4a",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "3232af10-b707-4533-ae1f-77d7253dc805"
        },
        "item": {
          "id": "c947beb1-2dcd-4388-b697-c3a304160ad6",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "28e36cd8-1a5a-438e-a316-dbcfebbe7842",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c947beb1-2dcd-4388-b697-c3a304160ad6",
        "cursor": {
          "ref": "02e7b6cc-ea2c-47ae-a6b5-62efd4799a4a",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "3232af10-b707-4533-ae1f-77d7253dc805"
        },
        "item": {
          "id": "c947beb1-2dcd-4388-b697-c3a304160ad6",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "28e36cd8-1a5a-438e-a316-dbcfebbe7842",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bc071ed-b54e-4e9e-a547-773a48960ef6",
        "cursor": {
          "ref": "6b5f5a8c-b93b-447e-b1c6-04d7d6dbd835",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "f2c0fcad-59c5-4fd0-a9fb-b10ab9216561"
        },
        "item": {
          "id": "0bc071ed-b54e-4e9e-a547-773a48960ef6",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "7fa21fa0-ee9b-4396-a89d-3550780c8ff2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bc071ed-b54e-4e9e-a547-773a48960ef6",
        "cursor": {
          "ref": "6b5f5a8c-b93b-447e-b1c6-04d7d6dbd835",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "f2c0fcad-59c5-4fd0-a9fb-b10ab9216561"
        },
        "item": {
          "id": "0bc071ed-b54e-4e9e-a547-773a48960ef6",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "7fa21fa0-ee9b-4396-a89d-3550780c8ff2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "333d11be-8e1c-4bd8-baf4-36f533bb4fc9",
        "cursor": {
          "ref": "73c4d968-b5cc-45ff-8e36-9def653e2c76",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "38d4753b-287d-4dda-b00e-fdce4f0e674c"
        },
        "item": {
          "id": "333d11be-8e1c-4bd8-baf4-36f533bb4fc9",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "ef1a6861-79d1-494c-a630-ecaf265a503f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "333d11be-8e1c-4bd8-baf4-36f533bb4fc9",
        "cursor": {
          "ref": "73c4d968-b5cc-45ff-8e36-9def653e2c76",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "38d4753b-287d-4dda-b00e-fdce4f0e674c"
        },
        "item": {
          "id": "333d11be-8e1c-4bd8-baf4-36f533bb4fc9",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "ef1a6861-79d1-494c-a630-ecaf265a503f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa7354e8-1816-4e01-8da3-2a7405932830",
        "cursor": {
          "ref": "3afeb983-84d3-4b62-b602-4e2fdc467037",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "0778f323-3588-412c-aed2-caba84056347"
        },
        "item": {
          "id": "fa7354e8-1816-4e01-8da3-2a7405932830",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "73d840f7-af4b-4120-b5ff-f9f69ffb401a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa7354e8-1816-4e01-8da3-2a7405932830",
        "cursor": {
          "ref": "3afeb983-84d3-4b62-b602-4e2fdc467037",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "0778f323-3588-412c-aed2-caba84056347"
        },
        "item": {
          "id": "fa7354e8-1816-4e01-8da3-2a7405932830",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "73d840f7-af4b-4120-b5ff-f9f69ffb401a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48704158-af42-45b9-8472-3bf517b6e1cc",
        "cursor": {
          "ref": "871844ef-625a-41c0-b286-df51b91436f4",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "13a83559-98ef-433f-98d3-a68410f3e6f1"
        },
        "item": {
          "id": "48704158-af42-45b9-8472-3bf517b6e1cc",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "f76de7fa-0250-41f4-bc92-dfffd58449ad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48704158-af42-45b9-8472-3bf517b6e1cc",
        "cursor": {
          "ref": "871844ef-625a-41c0-b286-df51b91436f4",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "13a83559-98ef-433f-98d3-a68410f3e6f1"
        },
        "item": {
          "id": "48704158-af42-45b9-8472-3bf517b6e1cc",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "f76de7fa-0250-41f4-bc92-dfffd58449ad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de6c6f5a-dc25-46c0-af62-417becb75504",
        "cursor": {
          "ref": "60d4306f-4d46-4465-9b32-d92342dc8171",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "f9ec535a-e822-45fc-8bd6-ab25b40ddd7f"
        },
        "item": {
          "id": "de6c6f5a-dc25-46c0-af62-417becb75504",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "f2121818-05be-4777-bcad-0c0b0754e554",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de6c6f5a-dc25-46c0-af62-417becb75504",
        "cursor": {
          "ref": "60d4306f-4d46-4465-9b32-d92342dc8171",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "f9ec535a-e822-45fc-8bd6-ab25b40ddd7f"
        },
        "item": {
          "id": "de6c6f5a-dc25-46c0-af62-417becb75504",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "f2121818-05be-4777-bcad-0c0b0754e554",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b7b9d13-32e9-4104-925e-91577d546441",
        "cursor": {
          "ref": "32f53bbd-48f0-4c9b-8ffd-19be19a8a546",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "5e7736d0-e6aa-4eb0-932d-399908280010"
        },
        "item": {
          "id": "7b7b9d13-32e9-4104-925e-91577d546441",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "b73b4751-7c2f-444c-8840-042bafcbe663",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b7b9d13-32e9-4104-925e-91577d546441",
        "cursor": {
          "ref": "32f53bbd-48f0-4c9b-8ffd-19be19a8a546",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "5e7736d0-e6aa-4eb0-932d-399908280010"
        },
        "item": {
          "id": "7b7b9d13-32e9-4104-925e-91577d546441",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "b73b4751-7c2f-444c-8840-042bafcbe663",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52250289-980f-4be3-8499-62dadd86b335",
        "cursor": {
          "ref": "f990744b-d211-45a8-b606-ad0b7eb25777",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "a6c52548-8800-41d8-bda6-f122eaa4de45"
        },
        "item": {
          "id": "52250289-980f-4be3-8499-62dadd86b335",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "b5404357-4afa-4c33-9807-c29ef86de542",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52250289-980f-4be3-8499-62dadd86b335",
        "cursor": {
          "ref": "f990744b-d211-45a8-b606-ad0b7eb25777",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "a6c52548-8800-41d8-bda6-f122eaa4de45"
        },
        "item": {
          "id": "52250289-980f-4be3-8499-62dadd86b335",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "b5404357-4afa-4c33-9807-c29ef86de542",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75b82eb4-b37f-4793-890d-0f6f9a9fc5a2",
        "cursor": {
          "ref": "080ad3a7-11c9-4487-b244-8686b95907d8",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "dd92408c-3a0e-4c82-9b0e-cf52c6104866"
        },
        "item": {
          "id": "75b82eb4-b37f-4793-890d-0f6f9a9fc5a2",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "570ee63d-c053-4423-afff-7aa4fdc42750",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75b82eb4-b37f-4793-890d-0f6f9a9fc5a2",
        "cursor": {
          "ref": "080ad3a7-11c9-4487-b244-8686b95907d8",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "dd92408c-3a0e-4c82-9b0e-cf52c6104866"
        },
        "item": {
          "id": "75b82eb4-b37f-4793-890d-0f6f9a9fc5a2",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "570ee63d-c053-4423-afff-7aa4fdc42750",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4812549-0673-4e85-8473-0f5de7bf38c8",
        "cursor": {
          "ref": "6ea8a1e9-6dfd-46bb-aeb8-457d7d2d4204",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "2d11c99e-dad0-4b5a-8492-edbc0a3ac622"
        },
        "item": {
          "id": "a4812549-0673-4e85-8473-0f5de7bf38c8",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "999c92d2-b609-4902-b739-89b11e8052d3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4812549-0673-4e85-8473-0f5de7bf38c8",
        "cursor": {
          "ref": "6ea8a1e9-6dfd-46bb-aeb8-457d7d2d4204",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "2d11c99e-dad0-4b5a-8492-edbc0a3ac622"
        },
        "item": {
          "id": "a4812549-0673-4e85-8473-0f5de7bf38c8",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "999c92d2-b609-4902-b739-89b11e8052d3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5424daab-3b84-4bf0-a452-bc1d91ff0f0a",
        "cursor": {
          "ref": "5f155617-3820-48fd-91cf-2bbc2a4b0336",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "f181a994-2347-4334-85b6-6c85ff9db0a4"
        },
        "item": {
          "id": "5424daab-3b84-4bf0-a452-bc1d91ff0f0a",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "251147ca-10c5-44ac-a33d-5b7df1369b08",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5424daab-3b84-4bf0-a452-bc1d91ff0f0a",
        "cursor": {
          "ref": "5f155617-3820-48fd-91cf-2bbc2a4b0336",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "f181a994-2347-4334-85b6-6c85ff9db0a4"
        },
        "item": {
          "id": "5424daab-3b84-4bf0-a452-bc1d91ff0f0a",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "251147ca-10c5-44ac-a33d-5b7df1369b08",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c58e7d4a-ceea-42a0-ae74-ac0bc2234359",
        "cursor": {
          "ref": "a35f4c62-2417-4d4e-b3af-6d321411c77a",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "c995982e-823e-47af-93b0-5e21ca4e651a"
        },
        "item": {
          "id": "c58e7d4a-ceea-42a0-ae74-ac0bc2234359",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "08335404-c4e7-4f6b-bd1e-01f7a135b476",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c58e7d4a-ceea-42a0-ae74-ac0bc2234359",
        "cursor": {
          "ref": "a35f4c62-2417-4d4e-b3af-6d321411c77a",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "c995982e-823e-47af-93b0-5e21ca4e651a"
        },
        "item": {
          "id": "c58e7d4a-ceea-42a0-ae74-ac0bc2234359",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "08335404-c4e7-4f6b-bd1e-01f7a135b476",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b971a4df-cd2c-4727-8ab2-2b30e765770c",
        "cursor": {
          "ref": "73bef5b2-c563-4a84-b06c-0545658b6d12",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "bf6994bd-0909-4bc7-b07c-0294efb6a32c"
        },
        "item": {
          "id": "b971a4df-cd2c-4727-8ab2-2b30e765770c",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "3234f0ce-f72b-4a16-bae6-40617bf7e9f5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b971a4df-cd2c-4727-8ab2-2b30e765770c",
        "cursor": {
          "ref": "73bef5b2-c563-4a84-b06c-0545658b6d12",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "bf6994bd-0909-4bc7-b07c-0294efb6a32c"
        },
        "item": {
          "id": "b971a4df-cd2c-4727-8ab2-2b30e765770c",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "3234f0ce-f72b-4a16-bae6-40617bf7e9f5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a502935-66ef-4c57-bf09-2bd0808fd68e",
        "cursor": {
          "ref": "e0c4d3de-d91f-4a32-b11d-1e7be3c1a99b",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "39d861c8-e77a-4d34-99f7-5d861345cfa9"
        },
        "item": {
          "id": "7a502935-66ef-4c57-bf09-2bd0808fd68e",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "c7018c8a-75be-47cb-a0b9-922b34730fcb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a502935-66ef-4c57-bf09-2bd0808fd68e",
        "cursor": {
          "ref": "e0c4d3de-d91f-4a32-b11d-1e7be3c1a99b",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "39d861c8-e77a-4d34-99f7-5d861345cfa9"
        },
        "item": {
          "id": "7a502935-66ef-4c57-bf09-2bd0808fd68e",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "c7018c8a-75be-47cb-a0b9-922b34730fcb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9463f0e6-f3d5-4df0-89e5-52a4577e81d2",
        "cursor": {
          "ref": "593e98e9-4276-42e3-9162-de681ce11718",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "0015369a-c488-4a40-a791-2eebc7c963e6"
        },
        "item": {
          "id": "9463f0e6-f3d5-4df0-89e5-52a4577e81d2",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "9db23729-7b21-4825-868e-5703023d1d69",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9463f0e6-f3d5-4df0-89e5-52a4577e81d2",
        "cursor": {
          "ref": "593e98e9-4276-42e3-9162-de681ce11718",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "0015369a-c488-4a40-a791-2eebc7c963e6"
        },
        "item": {
          "id": "9463f0e6-f3d5-4df0-89e5-52a4577e81d2",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "9db23729-7b21-4825-868e-5703023d1d69",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e07e9fd-9107-47ba-b81d-fa3a55ea9a1a",
        "cursor": {
          "ref": "7a109db7-a904-4701-a04c-07d37140160b",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "0b6cf628-0d01-47ee-bcdf-9f343ce663e6"
        },
        "item": {
          "id": "2e07e9fd-9107-47ba-b81d-fa3a55ea9a1a",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "fe588e07-48d0-4a84-a7bf-9027e0f83038",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e07e9fd-9107-47ba-b81d-fa3a55ea9a1a",
        "cursor": {
          "ref": "7a109db7-a904-4701-a04c-07d37140160b",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "0b6cf628-0d01-47ee-bcdf-9f343ce663e6"
        },
        "item": {
          "id": "2e07e9fd-9107-47ba-b81d-fa3a55ea9a1a",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "fe588e07-48d0-4a84-a7bf-9027e0f83038",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfaa2ddf-a136-471f-9083-92c8f96f45a5",
        "cursor": {
          "ref": "b0ef727d-7580-4341-b544-9ecbdef8266a",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "b5514106-51dc-40c4-922f-e7ca6e4bfc59"
        },
        "item": {
          "id": "cfaa2ddf-a136-471f-9083-92c8f96f45a5",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "a2919a78-8f21-479b-9b58-b934607c781a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfaa2ddf-a136-471f-9083-92c8f96f45a5",
        "cursor": {
          "ref": "b0ef727d-7580-4341-b544-9ecbdef8266a",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "b5514106-51dc-40c4-922f-e7ca6e4bfc59"
        },
        "item": {
          "id": "cfaa2ddf-a136-471f-9083-92c8f96f45a5",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "a2919a78-8f21-479b-9b58-b934607c781a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf14dd45-b99d-45f9-948c-6f7dd6bd8b0b",
        "cursor": {
          "ref": "f27fe62c-97f1-43af-81e1-6516b6c90758",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "ac59cd82-7c1a-4c4d-976c-b05530b8cbc0"
        },
        "item": {
          "id": "cf14dd45-b99d-45f9-948c-6f7dd6bd8b0b",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "ab49d33f-0aa3-4a18-8b4f-4750f4c81b4b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf14dd45-b99d-45f9-948c-6f7dd6bd8b0b",
        "cursor": {
          "ref": "f27fe62c-97f1-43af-81e1-6516b6c90758",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "ac59cd82-7c1a-4c4d-976c-b05530b8cbc0"
        },
        "item": {
          "id": "cf14dd45-b99d-45f9-948c-6f7dd6bd8b0b",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "ab49d33f-0aa3-4a18-8b4f-4750f4c81b4b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af893e7d-face-4c21-8054-15025e14b28b",
        "cursor": {
          "ref": "4d3603d5-f319-40b6-afd3-4c5496e202e8",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "c404fd32-6107-4e86-a1cd-726a9b0365f4"
        },
        "item": {
          "id": "af893e7d-face-4c21-8054-15025e14b28b",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "91235513-49e2-4bc4-938e-c7c56e391321",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af893e7d-face-4c21-8054-15025e14b28b",
        "cursor": {
          "ref": "4d3603d5-f319-40b6-afd3-4c5496e202e8",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "c404fd32-6107-4e86-a1cd-726a9b0365f4"
        },
        "item": {
          "id": "af893e7d-face-4c21-8054-15025e14b28b",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "91235513-49e2-4bc4-938e-c7c56e391321",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77ccfa27-34da-47f5-a722-0144a17b7c0c",
        "cursor": {
          "ref": "16e5a922-73cd-4c8e-9b10-777c6a37ef58",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "9557f3a5-9436-4eaf-9c94-30409c5ffd52"
        },
        "item": {
          "id": "77ccfa27-34da-47f5-a722-0144a17b7c0c",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "132c3175-3a6f-4307-8c08-8cfb844916aa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77ccfa27-34da-47f5-a722-0144a17b7c0c",
        "cursor": {
          "ref": "16e5a922-73cd-4c8e-9b10-777c6a37ef58",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "9557f3a5-9436-4eaf-9c94-30409c5ffd52"
        },
        "item": {
          "id": "77ccfa27-34da-47f5-a722-0144a17b7c0c",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "132c3175-3a6f-4307-8c08-8cfb844916aa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dbb1184-4cd7-407a-98cd-1cfd95edf520",
        "cursor": {
          "ref": "293b34b9-ebc9-414c-983a-7a176a3b15ad",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "52f052df-359c-4135-b0f2-5ba4f2a1e850"
        },
        "item": {
          "id": "5dbb1184-4cd7-407a-98cd-1cfd95edf520",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "237ca0b7-9b16-4d8a-91b1-2457d72f5085",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dbb1184-4cd7-407a-98cd-1cfd95edf520",
        "cursor": {
          "ref": "293b34b9-ebc9-414c-983a-7a176a3b15ad",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "52f052df-359c-4135-b0f2-5ba4f2a1e850"
        },
        "item": {
          "id": "5dbb1184-4cd7-407a-98cd-1cfd95edf520",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "237ca0b7-9b16-4d8a-91b1-2457d72f5085",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93b01482-6142-480f-b645-900297f0dc19",
        "cursor": {
          "ref": "1292739b-f5c2-420f-95f3-3a799cb28196",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "b857f353-4846-45aa-8d22-f288e7ac0628"
        },
        "item": {
          "id": "93b01482-6142-480f-b645-900297f0dc19",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "adbd8250-7d2e-4537-937e-6f4c7e6d390d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93b01482-6142-480f-b645-900297f0dc19",
        "cursor": {
          "ref": "1292739b-f5c2-420f-95f3-3a799cb28196",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "b857f353-4846-45aa-8d22-f288e7ac0628"
        },
        "item": {
          "id": "93b01482-6142-480f-b645-900297f0dc19",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "adbd8250-7d2e-4537-937e-6f4c7e6d390d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd3ecaa0-80e2-4ad0-bfc4-5b213ec97f83",
        "cursor": {
          "ref": "ce44055c-fceb-455d-b048-84875ece642f",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "201b3d7a-075c-4f97-910a-adc3c908af48"
        },
        "item": {
          "id": "bd3ecaa0-80e2-4ad0-bfc4-5b213ec97f83",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "9531f6f3-4f72-4050-bc9a-0e00d8389eb0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd3ecaa0-80e2-4ad0-bfc4-5b213ec97f83",
        "cursor": {
          "ref": "ce44055c-fceb-455d-b048-84875ece642f",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "201b3d7a-075c-4f97-910a-adc3c908af48"
        },
        "item": {
          "id": "bd3ecaa0-80e2-4ad0-bfc4-5b213ec97f83",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "9531f6f3-4f72-4050-bc9a-0e00d8389eb0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6de4e9a7-0078-4827-8f4e-e005db94da9c",
        "cursor": {
          "ref": "f561664a-e622-4e84-a7f4-46cb152c7dc7",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "d8a4a312-9688-49bf-bb45-eca546c7c305"
        },
        "item": {
          "id": "6de4e9a7-0078-4827-8f4e-e005db94da9c",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "a7ddc135-1607-4599-9cf1-c462c134fc0c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6de4e9a7-0078-4827-8f4e-e005db94da9c",
        "cursor": {
          "ref": "f561664a-e622-4e84-a7f4-46cb152c7dc7",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "d8a4a312-9688-49bf-bb45-eca546c7c305"
        },
        "item": {
          "id": "6de4e9a7-0078-4827-8f4e-e005db94da9c",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "a7ddc135-1607-4599-9cf1-c462c134fc0c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5771b1a9-f574-4cec-9087-90e040712da5",
        "cursor": {
          "ref": "95c2f3b9-d9eb-4a99-a6a1-ec19c8b46fc3",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "d7b3da67-3997-4572-8b6d-5c013394f490"
        },
        "item": {
          "id": "5771b1a9-f574-4cec-9087-90e040712da5",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "1065d710-df9f-4005-b214-71ae82c680c9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5771b1a9-f574-4cec-9087-90e040712da5",
        "cursor": {
          "ref": "95c2f3b9-d9eb-4a99-a6a1-ec19c8b46fc3",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "d7b3da67-3997-4572-8b6d-5c013394f490"
        },
        "item": {
          "id": "5771b1a9-f574-4cec-9087-90e040712da5",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "1065d710-df9f-4005-b214-71ae82c680c9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f330f32f-a8ec-4f28-8fbc-a4bebb1d36f0",
        "cursor": {
          "ref": "0148d7f2-d633-49dc-b563-53d646d8fb4d",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "f557b4a1-5679-42f1-9fdb-37933e2bbee3"
        },
        "item": {
          "id": "f330f32f-a8ec-4f28-8fbc-a4bebb1d36f0",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "87b205a7-9382-40bf-81cf-84c292051d3e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f330f32f-a8ec-4f28-8fbc-a4bebb1d36f0",
        "cursor": {
          "ref": "0148d7f2-d633-49dc-b563-53d646d8fb4d",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "f557b4a1-5679-42f1-9fdb-37933e2bbee3"
        },
        "item": {
          "id": "f330f32f-a8ec-4f28-8fbc-a4bebb1d36f0",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "87b205a7-9382-40bf-81cf-84c292051d3e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "577d4b7d-0398-4042-bdc6-3d88d7ae01ea",
        "cursor": {
          "ref": "f2c2ff51-1831-4f69-b43d-3e046679a076",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "b1c64649-70ae-4fae-84b9-29a971481655"
        },
        "item": {
          "id": "577d4b7d-0398-4042-bdc6-3d88d7ae01ea",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "1f3c2e1b-bed0-4453-b8d5-8d39fb129dc0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "577d4b7d-0398-4042-bdc6-3d88d7ae01ea",
        "cursor": {
          "ref": "f2c2ff51-1831-4f69-b43d-3e046679a076",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "b1c64649-70ae-4fae-84b9-29a971481655"
        },
        "item": {
          "id": "577d4b7d-0398-4042-bdc6-3d88d7ae01ea",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "1f3c2e1b-bed0-4453-b8d5-8d39fb129dc0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f8f2c7f-6da6-4d32-b194-dbd0ee0c71cf",
        "cursor": {
          "ref": "50fd4628-df34-4fa0-9620-18798c68116e",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "9fe1560d-3184-44b6-aca3-ec4d5d244a07"
        },
        "item": {
          "id": "9f8f2c7f-6da6-4d32-b194-dbd0ee0c71cf",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "68248f73-b86d-4fda-b226-5406d5a6c803",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f8f2c7f-6da6-4d32-b194-dbd0ee0c71cf",
        "cursor": {
          "ref": "50fd4628-df34-4fa0-9620-18798c68116e",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "9fe1560d-3184-44b6-aca3-ec4d5d244a07"
        },
        "item": {
          "id": "9f8f2c7f-6da6-4d32-b194-dbd0ee0c71cf",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "68248f73-b86d-4fda-b226-5406d5a6c803",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f6c03f5-2c92-4061-83c3-43b1574bab46",
        "cursor": {
          "ref": "2344584a-9b38-461f-9132-0bcd0b373740",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "87974541-dbf3-4b2c-a7a5-962073a34aff"
        },
        "item": {
          "id": "2f6c03f5-2c92-4061-83c3-43b1574bab46",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "a57b86a1-5ec0-4703-ba9e-a06b79a0bbdc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f6c03f5-2c92-4061-83c3-43b1574bab46",
        "cursor": {
          "ref": "2344584a-9b38-461f-9132-0bcd0b373740",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "87974541-dbf3-4b2c-a7a5-962073a34aff"
        },
        "item": {
          "id": "2f6c03f5-2c92-4061-83c3-43b1574bab46",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "a57b86a1-5ec0-4703-ba9e-a06b79a0bbdc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6fa665b-9470-4f39-9026-a10f4f995089",
        "cursor": {
          "ref": "ba7c6f33-4b51-4c50-a599-818e652fc7a7",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "e321c2a3-dd07-48be-97f2-196b52071390"
        },
        "item": {
          "id": "b6fa665b-9470-4f39-9026-a10f4f995089",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "a17ce4c9-5b63-4c0f-9da3-cf1ca280b614",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6fa665b-9470-4f39-9026-a10f4f995089",
        "cursor": {
          "ref": "ba7c6f33-4b51-4c50-a599-818e652fc7a7",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "e321c2a3-dd07-48be-97f2-196b52071390"
        },
        "item": {
          "id": "b6fa665b-9470-4f39-9026-a10f4f995089",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "a17ce4c9-5b63-4c0f-9da3-cf1ca280b614",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e4afbdf-9804-43cf-b999-91d89545e394",
        "cursor": {
          "ref": "71295b9d-d9db-42e5-a927-b6adbb3c10e1",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "abfca12f-7a9a-417d-b351-2a39aef6e6f7"
        },
        "item": {
          "id": "9e4afbdf-9804-43cf-b999-91d89545e394",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "93dde703-4417-4ac9-a707-858ffae2db41",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e4afbdf-9804-43cf-b999-91d89545e394",
        "cursor": {
          "ref": "71295b9d-d9db-42e5-a927-b6adbb3c10e1",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "abfca12f-7a9a-417d-b351-2a39aef6e6f7"
        },
        "item": {
          "id": "9e4afbdf-9804-43cf-b999-91d89545e394",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "93dde703-4417-4ac9-a707-858ffae2db41",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f601def-7ec9-45a1-9c56-a61a632d00fa",
        "cursor": {
          "ref": "d652b9f9-105a-42b4-b49b-d55a9458d74e",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "79e6e1e4-cad6-44c9-b63b-87727050caa7"
        },
        "item": {
          "id": "4f601def-7ec9-45a1-9c56-a61a632d00fa",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "c1030b7e-8505-4362-9413-82dec844c4e1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f601def-7ec9-45a1-9c56-a61a632d00fa",
        "cursor": {
          "ref": "d652b9f9-105a-42b4-b49b-d55a9458d74e",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "79e6e1e4-cad6-44c9-b63b-87727050caa7"
        },
        "item": {
          "id": "4f601def-7ec9-45a1-9c56-a61a632d00fa",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "c1030b7e-8505-4362-9413-82dec844c4e1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "440fc781-0a36-4e71-bb04-3cf4f972938e",
        "cursor": {
          "ref": "23172593-00dc-450b-8c18-02f80c754ba4",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "a86cdcbb-9b5a-41e0-9e49-e67409a8807a"
        },
        "item": {
          "id": "440fc781-0a36-4e71-bb04-3cf4f972938e",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "56356ac9-0b3e-441d-9145-cd6a4a39e89d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "440fc781-0a36-4e71-bb04-3cf4f972938e",
        "cursor": {
          "ref": "23172593-00dc-450b-8c18-02f80c754ba4",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "a86cdcbb-9b5a-41e0-9e49-e67409a8807a"
        },
        "item": {
          "id": "440fc781-0a36-4e71-bb04-3cf4f972938e",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "56356ac9-0b3e-441d-9145-cd6a4a39e89d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "648a5b0f-cdff-45ee-884d-3aef5ffff633",
        "cursor": {
          "ref": "c4f5f06a-34b1-475b-ac36-ca6bd10895b9",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "d8b5d17f-45e0-4f82-ab49-7b8126b9a074"
        },
        "item": {
          "id": "648a5b0f-cdff-45ee-884d-3aef5ffff633",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "cd8f9e31-589e-4847-a29a-a864cc87b2d2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "648a5b0f-cdff-45ee-884d-3aef5ffff633",
        "cursor": {
          "ref": "c4f5f06a-34b1-475b-ac36-ca6bd10895b9",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "d8b5d17f-45e0-4f82-ab49-7b8126b9a074"
        },
        "item": {
          "id": "648a5b0f-cdff-45ee-884d-3aef5ffff633",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "cd8f9e31-589e-4847-a29a-a864cc87b2d2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df44c014-3c45-477c-8bab-b865adf2561d",
        "cursor": {
          "ref": "584d25b9-4a37-4c9e-95c1-339e15e7d0cb",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "dded0dc2-a81d-4117-be91-9df1cd77d4a9"
        },
        "item": {
          "id": "df44c014-3c45-477c-8bab-b865adf2561d",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "95dbebec-cecf-4425-bfea-2b8423f45840",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df44c014-3c45-477c-8bab-b865adf2561d",
        "cursor": {
          "ref": "584d25b9-4a37-4c9e-95c1-339e15e7d0cb",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "dded0dc2-a81d-4117-be91-9df1cd77d4a9"
        },
        "item": {
          "id": "df44c014-3c45-477c-8bab-b865adf2561d",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "95dbebec-cecf-4425-bfea-2b8423f45840",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05432fea-040d-4579-a49e-03619915ca80",
        "cursor": {
          "ref": "c74cd07e-0522-42b5-bf00-702e7c7e8f4d",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "c5608557-679f-49c1-a9a1-baf3e0b287f6"
        },
        "item": {
          "id": "05432fea-040d-4579-a49e-03619915ca80",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "93067dfb-b0ec-4e5a-a5b5-3de12e6de27c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05432fea-040d-4579-a49e-03619915ca80",
        "cursor": {
          "ref": "c74cd07e-0522-42b5-bf00-702e7c7e8f4d",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "c5608557-679f-49c1-a9a1-baf3e0b287f6"
        },
        "item": {
          "id": "05432fea-040d-4579-a49e-03619915ca80",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "93067dfb-b0ec-4e5a-a5b5-3de12e6de27c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "815ae494-afff-4975-89b8-3e8daa75e66d",
        "cursor": {
          "ref": "3f0d1004-e66a-4967-b12d-3fda2a928e82",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "cae4b116-e68e-42dc-a562-40c66eaaf08c"
        },
        "item": {
          "id": "815ae494-afff-4975-89b8-3e8daa75e66d",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "83116b8c-1b7e-4ce5-b245-511e3c0e3065",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "815ae494-afff-4975-89b8-3e8daa75e66d",
        "cursor": {
          "ref": "3f0d1004-e66a-4967-b12d-3fda2a928e82",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "cae4b116-e68e-42dc-a562-40c66eaaf08c"
        },
        "item": {
          "id": "815ae494-afff-4975-89b8-3e8daa75e66d",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "83116b8c-1b7e-4ce5-b245-511e3c0e3065",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8db7a779-6d0d-4163-aa51-dea24a166ae2",
        "cursor": {
          "ref": "b2d5de7c-fd37-45b8-954b-e1cee17bb450",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "1072b1b8-9812-444b-b992-af01b83c946a"
        },
        "item": {
          "id": "8db7a779-6d0d-4163-aa51-dea24a166ae2",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "2d6b0167-5945-4235-b8bf-36e8bdf27b16",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8db7a779-6d0d-4163-aa51-dea24a166ae2",
        "cursor": {
          "ref": "b2d5de7c-fd37-45b8-954b-e1cee17bb450",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "1072b1b8-9812-444b-b992-af01b83c946a"
        },
        "item": {
          "id": "8db7a779-6d0d-4163-aa51-dea24a166ae2",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "2d6b0167-5945-4235-b8bf-36e8bdf27b16",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73e9f1b9-6e67-46f0-a39c-ccbdbc8471a2",
        "cursor": {
          "ref": "469a04bb-7f61-4ef5-abb3-91a176835128",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "cfa39ccd-354a-4602-823c-f0f7d096936f"
        },
        "item": {
          "id": "73e9f1b9-6e67-46f0-a39c-ccbdbc8471a2",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "3e7d6e94-755f-40f5-be1d-c5f72075d7d2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73e9f1b9-6e67-46f0-a39c-ccbdbc8471a2",
        "cursor": {
          "ref": "469a04bb-7f61-4ef5-abb3-91a176835128",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "cfa39ccd-354a-4602-823c-f0f7d096936f"
        },
        "item": {
          "id": "73e9f1b9-6e67-46f0-a39c-ccbdbc8471a2",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "3e7d6e94-755f-40f5-be1d-c5f72075d7d2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56deaa8b-d860-4132-a262-d840ec50d85b",
        "cursor": {
          "ref": "6a3ae1b8-6e85-44d0-9ba4-6c35055e1111",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "28048d03-731b-4cba-874e-b29acf66ca95"
        },
        "item": {
          "id": "56deaa8b-d860-4132-a262-d840ec50d85b",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "42fe6a72-bd2d-4798-b223-a35c5207d396",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56deaa8b-d860-4132-a262-d840ec50d85b",
        "cursor": {
          "ref": "6a3ae1b8-6e85-44d0-9ba4-6c35055e1111",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "28048d03-731b-4cba-874e-b29acf66ca95"
        },
        "item": {
          "id": "56deaa8b-d860-4132-a262-d840ec50d85b",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "42fe6a72-bd2d-4798-b223-a35c5207d396",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "481fd59e-b316-4915-b24d-8f189883d586",
        "cursor": {
          "ref": "bc6497d7-fc32-4618-a033-cc29e5612d40",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "7622f928-01b8-4756-8622-cba515cb012a"
        },
        "item": {
          "id": "481fd59e-b316-4915-b24d-8f189883d586",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "a494ae46-45ad-4a0c-8f89-5dcfdf682768",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "481fd59e-b316-4915-b24d-8f189883d586",
        "cursor": {
          "ref": "bc6497d7-fc32-4618-a033-cc29e5612d40",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "7622f928-01b8-4756-8622-cba515cb012a"
        },
        "item": {
          "id": "481fd59e-b316-4915-b24d-8f189883d586",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "a494ae46-45ad-4a0c-8f89-5dcfdf682768",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a0f7b2d-2d69-43e7-8dbf-c6573613ceb5",
        "cursor": {
          "ref": "a27fa1e7-1f59-49fd-9af2-3ecff6f9606f",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "6d140edf-e184-48c9-b31b-fa7ffd669657"
        },
        "item": {
          "id": "0a0f7b2d-2d69-43e7-8dbf-c6573613ceb5",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "a893e831-9aa5-4f64-9a1d-eddd55dc80dc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a0f7b2d-2d69-43e7-8dbf-c6573613ceb5",
        "cursor": {
          "ref": "a27fa1e7-1f59-49fd-9af2-3ecff6f9606f",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "6d140edf-e184-48c9-b31b-fa7ffd669657"
        },
        "item": {
          "id": "0a0f7b2d-2d69-43e7-8dbf-c6573613ceb5",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "a893e831-9aa5-4f64-9a1d-eddd55dc80dc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fedb867-a6a5-4f2a-9556-a3ba426f5b1c",
        "cursor": {
          "ref": "ae3787ad-d844-4e26-8212-362c9735d147",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "fcb7b0b9-f663-44cb-8793-39f91bdf18a1"
        },
        "item": {
          "id": "9fedb867-a6a5-4f2a-9556-a3ba426f5b1c",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "e02a2219-a267-4f72-b1a6-8a2a8b718d97",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fedb867-a6a5-4f2a-9556-a3ba426f5b1c",
        "cursor": {
          "ref": "ae3787ad-d844-4e26-8212-362c9735d147",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "fcb7b0b9-f663-44cb-8793-39f91bdf18a1"
        },
        "item": {
          "id": "9fedb867-a6a5-4f2a-9556-a3ba426f5b1c",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "e02a2219-a267-4f72-b1a6-8a2a8b718d97",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a9f31e0-8994-4baf-87b9-d62e50deb466",
        "cursor": {
          "ref": "b4fcc6c2-1c23-4d2d-82e4-a37d55ba1789",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "fa6c6b20-4236-4d96-864d-7f1efd78b1bf"
        },
        "item": {
          "id": "5a9f31e0-8994-4baf-87b9-d62e50deb466",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "c40917ae-16dc-4969-b3db-28de392f0bd1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a9f31e0-8994-4baf-87b9-d62e50deb466",
        "cursor": {
          "ref": "b4fcc6c2-1c23-4d2d-82e4-a37d55ba1789",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "fa6c6b20-4236-4d96-864d-7f1efd78b1bf"
        },
        "item": {
          "id": "5a9f31e0-8994-4baf-87b9-d62e50deb466",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "c40917ae-16dc-4969-b3db-28de392f0bd1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b9cb0a5-4925-4026-af0c-4764d2b32f10",
        "cursor": {
          "ref": "9ebef0cb-b7b0-4b3f-b32a-0329a6b79944",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "a2a528fe-6691-470c-9fa7-08bec720aa16"
        },
        "item": {
          "id": "5b9cb0a5-4925-4026-af0c-4764d2b32f10",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "bae7ffd0-aa8c-47e6-80f1-9ca11fb752c7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b9cb0a5-4925-4026-af0c-4764d2b32f10",
        "cursor": {
          "ref": "9ebef0cb-b7b0-4b3f-b32a-0329a6b79944",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "a2a528fe-6691-470c-9fa7-08bec720aa16"
        },
        "item": {
          "id": "5b9cb0a5-4925-4026-af0c-4764d2b32f10",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "bae7ffd0-aa8c-47e6-80f1-9ca11fb752c7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64e2cf01-65b9-483e-b2bc-98a49ed2396e",
        "cursor": {
          "ref": "9eb74bd9-1632-40cc-9947-dab310755bcf",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "b1fe9c4a-878e-4c55-aee2-8120e40e8db7"
        },
        "item": {
          "id": "64e2cf01-65b9-483e-b2bc-98a49ed2396e",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "87c7a1f2-ee7d-43df-a7df-ac9b2dc4f740",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64e2cf01-65b9-483e-b2bc-98a49ed2396e",
        "cursor": {
          "ref": "9eb74bd9-1632-40cc-9947-dab310755bcf",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "b1fe9c4a-878e-4c55-aee2-8120e40e8db7"
        },
        "item": {
          "id": "64e2cf01-65b9-483e-b2bc-98a49ed2396e",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "87c7a1f2-ee7d-43df-a7df-ac9b2dc4f740",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aff55ba2-55ed-4702-8a59-061bc5d977f8",
        "cursor": {
          "ref": "99738c67-aeef-4cbd-b9d5-2859851109f7",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "9a8946c8-7ee8-43a6-8acf-fdc848825d6b"
        },
        "item": {
          "id": "aff55ba2-55ed-4702-8a59-061bc5d977f8",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "1697379e-c518-4076-aa3e-b2e9e10f5758",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aff55ba2-55ed-4702-8a59-061bc5d977f8",
        "cursor": {
          "ref": "99738c67-aeef-4cbd-b9d5-2859851109f7",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "9a8946c8-7ee8-43a6-8acf-fdc848825d6b"
        },
        "item": {
          "id": "aff55ba2-55ed-4702-8a59-061bc5d977f8",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "1697379e-c518-4076-aa3e-b2e9e10f5758",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb0b0738-4559-4b0a-a643-c2444b4e38ed",
        "cursor": {
          "ref": "ba1e3247-bd9d-4b7c-8fbe-31f2448f2b2f",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "89370525-2b3e-4aff-bec9-9585718277da"
        },
        "item": {
          "id": "bb0b0738-4559-4b0a-a643-c2444b4e38ed",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "53cfcd89-d132-43fc-bbfc-421674b5efdb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb0b0738-4559-4b0a-a643-c2444b4e38ed",
        "cursor": {
          "ref": "ba1e3247-bd9d-4b7c-8fbe-31f2448f2b2f",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "89370525-2b3e-4aff-bec9-9585718277da"
        },
        "item": {
          "id": "bb0b0738-4559-4b0a-a643-c2444b4e38ed",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "53cfcd89-d132-43fc-bbfc-421674b5efdb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aeee856-e5af-4908-ba51-89cf69e1e899",
        "cursor": {
          "ref": "92eecb55-37c4-4050-85ed-1fdcc18085f6",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "a0223c5a-1977-4eaf-9229-f34760c3a80d"
        },
        "item": {
          "id": "2aeee856-e5af-4908-ba51-89cf69e1e899",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "e3b42987-ccc6-4d14-a95d-42fc6ccc66a3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aeee856-e5af-4908-ba51-89cf69e1e899",
        "cursor": {
          "ref": "92eecb55-37c4-4050-85ed-1fdcc18085f6",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "a0223c5a-1977-4eaf-9229-f34760c3a80d"
        },
        "item": {
          "id": "2aeee856-e5af-4908-ba51-89cf69e1e899",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "e3b42987-ccc6-4d14-a95d-42fc6ccc66a3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f1b39aa-0eb5-4d9c-9db5-33b4aeda2002",
        "cursor": {
          "ref": "cc7c27ab-f1e2-45a3-a253-30049e0c2049",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "e17dab13-7365-4f12-840b-ab83f15fe445"
        },
        "item": {
          "id": "2f1b39aa-0eb5-4d9c-9db5-33b4aeda2002",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "8724ae10-f439-4621-bef8-c066a434e5e5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f1b39aa-0eb5-4d9c-9db5-33b4aeda2002",
        "cursor": {
          "ref": "cc7c27ab-f1e2-45a3-a253-30049e0c2049",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "e17dab13-7365-4f12-840b-ab83f15fe445"
        },
        "item": {
          "id": "2f1b39aa-0eb5-4d9c-9db5-33b4aeda2002",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "8724ae10-f439-4621-bef8-c066a434e5e5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "350f6c80-3884-4f7f-9878-8bf4ce1145ac",
        "cursor": {
          "ref": "66c5b669-5e3d-4e14-addd-794535299397",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "24f11078-b170-45e2-b488-c473f775f996"
        },
        "item": {
          "id": "350f6c80-3884-4f7f-9878-8bf4ce1145ac",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "b587cbda-c3e4-4bf6-9f70-6586df0b7d9e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "350f6c80-3884-4f7f-9878-8bf4ce1145ac",
        "cursor": {
          "ref": "66c5b669-5e3d-4e14-addd-794535299397",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "24f11078-b170-45e2-b488-c473f775f996"
        },
        "item": {
          "id": "350f6c80-3884-4f7f-9878-8bf4ce1145ac",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "b587cbda-c3e4-4bf6-9f70-6586df0b7d9e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b172029c-4095-448b-81ea-487887660b71",
        "cursor": {
          "ref": "e7f6202f-3dc3-4773-9c81-613499a6a687",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "40bc318d-27a7-4d45-bb4b-457447f99d9d"
        },
        "item": {
          "id": "b172029c-4095-448b-81ea-487887660b71",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "923abbcc-1059-42b8-aabc-9bd991911211",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b172029c-4095-448b-81ea-487887660b71",
        "cursor": {
          "ref": "e7f6202f-3dc3-4773-9c81-613499a6a687",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "40bc318d-27a7-4d45-bb4b-457447f99d9d"
        },
        "item": {
          "id": "b172029c-4095-448b-81ea-487887660b71",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "923abbcc-1059-42b8-aabc-9bd991911211",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53f84af4-d0c9-4c83-af8f-e2069a182600",
        "cursor": {
          "ref": "7c4abf39-af5f-487d-994e-7d4505f4e8e6",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "e1379170-14d4-483c-8b15-ed1415f0b002"
        },
        "item": {
          "id": "53f84af4-d0c9-4c83-af8f-e2069a182600",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "5396cdaa-1e55-419f-9165-c1cf9d746d0d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53f84af4-d0c9-4c83-af8f-e2069a182600",
        "cursor": {
          "ref": "7c4abf39-af5f-487d-994e-7d4505f4e8e6",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "e1379170-14d4-483c-8b15-ed1415f0b002"
        },
        "item": {
          "id": "53f84af4-d0c9-4c83-af8f-e2069a182600",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "5396cdaa-1e55-419f-9165-c1cf9d746d0d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2165baae-6455-45eb-92cd-48702355164e",
        "cursor": {
          "ref": "988569b1-8936-4579-aa80-12d46b0e6950",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "36f17017-78cc-450a-b17a-364d63247d25"
        },
        "item": {
          "id": "2165baae-6455-45eb-92cd-48702355164e",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "6837f96c-0464-41ff-8225-039860004970",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2165baae-6455-45eb-92cd-48702355164e",
        "cursor": {
          "ref": "988569b1-8936-4579-aa80-12d46b0e6950",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "36f17017-78cc-450a-b17a-364d63247d25"
        },
        "item": {
          "id": "2165baae-6455-45eb-92cd-48702355164e",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "6837f96c-0464-41ff-8225-039860004970",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "863fa950-b372-4c2d-b162-ea96ebf2adb6",
        "cursor": {
          "ref": "8627c04b-d964-4a23-a0fb-b308645cd938",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "88f88478-4fa4-4989-ae07-d58e5b8723e8"
        },
        "item": {
          "id": "863fa950-b372-4c2d-b162-ea96ebf2adb6",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "9431e27e-7e8c-42a4-ba10-c5bfdebbd15e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "863fa950-b372-4c2d-b162-ea96ebf2adb6",
        "cursor": {
          "ref": "8627c04b-d964-4a23-a0fb-b308645cd938",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "88f88478-4fa4-4989-ae07-d58e5b8723e8"
        },
        "item": {
          "id": "863fa950-b372-4c2d-b162-ea96ebf2adb6",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "9431e27e-7e8c-42a4-ba10-c5bfdebbd15e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4c3a7e1-b93f-43b0-81df-a72328648b5a",
        "cursor": {
          "ref": "4677f66c-19e0-40f1-926f-14b81694a68d",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "81610d0e-8795-4ddb-a766-1eab858a138c"
        },
        "item": {
          "id": "a4c3a7e1-b93f-43b0-81df-a72328648b5a",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "4b4763e5-e983-40e4-9ef5-123f204dafb6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4c3a7e1-b93f-43b0-81df-a72328648b5a",
        "cursor": {
          "ref": "4677f66c-19e0-40f1-926f-14b81694a68d",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "81610d0e-8795-4ddb-a766-1eab858a138c"
        },
        "item": {
          "id": "a4c3a7e1-b93f-43b0-81df-a72328648b5a",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "4b4763e5-e983-40e4-9ef5-123f204dafb6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ced50687-6fb6-45d1-8d6c-62d162bfd97d",
        "cursor": {
          "ref": "360e5153-f8bc-43cc-8d89-7c792a6dcf46",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "863fb196-0921-4540-b3b7-7be059e1fd97"
        },
        "item": {
          "id": "ced50687-6fb6-45d1-8d6c-62d162bfd97d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "63997aa4-b5dd-4f1e-8451-1853d2e45bf3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ced50687-6fb6-45d1-8d6c-62d162bfd97d",
        "cursor": {
          "ref": "360e5153-f8bc-43cc-8d89-7c792a6dcf46",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "863fb196-0921-4540-b3b7-7be059e1fd97"
        },
        "item": {
          "id": "ced50687-6fb6-45d1-8d6c-62d162bfd97d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "63997aa4-b5dd-4f1e-8451-1853d2e45bf3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23d1b58e-04eb-4624-81a2-2810181eecf0",
        "cursor": {
          "ref": "bf127d16-0142-4218-aa27-11a112c15285",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "e4e3e018-03f0-45f7-8ad3-0640c8e755b7"
        },
        "item": {
          "id": "23d1b58e-04eb-4624-81a2-2810181eecf0",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "83393bf7-85fa-4090-97fa-fe44dd521ba9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23d1b58e-04eb-4624-81a2-2810181eecf0",
        "cursor": {
          "ref": "bf127d16-0142-4218-aa27-11a112c15285",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "e4e3e018-03f0-45f7-8ad3-0640c8e755b7"
        },
        "item": {
          "id": "23d1b58e-04eb-4624-81a2-2810181eecf0",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "83393bf7-85fa-4090-97fa-fe44dd521ba9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dc93241-b19a-47d2-af44-1296f1a0ea04",
        "cursor": {
          "ref": "c4d207d6-9cfb-4d7d-b578-2fdfbbae9ecf",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "a3cc1d17-c584-45bc-8558-3b3c4d5f749b"
        },
        "item": {
          "id": "4dc93241-b19a-47d2-af44-1296f1a0ea04",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "52eca957-2214-4a21-86ff-1efb977cfdc3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dc93241-b19a-47d2-af44-1296f1a0ea04",
        "cursor": {
          "ref": "c4d207d6-9cfb-4d7d-b578-2fdfbbae9ecf",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "a3cc1d17-c584-45bc-8558-3b3c4d5f749b"
        },
        "item": {
          "id": "4dc93241-b19a-47d2-af44-1296f1a0ea04",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "52eca957-2214-4a21-86ff-1efb977cfdc3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "142791d1-56c2-483c-a9ea-dcdd5683a4a7",
        "cursor": {
          "ref": "72616696-8365-4edd-902c-2fc0d589af2d",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "b80f1ead-876e-4fb7-a1a6-29665c30eb71"
        },
        "item": {
          "id": "142791d1-56c2-483c-a9ea-dcdd5683a4a7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "963577d1-3ffa-4d2e-8b42-c23c24eee5ff",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 198,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "142791d1-56c2-483c-a9ea-dcdd5683a4a7",
        "cursor": {
          "ref": "72616696-8365-4edd-902c-2fc0d589af2d",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "b80f1ead-876e-4fb7-a1a6-29665c30eb71"
        },
        "item": {
          "id": "142791d1-56c2-483c-a9ea-dcdd5683a4a7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "963577d1-3ffa-4d2e-8b42-c23c24eee5ff",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 198,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3116fa0b-0feb-4f2f-af23-705979a5aba9",
        "cursor": {
          "ref": "0082a957-a7bc-4574-94e1-86f03c4c9564",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "163cffa5-5797-489c-b7ee-24b010c7a295"
        },
        "item": {
          "id": "3116fa0b-0feb-4f2f-af23-705979a5aba9",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "c11189a5-83d7-48a9-a54e-c3d837d67a34",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3116fa0b-0feb-4f2f-af23-705979a5aba9",
        "cursor": {
          "ref": "0082a957-a7bc-4574-94e1-86f03c4c9564",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "163cffa5-5797-489c-b7ee-24b010c7a295"
        },
        "item": {
          "id": "3116fa0b-0feb-4f2f-af23-705979a5aba9",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "c11189a5-83d7-48a9-a54e-c3d837d67a34",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36e099db-52a8-4faf-b678-352362926db6",
        "cursor": {
          "ref": "8a151f94-30c9-4294-9bdc-ffd4286964fc",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "0e2cdacf-065f-4ae5-8616-d7151e6c94a9"
        },
        "item": {
          "id": "36e099db-52a8-4faf-b678-352362926db6",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "bb699842-ac62-46dc-888c-ec9179de32dd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36e099db-52a8-4faf-b678-352362926db6",
        "cursor": {
          "ref": "8a151f94-30c9-4294-9bdc-ffd4286964fc",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "0e2cdacf-065f-4ae5-8616-d7151e6c94a9"
        },
        "item": {
          "id": "36e099db-52a8-4faf-b678-352362926db6",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "bb699842-ac62-46dc-888c-ec9179de32dd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d06bfa7-550e-451a-b7b5-edd314662668",
        "cursor": {
          "ref": "47e988d1-8d8a-41f6-bf27-a5b325dd7729",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "834e2c55-911f-4593-8298-aaaad413c482"
        },
        "item": {
          "id": "7d06bfa7-550e-451a-b7b5-edd314662668",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "0142d07a-24fa-4d57-b7ec-6318798bfb4b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d06bfa7-550e-451a-b7b5-edd314662668",
        "cursor": {
          "ref": "47e988d1-8d8a-41f6-bf27-a5b325dd7729",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "834e2c55-911f-4593-8298-aaaad413c482"
        },
        "item": {
          "id": "7d06bfa7-550e-451a-b7b5-edd314662668",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "0142d07a-24fa-4d57-b7ec-6318798bfb4b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a59fcb1c-889f-4ae4-a234-ca38eff94049",
        "cursor": {
          "ref": "488a5aeb-3b4d-4433-a261-6bf80105032f",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "bcabf1b3-be39-4748-b4bc-a9c019176613"
        },
        "item": {
          "id": "a59fcb1c-889f-4ae4-a234-ca38eff94049",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "d24a2658-be8b-48b2-b65c-64b99eaf3ac4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a59fcb1c-889f-4ae4-a234-ca38eff94049",
        "cursor": {
          "ref": "488a5aeb-3b4d-4433-a261-6bf80105032f",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "bcabf1b3-be39-4748-b4bc-a9c019176613"
        },
        "item": {
          "id": "a59fcb1c-889f-4ae4-a234-ca38eff94049",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "d24a2658-be8b-48b2-b65c-64b99eaf3ac4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca0c6760-947a-43aa-9f7b-3fdeb9d460c6",
        "cursor": {
          "ref": "e123ad13-d82b-45aa-845b-704a75e0cc65",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "80b9295a-8288-40b0-988f-c6448f823a12"
        },
        "item": {
          "id": "ca0c6760-947a-43aa-9f7b-3fdeb9d460c6",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "e11622d7-4b0a-46c5-a8c3-b4bfe124dd03",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca0c6760-947a-43aa-9f7b-3fdeb9d460c6",
        "cursor": {
          "ref": "e123ad13-d82b-45aa-845b-704a75e0cc65",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "80b9295a-8288-40b0-988f-c6448f823a12"
        },
        "item": {
          "id": "ca0c6760-947a-43aa-9f7b-3fdeb9d460c6",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "e11622d7-4b0a-46c5-a8c3-b4bfe124dd03",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c56c4b54-fcb7-46f1-b937-c739756cfa45",
        "cursor": {
          "ref": "7ce1cffc-9cf9-4391-a1ba-5c817ed51904",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "c8612969-8a38-4073-ba48-3e03c1b9263a"
        },
        "item": {
          "id": "c56c4b54-fcb7-46f1-b937-c739756cfa45",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "b9c0b00e-c025-4433-912f-bcb612ec1143",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c56c4b54-fcb7-46f1-b937-c739756cfa45",
        "cursor": {
          "ref": "7ce1cffc-9cf9-4391-a1ba-5c817ed51904",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "c8612969-8a38-4073-ba48-3e03c1b9263a"
        },
        "item": {
          "id": "c56c4b54-fcb7-46f1-b937-c739756cfa45",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "b9c0b00e-c025-4433-912f-bcb612ec1143",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc612f7d-d23b-447f-a39f-b34119132490",
        "cursor": {
          "ref": "51bffbca-62a0-4dad-acd6-3acf061812cc",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "3fd9b574-869a-4e34-9573-565f8f37b4b4"
        },
        "item": {
          "id": "cc612f7d-d23b-447f-a39f-b34119132490",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "13883cd3-93fd-4209-8cb3-fd193f68dbdb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc612f7d-d23b-447f-a39f-b34119132490",
        "cursor": {
          "ref": "51bffbca-62a0-4dad-acd6-3acf061812cc",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "3fd9b574-869a-4e34-9573-565f8f37b4b4"
        },
        "item": {
          "id": "cc612f7d-d23b-447f-a39f-b34119132490",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "13883cd3-93fd-4209-8cb3-fd193f68dbdb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b0d4deb-5296-4598-88a4-ea1a3430dc7e",
        "cursor": {
          "ref": "d54f0090-c96d-4655-a199-347e9e8a1847",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "ba60b240-5079-4776-ab02-4be083fa302a"
        },
        "item": {
          "id": "7b0d4deb-5296-4598-88a4-ea1a3430dc7e",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "f8352b06-de3f-461a-bee5-d5f4e3f454da",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b0d4deb-5296-4598-88a4-ea1a3430dc7e",
        "cursor": {
          "ref": "d54f0090-c96d-4655-a199-347e9e8a1847",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "ba60b240-5079-4776-ab02-4be083fa302a"
        },
        "item": {
          "id": "7b0d4deb-5296-4598-88a4-ea1a3430dc7e",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "f8352b06-de3f-461a-bee5-d5f4e3f454da",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "452d2aec-7fe4-4889-a07a-69cfa5f15fb9",
        "cursor": {
          "ref": "bf731a98-fc83-41eb-8ec3-3c7ce646d7af",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "1cbc6c15-2ee3-49ae-a0c7-4125f6c97d02"
        },
        "item": {
          "id": "452d2aec-7fe4-4889-a07a-69cfa5f15fb9",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "379adf08-bf6f-47ac-a50a-39d1ad452a58",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "452d2aec-7fe4-4889-a07a-69cfa5f15fb9",
        "cursor": {
          "ref": "bf731a98-fc83-41eb-8ec3-3c7ce646d7af",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "1cbc6c15-2ee3-49ae-a0c7-4125f6c97d02"
        },
        "item": {
          "id": "452d2aec-7fe4-4889-a07a-69cfa5f15fb9",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "379adf08-bf6f-47ac-a50a-39d1ad452a58",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "643f1e38-00aa-413e-9b1d-61a64cbdb137",
        "cursor": {
          "ref": "73c2304f-c686-4069-a862-1308e85b7912",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "8a6e8491-11e5-483f-abaa-4907601d02ba"
        },
        "item": {
          "id": "643f1e38-00aa-413e-9b1d-61a64cbdb137",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "68b88cf9-afa1-4902-b48d-05d75118a065",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "643f1e38-00aa-413e-9b1d-61a64cbdb137",
        "cursor": {
          "ref": "73c2304f-c686-4069-a862-1308e85b7912",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "8a6e8491-11e5-483f-abaa-4907601d02ba"
        },
        "item": {
          "id": "643f1e38-00aa-413e-9b1d-61a64cbdb137",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "68b88cf9-afa1-4902-b48d-05d75118a065",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b0cbcca-185b-436b-934e-c3d0b82c9c23",
        "cursor": {
          "ref": "bbd75465-d2f6-444a-ae6f-53b5af8837e5",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "20e5b0da-cfd3-4e3d-8f54-da629217bc35"
        },
        "item": {
          "id": "3b0cbcca-185b-436b-934e-c3d0b82c9c23",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "065d5ac5-1c98-4046-96e9-49cc683ab293",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b0cbcca-185b-436b-934e-c3d0b82c9c23",
        "cursor": {
          "ref": "bbd75465-d2f6-444a-ae6f-53b5af8837e5",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "20e5b0da-cfd3-4e3d-8f54-da629217bc35"
        },
        "item": {
          "id": "3b0cbcca-185b-436b-934e-c3d0b82c9c23",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "065d5ac5-1c98-4046-96e9-49cc683ab293",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fea46ce2-fbad-4d8e-b975-b1519512285c",
        "cursor": {
          "ref": "6f2449c6-ff36-45ea-b736-8c8dffa6c968",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "2333a20f-7b22-44e3-b281-1f5a0dba61cd"
        },
        "item": {
          "id": "fea46ce2-fbad-4d8e-b975-b1519512285c",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "53ee8065-234d-45e9-ad41-967c1e88601e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fea46ce2-fbad-4d8e-b975-b1519512285c",
        "cursor": {
          "ref": "6f2449c6-ff36-45ea-b736-8c8dffa6c968",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "2333a20f-7b22-44e3-b281-1f5a0dba61cd"
        },
        "item": {
          "id": "fea46ce2-fbad-4d8e-b975-b1519512285c",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "53ee8065-234d-45e9-ad41-967c1e88601e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f73a739-e6a5-490e-804e-62597e6df36e",
        "cursor": {
          "ref": "41de0b8b-b77b-4eb4-b0b2-69a7e7fa52fd",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "82304934-d970-492e-9f44-be2d66a8d4db"
        },
        "item": {
          "id": "2f73a739-e6a5-490e-804e-62597e6df36e",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "8bd1bd68-ede7-4c27-8ef6-92a257f9af08",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f73a739-e6a5-490e-804e-62597e6df36e",
        "cursor": {
          "ref": "41de0b8b-b77b-4eb4-b0b2-69a7e7fa52fd",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "82304934-d970-492e-9f44-be2d66a8d4db"
        },
        "item": {
          "id": "2f73a739-e6a5-490e-804e-62597e6df36e",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "8bd1bd68-ede7-4c27-8ef6-92a257f9af08",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18cdb092-6449-4ced-a91a-58622172de02",
        "cursor": {
          "ref": "f66e9b09-dccd-4a3d-bdf7-3f53d7b0abc2",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "4a9b1aeb-cf9b-44a9-8bae-0444d820e58d"
        },
        "item": {
          "id": "18cdb092-6449-4ced-a91a-58622172de02",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "0bbd31d9-b309-437d-a0fd-ae43b547d347",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18cdb092-6449-4ced-a91a-58622172de02",
        "cursor": {
          "ref": "f66e9b09-dccd-4a3d-bdf7-3f53d7b0abc2",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "4a9b1aeb-cf9b-44a9-8bae-0444d820e58d"
        },
        "item": {
          "id": "18cdb092-6449-4ced-a91a-58622172de02",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "0bbd31d9-b309-437d-a0fd-ae43b547d347",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2810d4f8-c446-4506-bcbb-ada6d162b88b",
        "cursor": {
          "ref": "11a01208-b888-4f5c-a2dc-87171734e8cf",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "a9331db0-62ff-4602-b4c3-8e3f8317807f"
        },
        "item": {
          "id": "2810d4f8-c446-4506-bcbb-ada6d162b88b",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "bce64d19-3d16-4bc7-928d-e2b90d998999",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2810d4f8-c446-4506-bcbb-ada6d162b88b",
        "cursor": {
          "ref": "11a01208-b888-4f5c-a2dc-87171734e8cf",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "a9331db0-62ff-4602-b4c3-8e3f8317807f"
        },
        "item": {
          "id": "2810d4f8-c446-4506-bcbb-ada6d162b88b",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "bce64d19-3d16-4bc7-928d-e2b90d998999",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a71c3f5-f9a6-491c-a5b6-29bf1f4a8fef",
        "cursor": {
          "ref": "667408af-b128-41ff-a9c0-93eed0a3987f",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "87253940-2c70-43df-aa9b-26dcd7ca484e"
        },
        "item": {
          "id": "7a71c3f5-f9a6-491c-a5b6-29bf1f4a8fef",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "1582c385-efac-4438-91c7-19a213c77621",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a71c3f5-f9a6-491c-a5b6-29bf1f4a8fef",
        "cursor": {
          "ref": "667408af-b128-41ff-a9c0-93eed0a3987f",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "87253940-2c70-43df-aa9b-26dcd7ca484e"
        },
        "item": {
          "id": "7a71c3f5-f9a6-491c-a5b6-29bf1f4a8fef",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "1582c385-efac-4438-91c7-19a213c77621",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "225967b3-0105-4857-8a41-c4b3c643fcf3",
        "cursor": {
          "ref": "4e8cc1aa-45c3-49e9-a81f-bed07a4d4d0f",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "5924c2b9-a6de-4ca4-afea-591713332b29"
        },
        "item": {
          "id": "225967b3-0105-4857-8a41-c4b3c643fcf3",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "1b8ca972-8f66-440e-9976-a5d5c2faf3d5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "225967b3-0105-4857-8a41-c4b3c643fcf3",
        "cursor": {
          "ref": "4e8cc1aa-45c3-49e9-a81f-bed07a4d4d0f",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "5924c2b9-a6de-4ca4-afea-591713332b29"
        },
        "item": {
          "id": "225967b3-0105-4857-8a41-c4b3c643fcf3",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "1b8ca972-8f66-440e-9976-a5d5c2faf3d5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef2093d8-f103-462a-92d4-989615bbd9f2",
        "cursor": {
          "ref": "a4571376-cac4-425d-bdbc-fdfeb90ff7d4",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "9d9259d6-e60e-436b-b44f-3b1e18797842"
        },
        "item": {
          "id": "ef2093d8-f103-462a-92d4-989615bbd9f2",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "55d8ac6d-00a7-4607-b652-a269c100a449",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef2093d8-f103-462a-92d4-989615bbd9f2",
        "cursor": {
          "ref": "a4571376-cac4-425d-bdbc-fdfeb90ff7d4",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "9d9259d6-e60e-436b-b44f-3b1e18797842"
        },
        "item": {
          "id": "ef2093d8-f103-462a-92d4-989615bbd9f2",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "55d8ac6d-00a7-4607-b652-a269c100a449",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0802b718-fd9b-4fb7-9205-dedacfbe7a9f",
        "cursor": {
          "ref": "2482f5a8-8c4d-4681-a272-4f82e5961d1b",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "f9a4f503-699a-487a-a05e-ba71db1cad4d"
        },
        "item": {
          "id": "0802b718-fd9b-4fb7-9205-dedacfbe7a9f",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "4d575d8d-6204-4009-af66-6328866322ef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0802b718-fd9b-4fb7-9205-dedacfbe7a9f",
        "cursor": {
          "ref": "2482f5a8-8c4d-4681-a272-4f82e5961d1b",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "f9a4f503-699a-487a-a05e-ba71db1cad4d"
        },
        "item": {
          "id": "0802b718-fd9b-4fb7-9205-dedacfbe7a9f",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "4d575d8d-6204-4009-af66-6328866322ef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f35980b-75f6-41f6-a712-703eb178f7f9",
        "cursor": {
          "ref": "d762c307-de53-4b78-a1b1-e1d6fbe9e7c2",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "54dcb956-7a7b-4384-919f-54ba347bcb38"
        },
        "item": {
          "id": "3f35980b-75f6-41f6-a712-703eb178f7f9",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "6f4fbe55-12df-4df9-8090-4508d46f3fcc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 67,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f35980b-75f6-41f6-a712-703eb178f7f9",
        "cursor": {
          "ref": "d762c307-de53-4b78-a1b1-e1d6fbe9e7c2",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "54dcb956-7a7b-4384-919f-54ba347bcb38"
        },
        "item": {
          "id": "3f35980b-75f6-41f6-a712-703eb178f7f9",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "6f4fbe55-12df-4df9-8090-4508d46f3fcc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 67,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9575e168-15b2-4c80-ba2d-117a01268721",
        "cursor": {
          "ref": "f6fffa7d-6de6-469b-97e2-0ced3f39fc68",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "ed90ed24-734f-4d32-b3d0-292ebfce0337"
        },
        "item": {
          "id": "9575e168-15b2-4c80-ba2d-117a01268721",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "1a24f854-8295-4cb2-b123-e5fad8653125",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9575e168-15b2-4c80-ba2d-117a01268721",
        "cursor": {
          "ref": "f6fffa7d-6de6-469b-97e2-0ced3f39fc68",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "ed90ed24-734f-4d32-b3d0-292ebfce0337"
        },
        "item": {
          "id": "9575e168-15b2-4c80-ba2d-117a01268721",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "1a24f854-8295-4cb2-b123-e5fad8653125",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c3137b3-88c5-416d-9f5b-dc06089953c2",
        "cursor": {
          "ref": "74d4491c-ef96-4184-b101-24dd9a7b5934",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "2aef812f-0e83-40dc-8f4f-726efc8eefeb"
        },
        "item": {
          "id": "3c3137b3-88c5-416d-9f5b-dc06089953c2",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "5ae32b50-ce8e-4c1b-b234-b39e8552bb8f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c3137b3-88c5-416d-9f5b-dc06089953c2",
        "cursor": {
          "ref": "74d4491c-ef96-4184-b101-24dd9a7b5934",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "2aef812f-0e83-40dc-8f4f-726efc8eefeb"
        },
        "item": {
          "id": "3c3137b3-88c5-416d-9f5b-dc06089953c2",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "5ae32b50-ce8e-4c1b-b234-b39e8552bb8f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c69bc26d-3db4-411c-9cc5-62fda317c029",
        "cursor": {
          "ref": "7af98d5a-01b7-4d15-b2a1-4caecc1d9241",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "99684ed6-1dca-4b9f-b8f6-cee7900b809d"
        },
        "item": {
          "id": "c69bc26d-3db4-411c-9cc5-62fda317c029",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "ff30fe11-e2ba-4d28-99df-b7459c2b7bb9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c69bc26d-3db4-411c-9cc5-62fda317c029",
        "cursor": {
          "ref": "7af98d5a-01b7-4d15-b2a1-4caecc1d9241",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "99684ed6-1dca-4b9f-b8f6-cee7900b809d"
        },
        "item": {
          "id": "c69bc26d-3db4-411c-9cc5-62fda317c029",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "ff30fe11-e2ba-4d28-99df-b7459c2b7bb9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "994f70cc-0b67-44cd-bcd4-ff01422b5db0",
        "cursor": {
          "ref": "74c63599-ee68-42c0-b16e-0f82c5a5e47b",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "63945f49-6511-46aa-84eb-8d0e4ca6841b"
        },
        "item": {
          "id": "994f70cc-0b67-44cd-bcd4-ff01422b5db0",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "5c3eb5c3-ab51-4495-9d2e-12b6bffe28f7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "994f70cc-0b67-44cd-bcd4-ff01422b5db0",
        "cursor": {
          "ref": "74c63599-ee68-42c0-b16e-0f82c5a5e47b",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "63945f49-6511-46aa-84eb-8d0e4ca6841b"
        },
        "item": {
          "id": "994f70cc-0b67-44cd-bcd4-ff01422b5db0",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "5c3eb5c3-ab51-4495-9d2e-12b6bffe28f7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "930dcab1-ff52-4d8f-bd4e-2355faa2b405",
        "cursor": {
          "ref": "c5e3e0db-1588-4324-a7ff-6a0cf4598109",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "4c261d90-7de7-4715-b998-afa09ffc5c22"
        },
        "item": {
          "id": "930dcab1-ff52-4d8f-bd4e-2355faa2b405",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "0a44185b-303f-4f20-a46e-bdb9319f5bc6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "930dcab1-ff52-4d8f-bd4e-2355faa2b405",
        "cursor": {
          "ref": "c5e3e0db-1588-4324-a7ff-6a0cf4598109",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "4c261d90-7de7-4715-b998-afa09ffc5c22"
        },
        "item": {
          "id": "930dcab1-ff52-4d8f-bd4e-2355faa2b405",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "0a44185b-303f-4f20-a46e-bdb9319f5bc6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9893d1dc-3d61-4feb-a602-9027bcb9fbb7",
        "cursor": {
          "ref": "46a168f9-7941-42a1-a347-fe758d3e1507",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "cdabfbdc-da70-4640-b751-e16f12c7d021"
        },
        "item": {
          "id": "9893d1dc-3d61-4feb-a602-9027bcb9fbb7",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "41805d1e-56da-4053-a3af-1426f861ac1c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9893d1dc-3d61-4feb-a602-9027bcb9fbb7",
        "cursor": {
          "ref": "46a168f9-7941-42a1-a347-fe758d3e1507",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "cdabfbdc-da70-4640-b751-e16f12c7d021"
        },
        "item": {
          "id": "9893d1dc-3d61-4feb-a602-9027bcb9fbb7",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "41805d1e-56da-4053-a3af-1426f861ac1c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e9a19fd-b294-4731-9074-e98ae4841de2",
        "cursor": {
          "ref": "4a46409c-8a39-4904-8667-b4047a6366b7",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "4a926c78-9ffa-489b-b7a6-6e17adec618f"
        },
        "item": {
          "id": "3e9a19fd-b294-4731-9074-e98ae4841de2",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "89043459-d732-4fca-aef6-0fb7515c57f1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e9a19fd-b294-4731-9074-e98ae4841de2",
        "cursor": {
          "ref": "4a46409c-8a39-4904-8667-b4047a6366b7",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "4a926c78-9ffa-489b-b7a6-6e17adec618f"
        },
        "item": {
          "id": "3e9a19fd-b294-4731-9074-e98ae4841de2",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "89043459-d732-4fca-aef6-0fb7515c57f1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7f5e4ee-60c2-4ac1-821f-055b3144becc",
        "cursor": {
          "ref": "b7b48ced-66a6-495e-96da-bbd12632145d",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "c6bd8c74-487f-43bf-8c53-b33201be9e77"
        },
        "item": {
          "id": "b7f5e4ee-60c2-4ac1-821f-055b3144becc",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "676b72d3-ab20-47aa-b715-a871f74bc19d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7f5e4ee-60c2-4ac1-821f-055b3144becc",
        "cursor": {
          "ref": "b7b48ced-66a6-495e-96da-bbd12632145d",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "c6bd8c74-487f-43bf-8c53-b33201be9e77"
        },
        "item": {
          "id": "b7f5e4ee-60c2-4ac1-821f-055b3144becc",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "676b72d3-ab20-47aa-b715-a871f74bc19d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "352d7589-0a66-4e82-ada5-acdd483ce503",
        "cursor": {
          "ref": "20b50a2f-2a2a-430c-ad94-3e8a6ca3356c",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "ca127135-4fea-4645-b0c3-ace7d56f4f4d"
        },
        "item": {
          "id": "352d7589-0a66-4e82-ada5-acdd483ce503",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "10dafb48-ea92-4fb5-a383-55073fce2bfc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "352d7589-0a66-4e82-ada5-acdd483ce503",
        "cursor": {
          "ref": "20b50a2f-2a2a-430c-ad94-3e8a6ca3356c",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "ca127135-4fea-4645-b0c3-ace7d56f4f4d"
        },
        "item": {
          "id": "352d7589-0a66-4e82-ada5-acdd483ce503",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "10dafb48-ea92-4fb5-a383-55073fce2bfc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d552408a-2964-4d9b-9562-efc710454e94",
        "cursor": {
          "ref": "66b8ad94-ab6d-4a03-95ea-5b97a13d9f97",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "d344e9ab-44d7-4462-aa77-055867b44a91"
        },
        "item": {
          "id": "d552408a-2964-4d9b-9562-efc710454e94",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "1e0e797c-8e21-40f4-aec2-e953eb167e3a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d552408a-2964-4d9b-9562-efc710454e94",
        "cursor": {
          "ref": "66b8ad94-ab6d-4a03-95ea-5b97a13d9f97",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "d344e9ab-44d7-4462-aa77-055867b44a91"
        },
        "item": {
          "id": "d552408a-2964-4d9b-9562-efc710454e94",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "1e0e797c-8e21-40f4-aec2-e953eb167e3a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db6eab98-37c9-42b1-8d8a-c4868cc53529",
        "cursor": {
          "ref": "5ae5a992-be6c-4a54-ba64-f105b40889e1",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "e8caef85-f6e3-42ce-a23e-0b46d45deb50"
        },
        "item": {
          "id": "db6eab98-37c9-42b1-8d8a-c4868cc53529",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "00fe0917-e38d-4ff5-8e66-f75bd22a8ec4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db6eab98-37c9-42b1-8d8a-c4868cc53529",
        "cursor": {
          "ref": "5ae5a992-be6c-4a54-ba64-f105b40889e1",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "e8caef85-f6e3-42ce-a23e-0b46d45deb50"
        },
        "item": {
          "id": "db6eab98-37c9-42b1-8d8a-c4868cc53529",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "00fe0917-e38d-4ff5-8e66-f75bd22a8ec4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b996b947-213d-4bcc-a7e8-9e5929f67d20",
        "cursor": {
          "ref": "d5b44c73-fd68-4fb3-a974-6c75e06c362f",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "98e0c2b3-09ce-4ceb-8296-45ca26859957"
        },
        "item": {
          "id": "b996b947-213d-4bcc-a7e8-9e5929f67d20",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "338b50be-92ae-4511-95f8-aa0208798fb6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b996b947-213d-4bcc-a7e8-9e5929f67d20",
        "cursor": {
          "ref": "d5b44c73-fd68-4fb3-a974-6c75e06c362f",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "98e0c2b3-09ce-4ceb-8296-45ca26859957"
        },
        "item": {
          "id": "b996b947-213d-4bcc-a7e8-9e5929f67d20",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "338b50be-92ae-4511-95f8-aa0208798fb6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c516072c-e37a-41da-bdef-1225957da1e2",
        "cursor": {
          "ref": "8651c47b-1113-4f50-80c3-deffedc89489",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "c30d0a2f-769e-4c38-b823-d9738131332a"
        },
        "item": {
          "id": "c516072c-e37a-41da-bdef-1225957da1e2",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "56ae9c3f-e1f2-4e7b-97f6-d185e32da3b2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "c516072c-e37a-41da-bdef-1225957da1e2",
        "cursor": {
          "ref": "8651c47b-1113-4f50-80c3-deffedc89489",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "c30d0a2f-769e-4c38-b823-d9738131332a"
        },
        "item": {
          "id": "c516072c-e37a-41da-bdef-1225957da1e2",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "56ae9c3f-e1f2-4e7b-97f6-d185e32da3b2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "1cf94f2e-a80b-4a52-b98a-4d946eaa516a",
        "cursor": {
          "ref": "e50078da-3cb6-469f-9a63-56e3b12d9917",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "922f37aa-c2a9-4423-963a-28b346cf54c8"
        },
        "item": {
          "id": "1cf94f2e-a80b-4a52-b98a-4d946eaa516a",
          "name": "credentials_issue"
        },
        "response": {
          "id": "52ae5dfb-8454-4fb8-b247-67900205f477",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "1cf94f2e-a80b-4a52-b98a-4d946eaa516a",
        "cursor": {
          "ref": "e50078da-3cb6-469f-9a63-56e3b12d9917",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "922f37aa-c2a9-4423-963a-28b346cf54c8"
        },
        "item": {
          "id": "1cf94f2e-a80b-4a52-b98a-4d946eaa516a",
          "name": "credentials_issue"
        },
        "response": {
          "id": "52ae5dfb-8454-4fb8-b247-67900205f477",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "a5332849-5711-495c-91cf-35f33e530970",
        "cursor": {
          "ref": "4adc0116-2bed-4610-a75c-5d2d9d45aaa2",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "a5de7723-4b9b-4cdd-8086-f542d2ebc4b8"
        },
        "item": {
          "id": "a5332849-5711-495c-91cf-35f33e530970",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "5f14cf1c-3013-4e72-b4f2-886b2c0bd86a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "a5332849-5711-495c-91cf-35f33e530970",
        "cursor": {
          "ref": "4adc0116-2bed-4610-a75c-5d2d9d45aaa2",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "a5de7723-4b9b-4cdd-8086-f542d2ebc4b8"
        },
        "item": {
          "id": "a5332849-5711-495c-91cf-35f33e530970",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "5f14cf1c-3013-4e72-b4f2-886b2c0bd86a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "5694cd59-2cb6-4ab6-b63b-dac2b6880580",
        "cursor": {
          "ref": "98d0072e-a5c7-4b2a-9c22-c67437e90392",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "c1b8aa4d-056d-4c7f-9de7-c45347cf4a79"
        },
        "item": {
          "id": "5694cd59-2cb6-4ab6-b63b-dac2b6880580",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "994722ab-6d27-4d5f-be4f-94c3cdc935a2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "5694cd59-2cb6-4ab6-b63b-dac2b6880580",
        "cursor": {
          "ref": "98d0072e-a5c7-4b2a-9c22-c67437e90392",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "c1b8aa4d-056d-4c7f-9de7-c45347cf4a79"
        },
        "item": {
          "id": "5694cd59-2cb6-4ab6-b63b-dac2b6880580",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "994722ab-6d27-4d5f-be4f-94c3cdc935a2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "74fdcebe-39a3-43c2-8b46-c527bd5141b2",
        "cursor": {
          "ref": "72638d5f-cbcb-4e6c-a7d3-243d3e482541",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "666ee720-2249-49d4-82e5-f69973e10271"
        },
        "item": {
          "id": "74fdcebe-39a3-43c2-8b46-c527bd5141b2",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "1fedda9f-4177-406b-b1a0-6e8860a00ea5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "74fdcebe-39a3-43c2-8b46-c527bd5141b2",
        "cursor": {
          "ref": "72638d5f-cbcb-4e6c-a7d3-243d3e482541",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "666ee720-2249-49d4-82e5-f69973e10271"
        },
        "item": {
          "id": "74fdcebe-39a3-43c2-8b46-c527bd5141b2",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "1fedda9f-4177-406b-b1a0-6e8860a00ea5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "2c82a7be-10dd-4ecd-8b8a-0fa4b37df911",
        "cursor": {
          "ref": "232b862c-4446-44cb-9f37-3cdd0ff32d6a",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "4d93945c-63cd-4aa8-b350-d1ae54478746"
        },
        "item": {
          "id": "2c82a7be-10dd-4ecd-8b8a-0fa4b37df911",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "3908502b-29a9-45fd-a220-efcff68fb76c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "2c82a7be-10dd-4ecd-8b8a-0fa4b37df911",
        "cursor": {
          "ref": "232b862c-4446-44cb-9f37-3cdd0ff32d6a",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "4d93945c-63cd-4aa8-b350-d1ae54478746"
        },
        "item": {
          "id": "2c82a7be-10dd-4ecd-8b8a-0fa4b37df911",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "3908502b-29a9-45fd-a220-efcff68fb76c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "58161b00-7249-4256-aea8-04ce654301ab",
        "cursor": {
          "ref": "9b10d44d-f8e3-4e71-922c-6bc15bd9799a",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "243d2270-b7ce-45f3-b607-107ecec09949"
        },
        "item": {
          "id": "58161b00-7249-4256-aea8-04ce654301ab",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "e94487c9-46a3-4933-ad2d-811643b2d0c0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 89,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "58161b00-7249-4256-aea8-04ce654301ab",
        "cursor": {
          "ref": "9b10d44d-f8e3-4e71-922c-6bc15bd9799a",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "243d2270-b7ce-45f3-b607-107ecec09949"
        },
        "item": {
          "id": "58161b00-7249-4256-aea8-04ce654301ab",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "e94487c9-46a3-4933-ad2d-811643b2d0c0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 89,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "ade06510-9835-4c44-ab54-e71668c3b250",
        "cursor": {
          "ref": "abed13f9-c39b-432a-bc8f-1552da6a70ab",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "77284da3-f1a4-4de7-aaa4-e044600226cc"
        },
        "item": {
          "id": "ade06510-9835-4c44-ab54-e71668c3b250",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "e72a389f-5ac7-47f4-be9c-25701beed492",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ade06510-9835-4c44-ab54-e71668c3b250",
        "cursor": {
          "ref": "abed13f9-c39b-432a-bc8f-1552da6a70ab",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "77284da3-f1a4-4de7-aaa4-e044600226cc"
        },
        "item": {
          "id": "ade06510-9835-4c44-ab54-e71668c3b250",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "e72a389f-5ac7-47f4-be9c-25701beed492",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9482898d-6cfc-450c-9032-6d26635ec392",
        "cursor": {
          "ref": "3af2a6b8-da6b-4ae6-8899-138d08a16e50",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "c566bf2c-835a-4e0a-b9e3-03a4f8359abb"
        },
        "item": {
          "id": "9482898d-6cfc-450c-9032-6d26635ec392",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "8e10591c-5563-4d79-afb1-b52f2e443da8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9482898d-6cfc-450c-9032-6d26635ec392",
        "cursor": {
          "ref": "3af2a6b8-da6b-4ae6-8899-138d08a16e50",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "c566bf2c-835a-4e0a-b9e3-03a4f8359abb"
        },
        "item": {
          "id": "9482898d-6cfc-450c-9032-6d26635ec392",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "8e10591c-5563-4d79-afb1-b52f2e443da8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc682abc-bb27-4e9d-abb1-ef223fee8b8a",
        "cursor": {
          "ref": "3a6e7018-88a8-43cd-8321-960e3604fc5c",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "1004d32e-307e-486b-9fd4-0079e6e3e444"
        },
        "item": {
          "id": "bc682abc-bb27-4e9d-abb1-ef223fee8b8a",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "e9547eab-d170-445e-8647-954c8a59ced3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc682abc-bb27-4e9d-abb1-ef223fee8b8a",
        "cursor": {
          "ref": "3a6e7018-88a8-43cd-8321-960e3604fc5c",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "1004d32e-307e-486b-9fd4-0079e6e3e444"
        },
        "item": {
          "id": "bc682abc-bb27-4e9d-abb1-ef223fee8b8a",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "e9547eab-d170-445e-8647-954c8a59ced3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83127ffd-141e-43a5-a7dd-a4f7d0457950",
        "cursor": {
          "ref": "721b40b4-9e7f-4474-baa4-1a78add7ef76",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "60eec814-25c7-4444-bf0d-a2cf0896887b"
        },
        "item": {
          "id": "83127ffd-141e-43a5-a7dd-a4f7d0457950",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "1857fc72-f25d-418a-9e98-476818ff53b1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83127ffd-141e-43a5-a7dd-a4f7d0457950",
        "cursor": {
          "ref": "721b40b4-9e7f-4474-baa4-1a78add7ef76",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "60eec814-25c7-4444-bf0d-a2cf0896887b"
        },
        "item": {
          "id": "83127ffd-141e-43a5-a7dd-a4f7d0457950",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "1857fc72-f25d-418a-9e98-476818ff53b1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eb7c68f-5d91-4a69-b399-419764925236",
        "cursor": {
          "ref": "3b99da38-452d-4255-9928-d9c6e4361d46",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "a510f3eb-8c6c-4ba7-940d-35bca5beb2e1"
        },
        "item": {
          "id": "5eb7c68f-5d91-4a69-b399-419764925236",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "30f81400-5e1c-471a-9929-78818e124f6e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eb7c68f-5d91-4a69-b399-419764925236",
        "cursor": {
          "ref": "3b99da38-452d-4255-9928-d9c6e4361d46",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "a510f3eb-8c6c-4ba7-940d-35bca5beb2e1"
        },
        "item": {
          "id": "5eb7c68f-5d91-4a69-b399-419764925236",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "30f81400-5e1c-471a-9929-78818e124f6e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c92d458-b7f6-4a70-a8cd-9b07eb0b36ef",
        "cursor": {
          "ref": "8de5390b-6fee-45b6-bd0e-8a4a8aa6b281",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "d3d81d84-fe49-49d8-9fcc-610ed92d1110"
        },
        "item": {
          "id": "9c92d458-b7f6-4a70-a8cd-9b07eb0b36ef",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "f44dd093-1470-41dd-baea-7575accb0f3e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c92d458-b7f6-4a70-a8cd-9b07eb0b36ef",
        "cursor": {
          "ref": "8de5390b-6fee-45b6-bd0e-8a4a8aa6b281",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "d3d81d84-fe49-49d8-9fcc-610ed92d1110"
        },
        "item": {
          "id": "9c92d458-b7f6-4a70-a8cd-9b07eb0b36ef",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "f44dd093-1470-41dd-baea-7575accb0f3e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0379f89-4848-4748-980f-953a98b2ee04",
        "cursor": {
          "ref": "0169eebd-036f-481d-9787-039d6c44fed3",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "4639a258-88fc-48d0-8129-f40769608c8a"
        },
        "item": {
          "id": "e0379f89-4848-4748-980f-953a98b2ee04",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "50fa4845-3bd3-41cb-95bc-38641e6fda9b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0379f89-4848-4748-980f-953a98b2ee04",
        "cursor": {
          "ref": "0169eebd-036f-481d-9787-039d6c44fed3",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "4639a258-88fc-48d0-8129-f40769608c8a"
        },
        "item": {
          "id": "e0379f89-4848-4748-980f-953a98b2ee04",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "50fa4845-3bd3-41cb-95bc-38641e6fda9b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ac69417-544c-4153-a56b-884c897fc17e",
        "cursor": {
          "ref": "eb502742-c663-4358-bd84-a2e3bbd7f350",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "7dfda73c-c8bc-4509-862e-0085fc0d80cb"
        },
        "item": {
          "id": "5ac69417-544c-4153-a56b-884c897fc17e",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "c7ebea40-1dc7-4975-bae4-047113474dd0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ac69417-544c-4153-a56b-884c897fc17e",
        "cursor": {
          "ref": "eb502742-c663-4358-bd84-a2e3bbd7f350",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "7dfda73c-c8bc-4509-862e-0085fc0d80cb"
        },
        "item": {
          "id": "5ac69417-544c-4153-a56b-884c897fc17e",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "c7ebea40-1dc7-4975-bae4-047113474dd0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a427efd4-ad5a-4b8b-9eb1-00345ccc073f",
        "cursor": {
          "ref": "5b672070-44a1-4fe3-9242-e4e691e6d8e2",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "f93e58f6-5bbd-47b0-b0fa-bc236a3d1957"
        },
        "item": {
          "id": "a427efd4-ad5a-4b8b-9eb1-00345ccc073f",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "50292c02-f32f-42ec-87a9-69155b765dcd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a427efd4-ad5a-4b8b-9eb1-00345ccc073f",
        "cursor": {
          "ref": "5b672070-44a1-4fe3-9242-e4e691e6d8e2",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "f93e58f6-5bbd-47b0-b0fa-bc236a3d1957"
        },
        "item": {
          "id": "a427efd4-ad5a-4b8b-9eb1-00345ccc073f",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "50292c02-f32f-42ec-87a9-69155b765dcd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec644f6d-ee0b-45c4-b859-d5d71a9a8d6c",
        "cursor": {
          "ref": "041b9063-6556-4dc7-b1ba-4cb0695b192e",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "92d37314-3463-4756-9a39-ccb7af8a5728"
        },
        "item": {
          "id": "ec644f6d-ee0b-45c4-b859-d5d71a9a8d6c",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "7e383053-4164-48ad-a8c9-54e3cbcfde72",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec644f6d-ee0b-45c4-b859-d5d71a9a8d6c",
        "cursor": {
          "ref": "041b9063-6556-4dc7-b1ba-4cb0695b192e",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "92d37314-3463-4756-9a39-ccb7af8a5728"
        },
        "item": {
          "id": "ec644f6d-ee0b-45c4-b859-d5d71a9a8d6c",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "7e383053-4164-48ad-a8c9-54e3cbcfde72",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d5b25a2-288e-4a2a-8871-81e7ee4d462b",
        "cursor": {
          "ref": "23f3fffb-f9a1-485c-8185-2af875ec0bf9",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "e76ae9d8-a527-4a2e-8957-6aadcdf7fc53"
        },
        "item": {
          "id": "6d5b25a2-288e-4a2a-8871-81e7ee4d462b",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "76d99908-e3cd-47ac-995a-997d84b94f46",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d5b25a2-288e-4a2a-8871-81e7ee4d462b",
        "cursor": {
          "ref": "23f3fffb-f9a1-485c-8185-2af875ec0bf9",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "e76ae9d8-a527-4a2e-8957-6aadcdf7fc53"
        },
        "item": {
          "id": "6d5b25a2-288e-4a2a-8871-81e7ee4d462b",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "76d99908-e3cd-47ac-995a-997d84b94f46",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72abfdef-ef27-437e-8d22-cba46e3beae0",
        "cursor": {
          "ref": "a1646843-1c7b-457d-82c0-38dc617ea849",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "921cc189-7b16-455d-a153-c2dcf4859e2d"
        },
        "item": {
          "id": "72abfdef-ef27-437e-8d22-cba46e3beae0",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "3d34a378-8a9d-455b-8602-5c0753c1d007",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72abfdef-ef27-437e-8d22-cba46e3beae0",
        "cursor": {
          "ref": "a1646843-1c7b-457d-82c0-38dc617ea849",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "921cc189-7b16-455d-a153-c2dcf4859e2d"
        },
        "item": {
          "id": "72abfdef-ef27-437e-8d22-cba46e3beae0",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "3d34a378-8a9d-455b-8602-5c0753c1d007",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebadeaa0-242d-4091-9d2c-26bd7695ec89",
        "cursor": {
          "ref": "330dd6a2-81c0-417f-97a7-903d5e7a9093",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "1cf51b67-799e-44bd-806b-92489bbac979"
        },
        "item": {
          "id": "ebadeaa0-242d-4091-9d2c-26bd7695ec89",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "3524ddbe-8b9a-4a55-b188-f08c369530e6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebadeaa0-242d-4091-9d2c-26bd7695ec89",
        "cursor": {
          "ref": "330dd6a2-81c0-417f-97a7-903d5e7a9093",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "1cf51b67-799e-44bd-806b-92489bbac979"
        },
        "item": {
          "id": "ebadeaa0-242d-4091-9d2c-26bd7695ec89",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "3524ddbe-8b9a-4a55-b188-f08c369530e6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b87f454-37b9-43b6-8def-df7937b552ff",
        "cursor": {
          "ref": "b1c56a86-3c18-4950-9520-4fb60f8b8a22",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "eea37903-1d78-48b7-8e27-de17477bd99d"
        },
        "item": {
          "id": "6b87f454-37b9-43b6-8def-df7937b552ff",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "6725677b-55eb-4487-91c5-c655b0a726e7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b87f454-37b9-43b6-8def-df7937b552ff",
        "cursor": {
          "ref": "b1c56a86-3c18-4950-9520-4fb60f8b8a22",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "eea37903-1d78-48b7-8e27-de17477bd99d"
        },
        "item": {
          "id": "6b87f454-37b9-43b6-8def-df7937b552ff",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "6725677b-55eb-4487-91c5-c655b0a726e7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8db1583f-aeec-4a1a-968d-fd36ad97770a",
        "cursor": {
          "ref": "0d5a18b8-9a01-447b-89e4-e631d16fe38a",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "f4917ee0-e772-4b39-99e1-447c47066522"
        },
        "item": {
          "id": "8db1583f-aeec-4a1a-968d-fd36ad97770a",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "cbe4614d-e21e-4405-b7bd-7d875d1996e1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8db1583f-aeec-4a1a-968d-fd36ad97770a",
        "cursor": {
          "ref": "0d5a18b8-9a01-447b-89e4-e631d16fe38a",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "f4917ee0-e772-4b39-99e1-447c47066522"
        },
        "item": {
          "id": "8db1583f-aeec-4a1a-968d-fd36ad97770a",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "cbe4614d-e21e-4405-b7bd-7d875d1996e1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebe12c0d-8fad-4677-aa6e-a7d399a33151",
        "cursor": {
          "ref": "1db86711-7f3d-4fbd-8990-1e53e7ec0d82",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "4f5fbb1f-5ab2-4d29-aedb-3a6420f2a8f7"
        },
        "item": {
          "id": "ebe12c0d-8fad-4677-aa6e-a7d399a33151",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "e33ad4eb-bc42-48d7-bef8-5022e55ef4f7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebe12c0d-8fad-4677-aa6e-a7d399a33151",
        "cursor": {
          "ref": "1db86711-7f3d-4fbd-8990-1e53e7ec0d82",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "4f5fbb1f-5ab2-4d29-aedb-3a6420f2a8f7"
        },
        "item": {
          "id": "ebe12c0d-8fad-4677-aa6e-a7d399a33151",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "e33ad4eb-bc42-48d7-bef8-5022e55ef4f7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "541c0b1e-7793-492e-bbda-fb98d5d3db33",
        "cursor": {
          "ref": "fe2601c5-c0d3-44d0-895d-bffd060cb32b",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "9325e961-59e8-46ad-af1f-9d90f5a21af1"
        },
        "item": {
          "id": "541c0b1e-7793-492e-bbda-fb98d5d3db33",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "01da158a-24fb-4964-acab-e0bbd65abb7d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "541c0b1e-7793-492e-bbda-fb98d5d3db33",
        "cursor": {
          "ref": "fe2601c5-c0d3-44d0-895d-bffd060cb32b",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "9325e961-59e8-46ad-af1f-9d90f5a21af1"
        },
        "item": {
          "id": "541c0b1e-7793-492e-bbda-fb98d5d3db33",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "01da158a-24fb-4964-acab-e0bbd65abb7d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c41b775-b79d-480e-9d62-a8ae599210e1",
        "cursor": {
          "ref": "0881e2b7-c879-46b8-8d6d-80d800cc22fd",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "8a83e4b7-0dd4-4326-921b-a4ffba83c90a"
        },
        "item": {
          "id": "7c41b775-b79d-480e-9d62-a8ae599210e1",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "dcbc7694-8235-4b08-819a-930e3ae18143",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c41b775-b79d-480e-9d62-a8ae599210e1",
        "cursor": {
          "ref": "0881e2b7-c879-46b8-8d6d-80d800cc22fd",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "8a83e4b7-0dd4-4326-921b-a4ffba83c90a"
        },
        "item": {
          "id": "7c41b775-b79d-480e-9d62-a8ae599210e1",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "dcbc7694-8235-4b08-819a-930e3ae18143",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac77ac01-0ff5-4653-9158-61b883b21aed",
        "cursor": {
          "ref": "dd7fadb1-8488-4bef-8d3c-e8ad713cde0f",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "d3f33a68-9662-4170-89bf-ea1d33a6b0aa"
        },
        "item": {
          "id": "ac77ac01-0ff5-4653-9158-61b883b21aed",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "f2f30181-f53b-4b18-85af-738f8b5400fb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac77ac01-0ff5-4653-9158-61b883b21aed",
        "cursor": {
          "ref": "dd7fadb1-8488-4bef-8d3c-e8ad713cde0f",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "d3f33a68-9662-4170-89bf-ea1d33a6b0aa"
        },
        "item": {
          "id": "ac77ac01-0ff5-4653-9158-61b883b21aed",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "f2f30181-f53b-4b18-85af-738f8b5400fb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f10a3908-bc4c-4cfc-83ad-09ef4895fad5",
        "cursor": {
          "ref": "1442ccff-9b96-418d-b7be-04ee44a8409b",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "ec95c4bb-1d19-48c8-9ca5-6fc0256a0881"
        },
        "item": {
          "id": "f10a3908-bc4c-4cfc-83ad-09ef4895fad5",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "37859c19-8d9c-4022-be42-5f8a30d52109",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f10a3908-bc4c-4cfc-83ad-09ef4895fad5",
        "cursor": {
          "ref": "1442ccff-9b96-418d-b7be-04ee44a8409b",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "ec95c4bb-1d19-48c8-9ca5-6fc0256a0881"
        },
        "item": {
          "id": "f10a3908-bc4c-4cfc-83ad-09ef4895fad5",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "37859c19-8d9c-4022-be42-5f8a30d52109",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11489546-0733-4be2-8d76-9288f292790a",
        "cursor": {
          "ref": "468a4627-09aa-4855-8103-e724b84b48b8",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "35d140eb-6ee5-4cd6-a741-e46452f1a5d3"
        },
        "item": {
          "id": "11489546-0733-4be2-8d76-9288f292790a",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "92f2e452-1da1-4e0c-8b4b-01aceaa32def",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11489546-0733-4be2-8d76-9288f292790a",
        "cursor": {
          "ref": "468a4627-09aa-4855-8103-e724b84b48b8",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "35d140eb-6ee5-4cd6-a741-e46452f1a5d3"
        },
        "item": {
          "id": "11489546-0733-4be2-8d76-9288f292790a",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "92f2e452-1da1-4e0c-8b4b-01aceaa32def",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02509303-998f-4b7a-8ae8-02184112e516",
        "cursor": {
          "ref": "e49fedee-b996-443c-9bc4-aff8368851f1",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "3f98ea02-8537-4e90-8b5d-7220655efa53"
        },
        "item": {
          "id": "02509303-998f-4b7a-8ae8-02184112e516",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "8085adf2-c91d-491f-864d-2ec12889cde2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02509303-998f-4b7a-8ae8-02184112e516",
        "cursor": {
          "ref": "e49fedee-b996-443c-9bc4-aff8368851f1",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "3f98ea02-8537-4e90-8b5d-7220655efa53"
        },
        "item": {
          "id": "02509303-998f-4b7a-8ae8-02184112e516",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "8085adf2-c91d-491f-864d-2ec12889cde2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02c66453-e2bb-48d1-94ea-206e54e23e53",
        "cursor": {
          "ref": "d880c534-986d-4810-9baa-10c7838d3869",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "b26bd0da-f4d0-4e0f-9425-a82de7903a43"
        },
        "item": {
          "id": "02c66453-e2bb-48d1-94ea-206e54e23e53",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "f3534397-3413-498e-a0ed-20f91277d2c7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02c66453-e2bb-48d1-94ea-206e54e23e53",
        "cursor": {
          "ref": "d880c534-986d-4810-9baa-10c7838d3869",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "b26bd0da-f4d0-4e0f-9425-a82de7903a43"
        },
        "item": {
          "id": "02c66453-e2bb-48d1-94ea-206e54e23e53",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "f3534397-3413-498e-a0ed-20f91277d2c7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91c0168a-a89b-4a36-82d0-a564f5634257",
        "cursor": {
          "ref": "0634ede8-41f6-4acb-9a3d-f8797bb62d11",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "29112e7e-aafb-44ce-9d4a-b2d28bd42735"
        },
        "item": {
          "id": "91c0168a-a89b-4a36-82d0-a564f5634257",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "2268e583-6479-4326-993c-da91ae73e33a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91c0168a-a89b-4a36-82d0-a564f5634257",
        "cursor": {
          "ref": "0634ede8-41f6-4acb-9a3d-f8797bb62d11",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "29112e7e-aafb-44ce-9d4a-b2d28bd42735"
        },
        "item": {
          "id": "91c0168a-a89b-4a36-82d0-a564f5634257",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "2268e583-6479-4326-993c-da91ae73e33a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03e9635c-7b6b-436c-8ef2-159a5f3566d8",
        "cursor": {
          "ref": "704edf16-e0ae-495f-9a1e-98f3dfd993a7",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "75b32aee-8183-48f0-811e-bb916b3c2697"
        },
        "item": {
          "id": "03e9635c-7b6b-436c-8ef2-159a5f3566d8",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "6b53f6ff-13d4-4b9e-a305-b67b85cacf2e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03e9635c-7b6b-436c-8ef2-159a5f3566d8",
        "cursor": {
          "ref": "704edf16-e0ae-495f-9a1e-98f3dfd993a7",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "75b32aee-8183-48f0-811e-bb916b3c2697"
        },
        "item": {
          "id": "03e9635c-7b6b-436c-8ef2-159a5f3566d8",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "6b53f6ff-13d4-4b9e-a305-b67b85cacf2e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca2ed765-90bb-4c41-846b-6cef05a065b6",
        "cursor": {
          "ref": "715ec4c3-9281-4fa0-8fc1-22820ea72bce",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "837de094-a22f-46b4-a0b8-128fb40059d5"
        },
        "item": {
          "id": "ca2ed765-90bb-4c41-846b-6cef05a065b6",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "4c5021cb-9c6d-4964-9690-34c004056611",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca2ed765-90bb-4c41-846b-6cef05a065b6",
        "cursor": {
          "ref": "715ec4c3-9281-4fa0-8fc1-22820ea72bce",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "837de094-a22f-46b4-a0b8-128fb40059d5"
        },
        "item": {
          "id": "ca2ed765-90bb-4c41-846b-6cef05a065b6",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "4c5021cb-9c6d-4964-9690-34c004056611",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edd3b331-0df5-421c-9754-d97422691623",
        "cursor": {
          "ref": "0b8b6af0-3dd9-488f-8d4b-c655e78a6080",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "d32ea736-ff85-402b-bbb5-c345ecf103a0"
        },
        "item": {
          "id": "edd3b331-0df5-421c-9754-d97422691623",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "beec3054-970c-408c-820f-a781d54e9772",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edd3b331-0df5-421c-9754-d97422691623",
        "cursor": {
          "ref": "0b8b6af0-3dd9-488f-8d4b-c655e78a6080",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "d32ea736-ff85-402b-bbb5-c345ecf103a0"
        },
        "item": {
          "id": "edd3b331-0df5-421c-9754-d97422691623",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "beec3054-970c-408c-820f-a781d54e9772",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ae2fd15-4653-45db-97dc-5035874e0d34",
        "cursor": {
          "ref": "a5437c43-dc59-4276-9c7b-73b0897e2afb",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "3ec30861-6419-469c-bcab-740b68b1cbdb"
        },
        "item": {
          "id": "6ae2fd15-4653-45db-97dc-5035874e0d34",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "d7ffaf29-0a56-4abd-9190-a6ba034cb45d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ae2fd15-4653-45db-97dc-5035874e0d34",
        "cursor": {
          "ref": "a5437c43-dc59-4276-9c7b-73b0897e2afb",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "3ec30861-6419-469c-bcab-740b68b1cbdb"
        },
        "item": {
          "id": "6ae2fd15-4653-45db-97dc-5035874e0d34",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "d7ffaf29-0a56-4abd-9190-a6ba034cb45d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d92a8e52-32c5-43f1-b6c1-7f519061fb1a",
        "cursor": {
          "ref": "34ac3365-fa58-49bc-b146-4e39624f7ca9",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "b76804f9-59cb-4548-a5ad-83c9f1e97948"
        },
        "item": {
          "id": "d92a8e52-32c5-43f1-b6c1-7f519061fb1a",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "24d58f89-7a5d-4a82-a16b-ce2966473ce4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d92a8e52-32c5-43f1-b6c1-7f519061fb1a",
        "cursor": {
          "ref": "34ac3365-fa58-49bc-b146-4e39624f7ca9",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "b76804f9-59cb-4548-a5ad-83c9f1e97948"
        },
        "item": {
          "id": "d92a8e52-32c5-43f1-b6c1-7f519061fb1a",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "24d58f89-7a5d-4a82-a16b-ce2966473ce4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fbca310-cdee-4b2b-a1c4-88cc9f34e4e2",
        "cursor": {
          "ref": "a8806151-b773-4448-af9a-1a8040b35779",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "42b7a385-61ef-4434-8ff8-78351cc19606"
        },
        "item": {
          "id": "8fbca310-cdee-4b2b-a1c4-88cc9f34e4e2",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "34f637a8-d262-47b8-b167-8e88720474fd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fbca310-cdee-4b2b-a1c4-88cc9f34e4e2",
        "cursor": {
          "ref": "a8806151-b773-4448-af9a-1a8040b35779",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "42b7a385-61ef-4434-8ff8-78351cc19606"
        },
        "item": {
          "id": "8fbca310-cdee-4b2b-a1c4-88cc9f34e4e2",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "34f637a8-d262-47b8-b167-8e88720474fd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fb82c7f-db45-47e8-8efc-b6b13a4107ed",
        "cursor": {
          "ref": "158e51f5-11b5-4739-a67a-dfb7f6b71140",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "244bd801-5b9a-49d2-a28e-f994a9f99dfc"
        },
        "item": {
          "id": "0fb82c7f-db45-47e8-8efc-b6b13a4107ed",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "4457fde8-38ed-4a77-8d44-a41090a7f98b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fb82c7f-db45-47e8-8efc-b6b13a4107ed",
        "cursor": {
          "ref": "158e51f5-11b5-4739-a67a-dfb7f6b71140",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "244bd801-5b9a-49d2-a28e-f994a9f99dfc"
        },
        "item": {
          "id": "0fb82c7f-db45-47e8-8efc-b6b13a4107ed",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "4457fde8-38ed-4a77-8d44-a41090a7f98b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "278c7d76-00e2-4c81-b019-196821393ee3",
        "cursor": {
          "ref": "08a80c1d-136e-45ce-a5f6-01699b98837c",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "382fe5fa-235d-4527-9351-a3d0ef681898"
        },
        "item": {
          "id": "278c7d76-00e2-4c81-b019-196821393ee3",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "d6c97321-efa5-4b4a-bba2-67e32e1f85c9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "278c7d76-00e2-4c81-b019-196821393ee3",
        "cursor": {
          "ref": "08a80c1d-136e-45ce-a5f6-01699b98837c",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "382fe5fa-235d-4527-9351-a3d0ef681898"
        },
        "item": {
          "id": "278c7d76-00e2-4c81-b019-196821393ee3",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "d6c97321-efa5-4b4a-bba2-67e32e1f85c9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "717e3762-b847-462c-92fc-d6c049f5b46d",
        "cursor": {
          "ref": "2203687b-cbb1-4baa-8f1d-a0f9598a9a87",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "9051ce8a-473d-4362-9ed2-afe0696819ec"
        },
        "item": {
          "id": "717e3762-b847-462c-92fc-d6c049f5b46d",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "a422ef75-43af-4514-8c02-60701b8065d5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "717e3762-b847-462c-92fc-d6c049f5b46d",
        "cursor": {
          "ref": "2203687b-cbb1-4baa-8f1d-a0f9598a9a87",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "9051ce8a-473d-4362-9ed2-afe0696819ec"
        },
        "item": {
          "id": "717e3762-b847-462c-92fc-d6c049f5b46d",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "a422ef75-43af-4514-8c02-60701b8065d5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3f72240-692f-4625-b86b-851737cf3edd",
        "cursor": {
          "ref": "35034928-23be-49b1-beee-165c7671efe9",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "ceff3436-3bc0-4183-8341-0a34eff66ca1"
        },
        "item": {
          "id": "d3f72240-692f-4625-b86b-851737cf3edd",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "444340ef-b6a0-404b-a92b-024fcc0a62ce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3f72240-692f-4625-b86b-851737cf3edd",
        "cursor": {
          "ref": "35034928-23be-49b1-beee-165c7671efe9",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "ceff3436-3bc0-4183-8341-0a34eff66ca1"
        },
        "item": {
          "id": "d3f72240-692f-4625-b86b-851737cf3edd",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "444340ef-b6a0-404b-a92b-024fcc0a62ce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4527a90f-b0a5-4c98-b7a7-5e97e28bf17b",
        "cursor": {
          "ref": "fdda9d94-a940-4395-b167-770026388baa",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "ce105c7f-bcd1-4b48-be5e-9d3a8b156c2e"
        },
        "item": {
          "id": "4527a90f-b0a5-4c98-b7a7-5e97e28bf17b",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "cf9517fc-c6e7-4389-b5d3-73c4608540cb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4527a90f-b0a5-4c98-b7a7-5e97e28bf17b",
        "cursor": {
          "ref": "fdda9d94-a940-4395-b167-770026388baa",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "ce105c7f-bcd1-4b48-be5e-9d3a8b156c2e"
        },
        "item": {
          "id": "4527a90f-b0a5-4c98-b7a7-5e97e28bf17b",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "cf9517fc-c6e7-4389-b5d3-73c4608540cb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "323c70fa-6de8-478c-a5ad-97a83088af51",
        "cursor": {
          "ref": "b20354a4-81bb-42aa-84cd-ca15cc0f5a83",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "21887e87-8481-40b1-a5bb-d04d88969eb4"
        },
        "item": {
          "id": "323c70fa-6de8-478c-a5ad-97a83088af51",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "f7375719-4cdf-4237-88aa-b30ef04db8fa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "323c70fa-6de8-478c-a5ad-97a83088af51",
        "cursor": {
          "ref": "b20354a4-81bb-42aa-84cd-ca15cc0f5a83",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "21887e87-8481-40b1-a5bb-d04d88969eb4"
        },
        "item": {
          "id": "323c70fa-6de8-478c-a5ad-97a83088af51",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "f7375719-4cdf-4237-88aa-b30ef04db8fa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fca39bd-d315-4b3f-b003-5db5db0bb900",
        "cursor": {
          "ref": "45bb1d7f-ab36-443c-a1e3-22be6726862d",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "e9e95763-9f44-46e1-acf8-9da28198234c"
        },
        "item": {
          "id": "2fca39bd-d315-4b3f-b003-5db5db0bb900",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "79bb7378-68cd-4c86-8f36-b3b5216d2ead",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fca39bd-d315-4b3f-b003-5db5db0bb900",
        "cursor": {
          "ref": "45bb1d7f-ab36-443c-a1e3-22be6726862d",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "e9e95763-9f44-46e1-acf8-9da28198234c"
        },
        "item": {
          "id": "2fca39bd-d315-4b3f-b003-5db5db0bb900",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "79bb7378-68cd-4c86-8f36-b3b5216d2ead",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a6ed64b-6221-4d12-bf05-ac40c505aa49",
        "cursor": {
          "ref": "046384d3-c095-48f3-8fcc-7ee5356958fe",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "2c5040c6-bbf8-482a-9739-6c46bfbf2da6"
        },
        "item": {
          "id": "0a6ed64b-6221-4d12-bf05-ac40c505aa49",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "b4713a6f-f0b8-4399-86c6-1abc7db50ba0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a6ed64b-6221-4d12-bf05-ac40c505aa49",
        "cursor": {
          "ref": "046384d3-c095-48f3-8fcc-7ee5356958fe",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "2c5040c6-bbf8-482a-9739-6c46bfbf2da6"
        },
        "item": {
          "id": "0a6ed64b-6221-4d12-bf05-ac40c505aa49",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "b4713a6f-f0b8-4399-86c6-1abc7db50ba0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c03c24f2-6a39-48c4-8d2b-f3aa07202d0f",
        "cursor": {
          "ref": "1fd8db50-13a2-4f0a-b461-6af9ba355b1b",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "4e2a64b9-ce50-44ef-890d-0d7b76509921"
        },
        "item": {
          "id": "c03c24f2-6a39-48c4-8d2b-f3aa07202d0f",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "25bc2b5e-c858-4d61-be85-82e6e55587ce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c03c24f2-6a39-48c4-8d2b-f3aa07202d0f",
        "cursor": {
          "ref": "1fd8db50-13a2-4f0a-b461-6af9ba355b1b",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "4e2a64b9-ce50-44ef-890d-0d7b76509921"
        },
        "item": {
          "id": "c03c24f2-6a39-48c4-8d2b-f3aa07202d0f",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "25bc2b5e-c858-4d61-be85-82e6e55587ce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "674cec3b-13ee-4b68-a875-2e157f53f534",
        "cursor": {
          "ref": "be148071-a914-4ee8-b8d1-afeefd2551c6",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "222c3c3f-c191-4fba-8b96-a3e5a7146e41"
        },
        "item": {
          "id": "674cec3b-13ee-4b68-a875-2e157f53f534",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "364f4004-a84e-4f17-914e-e0f3223cee9f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "674cec3b-13ee-4b68-a875-2e157f53f534",
        "cursor": {
          "ref": "be148071-a914-4ee8-b8d1-afeefd2551c6",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "222c3c3f-c191-4fba-8b96-a3e5a7146e41"
        },
        "item": {
          "id": "674cec3b-13ee-4b68-a875-2e157f53f534",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "364f4004-a84e-4f17-914e-e0f3223cee9f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b99ec155-d8a0-4ebb-a9d6-fae3d6f9da53",
        "cursor": {
          "ref": "c3f15b88-130a-4d82-833a-c5a790ca1e8c",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "662d2949-cd32-46dd-87e9-7f1535537538"
        },
        "item": {
          "id": "b99ec155-d8a0-4ebb-a9d6-fae3d6f9da53",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "35c0707e-ea63-4c4d-9e24-b78c9d1b0be1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 123,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b99ec155-d8a0-4ebb-a9d6-fae3d6f9da53",
        "cursor": {
          "ref": "c3f15b88-130a-4d82-833a-c5a790ca1e8c",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "662d2949-cd32-46dd-87e9-7f1535537538"
        },
        "item": {
          "id": "b99ec155-d8a0-4ebb-a9d6-fae3d6f9da53",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "35c0707e-ea63-4c4d-9e24-b78c9d1b0be1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 123,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccf991ae-b9d4-40d1-b406-d526a79e632a",
        "cursor": {
          "ref": "b956c767-7b70-43a0-a1ae-a289c9f35058",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "baa96038-0091-4b53-8d07-973bd22aba09"
        },
        "item": {
          "id": "ccf991ae-b9d4-40d1-b406-d526a79e632a",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "cb7aabe2-44fc-4f6c-a270-640559cd79f5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccf991ae-b9d4-40d1-b406-d526a79e632a",
        "cursor": {
          "ref": "b956c767-7b70-43a0-a1ae-a289c9f35058",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "baa96038-0091-4b53-8d07-973bd22aba09"
        },
        "item": {
          "id": "ccf991ae-b9d4-40d1-b406-d526a79e632a",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "cb7aabe2-44fc-4f6c-a270-640559cd79f5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d906f33-1d71-4cd5-85e8-fe6a1a7185d3",
        "cursor": {
          "ref": "7c6426a6-727b-4c8c-ade0-5e6dbf6f1388",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "a9acf7c0-8fad-4e00-b8c6-2d608540b062"
        },
        "item": {
          "id": "4d906f33-1d71-4cd5-85e8-fe6a1a7185d3",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "eabe964f-434b-45ce-bed8-7eae71d1afb0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d906f33-1d71-4cd5-85e8-fe6a1a7185d3",
        "cursor": {
          "ref": "7c6426a6-727b-4c8c-ade0-5e6dbf6f1388",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "a9acf7c0-8fad-4e00-b8c6-2d608540b062"
        },
        "item": {
          "id": "4d906f33-1d71-4cd5-85e8-fe6a1a7185d3",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "eabe964f-434b-45ce-bed8-7eae71d1afb0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e187ffa3-0c53-4ace-96cb-cbc0d1848b6c",
        "cursor": {
          "ref": "e0527acd-a3fb-4c3c-a5ca-046c87760f92",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "7b19646f-1bcf-4c58-a52e-5927799546d5"
        },
        "item": {
          "id": "e187ffa3-0c53-4ace-96cb-cbc0d1848b6c",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "5de523b3-21d1-4f00-8bbe-55e142be1dd5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e187ffa3-0c53-4ace-96cb-cbc0d1848b6c",
        "cursor": {
          "ref": "e0527acd-a3fb-4c3c-a5ca-046c87760f92",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "7b19646f-1bcf-4c58-a52e-5927799546d5"
        },
        "item": {
          "id": "e187ffa3-0c53-4ace-96cb-cbc0d1848b6c",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "5de523b3-21d1-4f00-8bbe-55e142be1dd5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "598adf76-78fb-471e-917e-3e858fb8c0b0",
        "cursor": {
          "ref": "2fd254a5-6b04-4c4a-95f1-cc41c64b1050",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "2fe8f410-31c8-4fb1-b503-62b1420a5e89"
        },
        "item": {
          "id": "598adf76-78fb-471e-917e-3e858fb8c0b0",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "e9e3959a-db6a-4a6e-a531-8e3764feff9b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "598adf76-78fb-471e-917e-3e858fb8c0b0",
        "cursor": {
          "ref": "2fd254a5-6b04-4c4a-95f1-cc41c64b1050",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "2fe8f410-31c8-4fb1-b503-62b1420a5e89"
        },
        "item": {
          "id": "598adf76-78fb-471e-917e-3e858fb8c0b0",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "e9e3959a-db6a-4a6e-a531-8e3764feff9b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8245118-b9ee-4150-bf4f-4339c394376f",
        "cursor": {
          "ref": "3e7033aa-1661-4aea-a60d-2bb7e792a4e3",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "4ef837f6-bbbf-438b-b72f-7b171e679240"
        },
        "item": {
          "id": "e8245118-b9ee-4150-bf4f-4339c394376f",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "7959b2f8-46ae-4b93-8b02-60337576c9f0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8245118-b9ee-4150-bf4f-4339c394376f",
        "cursor": {
          "ref": "3e7033aa-1661-4aea-a60d-2bb7e792a4e3",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "4ef837f6-bbbf-438b-b72f-7b171e679240"
        },
        "item": {
          "id": "e8245118-b9ee-4150-bf4f-4339c394376f",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "7959b2f8-46ae-4b93-8b02-60337576c9f0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59176970-d3b2-4ade-a1e9-c6892fea09c2",
        "cursor": {
          "ref": "b82ab7d3-97ea-405f-bed2-7242bdc7e4ff",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "dd72601f-083f-4923-a643-f3904d93c22e"
        },
        "item": {
          "id": "59176970-d3b2-4ade-a1e9-c6892fea09c2",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "297c3256-0fca-444e-8c27-256e10a0887d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59176970-d3b2-4ade-a1e9-c6892fea09c2",
        "cursor": {
          "ref": "b82ab7d3-97ea-405f-bed2-7242bdc7e4ff",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "dd72601f-083f-4923-a643-f3904d93c22e"
        },
        "item": {
          "id": "59176970-d3b2-4ade-a1e9-c6892fea09c2",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "297c3256-0fca-444e-8c27-256e10a0887d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ffa9f49-6674-40f3-8c5d-64c15a405520",
        "cursor": {
          "ref": "b6c94a00-7381-4dcb-b4ea-1fd18d3cbda3",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "83d262d0-89b4-4040-9ce5-d6a6b0988d90"
        },
        "item": {
          "id": "7ffa9f49-6674-40f3-8c5d-64c15a405520",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "bbfbdb07-da8b-427d-8056-5aef9ee780c2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ffa9f49-6674-40f3-8c5d-64c15a405520",
        "cursor": {
          "ref": "b6c94a00-7381-4dcb-b4ea-1fd18d3cbda3",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "83d262d0-89b4-4040-9ce5-d6a6b0988d90"
        },
        "item": {
          "id": "7ffa9f49-6674-40f3-8c5d-64c15a405520",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "bbfbdb07-da8b-427d-8056-5aef9ee780c2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3931e15-303e-4be7-a2df-25a84948434a",
        "cursor": {
          "ref": "86d4dd2b-4dab-4dd7-82b9-a7ade2e05627",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "16ebc356-8a04-4d42-9e19-8220c0ea5b2c"
        },
        "item": {
          "id": "f3931e15-303e-4be7-a2df-25a84948434a",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "f9198196-ec59-4a87-bb9f-9e27add71861",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3931e15-303e-4be7-a2df-25a84948434a",
        "cursor": {
          "ref": "86d4dd2b-4dab-4dd7-82b9-a7ade2e05627",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "16ebc356-8a04-4d42-9e19-8220c0ea5b2c"
        },
        "item": {
          "id": "f3931e15-303e-4be7-a2df-25a84948434a",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "f9198196-ec59-4a87-bb9f-9e27add71861",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0a0570c-ef9d-4ad0-812e-233256fbe88c",
        "cursor": {
          "ref": "e29423a8-112f-423f-beaf-3a1f094763a5",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "e38fd8da-bea4-48fc-91c0-6f989d95522c"
        },
        "item": {
          "id": "d0a0570c-ef9d-4ad0-812e-233256fbe88c",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "1e3cc9f6-906e-48f2-9aa3-604324f7e307",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0a0570c-ef9d-4ad0-812e-233256fbe88c",
        "cursor": {
          "ref": "e29423a8-112f-423f-beaf-3a1f094763a5",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "e38fd8da-bea4-48fc-91c0-6f989d95522c"
        },
        "item": {
          "id": "d0a0570c-ef9d-4ad0-812e-233256fbe88c",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "1e3cc9f6-906e-48f2-9aa3-604324f7e307",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e50e95b-0564-4afa-8e52-acbf2de7cc01",
        "cursor": {
          "ref": "a3cd2349-968a-4fbb-89c1-042b9dd9b5f1",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "83b93d94-38e3-4384-b5c4-822d4aa550cd"
        },
        "item": {
          "id": "6e50e95b-0564-4afa-8e52-acbf2de7cc01",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "977e327e-1894-4bda-9b15-dd492fb9d049",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e50e95b-0564-4afa-8e52-acbf2de7cc01",
        "cursor": {
          "ref": "a3cd2349-968a-4fbb-89c1-042b9dd9b5f1",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "83b93d94-38e3-4384-b5c4-822d4aa550cd"
        },
        "item": {
          "id": "6e50e95b-0564-4afa-8e52-acbf2de7cc01",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "977e327e-1894-4bda-9b15-dd492fb9d049",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "910b9825-212e-4648-883c-129389d833e6",
        "cursor": {
          "ref": "ff8ceb6d-2479-4bd5-a45f-37af7c1ca087",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "9439c593-a21e-4eff-a3a2-23e35d51575f"
        },
        "item": {
          "id": "910b9825-212e-4648-883c-129389d833e6",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "eb5fa70f-7582-4186-8870-954593d4b3f7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "910b9825-212e-4648-883c-129389d833e6",
        "cursor": {
          "ref": "ff8ceb6d-2479-4bd5-a45f-37af7c1ca087",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "9439c593-a21e-4eff-a3a2-23e35d51575f"
        },
        "item": {
          "id": "910b9825-212e-4648-883c-129389d833e6",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "eb5fa70f-7582-4186-8870-954593d4b3f7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "573ec2be-a676-485e-8f31-f05bea688178",
        "cursor": {
          "ref": "8c1b27c9-9017-42ea-bd7e-5207dc81d550",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "dd69365b-d3bf-4463-ad44-a2cd0fdde325"
        },
        "item": {
          "id": "573ec2be-a676-485e-8f31-f05bea688178",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "c82a9e86-af72-45b1-92da-4ed8ba6a3454",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "573ec2be-a676-485e-8f31-f05bea688178",
        "cursor": {
          "ref": "8c1b27c9-9017-42ea-bd7e-5207dc81d550",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "dd69365b-d3bf-4463-ad44-a2cd0fdde325"
        },
        "item": {
          "id": "573ec2be-a676-485e-8f31-f05bea688178",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "c82a9e86-af72-45b1-92da-4ed8ba6a3454",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b19a1847-6cba-4bd5-a042-2fc2d55aed16",
        "cursor": {
          "ref": "a7c4b54b-4299-4c00-ac7f-628ed6384873",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "d9077aa1-01ca-45af-bfa2-1d8b0cebabf8"
        },
        "item": {
          "id": "b19a1847-6cba-4bd5-a042-2fc2d55aed16",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "d40af084-5b26-45af-bd45-9fff453f6711",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b19a1847-6cba-4bd5-a042-2fc2d55aed16",
        "cursor": {
          "ref": "a7c4b54b-4299-4c00-ac7f-628ed6384873",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "d9077aa1-01ca-45af-bfa2-1d8b0cebabf8"
        },
        "item": {
          "id": "b19a1847-6cba-4bd5-a042-2fc2d55aed16",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "d40af084-5b26-45af-bd45-9fff453f6711",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7ea6896-e6c8-46f0-878c-67b4bb761830",
        "cursor": {
          "ref": "bd869313-af79-4a4e-ba31-e53148a69347",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "3bcbf539-d5af-40da-909f-dfa9d5f63bbb"
        },
        "item": {
          "id": "d7ea6896-e6c8-46f0-878c-67b4bb761830",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "f22209fe-33d4-429e-a668-c69cc46564c8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7ea6896-e6c8-46f0-878c-67b4bb761830",
        "cursor": {
          "ref": "bd869313-af79-4a4e-ba31-e53148a69347",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "3bcbf539-d5af-40da-909f-dfa9d5f63bbb"
        },
        "item": {
          "id": "d7ea6896-e6c8-46f0-878c-67b4bb761830",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "f22209fe-33d4-429e-a668-c69cc46564c8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04056ad5-a9c8-4439-a086-4c5df7573574",
        "cursor": {
          "ref": "84bbaa6b-a66b-4dbe-bd50-0f8b4f9a037f",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "db0cdf85-9354-4978-a128-0ed47a9c3df3"
        },
        "item": {
          "id": "04056ad5-a9c8-4439-a086-4c5df7573574",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "52fdeaf7-4b18-427e-8e17-580949a5c663",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04056ad5-a9c8-4439-a086-4c5df7573574",
        "cursor": {
          "ref": "84bbaa6b-a66b-4dbe-bd50-0f8b4f9a037f",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "db0cdf85-9354-4978-a128-0ed47a9c3df3"
        },
        "item": {
          "id": "04056ad5-a9c8-4439-a086-4c5df7573574",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "52fdeaf7-4b18-427e-8e17-580949a5c663",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36d5ab87-3db2-4f5b-8e22-7266bcb6eb03",
        "cursor": {
          "ref": "b58e6dc9-cb16-4334-b088-cdabea95304d",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "fcb00c4a-3c51-4a9c-823d-dba627de3f0c"
        },
        "item": {
          "id": "36d5ab87-3db2-4f5b-8e22-7266bcb6eb03",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "288d10f8-4bc4-4080-ab27-0d6f4eb9732e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36d5ab87-3db2-4f5b-8e22-7266bcb6eb03",
        "cursor": {
          "ref": "b58e6dc9-cb16-4334-b088-cdabea95304d",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "fcb00c4a-3c51-4a9c-823d-dba627de3f0c"
        },
        "item": {
          "id": "36d5ab87-3db2-4f5b-8e22-7266bcb6eb03",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "288d10f8-4bc4-4080-ab27-0d6f4eb9732e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9899305-d061-4cd8-9816-b0ab30ae980e",
        "cursor": {
          "ref": "0ff89e15-9f15-4663-9b72-161784d85eec",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "cf1d9b81-4718-4a4d-8a3c-85d6d8f7ac61"
        },
        "item": {
          "id": "f9899305-d061-4cd8-9816-b0ab30ae980e",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "97d6cf12-e3d2-4e3f-905e-f9536c587468",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9899305-d061-4cd8-9816-b0ab30ae980e",
        "cursor": {
          "ref": "0ff89e15-9f15-4663-9b72-161784d85eec",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "cf1d9b81-4718-4a4d-8a3c-85d6d8f7ac61"
        },
        "item": {
          "id": "f9899305-d061-4cd8-9816-b0ab30ae980e",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "97d6cf12-e3d2-4e3f-905e-f9536c587468",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62897552-80e6-45e9-b54d-b4791c7a7a80",
        "cursor": {
          "ref": "dae77db9-5e69-40af-92a6-242686328de6",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "abaa9cd2-ddaa-4589-977d-5a0710a8e38c"
        },
        "item": {
          "id": "62897552-80e6-45e9-b54d-b4791c7a7a80",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "76d2d514-9a3f-4424-a866-745c588255c1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62897552-80e6-45e9-b54d-b4791c7a7a80",
        "cursor": {
          "ref": "dae77db9-5e69-40af-92a6-242686328de6",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "abaa9cd2-ddaa-4589-977d-5a0710a8e38c"
        },
        "item": {
          "id": "62897552-80e6-45e9-b54d-b4791c7a7a80",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "76d2d514-9a3f-4424-a866-745c588255c1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7243b142-2bce-4947-bb32-fd438f9ac350",
        "cursor": {
          "ref": "1c03ae60-40ec-453f-b538-62c872695344",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "f813fa88-2c0d-4a04-b188-49fe3938071e"
        },
        "item": {
          "id": "7243b142-2bce-4947-bb32-fd438f9ac350",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "20728138-a0fd-428a-9916-fc3707c992b4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7243b142-2bce-4947-bb32-fd438f9ac350",
        "cursor": {
          "ref": "1c03ae60-40ec-453f-b538-62c872695344",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "f813fa88-2c0d-4a04-b188-49fe3938071e"
        },
        "item": {
          "id": "7243b142-2bce-4947-bb32-fd438f9ac350",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "20728138-a0fd-428a-9916-fc3707c992b4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5811a569-4196-4f01-8262-8a4379162d5a",
        "cursor": {
          "ref": "8226ea51-65dc-4b65-ba0d-1c5e1f9473fc",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "5d957201-0b19-4a3f-836c-ebae3549be14"
        },
        "item": {
          "id": "5811a569-4196-4f01-8262-8a4379162d5a",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "84e0ce56-b6f2-4a54-b1c2-aacb4c65ca58",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5811a569-4196-4f01-8262-8a4379162d5a",
        "cursor": {
          "ref": "8226ea51-65dc-4b65-ba0d-1c5e1f9473fc",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "5d957201-0b19-4a3f-836c-ebae3549be14"
        },
        "item": {
          "id": "5811a569-4196-4f01-8262-8a4379162d5a",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "84e0ce56-b6f2-4a54-b1c2-aacb4c65ca58",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b6bc940-7455-4120-8bfd-3feddfb0f9b7",
        "cursor": {
          "ref": "ce0d16ae-54b2-4c64-bf4b-b0cae3eef4d0",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "089ba442-fd69-42ca-97b2-038b92bbc13a"
        },
        "item": {
          "id": "9b6bc940-7455-4120-8bfd-3feddfb0f9b7",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "324a32d7-3a55-44e8-b24f-041012f02cc1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b6bc940-7455-4120-8bfd-3feddfb0f9b7",
        "cursor": {
          "ref": "ce0d16ae-54b2-4c64-bf4b-b0cae3eef4d0",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "089ba442-fd69-42ca-97b2-038b92bbc13a"
        },
        "item": {
          "id": "9b6bc940-7455-4120-8bfd-3feddfb0f9b7",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "324a32d7-3a55-44e8-b24f-041012f02cc1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5045247f-7d91-495d-b970-cf63081817c6",
        "cursor": {
          "ref": "c1b5839d-84e3-42e5-a504-6cf264917ab3",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "6885c4f5-6a70-47c0-8a82-6c659487d0af"
        },
        "item": {
          "id": "5045247f-7d91-495d-b970-cf63081817c6",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "9cbf2c0f-c11d-4b9f-af02-0625012504c5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5045247f-7d91-495d-b970-cf63081817c6",
        "cursor": {
          "ref": "c1b5839d-84e3-42e5-a504-6cf264917ab3",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "6885c4f5-6a70-47c0-8a82-6c659487d0af"
        },
        "item": {
          "id": "5045247f-7d91-495d-b970-cf63081817c6",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "9cbf2c0f-c11d-4b9f-af02-0625012504c5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37a2bb6f-ecfe-4750-8d5a-d113e15d11aa",
        "cursor": {
          "ref": "04561c1c-538e-4ec5-9df7-3416741080d8",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "ff2cdecb-e1b3-42e7-9374-14eb6b0ec051"
        },
        "item": {
          "id": "37a2bb6f-ecfe-4750-8d5a-d113e15d11aa",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "6a203ce1-77d6-4b0b-9f7b-d96ffc29afaf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37a2bb6f-ecfe-4750-8d5a-d113e15d11aa",
        "cursor": {
          "ref": "04561c1c-538e-4ec5-9df7-3416741080d8",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "ff2cdecb-e1b3-42e7-9374-14eb6b0ec051"
        },
        "item": {
          "id": "37a2bb6f-ecfe-4750-8d5a-d113e15d11aa",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "6a203ce1-77d6-4b0b-9f7b-d96ffc29afaf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2c6f7ce-f13c-4e3b-b7df-e2ae05206d2b",
        "cursor": {
          "ref": "9f2a7899-918c-456d-9e44-3a41deb7eb85",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "7a58ae4d-ffd7-432c-a88b-8b070547374b"
        },
        "item": {
          "id": "e2c6f7ce-f13c-4e3b-b7df-e2ae05206d2b",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "83a2f573-496f-48b3-b98a-571aff4038e7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2c6f7ce-f13c-4e3b-b7df-e2ae05206d2b",
        "cursor": {
          "ref": "9f2a7899-918c-456d-9e44-3a41deb7eb85",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "7a58ae4d-ffd7-432c-a88b-8b070547374b"
        },
        "item": {
          "id": "e2c6f7ce-f13c-4e3b-b7df-e2ae05206d2b",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "83a2f573-496f-48b3-b98a-571aff4038e7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6c7bdd3-5102-47e0-ac8f-b6c8e0ebe61b",
        "cursor": {
          "ref": "de1dfa08-80fa-40bd-b163-fdf5e19e4287",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "64b883ad-3b92-4ba9-a809-c955d9f5e195"
        },
        "item": {
          "id": "e6c7bdd3-5102-47e0-ac8f-b6c8e0ebe61b",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "364fb5c6-9f0b-4189-8af3-05332175d279",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6c7bdd3-5102-47e0-ac8f-b6c8e0ebe61b",
        "cursor": {
          "ref": "de1dfa08-80fa-40bd-b163-fdf5e19e4287",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "64b883ad-3b92-4ba9-a809-c955d9f5e195"
        },
        "item": {
          "id": "e6c7bdd3-5102-47e0-ac8f-b6c8e0ebe61b",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "364fb5c6-9f0b-4189-8af3-05332175d279",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f097733-9e04-4333-91e6-18726c577bbc",
        "cursor": {
          "ref": "1ac85358-7039-49e7-8cb2-908c58070f1c",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "679546b0-b60e-47e9-9bc7-6660e35f72e7"
        },
        "item": {
          "id": "6f097733-9e04-4333-91e6-18726c577bbc",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "2517dc32-41ea-4a60-ad51-970d0317ccd5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f097733-9e04-4333-91e6-18726c577bbc",
        "cursor": {
          "ref": "1ac85358-7039-49e7-8cb2-908c58070f1c",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "679546b0-b60e-47e9-9bc7-6660e35f72e7"
        },
        "item": {
          "id": "6f097733-9e04-4333-91e6-18726c577bbc",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "2517dc32-41ea-4a60-ad51-970d0317ccd5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e89bbfcb-cd39-491b-9ca2-b3133f45e31a",
        "cursor": {
          "ref": "10472379-592b-4406-b0be-9f1b75b32ea1",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "5581c866-56a7-4351-bcc6-8d6ce5e2bd13"
        },
        "item": {
          "id": "e89bbfcb-cd39-491b-9ca2-b3133f45e31a",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "79bf1592-be1b-4f63-9aa2-9284f298bc73",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e89bbfcb-cd39-491b-9ca2-b3133f45e31a",
        "cursor": {
          "ref": "10472379-592b-4406-b0be-9f1b75b32ea1",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "5581c866-56a7-4351-bcc6-8d6ce5e2bd13"
        },
        "item": {
          "id": "e89bbfcb-cd39-491b-9ca2-b3133f45e31a",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "79bf1592-be1b-4f63-9aa2-9284f298bc73",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7bb2ce9-f137-4215-ad29-c1fb19bebea2",
        "cursor": {
          "ref": "0b52dc6c-c1a0-4c62-b89b-443b8e384ad4",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "b81e8022-433a-473d-a487-a09f5d3fb566"
        },
        "item": {
          "id": "f7bb2ce9-f137-4215-ad29-c1fb19bebea2",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "119a79e6-ce05-4a4c-ac52-ca4a3e36333d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7bb2ce9-f137-4215-ad29-c1fb19bebea2",
        "cursor": {
          "ref": "0b52dc6c-c1a0-4c62-b89b-443b8e384ad4",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "b81e8022-433a-473d-a487-a09f5d3fb566"
        },
        "item": {
          "id": "f7bb2ce9-f137-4215-ad29-c1fb19bebea2",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "119a79e6-ce05-4a4c-ac52-ca4a3e36333d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bb36ad9-2ea5-4f2f-a333-1ba18930285a",
        "cursor": {
          "ref": "5f20d399-3560-43f7-a24b-3f3e42d22eb7",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "f5d4d447-e36f-44e4-ae56-915052489f55"
        },
        "item": {
          "id": "2bb36ad9-2ea5-4f2f-a333-1ba18930285a",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "afdbe18d-c766-4e8b-a0c3-40532d7ebb88",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bb36ad9-2ea5-4f2f-a333-1ba18930285a",
        "cursor": {
          "ref": "5f20d399-3560-43f7-a24b-3f3e42d22eb7",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "f5d4d447-e36f-44e4-ae56-915052489f55"
        },
        "item": {
          "id": "2bb36ad9-2ea5-4f2f-a333-1ba18930285a",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "afdbe18d-c766-4e8b-a0c3-40532d7ebb88",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eb20310-729e-4d67-a303-a9d78da27dd4",
        "cursor": {
          "ref": "b96c0eff-7dcd-4ea9-a0e2-926a6da46711",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "f3d1d999-39e3-49af-9867-97e7adb217d2"
        },
        "item": {
          "id": "1eb20310-729e-4d67-a303-a9d78da27dd4",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "1b0d51c7-3d8f-45ed-ad1b-3135d0ed5cdb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eb20310-729e-4d67-a303-a9d78da27dd4",
        "cursor": {
          "ref": "b96c0eff-7dcd-4ea9-a0e2-926a6da46711",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "f3d1d999-39e3-49af-9867-97e7adb217d2"
        },
        "item": {
          "id": "1eb20310-729e-4d67-a303-a9d78da27dd4",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "1b0d51c7-3d8f-45ed-ad1b-3135d0ed5cdb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69f655e0-7d4f-4586-9c9b-8ba43395e6fa",
        "cursor": {
          "ref": "9163ff7b-def6-4399-9554-7d3b7ecfb95b",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "37a53219-acae-4023-b4e3-837e0ccd7986"
        },
        "item": {
          "id": "69f655e0-7d4f-4586-9c9b-8ba43395e6fa",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "8b2a2660-9a9d-44e4-bf07-e0afff82700a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69f655e0-7d4f-4586-9c9b-8ba43395e6fa",
        "cursor": {
          "ref": "9163ff7b-def6-4399-9554-7d3b7ecfb95b",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "37a53219-acae-4023-b4e3-837e0ccd7986"
        },
        "item": {
          "id": "69f655e0-7d4f-4586-9c9b-8ba43395e6fa",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "8b2a2660-9a9d-44e4-bf07-e0afff82700a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7756e668-0180-43e6-9d1f-3ef6f7ba1288",
        "cursor": {
          "ref": "058dc18f-abcb-4d84-8660-0cd045908f24",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "c583ad25-1597-4a7e-adf1-8b0d519a6b97"
        },
        "item": {
          "id": "7756e668-0180-43e6-9d1f-3ef6f7ba1288",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "59709592-55bf-4706-b7ad-d6b92cede6cf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7756e668-0180-43e6-9d1f-3ef6f7ba1288",
        "cursor": {
          "ref": "058dc18f-abcb-4d84-8660-0cd045908f24",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "c583ad25-1597-4a7e-adf1-8b0d519a6b97"
        },
        "item": {
          "id": "7756e668-0180-43e6-9d1f-3ef6f7ba1288",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "59709592-55bf-4706-b7ad-d6b92cede6cf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b050ed2-8c65-4e87-840d-790a7147b90b",
        "cursor": {
          "ref": "bc13403a-8684-4b01-a120-340c5ec177f8",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "c799b483-ed5d-45ea-8931-dccb4b0d2df7"
        },
        "item": {
          "id": "5b050ed2-8c65-4e87-840d-790a7147b90b",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "1fc5bc70-9f19-42b5-b20c-2bce0935bddb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b050ed2-8c65-4e87-840d-790a7147b90b",
        "cursor": {
          "ref": "bc13403a-8684-4b01-a120-340c5ec177f8",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "c799b483-ed5d-45ea-8931-dccb4b0d2df7"
        },
        "item": {
          "id": "5b050ed2-8c65-4e87-840d-790a7147b90b",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "1fc5bc70-9f19-42b5-b20c-2bce0935bddb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8233b9d-a1f0-494a-ad46-1cc7c2b6bc4d",
        "cursor": {
          "ref": "eba4b06a-57f2-4fff-920d-2225de5bd6fc",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "8ba174e3-1e0a-4840-b02b-bfeba5abc7fd"
        },
        "item": {
          "id": "d8233b9d-a1f0-494a-ad46-1cc7c2b6bc4d",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "95c77ed6-b539-45a2-857f-778bcaa383e8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8233b9d-a1f0-494a-ad46-1cc7c2b6bc4d",
        "cursor": {
          "ref": "eba4b06a-57f2-4fff-920d-2225de5bd6fc",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "8ba174e3-1e0a-4840-b02b-bfeba5abc7fd"
        },
        "item": {
          "id": "d8233b9d-a1f0-494a-ad46-1cc7c2b6bc4d",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "95c77ed6-b539-45a2-857f-778bcaa383e8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16fd4ce7-f9ab-43bb-b70c-fbea904426b5",
        "cursor": {
          "ref": "26d21677-6217-4c6d-9919-027a395ac6ab",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "575c6a28-b96f-46a8-8837-95d4b3184ba7"
        },
        "item": {
          "id": "16fd4ce7-f9ab-43bb-b70c-fbea904426b5",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "c3f84db4-69ba-47ac-b85f-3a81faa588e3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16fd4ce7-f9ab-43bb-b70c-fbea904426b5",
        "cursor": {
          "ref": "26d21677-6217-4c6d-9919-027a395ac6ab",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "575c6a28-b96f-46a8-8837-95d4b3184ba7"
        },
        "item": {
          "id": "16fd4ce7-f9ab-43bb-b70c-fbea904426b5",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "c3f84db4-69ba-47ac-b85f-3a81faa588e3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0b5fd95-46b3-4873-a502-8e2f6a24d8c9",
        "cursor": {
          "ref": "2f583e6d-5fad-4724-87bb-a82040d2ddf2",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "9e8d1090-65e3-466a-ad0b-d5f41b537b26"
        },
        "item": {
          "id": "e0b5fd95-46b3-4873-a502-8e2f6a24d8c9",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "7ecfd3dc-574b-43e7-aabb-50c618f97797",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0b5fd95-46b3-4873-a502-8e2f6a24d8c9",
        "cursor": {
          "ref": "2f583e6d-5fad-4724-87bb-a82040d2ddf2",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "9e8d1090-65e3-466a-ad0b-d5f41b537b26"
        },
        "item": {
          "id": "e0b5fd95-46b3-4873-a502-8e2f6a24d8c9",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "7ecfd3dc-574b-43e7-aabb-50c618f97797",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fed3749b-acfd-43bc-82e5-f0eea6be8fcc",
        "cursor": {
          "ref": "5da03ada-f904-4677-93c2-0f864bd5bdf2",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "b48b767a-6c4d-4bc5-931f-1a035dc0d6cc"
        },
        "item": {
          "id": "fed3749b-acfd-43bc-82e5-f0eea6be8fcc",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "762b693f-282e-4a6b-9304-90e5d9934f86",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fed3749b-acfd-43bc-82e5-f0eea6be8fcc",
        "cursor": {
          "ref": "5da03ada-f904-4677-93c2-0f864bd5bdf2",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "b48b767a-6c4d-4bc5-931f-1a035dc0d6cc"
        },
        "item": {
          "id": "fed3749b-acfd-43bc-82e5-f0eea6be8fcc",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "762b693f-282e-4a6b-9304-90e5d9934f86",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ba59dca-12ba-482b-aefc-b5b31b9aadc5",
        "cursor": {
          "ref": "e4c946b8-3d13-4b70-94e9-9ca68274e3f9",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "f886b7c1-eb28-47b2-99ee-03194d311034"
        },
        "item": {
          "id": "5ba59dca-12ba-482b-aefc-b5b31b9aadc5",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "54f68efa-095e-4be8-90c3-8e899c19b698",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ba59dca-12ba-482b-aefc-b5b31b9aadc5",
        "cursor": {
          "ref": "e4c946b8-3d13-4b70-94e9-9ca68274e3f9",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "f886b7c1-eb28-47b2-99ee-03194d311034"
        },
        "item": {
          "id": "5ba59dca-12ba-482b-aefc-b5b31b9aadc5",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "54f68efa-095e-4be8-90c3-8e899c19b698",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b5a83de-6501-4b78-8dfc-47145908e3d9",
        "cursor": {
          "ref": "c922c21f-7833-42c6-a58d-843482abad9f",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "9ddc5620-b08b-424e-bc78-6b1f25ecc200"
        },
        "item": {
          "id": "4b5a83de-6501-4b78-8dfc-47145908e3d9",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "5269619d-cdb0-49c9-a35f-da3e050203cf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b5a83de-6501-4b78-8dfc-47145908e3d9",
        "cursor": {
          "ref": "c922c21f-7833-42c6-a58d-843482abad9f",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "9ddc5620-b08b-424e-bc78-6b1f25ecc200"
        },
        "item": {
          "id": "4b5a83de-6501-4b78-8dfc-47145908e3d9",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "5269619d-cdb0-49c9-a35f-da3e050203cf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5474c9a-ed62-42f4-bb3d-d03d3062e083",
        "cursor": {
          "ref": "04773792-e4ae-40d2-814f-9f22edd05116",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "812153ce-0167-4864-a883-42b38c9ba3c5"
        },
        "item": {
          "id": "d5474c9a-ed62-42f4-bb3d-d03d3062e083",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "6900784d-fff2-4047-810d-872ea89dfb04",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5474c9a-ed62-42f4-bb3d-d03d3062e083",
        "cursor": {
          "ref": "04773792-e4ae-40d2-814f-9f22edd05116",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "812153ce-0167-4864-a883-42b38c9ba3c5"
        },
        "item": {
          "id": "d5474c9a-ed62-42f4-bb3d-d03d3062e083",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "6900784d-fff2-4047-810d-872ea89dfb04",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c81392d-e38d-47f4-b746-810fa11e1faf",
        "cursor": {
          "ref": "8f067b21-ddb0-4b58-81d3-f1f646c9f9f2",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "c1bacbfc-74a7-412c-917f-2c8bd97aae3a"
        },
        "item": {
          "id": "6c81392d-e38d-47f4-b746-810fa11e1faf",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "a022030f-051d-4405-aa15-8da0f0d0bd8e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c81392d-e38d-47f4-b746-810fa11e1faf",
        "cursor": {
          "ref": "8f067b21-ddb0-4b58-81d3-f1f646c9f9f2",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "c1bacbfc-74a7-412c-917f-2c8bd97aae3a"
        },
        "item": {
          "id": "6c81392d-e38d-47f4-b746-810fa11e1faf",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "a022030f-051d-4405-aa15-8da0f0d0bd8e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d423ba17-d32a-4375-ac3f-ce1e7ce08fae",
        "cursor": {
          "ref": "665e02c2-7f73-4a66-bb0c-ba724c4396eb",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "9c1f7f18-3359-4c70-8fab-7f7092a91e5b"
        },
        "item": {
          "id": "d423ba17-d32a-4375-ac3f-ce1e7ce08fae",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "e9f290d7-a4e5-4b47-a33f-afb2e7a2c06e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d423ba17-d32a-4375-ac3f-ce1e7ce08fae",
        "cursor": {
          "ref": "665e02c2-7f73-4a66-bb0c-ba724c4396eb",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "9c1f7f18-3359-4c70-8fab-7f7092a91e5b"
        },
        "item": {
          "id": "d423ba17-d32a-4375-ac3f-ce1e7ce08fae",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "e9f290d7-a4e5-4b47-a33f-afb2e7a2c06e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5397e339-41f2-4045-98af-e5170c30ae8a",
        "cursor": {
          "ref": "8dbb2657-8d2c-4fe0-9a3a-ec22570f9991",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "d614fa4b-fc8d-4372-9368-0c45acad7d38"
        },
        "item": {
          "id": "5397e339-41f2-4045-98af-e5170c30ae8a",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "a8102088-54db-444c-ab9c-c6987feb1994",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5397e339-41f2-4045-98af-e5170c30ae8a",
        "cursor": {
          "ref": "8dbb2657-8d2c-4fe0-9a3a-ec22570f9991",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "d614fa4b-fc8d-4372-9368-0c45acad7d38"
        },
        "item": {
          "id": "5397e339-41f2-4045-98af-e5170c30ae8a",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "a8102088-54db-444c-ab9c-c6987feb1994",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88bf3873-0c11-4db9-90b6-9d45c0c1b342",
        "cursor": {
          "ref": "f1e5599f-77fa-432a-b23d-c81833e64b2e",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "00cfa3c0-1bfb-4539-95cd-7c99c7638860"
        },
        "item": {
          "id": "88bf3873-0c11-4db9-90b6-9d45c0c1b342",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "772c7d4e-dfe6-4f20-93a2-b789e6fd400f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88bf3873-0c11-4db9-90b6-9d45c0c1b342",
        "cursor": {
          "ref": "f1e5599f-77fa-432a-b23d-c81833e64b2e",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "00cfa3c0-1bfb-4539-95cd-7c99c7638860"
        },
        "item": {
          "id": "88bf3873-0c11-4db9-90b6-9d45c0c1b342",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "772c7d4e-dfe6-4f20-93a2-b789e6fd400f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aefe7c73-592c-4a3f-834d-4154d3ab0dd1",
        "cursor": {
          "ref": "e1960a66-5ca5-4d12-9e48-68fe514c8afe",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "970294e1-085a-4afc-ac38-69a278aee56e"
        },
        "item": {
          "id": "aefe7c73-592c-4a3f-834d-4154d3ab0dd1",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "26531ec6-3c83-4310-aef5-daee8387e358",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aefe7c73-592c-4a3f-834d-4154d3ab0dd1",
        "cursor": {
          "ref": "e1960a66-5ca5-4d12-9e48-68fe514c8afe",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "970294e1-085a-4afc-ac38-69a278aee56e"
        },
        "item": {
          "id": "aefe7c73-592c-4a3f-834d-4154d3ab0dd1",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "26531ec6-3c83-4310-aef5-daee8387e358",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "707d0089-b9a4-4206-91f4-08715bb92939",
        "cursor": {
          "ref": "8843a504-927e-43ab-805b-195a33b4c072",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "3b5bf11a-fdeb-4ff5-9ad0-c4b2a52ca24c"
        },
        "item": {
          "id": "707d0089-b9a4-4206-91f4-08715bb92939",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "13f17795-679e-483c-a480-a5802b5f470a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "707d0089-b9a4-4206-91f4-08715bb92939",
        "cursor": {
          "ref": "8843a504-927e-43ab-805b-195a33b4c072",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "3b5bf11a-fdeb-4ff5-9ad0-c4b2a52ca24c"
        },
        "item": {
          "id": "707d0089-b9a4-4206-91f4-08715bb92939",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "13f17795-679e-483c-a480-a5802b5f470a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72c81da2-40ad-4a01-82ff-84816f89ecbd",
        "cursor": {
          "ref": "97e578ad-a67b-47a4-a8ae-3511899696df",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "ae137fa2-4793-4b28-ae12-86293e53dd48"
        },
        "item": {
          "id": "72c81da2-40ad-4a01-82ff-84816f89ecbd",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "e3e632b8-6157-4c80-9d06-4e48602c2f13",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72c81da2-40ad-4a01-82ff-84816f89ecbd",
        "cursor": {
          "ref": "97e578ad-a67b-47a4-a8ae-3511899696df",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "ae137fa2-4793-4b28-ae12-86293e53dd48"
        },
        "item": {
          "id": "72c81da2-40ad-4a01-82ff-84816f89ecbd",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "e3e632b8-6157-4c80-9d06-4e48602c2f13",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c920fdc-f837-465e-8cd6-aca063eab17f",
        "cursor": {
          "ref": "1f6f91d9-4bdc-46d8-ba8a-e0012fd259a6",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "0ad9a0fb-c765-4432-b3be-9c265961f40c"
        },
        "item": {
          "id": "8c920fdc-f837-465e-8cd6-aca063eab17f",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "4b588f41-52d4-4bc1-a04d-91113c13443b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c920fdc-f837-465e-8cd6-aca063eab17f",
        "cursor": {
          "ref": "1f6f91d9-4bdc-46d8-ba8a-e0012fd259a6",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "0ad9a0fb-c765-4432-b3be-9c265961f40c"
        },
        "item": {
          "id": "8c920fdc-f837-465e-8cd6-aca063eab17f",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "4b588f41-52d4-4bc1-a04d-91113c13443b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c13d58d4-4a0f-47fb-bda1-e4ecceeddd08",
        "cursor": {
          "ref": "087b5d50-37d5-4d47-95ca-2240b973a612",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "603186fc-9606-41b8-a5d1-6d85f47a15c1"
        },
        "item": {
          "id": "c13d58d4-4a0f-47fb-bda1-e4ecceeddd08",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "622089ec-9c1c-4551-bf50-cdb693811f96",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c13d58d4-4a0f-47fb-bda1-e4ecceeddd08",
        "cursor": {
          "ref": "087b5d50-37d5-4d47-95ca-2240b973a612",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "603186fc-9606-41b8-a5d1-6d85f47a15c1"
        },
        "item": {
          "id": "c13d58d4-4a0f-47fb-bda1-e4ecceeddd08",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "622089ec-9c1c-4551-bf50-cdb693811f96",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2637e5fb-f82c-4ea9-9c77-a4b79d04652f",
        "cursor": {
          "ref": "12ba93ec-587c-4bca-9129-740f1b732c38",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "92aa57a0-4094-4bd8-9667-d838d1ae263b"
        },
        "item": {
          "id": "2637e5fb-f82c-4ea9-9c77-a4b79d04652f",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "86965e03-d1df-4e8c-b934-5e87c17dad34",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2637e5fb-f82c-4ea9-9c77-a4b79d04652f",
        "cursor": {
          "ref": "12ba93ec-587c-4bca-9129-740f1b732c38",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "92aa57a0-4094-4bd8-9667-d838d1ae263b"
        },
        "item": {
          "id": "2637e5fb-f82c-4ea9-9c77-a4b79d04652f",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "86965e03-d1df-4e8c-b934-5e87c17dad34",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2960e59-34d3-4099-8381-8b6f3a747b1f",
        "cursor": {
          "ref": "e85b352f-8cf3-418e-8956-87aa735174ac",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "1a32dadf-fd33-4e42-b618-47b6379b5943"
        },
        "item": {
          "id": "d2960e59-34d3-4099-8381-8b6f3a747b1f",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "9e18600f-6226-4078-838f-8729e5a41276",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2960e59-34d3-4099-8381-8b6f3a747b1f",
        "cursor": {
          "ref": "e85b352f-8cf3-418e-8956-87aa735174ac",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "1a32dadf-fd33-4e42-b618-47b6379b5943"
        },
        "item": {
          "id": "d2960e59-34d3-4099-8381-8b6f3a747b1f",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "9e18600f-6226-4078-838f-8729e5a41276",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbffb43b-5de8-4eba-b781-6fd0341fd835",
        "cursor": {
          "ref": "168e29ea-26cc-420f-a36a-7fe0af5c625b",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "b3f87b88-00cd-46f3-a16a-646d541119f0"
        },
        "item": {
          "id": "bbffb43b-5de8-4eba-b781-6fd0341fd835",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "32ca9e2a-38fa-49b9-a521-1abb64e5662f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbffb43b-5de8-4eba-b781-6fd0341fd835",
        "cursor": {
          "ref": "168e29ea-26cc-420f-a36a-7fe0af5c625b",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "b3f87b88-00cd-46f3-a16a-646d541119f0"
        },
        "item": {
          "id": "bbffb43b-5de8-4eba-b781-6fd0341fd835",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "32ca9e2a-38fa-49b9-a521-1abb64e5662f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dbfd7a3-48ac-455b-bac0-adcc575ac58c",
        "cursor": {
          "ref": "41313f5f-49fa-4018-8970-317e12d55b11",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "9e9e045d-1ddf-4233-b931-f6fe9645f015"
        },
        "item": {
          "id": "9dbfd7a3-48ac-455b-bac0-adcc575ac58c",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "f3df97ed-ddb7-46f6-9b7a-7db87666bda4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dbfd7a3-48ac-455b-bac0-adcc575ac58c",
        "cursor": {
          "ref": "41313f5f-49fa-4018-8970-317e12d55b11",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "9e9e045d-1ddf-4233-b931-f6fe9645f015"
        },
        "item": {
          "id": "9dbfd7a3-48ac-455b-bac0-adcc575ac58c",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "f3df97ed-ddb7-46f6-9b7a-7db87666bda4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61962e4d-be8b-49ea-b80e-c066905a5638",
        "cursor": {
          "ref": "627c200c-ac3d-45d3-b6cf-fbf75f416472",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "1967ce33-c427-4196-b1d7-ecd7cf1afc71"
        },
        "item": {
          "id": "61962e4d-be8b-49ea-b80e-c066905a5638",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "a4c39aae-983f-48ae-a438-d77d059212a8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61962e4d-be8b-49ea-b80e-c066905a5638",
        "cursor": {
          "ref": "627c200c-ac3d-45d3-b6cf-fbf75f416472",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "1967ce33-c427-4196-b1d7-ecd7cf1afc71"
        },
        "item": {
          "id": "61962e4d-be8b-49ea-b80e-c066905a5638",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "a4c39aae-983f-48ae-a438-d77d059212a8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b149ccd3-a911-4467-a985-ef2224cf262a",
        "cursor": {
          "ref": "9a084d40-268c-46de-a1dc-ecba7495a8c9",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "c9b96aef-3b03-4370-be49-f2608e657952"
        },
        "item": {
          "id": "b149ccd3-a911-4467-a985-ef2224cf262a",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "8f221241-0324-4a62-86b6-a9c1aa6a6898",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b149ccd3-a911-4467-a985-ef2224cf262a",
        "cursor": {
          "ref": "9a084d40-268c-46de-a1dc-ecba7495a8c9",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "c9b96aef-3b03-4370-be49-f2608e657952"
        },
        "item": {
          "id": "b149ccd3-a911-4467-a985-ef2224cf262a",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "8f221241-0324-4a62-86b6-a9c1aa6a6898",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4689bd82-9c16-4822-a394-e864ec65002c",
        "cursor": {
          "ref": "44f9818c-ca5b-410c-ad45-cd9168d48d1b",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "73424c32-432e-4adc-8933-7be5573cca1f"
        },
        "item": {
          "id": "4689bd82-9c16-4822-a394-e864ec65002c",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "fa2324a3-02cd-47c9-a058-cfbd7249641a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4689bd82-9c16-4822-a394-e864ec65002c",
        "cursor": {
          "ref": "44f9818c-ca5b-410c-ad45-cd9168d48d1b",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "73424c32-432e-4adc-8933-7be5573cca1f"
        },
        "item": {
          "id": "4689bd82-9c16-4822-a394-e864ec65002c",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "fa2324a3-02cd-47c9-a058-cfbd7249641a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a71256ec-b153-4977-9561-e1827024ed50",
        "cursor": {
          "ref": "58fc78a0-fafa-49e2-aba5-f3484297d649",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "9c891056-2f84-4f0a-8be3-24811c348aae"
        },
        "item": {
          "id": "a71256ec-b153-4977-9561-e1827024ed50",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "235f5e5d-cc31-43ff-b369-f953ae6a6204",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a71256ec-b153-4977-9561-e1827024ed50",
        "cursor": {
          "ref": "58fc78a0-fafa-49e2-aba5-f3484297d649",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "9c891056-2f84-4f0a-8be3-24811c348aae"
        },
        "item": {
          "id": "a71256ec-b153-4977-9561-e1827024ed50",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "235f5e5d-cc31-43ff-b369-f953ae6a6204",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f788dd9-14a9-41e2-be8c-445e7111cfa3",
        "cursor": {
          "ref": "55eb187a-9e71-4b77-ab4b-589d315d5d30",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "fb07eb2d-a722-4761-be75-74ec0cdb3432"
        },
        "item": {
          "id": "5f788dd9-14a9-41e2-be8c-445e7111cfa3",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "34f47737-7637-47a8-9e54-e8bd07701cc1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f788dd9-14a9-41e2-be8c-445e7111cfa3",
        "cursor": {
          "ref": "55eb187a-9e71-4b77-ab4b-589d315d5d30",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "fb07eb2d-a722-4761-be75-74ec0cdb3432"
        },
        "item": {
          "id": "5f788dd9-14a9-41e2-be8c-445e7111cfa3",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "34f47737-7637-47a8-9e54-e8bd07701cc1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "894cc2ab-318d-4932-b822-8dd40fd0e2c4",
        "cursor": {
          "ref": "13118753-df5d-48f5-a7f8-41f7bc8e0f02",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "94c996d7-4be2-4f97-b13b-cc3cb8dc9915"
        },
        "item": {
          "id": "894cc2ab-318d-4932-b822-8dd40fd0e2c4",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "6329c25f-fbcf-430d-8aee-d81765690d04",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "894cc2ab-318d-4932-b822-8dd40fd0e2c4",
        "cursor": {
          "ref": "13118753-df5d-48f5-a7f8-41f7bc8e0f02",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "94c996d7-4be2-4f97-b13b-cc3cb8dc9915"
        },
        "item": {
          "id": "894cc2ab-318d-4932-b822-8dd40fd0e2c4",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "6329c25f-fbcf-430d-8aee-d81765690d04",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d8fa16f-092b-4cac-af22-2bf5e64edd05",
        "cursor": {
          "ref": "cf8a9d70-1d41-4c56-b754-b33fb7044913",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "03de38b0-35cd-4576-94bc-49d37e87618a"
        },
        "item": {
          "id": "5d8fa16f-092b-4cac-af22-2bf5e64edd05",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "a8a6a120-1819-4e96-8d4b-a8efdd48afe7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d8fa16f-092b-4cac-af22-2bf5e64edd05",
        "cursor": {
          "ref": "cf8a9d70-1d41-4c56-b754-b33fb7044913",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "03de38b0-35cd-4576-94bc-49d37e87618a"
        },
        "item": {
          "id": "5d8fa16f-092b-4cac-af22-2bf5e64edd05",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "a8a6a120-1819-4e96-8d4b-a8efdd48afe7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc2f6ac9-d628-46ff-81ab-eed79dcba692",
        "cursor": {
          "ref": "f72bc67d-b16d-4833-b005-5309616c4e2a",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "82ba4995-7ad6-419a-abf0-92f4c8bec50d"
        },
        "item": {
          "id": "fc2f6ac9-d628-46ff-81ab-eed79dcba692",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "28d32faa-04c6-4dfe-a6ae-4415b8a745a1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc2f6ac9-d628-46ff-81ab-eed79dcba692",
        "cursor": {
          "ref": "f72bc67d-b16d-4833-b005-5309616c4e2a",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "82ba4995-7ad6-419a-abf0-92f4c8bec50d"
        },
        "item": {
          "id": "fc2f6ac9-d628-46ff-81ab-eed79dcba692",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "28d32faa-04c6-4dfe-a6ae-4415b8a745a1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99f5bcf7-b0c0-45c4-bc59-dcc6a515d72e",
        "cursor": {
          "ref": "daac9cf9-c9a5-4ef7-a30f-179f097a6566",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "dc360598-f0ac-420a-af33-51afac4cfab2"
        },
        "item": {
          "id": "99f5bcf7-b0c0-45c4-bc59-dcc6a515d72e",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "4d7aa25e-890f-466b-ba13-6903ac6175e2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99f5bcf7-b0c0-45c4-bc59-dcc6a515d72e",
        "cursor": {
          "ref": "daac9cf9-c9a5-4ef7-a30f-179f097a6566",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "dc360598-f0ac-420a-af33-51afac4cfab2"
        },
        "item": {
          "id": "99f5bcf7-b0c0-45c4-bc59-dcc6a515d72e",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "4d7aa25e-890f-466b-ba13-6903ac6175e2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50600d4e-f035-480e-8f34-5b351cbc9e41",
        "cursor": {
          "ref": "4cf1bc7e-1ba8-4e97-8e07-8fe0dd0a16e9",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "632ed6b5-b5ae-474b-883c-16e8dcaeaddf"
        },
        "item": {
          "id": "50600d4e-f035-480e-8f34-5b351cbc9e41",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "f06ebdb0-b0cb-402e-b150-9bea90107351",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50600d4e-f035-480e-8f34-5b351cbc9e41",
        "cursor": {
          "ref": "4cf1bc7e-1ba8-4e97-8e07-8fe0dd0a16e9",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "632ed6b5-b5ae-474b-883c-16e8dcaeaddf"
        },
        "item": {
          "id": "50600d4e-f035-480e-8f34-5b351cbc9e41",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "f06ebdb0-b0cb-402e-b150-9bea90107351",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4735d036-6751-4cc5-83a6-31af15a2ebd4",
        "cursor": {
          "ref": "bdf75310-6f0b-4cd2-9d71-e5f2cbbd7e61",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "3bd60102-02f3-4c02-99d2-2d28f7c2683c"
        },
        "item": {
          "id": "4735d036-6751-4cc5-83a6-31af15a2ebd4",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "d1eb15fb-a476-48c6-946b-7a1b556310b7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4735d036-6751-4cc5-83a6-31af15a2ebd4",
        "cursor": {
          "ref": "bdf75310-6f0b-4cd2-9d71-e5f2cbbd7e61",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "3bd60102-02f3-4c02-99d2-2d28f7c2683c"
        },
        "item": {
          "id": "4735d036-6751-4cc5-83a6-31af15a2ebd4",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "d1eb15fb-a476-48c6-946b-7a1b556310b7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2a5c03f-d228-4f33-9b32-1698a6eaec22",
        "cursor": {
          "ref": "b9655e60-be8b-40be-a0b7-f0bd34ce6ec3",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "c2afee68-6245-4ed7-a04a-8eac28a29489"
        },
        "item": {
          "id": "d2a5c03f-d228-4f33-9b32-1698a6eaec22",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "40db3ef4-f90a-4adf-a9a0-f2af397617f0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2a5c03f-d228-4f33-9b32-1698a6eaec22",
        "cursor": {
          "ref": "b9655e60-be8b-40be-a0b7-f0bd34ce6ec3",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "c2afee68-6245-4ed7-a04a-8eac28a29489"
        },
        "item": {
          "id": "d2a5c03f-d228-4f33-9b32-1698a6eaec22",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "40db3ef4-f90a-4adf-a9a0-f2af397617f0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c8cd48e-2558-4df8-a1c6-9290faca2254",
        "cursor": {
          "ref": "0e936cb9-8fc1-4826-9c14-ee7e2ace91fc",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "bb6a089b-082e-448d-ba5e-1773dec66b24"
        },
        "item": {
          "id": "8c8cd48e-2558-4df8-a1c6-9290faca2254",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "781a5d98-9f64-41bf-a373-413b47b3cf60",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c8cd48e-2558-4df8-a1c6-9290faca2254",
        "cursor": {
          "ref": "0e936cb9-8fc1-4826-9c14-ee7e2ace91fc",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "bb6a089b-082e-448d-ba5e-1773dec66b24"
        },
        "item": {
          "id": "8c8cd48e-2558-4df8-a1c6-9290faca2254",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "781a5d98-9f64-41bf-a373-413b47b3cf60",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4423735f-c987-4b92-b94c-c169b790aaf7",
        "cursor": {
          "ref": "e608c38b-95b1-4548-8bdd-0b3c06456a1d",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "132d5c69-b98d-4196-a4c7-7fa7d3ba6724"
        },
        "item": {
          "id": "4423735f-c987-4b92-b94c-c169b790aaf7",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "d3d77cd0-ba86-4e80-8ac4-c58af29cbe5c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4423735f-c987-4b92-b94c-c169b790aaf7",
        "cursor": {
          "ref": "e608c38b-95b1-4548-8bdd-0b3c06456a1d",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "132d5c69-b98d-4196-a4c7-7fa7d3ba6724"
        },
        "item": {
          "id": "4423735f-c987-4b92-b94c-c169b790aaf7",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "d3d77cd0-ba86-4e80-8ac4-c58af29cbe5c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6916b3a9-b04d-4e48-aa6e-cfe96b687696",
        "cursor": {
          "ref": "de14f5c8-c260-46bc-adf9-03777d9d76ef",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "f02a9f52-8da4-443f-8b4f-984035837994"
        },
        "item": {
          "id": "6916b3a9-b04d-4e48-aa6e-cfe96b687696",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "a7ba6490-9e15-436c-8586-b95e4d8345c3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6916b3a9-b04d-4e48-aa6e-cfe96b687696",
        "cursor": {
          "ref": "de14f5c8-c260-46bc-adf9-03777d9d76ef",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "f02a9f52-8da4-443f-8b4f-984035837994"
        },
        "item": {
          "id": "6916b3a9-b04d-4e48-aa6e-cfe96b687696",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "a7ba6490-9e15-436c-8586-b95e4d8345c3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a67b1db5-177c-46df-ada6-7ec91a56703e",
        "cursor": {
          "ref": "dbdbb0fa-81fb-451c-a927-6b8973b6c968",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "8b47517f-34ac-4d18-be15-909df6745f2c"
        },
        "item": {
          "id": "a67b1db5-177c-46df-ada6-7ec91a56703e",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "811d1af7-5e1b-47c1-9f21-7a0ca33e122e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a67b1db5-177c-46df-ada6-7ec91a56703e",
        "cursor": {
          "ref": "dbdbb0fa-81fb-451c-a927-6b8973b6c968",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "8b47517f-34ac-4d18-be15-909df6745f2c"
        },
        "item": {
          "id": "a67b1db5-177c-46df-ada6-7ec91a56703e",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "811d1af7-5e1b-47c1-9f21-7a0ca33e122e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab0b6dd2-7b30-4729-bf8b-3fe083cb73ef",
        "cursor": {
          "ref": "5a480ec6-a445-4146-9801-3d4038873c53",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "07ecbdb7-9c01-414a-b5e4-ec9db526c5c8"
        },
        "item": {
          "id": "ab0b6dd2-7b30-4729-bf8b-3fe083cb73ef",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "6440fa05-1d83-41e4-a216-d3ad5a48350b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab0b6dd2-7b30-4729-bf8b-3fe083cb73ef",
        "cursor": {
          "ref": "5a480ec6-a445-4146-9801-3d4038873c53",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "07ecbdb7-9c01-414a-b5e4-ec9db526c5c8"
        },
        "item": {
          "id": "ab0b6dd2-7b30-4729-bf8b-3fe083cb73ef",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "6440fa05-1d83-41e4-a216-d3ad5a48350b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcd6d700-6bcc-4ed5-999a-935dfb6de794",
        "cursor": {
          "ref": "56ab4c98-4c36-4dc6-bffc-cbedb2c10143",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "641fceb5-eeec-4439-b7fa-cef3e41deed0"
        },
        "item": {
          "id": "fcd6d700-6bcc-4ed5-999a-935dfb6de794",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "f8e1cc16-6ca2-415a-879e-8ece7babea66",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcd6d700-6bcc-4ed5-999a-935dfb6de794",
        "cursor": {
          "ref": "56ab4c98-4c36-4dc6-bffc-cbedb2c10143",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "641fceb5-eeec-4439-b7fa-cef3e41deed0"
        },
        "item": {
          "id": "fcd6d700-6bcc-4ed5-999a-935dfb6de794",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "f8e1cc16-6ca2-415a-879e-8ece7babea66",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d18c262-41f8-491a-bde3-2a3237823019",
        "cursor": {
          "ref": "b0d38dcb-456d-4fe9-9a6f-c86ed5aecce3",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "5c478103-1757-4e91-8938-68b792d727d7"
        },
        "item": {
          "id": "4d18c262-41f8-491a-bde3-2a3237823019",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "aea75170-e09f-4961-8186-6402064073e4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d18c262-41f8-491a-bde3-2a3237823019",
        "cursor": {
          "ref": "b0d38dcb-456d-4fe9-9a6f-c86ed5aecce3",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "5c478103-1757-4e91-8938-68b792d727d7"
        },
        "item": {
          "id": "4d18c262-41f8-491a-bde3-2a3237823019",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "aea75170-e09f-4961-8186-6402064073e4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a173202-8fea-4c5a-9439-584fab912367",
        "cursor": {
          "ref": "532e0a00-cdf3-4c4a-b7be-8ad830d5194f",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "70553764-1f83-4164-99f2-e423d5faa5c5"
        },
        "item": {
          "id": "6a173202-8fea-4c5a-9439-584fab912367",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "5164cd82-5646-48bc-aae3-11c416595b86",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a173202-8fea-4c5a-9439-584fab912367",
        "cursor": {
          "ref": "532e0a00-cdf3-4c4a-b7be-8ad830d5194f",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "70553764-1f83-4164-99f2-e423d5faa5c5"
        },
        "item": {
          "id": "6a173202-8fea-4c5a-9439-584fab912367",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "5164cd82-5646-48bc-aae3-11c416595b86",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5202ef6f-7016-4181-9017-6ba68e898887",
        "cursor": {
          "ref": "0128a929-4d3e-4178-a261-e280c116677d",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "046f78c3-a473-42e6-af24-82d253053e32"
        },
        "item": {
          "id": "5202ef6f-7016-4181-9017-6ba68e898887",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "85c07a74-f64e-4041-ad95-38d18aaacc0f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5202ef6f-7016-4181-9017-6ba68e898887",
        "cursor": {
          "ref": "0128a929-4d3e-4178-a261-e280c116677d",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "046f78c3-a473-42e6-af24-82d253053e32"
        },
        "item": {
          "id": "5202ef6f-7016-4181-9017-6ba68e898887",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "85c07a74-f64e-4041-ad95-38d18aaacc0f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "713b5d74-e33f-46a1-a934-e84fbe6a79d5",
        "cursor": {
          "ref": "d81095a2-deb4-4b81-9260-1ddb7793efdb",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "23d734ae-ea60-4099-b67c-a49b640701ce"
        },
        "item": {
          "id": "713b5d74-e33f-46a1-a934-e84fbe6a79d5",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "45efae7f-e919-4bd3-b986-95b8ce92298c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "713b5d74-e33f-46a1-a934-e84fbe6a79d5",
        "cursor": {
          "ref": "d81095a2-deb4-4b81-9260-1ddb7793efdb",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "23d734ae-ea60-4099-b67c-a49b640701ce"
        },
        "item": {
          "id": "713b5d74-e33f-46a1-a934-e84fbe6a79d5",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "45efae7f-e919-4bd3-b986-95b8ce92298c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79e8bb26-0268-4d3a-abf5-8723c645ac37",
        "cursor": {
          "ref": "d80554ae-29a4-489b-a529-628884cbd39f",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "05a9981c-8742-44fe-8102-f1e3b8921a08"
        },
        "item": {
          "id": "79e8bb26-0268-4d3a-abf5-8723c645ac37",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "19dfacd2-0c66-483a-b308-c309528c0a52",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79e8bb26-0268-4d3a-abf5-8723c645ac37",
        "cursor": {
          "ref": "d80554ae-29a4-489b-a529-628884cbd39f",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "05a9981c-8742-44fe-8102-f1e3b8921a08"
        },
        "item": {
          "id": "79e8bb26-0268-4d3a-abf5-8723c645ac37",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "19dfacd2-0c66-483a-b308-c309528c0a52",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93751958-d824-4a0b-b2c4-5180f668e911",
        "cursor": {
          "ref": "bbc0041d-f3d4-4c3b-93ee-e2edf13a4fa0",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "84c9f08d-8434-496e-afa6-806e9cf8e7d5"
        },
        "item": {
          "id": "93751958-d824-4a0b-b2c4-5180f668e911",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "1a5aba7b-f22b-44c0-b789-3ed2792fdc2d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93751958-d824-4a0b-b2c4-5180f668e911",
        "cursor": {
          "ref": "bbc0041d-f3d4-4c3b-93ee-e2edf13a4fa0",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "84c9f08d-8434-496e-afa6-806e9cf8e7d5"
        },
        "item": {
          "id": "93751958-d824-4a0b-b2c4-5180f668e911",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "1a5aba7b-f22b-44c0-b789-3ed2792fdc2d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53fb58d6-ee51-49f4-85b2-34050a6fae41",
        "cursor": {
          "ref": "c54fde5c-3fb7-4757-b9e1-b94e6c5c578f",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "5b52d769-da4a-41c7-9b35-b4557a5caa71"
        },
        "item": {
          "id": "53fb58d6-ee51-49f4-85b2-34050a6fae41",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "908c5c40-fab5-49d5-9d4f-f6356ec97273",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53fb58d6-ee51-49f4-85b2-34050a6fae41",
        "cursor": {
          "ref": "c54fde5c-3fb7-4757-b9e1-b94e6c5c578f",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "5b52d769-da4a-41c7-9b35-b4557a5caa71"
        },
        "item": {
          "id": "53fb58d6-ee51-49f4-85b2-34050a6fae41",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "908c5c40-fab5-49d5-9d4f-f6356ec97273",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0199ad6-e8ca-4e6a-b759-be357c5d36d6",
        "cursor": {
          "ref": "2f4ca53d-8e10-4912-954b-d1e36dbb7be6",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "3452fa86-1cc3-4f97-9981-a1f03afd2dee"
        },
        "item": {
          "id": "b0199ad6-e8ca-4e6a-b759-be357c5d36d6",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "e4eb0edd-369f-4f94-a5dd-07aaf34cf413",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0199ad6-e8ca-4e6a-b759-be357c5d36d6",
        "cursor": {
          "ref": "2f4ca53d-8e10-4912-954b-d1e36dbb7be6",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "3452fa86-1cc3-4f97-9981-a1f03afd2dee"
        },
        "item": {
          "id": "b0199ad6-e8ca-4e6a-b759-be357c5d36d6",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "e4eb0edd-369f-4f94-a5dd-07aaf34cf413",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4729939c-b15f-4a98-8fad-2fdce7f12261",
        "cursor": {
          "ref": "183cb21f-7df4-42b3-923d-7e41b54784dd",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "a83e5ab6-3434-442f-95fe-947bf211b201"
        },
        "item": {
          "id": "4729939c-b15f-4a98-8fad-2fdce7f12261",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "3a3442a9-d79f-4b90-8263-fbf15815e2ef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4729939c-b15f-4a98-8fad-2fdce7f12261",
        "cursor": {
          "ref": "183cb21f-7df4-42b3-923d-7e41b54784dd",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "a83e5ab6-3434-442f-95fe-947bf211b201"
        },
        "item": {
          "id": "4729939c-b15f-4a98-8fad-2fdce7f12261",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "3a3442a9-d79f-4b90-8263-fbf15815e2ef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "384964a2-9158-4d33-ad10-13ec09da09ee",
        "cursor": {
          "ref": "715ba07d-45f8-41de-a425-3c2720c5c0aa",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "c58542e4-4ccf-42a5-bc96-0ec2a0c6f458"
        },
        "item": {
          "id": "384964a2-9158-4d33-ad10-13ec09da09ee",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "f301d783-ed1b-4af9-a7cd-02030d829fce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "384964a2-9158-4d33-ad10-13ec09da09ee",
        "cursor": {
          "ref": "715ba07d-45f8-41de-a425-3c2720c5c0aa",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "c58542e4-4ccf-42a5-bc96-0ec2a0c6f458"
        },
        "item": {
          "id": "384964a2-9158-4d33-ad10-13ec09da09ee",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "f301d783-ed1b-4af9-a7cd-02030d829fce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3ca95d8-4cad-4cc0-bf72-83a3e3460bae",
        "cursor": {
          "ref": "18278be7-2b09-492c-8206-e2e0cdfccde2",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "704b4101-6b1d-4f3f-aa02-dbc0b4fd90ca"
        },
        "item": {
          "id": "f3ca95d8-4cad-4cc0-bf72-83a3e3460bae",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "44ac59e2-573e-4410-b481-46c9db9ea33e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3ca95d8-4cad-4cc0-bf72-83a3e3460bae",
        "cursor": {
          "ref": "18278be7-2b09-492c-8206-e2e0cdfccde2",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "704b4101-6b1d-4f3f-aa02-dbc0b4fd90ca"
        },
        "item": {
          "id": "f3ca95d8-4cad-4cc0-bf72-83a3e3460bae",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "44ac59e2-573e-4410-b481-46c9db9ea33e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e66bb4f1-f39f-465e-9e77-2cafa324f1ca",
        "cursor": {
          "ref": "5075339b-f3d2-4246-a317-b5374ff437e5",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "43e2765d-2c24-4514-b907-c098e2c47a7d"
        },
        "item": {
          "id": "e66bb4f1-f39f-465e-9e77-2cafa324f1ca",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "bf08024a-e9c8-4545-b5ad-6f824019f78f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e66bb4f1-f39f-465e-9e77-2cafa324f1ca",
        "cursor": {
          "ref": "5075339b-f3d2-4246-a317-b5374ff437e5",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "43e2765d-2c24-4514-b907-c098e2c47a7d"
        },
        "item": {
          "id": "e66bb4f1-f39f-465e-9e77-2cafa324f1ca",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "bf08024a-e9c8-4545-b5ad-6f824019f78f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc88619a-2950-416b-9796-8424a3679174",
        "cursor": {
          "ref": "0583bdf7-2a2f-4cdc-9776-421dbf19b806",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "0060e171-c2b7-479f-8097-9a6729b9e4ff"
        },
        "item": {
          "id": "dc88619a-2950-416b-9796-8424a3679174",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "79eb66a4-6561-4adf-bd52-a56c8328ae37",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc88619a-2950-416b-9796-8424a3679174",
        "cursor": {
          "ref": "0583bdf7-2a2f-4cdc-9776-421dbf19b806",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "0060e171-c2b7-479f-8097-9a6729b9e4ff"
        },
        "item": {
          "id": "dc88619a-2950-416b-9796-8424a3679174",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "79eb66a4-6561-4adf-bd52-a56c8328ae37",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3edbec0-8385-4521-a6ff-e84836591003",
        "cursor": {
          "ref": "ef81d5a7-89cc-4c0c-b0ab-b50133255a29",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "1aafc42c-cafc-4f89-8533-29e212b471d8"
        },
        "item": {
          "id": "e3edbec0-8385-4521-a6ff-e84836591003",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "378960b6-8bd1-4df6-b4e4-71f7cc913d1c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3edbec0-8385-4521-a6ff-e84836591003",
        "cursor": {
          "ref": "ef81d5a7-89cc-4c0c-b0ab-b50133255a29",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "1aafc42c-cafc-4f89-8533-29e212b471d8"
        },
        "item": {
          "id": "e3edbec0-8385-4521-a6ff-e84836591003",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "378960b6-8bd1-4df6-b4e4-71f7cc913d1c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87737095-b6f7-490f-bb31-95ea95b2cb80",
        "cursor": {
          "ref": "6db65815-4b28-4a90-bb41-feddf6437c43",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "532618b8-e8e3-4ff0-8a41-3c3714632c3b"
        },
        "item": {
          "id": "87737095-b6f7-490f-bb31-95ea95b2cb80",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "2c25e8d7-6cc2-4428-8a46-8dcab249bf7e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87737095-b6f7-490f-bb31-95ea95b2cb80",
        "cursor": {
          "ref": "6db65815-4b28-4a90-bb41-feddf6437c43",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "532618b8-e8e3-4ff0-8a41-3c3714632c3b"
        },
        "item": {
          "id": "87737095-b6f7-490f-bb31-95ea95b2cb80",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "2c25e8d7-6cc2-4428-8a46-8dcab249bf7e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f61024c-4b72-498f-a815-2459d7203b63",
        "cursor": {
          "ref": "258cef7a-b152-4ae5-8f8c-4f9b0af89737",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "c1441363-03e9-45d1-b866-1d00bac20cff"
        },
        "item": {
          "id": "3f61024c-4b72-498f-a815-2459d7203b63",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "2bbc2ff5-2d75-41f0-b0e5-42c21d47fac3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f61024c-4b72-498f-a815-2459d7203b63",
        "cursor": {
          "ref": "258cef7a-b152-4ae5-8f8c-4f9b0af89737",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "c1441363-03e9-45d1-b866-1d00bac20cff"
        },
        "item": {
          "id": "3f61024c-4b72-498f-a815-2459d7203b63",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "2bbc2ff5-2d75-41f0-b0e5-42c21d47fac3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbafaec9-6a43-44c0-8839-3cf2fc951128",
        "cursor": {
          "ref": "fabf76eb-2ab5-4dba-8fc8-0888de35fa83",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "82673daa-b782-4500-aca4-837f69f550ee"
        },
        "item": {
          "id": "dbafaec9-6a43-44c0-8839-3cf2fc951128",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "31cb7c4f-db98-44e2-83ec-fd5f4134bdac",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbafaec9-6a43-44c0-8839-3cf2fc951128",
        "cursor": {
          "ref": "fabf76eb-2ab5-4dba-8fc8-0888de35fa83",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "82673daa-b782-4500-aca4-837f69f550ee"
        },
        "item": {
          "id": "dbafaec9-6a43-44c0-8839-3cf2fc951128",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "31cb7c4f-db98-44e2-83ec-fd5f4134bdac",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffa3eecb-c428-4a9e-87b2-63ee3ff2e154",
        "cursor": {
          "ref": "2830d918-c747-4589-82ff-50c84a387dc5",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "1beae995-177d-45aa-b7f5-a8436ab73d64"
        },
        "item": {
          "id": "ffa3eecb-c428-4a9e-87b2-63ee3ff2e154",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "701b7a31-3cd7-418c-927e-407738b7022c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffa3eecb-c428-4a9e-87b2-63ee3ff2e154",
        "cursor": {
          "ref": "2830d918-c747-4589-82ff-50c84a387dc5",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "1beae995-177d-45aa-b7f5-a8436ab73d64"
        },
        "item": {
          "id": "ffa3eecb-c428-4a9e-87b2-63ee3ff2e154",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "701b7a31-3cd7-418c-927e-407738b7022c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ae5af99-fa59-46a7-87cb-54c60d228547",
        "cursor": {
          "ref": "1597499b-daf4-4d68-9937-116596011134",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "da188180-93c8-45e0-acfd-b9e234ab8fec"
        },
        "item": {
          "id": "0ae5af99-fa59-46a7-87cb-54c60d228547",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "8c19dc0e-3155-4263-8c1f-fd46cb597dd9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ae5af99-fa59-46a7-87cb-54c60d228547",
        "cursor": {
          "ref": "1597499b-daf4-4d68-9937-116596011134",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "da188180-93c8-45e0-acfd-b9e234ab8fec"
        },
        "item": {
          "id": "0ae5af99-fa59-46a7-87cb-54c60d228547",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "8c19dc0e-3155-4263-8c1f-fd46cb597dd9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f2347f1-d119-4fe0-8fd7-2cca176351d2",
        "cursor": {
          "ref": "9e73d17c-b986-4e57-9cb2-88cb9e75ed3b",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "d4460f1d-ef47-49da-af38-1d4bfcea0905"
        },
        "item": {
          "id": "6f2347f1-d119-4fe0-8fd7-2cca176351d2",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "5816f047-e005-4700-908c-dccc2dbe799b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f2347f1-d119-4fe0-8fd7-2cca176351d2",
        "cursor": {
          "ref": "9e73d17c-b986-4e57-9cb2-88cb9e75ed3b",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "d4460f1d-ef47-49da-af38-1d4bfcea0905"
        },
        "item": {
          "id": "6f2347f1-d119-4fe0-8fd7-2cca176351d2",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "5816f047-e005-4700-908c-dccc2dbe799b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ca07541-4894-480b-86dd-cd63080755e2",
        "cursor": {
          "ref": "0433879e-cdc8-4ef3-b790-31f6500ae76b",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "b3e065cc-9d50-4339-a12d-34055a05d8e4"
        },
        "item": {
          "id": "6ca07541-4894-480b-86dd-cd63080755e2",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "16263c0e-e718-4733-b2bc-14ba98f55bfb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ca07541-4894-480b-86dd-cd63080755e2",
        "cursor": {
          "ref": "0433879e-cdc8-4ef3-b790-31f6500ae76b",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "b3e065cc-9d50-4339-a12d-34055a05d8e4"
        },
        "item": {
          "id": "6ca07541-4894-480b-86dd-cd63080755e2",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "16263c0e-e718-4733-b2bc-14ba98f55bfb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98ca2aac-c4a1-4f61-9dd3-20899e73edf0",
        "cursor": {
          "ref": "918aece4-2e7f-47ee-a784-bfb414e55e7a",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "edd092fe-8076-46a6-995f-c671d8bab495"
        },
        "item": {
          "id": "98ca2aac-c4a1-4f61-9dd3-20899e73edf0",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "59a7999b-da48-4550-a20e-9355fdbf9883",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98ca2aac-c4a1-4f61-9dd3-20899e73edf0",
        "cursor": {
          "ref": "918aece4-2e7f-47ee-a784-bfb414e55e7a",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "edd092fe-8076-46a6-995f-c671d8bab495"
        },
        "item": {
          "id": "98ca2aac-c4a1-4f61-9dd3-20899e73edf0",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "59a7999b-da48-4550-a20e-9355fdbf9883",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ffc1e06-74e7-47e5-9906-0b29263b44a6",
        "cursor": {
          "ref": "9991b684-8a83-40f8-be24-14fa6dff9334",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "1b2b118d-7395-4887-bea8-8f92de75bfdf"
        },
        "item": {
          "id": "2ffc1e06-74e7-47e5-9906-0b29263b44a6",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "b63d8345-a8a1-4aa1-aa53-72f17cf70b9a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ffc1e06-74e7-47e5-9906-0b29263b44a6",
        "cursor": {
          "ref": "9991b684-8a83-40f8-be24-14fa6dff9334",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "1b2b118d-7395-4887-bea8-8f92de75bfdf"
        },
        "item": {
          "id": "2ffc1e06-74e7-47e5-9906-0b29263b44a6",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "b63d8345-a8a1-4aa1-aa53-72f17cf70b9a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14ee7c03-fa7b-412c-98c0-97ead0c805c9",
        "cursor": {
          "ref": "e8bf233e-228f-4141-ab7a-47c5b8b78a68",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "5258ad8d-1940-47e8-8ada-ca9ff1303c8d"
        },
        "item": {
          "id": "14ee7c03-fa7b-412c-98c0-97ead0c805c9",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "7f4b9683-ed2b-45fd-980f-ca0366facf6e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14ee7c03-fa7b-412c-98c0-97ead0c805c9",
        "cursor": {
          "ref": "e8bf233e-228f-4141-ab7a-47c5b8b78a68",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "5258ad8d-1940-47e8-8ada-ca9ff1303c8d"
        },
        "item": {
          "id": "14ee7c03-fa7b-412c-98c0-97ead0c805c9",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "7f4b9683-ed2b-45fd-980f-ca0366facf6e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dbccce3-a678-4814-b8d8-be6cae9bfebc",
        "cursor": {
          "ref": "2209bb55-de09-477a-a467-d500c7c05e5e",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "9aeca61f-ba3e-445c-b20d-898102c3c0db"
        },
        "item": {
          "id": "1dbccce3-a678-4814-b8d8-be6cae9bfebc",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "80bf13ed-1e98-4183-ba54-e32a00aa0c2c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dbccce3-a678-4814-b8d8-be6cae9bfebc",
        "cursor": {
          "ref": "2209bb55-de09-477a-a467-d500c7c05e5e",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "9aeca61f-ba3e-445c-b20d-898102c3c0db"
        },
        "item": {
          "id": "1dbccce3-a678-4814-b8d8-be6cae9bfebc",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "80bf13ed-1e98-4183-ba54-e32a00aa0c2c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d48288e5-04e1-409a-aa72-7d8d493402ae",
        "cursor": {
          "ref": "5e06491e-09d8-469e-bfc4-3cadbb5adcdb",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "1c18a3ae-410e-434f-9341-b21362f200e0"
        },
        "item": {
          "id": "d48288e5-04e1-409a-aa72-7d8d493402ae",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "3be55995-bbe8-47d1-ab73-0538f13a255d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d48288e5-04e1-409a-aa72-7d8d493402ae",
        "cursor": {
          "ref": "5e06491e-09d8-469e-bfc4-3cadbb5adcdb",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "1c18a3ae-410e-434f-9341-b21362f200e0"
        },
        "item": {
          "id": "d48288e5-04e1-409a-aa72-7d8d493402ae",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "3be55995-bbe8-47d1-ab73-0538f13a255d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd7243a1-2856-4a1e-9596-649d8620c34a",
        "cursor": {
          "ref": "a954c598-bcb0-43cc-b822-f810d2b83542",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "3fc34b5d-6275-4692-9282-013a915e9406"
        },
        "item": {
          "id": "fd7243a1-2856-4a1e-9596-649d8620c34a",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "7f0ffb2b-3bc8-43f4-9997-2da0f84e27ba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd7243a1-2856-4a1e-9596-649d8620c34a",
        "cursor": {
          "ref": "a954c598-bcb0-43cc-b822-f810d2b83542",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "3fc34b5d-6275-4692-9282-013a915e9406"
        },
        "item": {
          "id": "fd7243a1-2856-4a1e-9596-649d8620c34a",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "7f0ffb2b-3bc8-43f4-9997-2da0f84e27ba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "215f4cb5-c889-4cd4-a45f-f4b5df4a523d",
        "cursor": {
          "ref": "a5e0b784-4351-4513-b9be-37e1fbc1418d",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "cd3bf66d-38c3-4497-be0d-80a9c7a806af"
        },
        "item": {
          "id": "215f4cb5-c889-4cd4-a45f-f4b5df4a523d",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "970c3654-6ffa-4584-819e-94dba1e3d79d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "215f4cb5-c889-4cd4-a45f-f4b5df4a523d",
        "cursor": {
          "ref": "a5e0b784-4351-4513-b9be-37e1fbc1418d",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "cd3bf66d-38c3-4497-be0d-80a9c7a806af"
        },
        "item": {
          "id": "215f4cb5-c889-4cd4-a45f-f4b5df4a523d",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "970c3654-6ffa-4584-819e-94dba1e3d79d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "554c3567-9087-4c9f-a3f0-1f3a5d1c6dc5",
        "cursor": {
          "ref": "61a9ca8a-2351-4ba1-b45c-bfe69447e21c",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "efac8065-66b1-4e19-bf2a-1b00f0376f9f"
        },
        "item": {
          "id": "554c3567-9087-4c9f-a3f0-1f3a5d1c6dc5",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "11cb550d-8a61-46ed-b47c-a3ede90b9766",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "554c3567-9087-4c9f-a3f0-1f3a5d1c6dc5",
        "cursor": {
          "ref": "61a9ca8a-2351-4ba1-b45c-bfe69447e21c",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "efac8065-66b1-4e19-bf2a-1b00f0376f9f"
        },
        "item": {
          "id": "554c3567-9087-4c9f-a3f0-1f3a5d1c6dc5",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "11cb550d-8a61-46ed-b47c-a3ede90b9766",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20f48eb4-096a-4507-bbaf-0ce8c0e68c53",
        "cursor": {
          "ref": "6cb6fd83-31aa-463b-b83d-ec2ba5347bcd",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "f827d0f5-9a25-4ca2-8077-7578e07508fb"
        },
        "item": {
          "id": "20f48eb4-096a-4507-bbaf-0ce8c0e68c53",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "d684faa4-8861-4c6f-aaeb-a33d9ad10f83",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20f48eb4-096a-4507-bbaf-0ce8c0e68c53",
        "cursor": {
          "ref": "6cb6fd83-31aa-463b-b83d-ec2ba5347bcd",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "f827d0f5-9a25-4ca2-8077-7578e07508fb"
        },
        "item": {
          "id": "20f48eb4-096a-4507-bbaf-0ce8c0e68c53",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "d684faa4-8861-4c6f-aaeb-a33d9ad10f83",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a78fe8c-7922-4cc5-8dba-c9cebe6817c5",
        "cursor": {
          "ref": "14b912de-1979-4e27-882b-f5d7605247c3",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "bc2a49fd-3f67-44c6-bf8f-f128a1e77e28"
        },
        "item": {
          "id": "0a78fe8c-7922-4cc5-8dba-c9cebe6817c5",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "9da9a783-8f01-4cbd-8b32-05dedb43f2cc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a78fe8c-7922-4cc5-8dba-c9cebe6817c5",
        "cursor": {
          "ref": "14b912de-1979-4e27-882b-f5d7605247c3",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "bc2a49fd-3f67-44c6-bf8f-f128a1e77e28"
        },
        "item": {
          "id": "0a78fe8c-7922-4cc5-8dba-c9cebe6817c5",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "9da9a783-8f01-4cbd-8b32-05dedb43f2cc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4db84c9-43a7-4a0a-804f-d7a5cac50e91",
        "cursor": {
          "ref": "c6ca3823-c2be-44ec-bb74-97b878178c20",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "5210cc6a-aa2f-46f8-a852-75084ed063ff"
        },
        "item": {
          "id": "e4db84c9-43a7-4a0a-804f-d7a5cac50e91",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "384a8f21-d96a-436c-a74c-94e7ca37282f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4db84c9-43a7-4a0a-804f-d7a5cac50e91",
        "cursor": {
          "ref": "c6ca3823-c2be-44ec-bb74-97b878178c20",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "5210cc6a-aa2f-46f8-a852-75084ed063ff"
        },
        "item": {
          "id": "e4db84c9-43a7-4a0a-804f-d7a5cac50e91",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "384a8f21-d96a-436c-a74c-94e7ca37282f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7215dce9-5f8b-43f7-8644-2837cce50d2c",
        "cursor": {
          "ref": "57c6cc32-d658-41e2-a693-875f10558783",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "a9fac507-4d45-41b3-ac9f-93f3129920a8"
        },
        "item": {
          "id": "7215dce9-5f8b-43f7-8644-2837cce50d2c",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "b844384f-b498-4c65-a3e2-910c4ae6c5d3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7215dce9-5f8b-43f7-8644-2837cce50d2c",
        "cursor": {
          "ref": "57c6cc32-d658-41e2-a693-875f10558783",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "a9fac507-4d45-41b3-ac9f-93f3129920a8"
        },
        "item": {
          "id": "7215dce9-5f8b-43f7-8644-2837cce50d2c",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "b844384f-b498-4c65-a3e2-910c4ae6c5d3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "114c550d-21ba-4c2b-b717-93a940847257",
        "cursor": {
          "ref": "98d5dfee-909d-465b-ae44-05c0a9168b3c",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "e50d24e0-5a8f-4271-9376-3a373b29c853"
        },
        "item": {
          "id": "114c550d-21ba-4c2b-b717-93a940847257",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "9c606d8a-3114-40e9-bf69-bf06ca26e6c7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:254)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "114c550d-21ba-4c2b-b717-93a940847257",
        "cursor": {
          "ref": "98d5dfee-909d-465b-ae44-05c0a9168b3c",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "e50d24e0-5a8f-4271-9376-3a373b29c853"
        },
        "item": {
          "id": "114c550d-21ba-4c2b-b717-93a940847257",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "9c606d8a-3114-40e9-bf69-bf06ca26e6c7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:254)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c166f0d9-0f4c-4f57-abfc-5136802e808e",
        "cursor": {
          "ref": "50e9889c-a84f-440f-9e29-d78326ca8ad1",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "71440b86-2776-449a-9169-1eb89e7cf708"
        },
        "item": {
          "id": "c166f0d9-0f4c-4f57-abfc-5136802e808e",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "a070c810-2cba-4eb7-9963-a60e223e4fde",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:255)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c166f0d9-0f4c-4f57-abfc-5136802e808e",
        "cursor": {
          "ref": "50e9889c-a84f-440f-9e29-d78326ca8ad1",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "71440b86-2776-449a-9169-1eb89e7cf708"
        },
        "item": {
          "id": "c166f0d9-0f4c-4f57-abfc-5136802e808e",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "a070c810-2cba-4eb7-9963-a60e223e4fde",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:255)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acbbcf38-5a87-4005-ae7c-00b15592d581",
        "cursor": {
          "ref": "59c2bbbd-bb4d-4180-81ef-73a4957e2a39",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "28dd8bed-ba02-4a57-be9c-aa0457dfc255"
        },
        "item": {
          "id": "acbbcf38-5a87-4005-ae7c-00b15592d581",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "2867a800-14bb-4a36-b58c-8daceb7b039c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:256)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acbbcf38-5a87-4005-ae7c-00b15592d581",
        "cursor": {
          "ref": "59c2bbbd-bb4d-4180-81ef-73a4957e2a39",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "28dd8bed-ba02-4a57-be9c-aa0457dfc255"
        },
        "item": {
          "id": "acbbcf38-5a87-4005-ae7c-00b15592d581",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "2867a800-14bb-4a36-b58c-8daceb7b039c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:256)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18994398-cabc-4b2e-97e8-a5494321c596",
        "cursor": {
          "ref": "cf3115a5-7481-48d4-b725-2ab720030b9b",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "1d714776-894b-4152-a575-719d940daffc"
        },
        "item": {
          "id": "18994398-cabc-4b2e-97e8-a5494321c596",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "fc4cfb44-df2a-4b1e-b936-15275594b7c9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:257)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18994398-cabc-4b2e-97e8-a5494321c596",
        "cursor": {
          "ref": "cf3115a5-7481-48d4-b725-2ab720030b9b",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "1d714776-894b-4152-a575-719d940daffc"
        },
        "item": {
          "id": "18994398-cabc-4b2e-97e8-a5494321c596",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "fc4cfb44-df2a-4b1e-b936-15275594b7c9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:257)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f7f61f8-f1cd-4db3-b053-98d2816ce674",
        "cursor": {
          "ref": "aee167e9-7d1e-4289-aea8-212d0917d175",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "141c0315-f217-4441-a14b-2edb66095439"
        },
        "item": {
          "id": "6f7f61f8-f1cd-4db3-b053-98d2816ce674",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "b6397647-6b86-46d6-8887-09e5c925a94d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:258)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f7f61f8-f1cd-4db3-b053-98d2816ce674",
        "cursor": {
          "ref": "aee167e9-7d1e-4289-aea8-212d0917d175",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "141c0315-f217-4441-a14b-2edb66095439"
        },
        "item": {
          "id": "6f7f61f8-f1cd-4db3-b053-98d2816ce674",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "b6397647-6b86-46d6-8887-09e5c925a94d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:258)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7399007d-73d9-4b14-8bac-a886025a955f",
        "cursor": {
          "ref": "cfd75361-1ae2-4817-b45a-6dc21cfe565f",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "067c037b-5025-4519-9101-7e2ccad7846d"
        },
        "item": {
          "id": "7399007d-73d9-4b14-8bac-a886025a955f",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "3b5f633e-bc16-4264-9463-412e948b171e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:259)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7399007d-73d9-4b14-8bac-a886025a955f",
        "cursor": {
          "ref": "cfd75361-1ae2-4817-b45a-6dc21cfe565f",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "067c037b-5025-4519-9101-7e2ccad7846d"
        },
        "item": {
          "id": "7399007d-73d9-4b14-8bac-a886025a955f",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "3b5f633e-bc16-4264-9463-412e948b171e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:259)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "080d1838-b38f-4262-95d3-af9ed5cac65a",
        "cursor": {
          "ref": "35076b77-4aca-4d1b-b009-ba10f7b6026d",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "5cbef1a2-7814-4d19-a140-efa7e6c3706b"
        },
        "item": {
          "id": "080d1838-b38f-4262-95d3-af9ed5cac65a",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "b2d06c00-d000-4848-8703-ac0c52b4afda",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:260)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "080d1838-b38f-4262-95d3-af9ed5cac65a",
        "cursor": {
          "ref": "35076b77-4aca-4d1b-b009-ba10f7b6026d",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "5cbef1a2-7814-4d19-a140-efa7e6c3706b"
        },
        "item": {
          "id": "080d1838-b38f-4262-95d3-af9ed5cac65a",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "b2d06c00-d000-4848-8703-ac0c52b4afda",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:260)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "775562fa-ed30-4997-b9ef-6e57b5c8d672",
        "cursor": {
          "ref": "30e04acd-c656-4958-9242-06b2cb33fa29",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "0eaf01f9-d8b6-4c17-81f6-69cb69d25df9"
        },
        "item": {
          "id": "775562fa-ed30-4997-b9ef-6e57b5c8d672",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "c8de3fe5-bb2f-4cd1-b9fd-534fc2c7ada7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:261)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "775562fa-ed30-4997-b9ef-6e57b5c8d672",
        "cursor": {
          "ref": "30e04acd-c656-4958-9242-06b2cb33fa29",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "0eaf01f9-d8b6-4c17-81f6-69cb69d25df9"
        },
        "item": {
          "id": "775562fa-ed30-4997-b9ef-6e57b5c8d672",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "c8de3fe5-bb2f-4cd1-b9fd-534fc2c7ada7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:261)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a1b3024-28c7-41b3-8ea6-7b325f26d24f",
        "cursor": {
          "ref": "5f32c3af-f1a2-4df3-9819-7589aa31de12",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "559d7771-30a5-492f-9ced-e43174b165e5"
        },
        "item": {
          "id": "2a1b3024-28c7-41b3-8ea6-7b325f26d24f",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "39ff5614-74da-4f69-b2b6-b8fa57e12419",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:262)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a1b3024-28c7-41b3-8ea6-7b325f26d24f",
        "cursor": {
          "ref": "5f32c3af-f1a2-4df3-9819-7589aa31de12",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "559d7771-30a5-492f-9ced-e43174b165e5"
        },
        "item": {
          "id": "2a1b3024-28c7-41b3-8ea6-7b325f26d24f",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "39ff5614-74da-4f69-b2b6-b8fa57e12419",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:262)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8695c5f5-2966-4d88-b873-34c85c3afe54",
        "cursor": {
          "ref": "9528b67f-bd0f-44ac-a0a6-df1c3639fdda",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "cae25a8b-0a92-46a9-8dc7-7cad5bccf0b3"
        },
        "item": {
          "id": "8695c5f5-2966-4d88-b873-34c85c3afe54",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "75a26d52-d29c-4552-92d3-1d7620ef4cda",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8695c5f5-2966-4d88-b873-34c85c3afe54",
        "cursor": {
          "ref": "9528b67f-bd0f-44ac-a0a6-df1c3639fdda",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "cae25a8b-0a92-46a9-8dc7-7cad5bccf0b3"
        },
        "item": {
          "id": "8695c5f5-2966-4d88-b873-34c85c3afe54",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "75a26d52-d29c-4552-92d3-1d7620ef4cda",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d3c83a9-bfb7-4eeb-a99a-cefe512152ac",
        "cursor": {
          "ref": "148d10a0-abba-4c2a-9867-1047e6a65076",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "046bba75-60e9-4f18-add8-c1f898e79160"
        },
        "item": {
          "id": "5d3c83a9-bfb7-4eeb-a99a-cefe512152ac",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "c647625f-ae90-418f-8748-0cf5241ad01d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:264)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d3c83a9-bfb7-4eeb-a99a-cefe512152ac",
        "cursor": {
          "ref": "148d10a0-abba-4c2a-9867-1047e6a65076",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "046bba75-60e9-4f18-add8-c1f898e79160"
        },
        "item": {
          "id": "5d3c83a9-bfb7-4eeb-a99a-cefe512152ac",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "c647625f-ae90-418f-8748-0cf5241ad01d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:264)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a941504-c0c3-4c20-b473-87abc07303e7",
        "cursor": {
          "ref": "25b1a4b3-ebc5-4f36-999b-5f4115b8877d",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "a239b4e1-41db-4287-9e3d-f043b3e49644"
        },
        "item": {
          "id": "5a941504-c0c3-4c20-b473-87abc07303e7",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "aa7ea209-b30a-4fce-a752-7020e6168d50",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a941504-c0c3-4c20-b473-87abc07303e7",
        "cursor": {
          "ref": "25b1a4b3-ebc5-4f36-999b-5f4115b8877d",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "a239b4e1-41db-4287-9e3d-f043b3e49644"
        },
        "item": {
          "id": "5a941504-c0c3-4c20-b473-87abc07303e7",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "aa7ea209-b30a-4fce-a752-7020e6168d50",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcced248-3c45-48d9-9571-d33c30685a9f",
        "cursor": {
          "ref": "a7ab99a4-4928-44be-8d61-06fa1bef39aa",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "f94f0152-8b24-4f3d-ad02-561d6356da8d"
        },
        "item": {
          "id": "dcced248-3c45-48d9-9571-d33c30685a9f",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "cbf48eca-5f35-49cf-8ced-b5ad5b5f420c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcced248-3c45-48d9-9571-d33c30685a9f",
        "cursor": {
          "ref": "a7ab99a4-4928-44be-8d61-06fa1bef39aa",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "f94f0152-8b24-4f3d-ad02-561d6356da8d"
        },
        "item": {
          "id": "dcced248-3c45-48d9-9571-d33c30685a9f",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "cbf48eca-5f35-49cf-8ced-b5ad5b5f420c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be3b9f22-aa69-4301-bd6a-ac3691611d60",
        "cursor": {
          "ref": "1bf263fa-3ede-4363-9290-838c227ac08f",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "0395cf78-fb94-4007-8741-6cd25e96e445"
        },
        "item": {
          "id": "be3b9f22-aa69-4301-bd6a-ac3691611d60",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "e9ff6ad5-936d-4581-8d0b-2ee6a0310a45",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be3b9f22-aa69-4301-bd6a-ac3691611d60",
        "cursor": {
          "ref": "1bf263fa-3ede-4363-9290-838c227ac08f",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "0395cf78-fb94-4007-8741-6cd25e96e445"
        },
        "item": {
          "id": "be3b9f22-aa69-4301-bd6a-ac3691611d60",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "e9ff6ad5-936d-4581-8d0b-2ee6a0310a45",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "295b17b1-b861-473b-b024-8eaeb6e61bdc",
        "cursor": {
          "ref": "e390bc2b-b4ec-4e0d-891f-fceda124ea2d",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "3feac67d-0173-471e-a809-493b779b407d"
        },
        "item": {
          "id": "295b17b1-b861-473b-b024-8eaeb6e61bdc",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "12bbac4a-e4d2-4794-9bc6-72f5421f9c77",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "295b17b1-b861-473b-b024-8eaeb6e61bdc",
        "cursor": {
          "ref": "e390bc2b-b4ec-4e0d-891f-fceda124ea2d",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "3feac67d-0173-471e-a809-493b779b407d"
        },
        "item": {
          "id": "295b17b1-b861-473b-b024-8eaeb6e61bdc",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "12bbac4a-e4d2-4794-9bc6-72f5421f9c77",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8acc34c7-b4d3-446a-8603-ee5fadde3587",
        "cursor": {
          "ref": "db40a667-79af-49ec-b7b1-68d1fad64c67",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "29f2fd8c-bfa7-4b86-b1b7-c0f01b802761"
        },
        "item": {
          "id": "8acc34c7-b4d3-446a-8603-ee5fadde3587",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "ff3d7be8-91ce-4746-8f1d-741f0965d51a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8acc34c7-b4d3-446a-8603-ee5fadde3587",
        "cursor": {
          "ref": "db40a667-79af-49ec-b7b1-68d1fad64c67",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "29f2fd8c-bfa7-4b86-b1b7-c0f01b802761"
        },
        "item": {
          "id": "8acc34c7-b4d3-446a-8603-ee5fadde3587",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "ff3d7be8-91ce-4746-8f1d-741f0965d51a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42f6d24b-81e7-4c05-962c-992f98fbe558",
        "cursor": {
          "ref": "83b4bbd4-4810-4e0f-b237-b6ea596685ce",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "399376e9-c523-47e3-bab3-6921ce253704"
        },
        "item": {
          "id": "42f6d24b-81e7-4c05-962c-992f98fbe558",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "a36b6471-996a-4a37-b518-321e3bbf0daf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:270)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42f6d24b-81e7-4c05-962c-992f98fbe558",
        "cursor": {
          "ref": "83b4bbd4-4810-4e0f-b237-b6ea596685ce",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "399376e9-c523-47e3-bab3-6921ce253704"
        },
        "item": {
          "id": "42f6d24b-81e7-4c05-962c-992f98fbe558",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "a36b6471-996a-4a37-b518-321e3bbf0daf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:270)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdf6e7f3-8b74-42f6-aca2-044d96e19afa",
        "cursor": {
          "ref": "b9fc1fce-90c2-41f9-8b6e-3d934467c2cc",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "3f719667-988b-480a-b86d-e9b9dc39f562"
        },
        "item": {
          "id": "fdf6e7f3-8b74-42f6-aca2-044d96e19afa",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "7ef766f9-11e2-45aa-b1fd-b6c7dde19e63",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:271)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdf6e7f3-8b74-42f6-aca2-044d96e19afa",
        "cursor": {
          "ref": "b9fc1fce-90c2-41f9-8b6e-3d934467c2cc",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "3f719667-988b-480a-b86d-e9b9dc39f562"
        },
        "item": {
          "id": "fdf6e7f3-8b74-42f6-aca2-044d96e19afa",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "7ef766f9-11e2-45aa-b1fd-b6c7dde19e63",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:271)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dedcb4dd-abd6-4708-93b2-a9bb996aa43e",
        "cursor": {
          "ref": "1e3b256b-fb39-463b-aab2-910dfbaca257",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "a22c7263-c374-4cab-acf9-fdf705beb3be"
        },
        "item": {
          "id": "dedcb4dd-abd6-4708-93b2-a9bb996aa43e",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "80463f29-53a9-4ba5-a3df-e8990f5f9fc0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:272)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dedcb4dd-abd6-4708-93b2-a9bb996aa43e",
        "cursor": {
          "ref": "1e3b256b-fb39-463b-aab2-910dfbaca257",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "a22c7263-c374-4cab-acf9-fdf705beb3be"
        },
        "item": {
          "id": "dedcb4dd-abd6-4708-93b2-a9bb996aa43e",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "80463f29-53a9-4ba5-a3df-e8990f5f9fc0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:272)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0f5df73-2ff8-4d1a-8338-8b3f0993e8aa",
        "cursor": {
          "ref": "0266cc76-a001-4ce9-8c80-7c1a0ac630bd",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "1eacb6ed-8fd1-418c-ac65-1df2846c5901"
        },
        "item": {
          "id": "e0f5df73-2ff8-4d1a-8338-8b3f0993e8aa",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "b94ecd24-f123-409d-ab91-e3a960d3dcf0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:273)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0f5df73-2ff8-4d1a-8338-8b3f0993e8aa",
        "cursor": {
          "ref": "0266cc76-a001-4ce9-8c80-7c1a0ac630bd",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "1eacb6ed-8fd1-418c-ac65-1df2846c5901"
        },
        "item": {
          "id": "e0f5df73-2ff8-4d1a-8338-8b3f0993e8aa",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "b94ecd24-f123-409d-ab91-e3a960d3dcf0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:273)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0f924ee-5703-4f3a-96e8-37112b9f1ef4",
        "cursor": {
          "ref": "89af0779-8068-4741-a8e2-f2b83b060a19",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "20fff389-17f7-469e-8d0e-18debcded34f"
        },
        "item": {
          "id": "d0f924ee-5703-4f3a-96e8-37112b9f1ef4",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "d9c6000c-42cf-44a2-ab9b-8f1491649775",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:274)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0f924ee-5703-4f3a-96e8-37112b9f1ef4",
        "cursor": {
          "ref": "89af0779-8068-4741-a8e2-f2b83b060a19",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "20fff389-17f7-469e-8d0e-18debcded34f"
        },
        "item": {
          "id": "d0f924ee-5703-4f3a-96e8-37112b9f1ef4",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "d9c6000c-42cf-44a2-ab9b-8f1491649775",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:274)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8bab214-b8ed-4ea1-b655-7f3b874f3e30",
        "cursor": {
          "ref": "ebc1c1ec-37f8-46d6-8195-f1d1d5debcee",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "6f9824e2-06e8-46ce-a1a7-3a325462de91"
        },
        "item": {
          "id": "f8bab214-b8ed-4ea1-b655-7f3b874f3e30",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "03320e1f-1d7b-41fd-9d1c-cae820cc7bf7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:275)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8bab214-b8ed-4ea1-b655-7f3b874f3e30",
        "cursor": {
          "ref": "ebc1c1ec-37f8-46d6-8195-f1d1d5debcee",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "6f9824e2-06e8-46ce-a1a7-3a325462de91"
        },
        "item": {
          "id": "f8bab214-b8ed-4ea1-b655-7f3b874f3e30",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "03320e1f-1d7b-41fd-9d1c-cae820cc7bf7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:275)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f4c1747-2286-4e20-a396-abe1b3bb4aca",
        "cursor": {
          "ref": "0e2db38d-9068-45b0-82d4-dcb042808107",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "ec35621d-8cb8-45fd-9714-151f277525b3"
        },
        "item": {
          "id": "0f4c1747-2286-4e20-a396-abe1b3bb4aca",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "de6795c5-b8cf-4ff5-858c-a0078e0261f4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:276)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f4c1747-2286-4e20-a396-abe1b3bb4aca",
        "cursor": {
          "ref": "0e2db38d-9068-45b0-82d4-dcb042808107",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "ec35621d-8cb8-45fd-9714-151f277525b3"
        },
        "item": {
          "id": "0f4c1747-2286-4e20-a396-abe1b3bb4aca",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "de6795c5-b8cf-4ff5-858c-a0078e0261f4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:276)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5c01a62-7a87-409e-bc59-29cfacbc984c",
        "cursor": {
          "ref": "aefafb7e-a923-446d-87b4-cc63b9ba0935",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "9c393d77-9ded-4a2d-93f0-e20ba4a620c4"
        },
        "item": {
          "id": "b5c01a62-7a87-409e-bc59-29cfacbc984c",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "f08dd526-3730-402c-a6af-e70e49d71bda",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5c01a62-7a87-409e-bc59-29cfacbc984c",
        "cursor": {
          "ref": "aefafb7e-a923-446d-87b4-cc63b9ba0935",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "9c393d77-9ded-4a2d-93f0-e20ba4a620c4"
        },
        "item": {
          "id": "b5c01a62-7a87-409e-bc59-29cfacbc984c",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "f08dd526-3730-402c-a6af-e70e49d71bda",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe36ed0c-332c-48cb-84ef-5fffbcd918da",
        "cursor": {
          "ref": "3f139cda-36c9-4977-b5ae-89ae4fda3743",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "58c00da0-1bb1-4e64-b394-2710369f6482"
        },
        "item": {
          "id": "fe36ed0c-332c-48cb-84ef-5fffbcd918da",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "3e2ce48a-c53a-4b48-b638-3a920519617e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "fe36ed0c-332c-48cb-84ef-5fffbcd918da",
        "cursor": {
          "ref": "3f139cda-36c9-4977-b5ae-89ae4fda3743",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "58c00da0-1bb1-4e64-b394-2710369f6482"
        },
        "item": {
          "id": "fe36ed0c-332c-48cb-84ef-5fffbcd918da",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "3e2ce48a-c53a-4b48-b638-3a920519617e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "ac813e0e-8a0f-4c95-87d3-b96459dfaf2c",
        "cursor": {
          "ref": "3f698d8d-674f-4f12-9597-f07a8d294324",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "cfdecae9-2e7a-4100-a03b-0d19fdf78afd"
        },
        "item": {
          "id": "ac813e0e-8a0f-4c95-87d3-b96459dfaf2c",
          "name": "credentials_verify"
        },
        "response": {
          "id": "797f1bcd-3af5-4afd-8563-270bd4b0c939",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "ac813e0e-8a0f-4c95-87d3-b96459dfaf2c",
        "cursor": {
          "ref": "3f698d8d-674f-4f12-9597-f07a8d294324",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "cfdecae9-2e7a-4100-a03b-0d19fdf78afd"
        },
        "item": {
          "id": "ac813e0e-8a0f-4c95-87d3-b96459dfaf2c",
          "name": "credentials_verify"
        },
        "response": {
          "id": "797f1bcd-3af5-4afd-8563-270bd4b0c939",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "544aa2a1-8445-4334-8f9f-8c3c33889b53",
        "cursor": {
          "ref": "c6c68cd2-0105-4b49-abf0-5c1dd684454e",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "c59f63fd-f44e-42b6-8257-88aee8c71262"
        },
        "item": {
          "id": "544aa2a1-8445-4334-8f9f-8c3c33889b53",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "9c24eebe-c4f1-4e36-8b67-75a190e8771d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:280)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:280)"
            }
          }
        ]
      },
      {
        "id": "544aa2a1-8445-4334-8f9f-8c3c33889b53",
        "cursor": {
          "ref": "c6c68cd2-0105-4b49-abf0-5c1dd684454e",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "c59f63fd-f44e-42b6-8257-88aee8c71262"
        },
        "item": {
          "id": "544aa2a1-8445-4334-8f9f-8c3c33889b53",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "9c24eebe-c4f1-4e36-8b67-75a190e8771d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:280)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:280)"
            }
          }
        ]
      },
      {
        "id": "2a73feae-5cc4-479b-8de4-cf9fcb3e8cf6",
        "cursor": {
          "ref": "b6b8e3e7-27ff-425d-a55c-0cc0bda68d5c",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "54f61e77-7ee4-4ce1-a05e-a23719dccebf"
        },
        "item": {
          "id": "2a73feae-5cc4-479b-8de4-cf9fcb3e8cf6",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "4dc4a47f-2d0d-4d09-8cbc-c94360f3021a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a73feae-5cc4-479b-8de4-cf9fcb3e8cf6",
        "cursor": {
          "ref": "b6b8e3e7-27ff-425d-a55c-0cc0bda68d5c",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "54f61e77-7ee4-4ce1-a05e-a23719dccebf"
        },
        "item": {
          "id": "2a73feae-5cc4-479b-8de4-cf9fcb3e8cf6",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "4dc4a47f-2d0d-4d09-8cbc-c94360f3021a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a73feae-5cc4-479b-8de4-cf9fcb3e8cf6",
        "cursor": {
          "ref": "b6b8e3e7-27ff-425d-a55c-0cc0bda68d5c",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "54f61e77-7ee4-4ce1-a05e-a23719dccebf"
        },
        "item": {
          "id": "2a73feae-5cc4-479b-8de4-cf9fcb3e8cf6",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "4dc4a47f-2d0d-4d09-8cbc-c94360f3021a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "229f54c4-8910-40af-90d2-8ed684e6bcf4",
        "cursor": {
          "ref": "decf3bb1-28ea-4327-b3c6-e589ea579d87",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "44e6dec6-ff65-40bd-b0a2-5f56c3a5e740"
        },
        "item": {
          "id": "229f54c4-8910-40af-90d2-8ed684e6bcf4",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "0ad7fcca-3b69-4ecb-b3c7-b7b27cf7fef0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "229f54c4-8910-40af-90d2-8ed684e6bcf4",
        "cursor": {
          "ref": "decf3bb1-28ea-4327-b3c6-e589ea579d87",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "44e6dec6-ff65-40bd-b0a2-5f56c3a5e740"
        },
        "item": {
          "id": "229f54c4-8910-40af-90d2-8ed684e6bcf4",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "0ad7fcca-3b69-4ecb-b3c7-b7b27cf7fef0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b280d1f9-28e4-42d7-8c26-dc18680aff19",
        "cursor": {
          "ref": "eaafacca-e2d3-4c1f-bbbb-28ae7d0d5eec",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "617c459d-d3ad-4528-87ee-ea95dcf6906c"
        },
        "item": {
          "id": "b280d1f9-28e4-42d7-8c26-dc18680aff19",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "244549cf-849d-4985-af4c-2712b3e17d4f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b280d1f9-28e4-42d7-8c26-dc18680aff19",
        "cursor": {
          "ref": "eaafacca-e2d3-4c1f-bbbb-28ae7d0d5eec",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "617c459d-d3ad-4528-87ee-ea95dcf6906c"
        },
        "item": {
          "id": "b280d1f9-28e4-42d7-8c26-dc18680aff19",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "244549cf-849d-4985-af4c-2712b3e17d4f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}