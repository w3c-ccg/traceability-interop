{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "41d3d85f-7617-458f-9b20-a158f87445b0",
        "name": "Clear Cache",
        "item": [
          {
            "id": "d4d76c1c-cf74-484e-a153-aebf0b914186",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4ce1c167-cf3c-46f8-a2ca-c9fc113aad40",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "140f95a6-0957-4172-a178-ff553303a8eb"
                }
              }
            ]
          },
          {
            "id": "acca235f-8bc5-43dc-bdd9-d4e8ad16cf59",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5deddd60-5a03-45be-b3ef-3a9b93619f55",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "c878713b-566f-4bcb-b173-02aee50e48b3"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "e0f2c211-3dc9-45e8-899f-75000297c759",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "e28b102b-ad40-47d4-ba47-2364b8024973",
            "name": "Positive Testing",
            "item": [
              {
                "id": "31694942-8049-40d7-a5da-18c8decf9a3e",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2e1ed23f-bf28-418c-b4a2-bb748db28132",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1e58abc4-267c-4415-9ec9-b05bd337fa03"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1dfa53ff-a592-4f98-af81-6cddb28c89b0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d89844e5-426e-4cc4-98a1-a74cb467e84e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9f4e4ea4-94ee-4ac0-9bec-8b94a225aa78",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a4f002ec-eaf5-4bce-881f-040638e37de0"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d566d09f-a018-4a4a-88d9-edee6e1a2dd3",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "4cf70836-8c0b-4423-99d4-fa6cc9ee5c0e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d17e3675-bdff-4ebe-b53b-6c2eb1a2d313",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7eaf0e54-37d6-40cf-9c43-54de9dfd7a94"
            }
          }
        ]
      },
      {
        "id": "1c6c289f-1bba-43ce-8dea-4dc9e9c42440",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "2442fc22-13a6-47ad-948e-9ed0285dd4cf",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b22ff7de-d552-4fa6-b97a-2afa3d60fce2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6ceba59a-97d6-45b8-898e-42d194520f3d",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f3c8e7d-7c8b-475f-bfe0-15b2046386ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b7fb6d21-5e5b-4df5-bd6a-612819afeb07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b385580b-d3aa-4bfa-918b-1230022efd72",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb6e9a28-2a43-4406-976c-7981c33facac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "651acdb5-6e29-4095-992f-c428dfd81113"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac29aec4-fd9e-4c67-b844-580284f14ced",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12b52ee5-02a5-4f97-a459-9c149e1e746f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "828245b5-3123-4a10-819d-c6e44348cbde"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5284a4a0-bfb3-43a3-8226-6a472c3b9f0c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "db5ba54f-d281-4121-8a83-943d71fa266b",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc30fbba-a2f4-45fa-b6f0-17587f131abd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "30e9204e-7049-42a4-b99a-fc63a4208b29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db80f6f2-1333-4c68-893b-33ee572372b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3e5d5ee-8978-48dc-81f8-7914a104f9b4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "57b43baa-9fe4-4f92-9e92-af0e78459900",
            "name": "Positive Testing",
            "item": [
              {
                "id": "96e5ce33-65cb-4837-b734-44b79deac14e",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7abcbd81-054a-4977-9528-69d6a6bb3c7a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "eed7ada7-5b80-4130-bd99-4d31f1c5d6c4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "61bb7b5b-e595-4259-a6fb-3ca82f65fb33",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "4e3442d9-64f9-4ad3-ad9f-03985497998e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2d1d13df-9ec7-4176-8417-93013b1bb0e5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "015c2bf8-17c4-4055-94eb-637cc581b4c4"
            }
          }
        ]
      },
      {
        "id": "57713e29-a0b7-4d66-b0ef-c931a13540d2",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "b3fba664-b0a1-40b2-bce6-6825e1740b4c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e65de908-d314-49f7-a54e-b083c8f41b05",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "ea10b7f5-6eca-44aa-bb4a-35ffd76af3b5",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d141b0d8-0f56-4bf8-87b7-f6d41440de94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b51e95f-11f2-4334-9ea6-3b83a6688538"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b812ef5-fe8c-4a4b-8fcc-f8b13f85bf60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "422cd7ab-26ed-40ae-b5ae-58425083bc06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17a6188f-4f57-49f5-a4e0-6b47420a01cf",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2669ac32-5c89-469f-b107-939976b39a71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07978872-b7a1-4c5f-b9d2-b5951b0e3828"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b6f9ceb-95e8-4cdf-81ba-f2a9e372c999",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0e505468-b592-43da-a95f-d836ffd381ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f14e9263-19ac-4343-8786-c83f81e6e204",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36aff402-2a59-4e78-a92a-987110932d2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "553dbd97-a9b6-4d4b-a0c9-4f3007e0a060"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28e7bbb9-c0bf-4b31-8b0c-1a750d193ad2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f0523990-6e64-4099-a081-253b001d8df5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb346719-f532-429a-a435-cd7d5f806f62",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23d28aa6-6e3c-41e8-bf28-60cdb06d4055",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "222dfd06-a9b7-4461-bafc-e0a8b4fb3760"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d8f4245-f5e6-4617-84c1-7cfe2a2dedda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "599f54e7-5016-4f8c-ab0f-bbf18989bdf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd8ac5a5-b99b-4af1-ac0b-5a7e4629d8dd",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "506b5af3-c0eb-428d-ab8f-becd47a03da3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1c33a99-1f18-4ce8-a941-3d26e82b47d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3e52dec-f0fd-4604-9c66-20511ad71562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b6fd8838-6653-4863-8ace-1df866c9d3c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71b97fbc-1902-4195-a027-e419d16b39c5",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21444a4d-205a-4837-b32f-64b932984cfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19e701d7-cf74-4d25-8bcf-9a0cc4dc019a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc1daefe-94ba-48b5-8ecb-a83e95c96700",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1cc8f782-fe0e-4b61-abee-21ec0bf3f0b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7aa4474-03fe-4e38-b9c9-c7a9836089da",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98022341-7f67-4720-a37f-477817a28bd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53a9e74c-bd7e-4629-a261-6c6ccf802d18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6a18046-7cc6-445c-8d55-973a6057cd09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a422e7ae-ae01-4beb-ab9c-d4985e7b14e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ba93ebf-e0ab-4492-a3ea-915c32767368",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4863da45-1c6e-4762-ba42-4056e90536b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87b7a8c4-befb-4265-bc8a-b56fec5d0b47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9339eb3c-a5b5-4a61-ad57-11740176928e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c6580837-3522-43d0-81bd-7d3dc781c0f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d998c79d-0514-43cf-9a41-b987c1c6b030",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "789cef39-2a0f-471f-9cc1-6911eab9fc58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca6988ad-ff2e-4f51-94e3-93a0ef672e00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21b8f041-f652-44de-b705-cb591dc51b2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c99e7e91-a9b9-4b6f-b5f6-19ecb4cde80b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "717c8783-9df2-473a-acb2-677eed4b6d3e",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b328787-fe36-4d0c-bd80-dad18f726f97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7744ad44-2ada-47c4-b972-acea78dd209a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5061ded-02ba-4b4d-bc05-c81029d8ccc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e81211e8-5b63-42d2-8fdd-8a79552d5805"
                        }
                      }
                    ]
                  },
                  {
                    "id": "855f1121-6eda-4848-ab49-52c91ea5dc2b",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f8e7bac-ffd3-4711-a418-a8dd375595f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce7541b2-a7ed-4177-ad5a-6e65c68ae7fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ab24ee4-58ba-4e77-a9ad-f9850ace067c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9dcc8191-aa44-4b02-88f2-68ade26095b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f035017f-2807-4fd1-93d6-4d46ebc365c5",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03801487-ff77-479e-a202-778a9edcfbe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0723f8da-5e7d-4b9b-ac15-71698c5a56a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f10604d7-70c3-469b-8f1b-c1fb95f49212",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "81ba90e2-ea0c-4e63-8fdd-8fbbca241675"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71427bb2-79c4-420e-a145-c20a9e902eb5",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f545258-362a-4257-a284-8d607c88f7b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "454d7c97-8730-4d63-b8cd-e4a670a055cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9605c330-d9ce-41f3-b5a2-6fe338e43393",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "21f32a34-9fa7-4b33-954f-bc5037cf5552"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94e8aa5d-9728-4676-9d37-fd5aec605edd",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6cf2440-3701-4cda-a78d-f54a655f6145",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f7f0670-813b-46ee-8dc1-b1bdb42b66cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76cdc7e8-0295-48df-879c-bc6edd99ce0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cf0e80bd-122f-4d17-b512-3a58df398a93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b871f4c-a545-46e6-9d34-7bb71c97bb05",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73bdb5fc-e961-4a9a-9aa6-e20946261903",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f326546-247b-416d-b847-9911eca0587f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea8ec627-650d-4c9c-8fd8-73919e3019be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f811271f-3eec-45d9-a77c-4071b77df30c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffb2c11b-6d19-44b3-b9e2-69bef90e1276",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec891a0d-774e-45ee-8578-38351b22d4ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20104c29-1fcb-4241-a5ec-7cba2d7d3872"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f57bfeb7-18f2-43a2-aee1-96164adf3d8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "794b310d-ff80-451a-a073-e587b06c083a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2ae3b0e-3c73-45ca-a288-e9bf2ccc77b1",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd24b184-82a5-4c2d-ac3e-e0415fb4a64a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b05fa7e-6308-4513-8820-6b0f2df2b892"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73b3f756-83c8-4a96-a3f7-a3f1d146d6b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0b873290-986c-4e98-985b-be9ef0787696"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e028bb8f-04f0-40ba-90ea-ca64db284a39",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59661d83-cac2-4b37-86a9-caf90912d31a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff1b187e-7872-4f1b-939c-5991dad76582"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64535759-cd5c-4dea-ae2c-1a316bddb67e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "17bd2fdc-1fc8-4077-ac8b-8392dc0629c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb95fb1e-6e33-40e1-aae3-fd55582f4794",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ffc1505-4f7e-4e63-b3df-92481fd33fef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4eddd0c5-f52c-458c-bb3f-367450c8bbb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6bf4f3c-cab6-433f-b4ae-3967327d7f48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a48ba33-5ab1-4b99-bb35-4d1afa05965e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d3e1e16-8402-4509-a9a7-e6a9a5728eb3",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f69a2a78-be56-448c-935f-a40aa33e8133",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37ae3fb7-8a96-443e-8c9c-37c78353bb58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c45f0a3-b795-49ec-b0f6-718fea619e9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d479446a-73f0-40a6-808d-6ebfc465eaac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9639ebb-7603-4503-bb60-b2db2dbb7868",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55763782-6521-4fb0-9849-e0ee307758dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00f9daf0-d371-44a3-b794-3ad99ee1d3dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebad4caa-7017-40d0-9a12-18ae3982d686",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "298d21cb-7c55-4933-9767-1a56578d4cd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7521c36c-808e-4389-b5df-9097265b5719",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b94af15-b8ed-4237-9440-c2e7fcba4b9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e045127e-8054-4c42-a60d-eb3f68ae636c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c942041f-8ff5-465b-8912-0b4b7cd0229f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "477a1fee-3efc-4fec-ade1-d7fbec39b18e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "393c657f-ea15-4634-9ae0-192eee5e1475",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc5a48bf-9b6a-488c-b3cd-7a9ef362434e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8d686e6-48a5-47cc-99bd-9b6e73a49403"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "580be763-d4af-4029-ad5d-cb4fc9f5bafa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a1265aeb-2946-446f-8531-aa1d434564ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f7841d5-560b-4519-a418-87812d7d1eb8",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f35cb189-124a-44e9-822a-68c9cf3c5c95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49c49aec-2483-47da-bdac-6939162af367"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdee920f-5176-4c2a-b1d1-289d67b2f5cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1fae2f2-0360-4260-b7a3-26e0f476eb2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "370c6179-9c24-4be4-a9cb-fb1b29255fbf",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "112d981c-2243-4068-9c8d-92fff321a90d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fedb1f4-c84d-4db0-9c94-7ad586fb4619"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55b3d3fc-b8b3-478c-bdcf-6679aa68b33c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "db859426-f6c5-4931-8d15-ce88d5d058e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bf64d7e-54ef-49e5-8c3f-19fc094ec114",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88fba4e5-d257-4714-aa79-57a770ae850b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b991954-b979-4057-98a4-d4b8857026e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41ba4d48-4ce9-4060-9a3d-c7b76133c959",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "201e2d14-d324-446d-b1f9-dac82af64611"
                        }
                      }
                    ]
                  },
                  {
                    "id": "941ecf2d-3935-471d-93cc-6411d986421f",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c1e9abb-01c3-4f64-9d7e-013e551077ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cd07059-f147-4ff9-9b7e-d056ee7ad1d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71a522af-01d2-41a3-9144-28c35b269fb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8a21f97-c08d-4bf2-adf2-12a291aa25c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9115d101-cfa8-413b-a7d1-0fc00e12fe01",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e747e00a-9535-4e78-99a1-e0d594f2d382",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98bbdd6f-3c01-45e6-ad8e-57ff607e1636"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc1ac5ac-7bc1-4a6a-a9cb-93f999af2759",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b1c5ada4-326e-4511-aa20-8e5e8fed0cac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e0e092b-e0a2-484b-b75c-cb8196aa15b6",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "695aec15-cdcc-4b26-bb33-ccf23aed44bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f107736-de42-4d64-83ac-efe61012a1b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1378f8db-9d56-4475-9ebb-ddb27d638b7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7733337e-c8d3-4748-87bf-e1ac8c9b6b2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b67b6d4b-db88-4eff-9243-bec37e41f4a3",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa397476-20f8-4a8a-beca-e17284053189",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe0d907c-cd0e-4810-9378-d23a16b2daab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a851b597-a8bc-438e-bcee-d3602ece3395",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "65925a4a-c348-45ce-9738-a4e0807d6743"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b81d7f2-3b9d-4d04-b90a-ae140a696518",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d544facc-50b9-4dcd-804f-08e764d1e664",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33ba0a7b-d01f-4e87-ade1-5ef589359a6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dadca1c6-29f9-4949-8dd6-a7538396d15c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1716b38e-af7e-4a58-9048-f21e5b28746a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0454b8a-eee5-466e-97e3-d1b19188eeba",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78a9ad16-c7d5-4baa-8952-41aef2eaf53d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37264021-b4f6-43ac-b931-41f7e1e9756a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34786604-7562-47f8-a0f6-2a9ff5d0f14c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7cba17de-f8e0-4cf1-95e1-8d8272ada289"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93bd6ebd-5c75-4c3e-9e74-7a90b351798d",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "517298e2-9c22-4d97-b0d9-4125876e254b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "792ca645-89f4-44f0-b9ac-c77ca1228900"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68270aca-8ab8-4900-b254-c7fb7b4e9527",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "991ef204-6c6f-4467-9790-92ca04fdf222"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03d45b68-7e82-40b1-a2d8-9d612da22b41",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "045988fa-dcf5-4ab0-b1a1-596859bdf846",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43f7b85b-e622-462f-aaf2-f143e9197d27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee4603ea-94bd-42b3-9dd0-b938fa7c127c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3de16ddc-a349-422a-86c4-6e29cac1db63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2e25434-f7de-40cc-8323-a42371b822cb",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3b96aa2-a5ed-49b9-b87c-6330c5861af1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87b24551-2b6b-4fa4-b73f-6633dc0280f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ba5fd41-59f9-43a1-9506-96f7a6890693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "e6f4cd76-f9e2-412d-b36c-19a9be62e21b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c24f218-9678-4636-b0f4-0640757918d5",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf12cbe8-a3ba-4030-800f-bedd7760d03d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fccfc26e-0eb4-432f-8b97-cfb2404b8b79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "883bcec4-76f2-459a-9c72-0318c7ba9251",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fafd8e3d-10f8-4363-adec-668a1a97bf80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7406356b-6f4a-48cd-b69d-092a99237abc",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9802fa5-1c1c-4ba2-be76-658a703067bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30f8e62b-e7f3-4307-96fd-80961ccb4715"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d97e62b5-fa93-4d0a-83e3-12dd89ca7ae1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "da57af6b-86b9-4db5-b042-774c0a1e7a35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ff1fffd-43cf-43d6-b66b-80d9a732e88d",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7141d8b-40cb-4eaa-b0ed-25694df05969",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfff45a5-0c88-4a76-824b-0f05b0aa7a58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "757e6a97-214c-4f6c-be50-3356615abd8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "dd49940d-24c4-4ed9-8268-8a8e3069c02f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeeb37e7-08cd-4e16-9416-cb3f46273a88",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff29db0f-f079-49f5-965e-9a05a9096902",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6130d11d-a332-4e36-acec-d95d120b4b7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "475de242-a881-4ea0-874e-a5232e67ecd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1e16472b-dec5-4715-8448-7ae7dd38ea8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "765c88be-f698-4efb-87f2-1f217d5312c2",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b59b2746-4385-46e6-a9ad-a78bb3e3de6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36e544d5-5158-4316-86e0-80271b0577cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dd76007-04ce-4e84-a6b7-15731e9ec9d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e90ab4ea-884a-481f-bbd9-45bed9c6169d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b348be7e-ee74-4831-8b4a-b81c6ac68763",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82f378f9-461f-40bd-90e8-9969d667cb30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e41fb59c-ac58-4edf-be28-eb20cd15acbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fecba37-652b-4325-8e30-c4c5481a3c74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "013fa102-2ddc-49e4-8487-66c6ae8ae8e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee19888d-ce60-4c4c-bbe7-2102f2ec9ad2",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41a60cb7-5e12-4550-a33e-b9b5c5329504",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4a05e0b-1e10-48a6-aed8-a8362fe25f24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe373d8a-3895-4fd3-9c1c-88edaf37fa04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "a6ad4a95-ac5e-4e79-8743-ead63b5166a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a896520-942b-44ff-b226-2028289b5514",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "062fbb41-db49-4eff-b3c5-978b3143d0b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf9da068-0d9b-492a-9e04-eab83092f498"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "862fbdaf-e608-4163-b1b0-ba5aebd313cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "f424582d-bdff-47f7-91c9-aa84a8f8cebe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2dc59f1-4bc8-4c7a-8671-fba3a7017570",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1c33371-8d99-4f24-a3f5-28f015eb1c77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e39bdcd4-b2fa-4752-a9b1-a6a032dff7fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4a97764-040c-4d17-a460-5763c61fe2bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "dfd55f7e-b55c-4288-9433-b9f0e1f21c6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99473285-cd2f-4cf4-abfb-d13916cb9eb5",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40efe285-0d59-45c3-99fc-4e808be1de5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ff7992f-18e9-40ca-b1d3-b3d8b5c8f4de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22446b91-1225-45d3-9ea3-33f7c55da787",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0b760e8-227e-494d-b226-fdad21dfd3d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0b808a1-5616-45a0-84bb-0c7ec4e538c9",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaaefafa-e20d-4514-b634-f5446313dfae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9de5261d-b873-4d3f-bba2-6d49cd97f924"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3daac519-a0dd-4490-bf55-7b997ba2e65b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ba249bf-9c38-41b6-a6f2-831c424350ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8bacd06-ebb0-4334-b14f-c4886001d594",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebf7114a-daf6-4958-8272-f19725ff36c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f0860d1-eed2-410a-9200-c634b36d533e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ecd3c3e-356d-4aed-96ea-adfc3b8da3b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "880c7bc4-b22b-4a3e-9596-d48de71df9a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdd22e50-7d98-43e2-9aca-6fcaabc1736a",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "992c1eb6-5fad-4ed8-b223-28b2fa4e059e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9568ad4-62d6-4b13-be66-0a76f114cde4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "794daa55-83f4-4ccc-b4c4-73b1649bbfd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c9458d8-9b4b-48d3-97d5-33b5b0eed771"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c52b10f-c938-44ab-9099-8acbb1ffedf2",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc86f508-9dee-45b8-8f5a-3f8a5938dd36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "777dcb38-6754-453b-8f57-c8e42dac92ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d7da95e-33cf-4f90-ac7a-d446e333537d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "08d9c4dc-0623-49a9-8b68-a464153bf07d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cb6c297-394e-4212-b8e0-c7106145d536",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c267bab5-2c4c-4de3-923d-f3f2aafd52df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58f13fa3-83ab-4eae-9753-535dcce5863d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "124ee17b-18ad-4bc9-a98b-e9f63f83a451",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d325582a-5a3f-426e-a098-66cc4acd875f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8829094c-24f5-43b6-b1e8-48186af98d14",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d39ea70-6240-411d-ae38-c854dc6922df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50ff0de8-4c47-4aa1-b13f-b35e0977c595"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64a56719-3a15-4625-bd34-5675aa87375f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "31ed1f55-d08a-449b-b536-bf36067a72c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "317fea24-c41d-49fd-9640-e6a3ca20b559",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "878871e5-46c7-44c7-96a4-29e5db1c5c03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f290eb59-dc4b-48b5-8853-f2c551e34f5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46148413-e0c3-44d5-b9d2-8c4827f0e6bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d57a9d98-c22f-480a-9859-cf21cb4025e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9212bc4a-bcc7-4ab2-adc5-c89ca81e1507",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c788fc7-f917-402c-9219-2f735fd392e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bb64729-ed6c-486d-9e74-da613af2bb2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb305331-16b1-4ec7-b27e-f2fa6077f6cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "584a2254-62fb-4076-8dd4-b6ce0ec75b17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4785c442-f7c4-46e1-9165-51963f73f2e1",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1b0719d-dda9-4fb9-b879-eb2f4d730da9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87a481d0-bd24-4992-ac88-0656a7886900"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0343ff34-1744-4da8-949e-af76f98d2152",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed13ca43-3844-4071-8ff0-d1ea55afcc22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "714ffada-1eff-4982-9b87-705b811b77fa",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eaf3db9-673e-49c4-a4f2-545ee1162452",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a74a2ccd-84e5-4c40-adf0-654bd3a8786f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "622d8f8e-2f2e-4ea9-8c86-8bea29ee65db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1844face-87e4-442c-887f-91aa1cc61c8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b479d773-00f8-4f92-9766-2496a3d05cf2",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b09fe06d-847f-46e4-bd38-5aef3a1ce9d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0987f9ff-0ac5-4cb5-ae7d-7434dc1d3d4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7526376b-def2-4134-b9b2-e43d192892b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "6b69eb2a-dfc7-4e39-9fa0-082dfc6e40fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f98f798c-e30c-44b8-966c-9c9519060a5c",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "504c66e7-4bda-4070-8775-7e591d7436e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52d7db7a-02ca-42b0-8478-9dd94da7b3b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51afeab6-1ebd-4373-b027-f08cdb9732da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d7aa0d64-a8f8-4eb5-a063-14ba0610b36a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f9c4daa-22b3-42aa-962a-d7fa90427733",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ea9de92-28c8-408f-be41-b4210361afa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f30f0c0-abe8-4d4d-94ad-eab92ec1ee59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25252163-9d80-42dc-89f6-b8e73a38bafb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "972c8440-b64f-4105-a3dc-db13d45f022d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b18a9e5-82da-4fda-893c-6833b00b315b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f03bc11d-9869-4fd6-80ed-223d0023365c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c92416f-5a31-439c-a130-75323b367fa2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b0a7f17-7827-4726-8e27-7b12588c5e5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "22d04e7c-499a-4add-ace5-945aee55d77e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "321ed208-a6bc-40eb-8596-bec2f3170384",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f123bdb9-aea4-4e01-b3ea-961f9ce691a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a357b56-9c66-4337-9180-c5298e74212f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fdd137f-e4a1-41cb-ae04-1e820de0ccb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b29b60c2-1afa-4755-8431-c0ab7fbe915a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45cbb511-383c-4086-b929-81363ca1b8ba",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ac75ff4-f667-4fb5-8c1d-94a9ea37a5c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "caab1f19-c79f-4590-bc9c-417ae7d11929"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be5c40c0-2dab-420f-a61a-1e299b80aace",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "1b0316dd-47f4-42b1-9e91-380d9e69c577"
                        }
                      }
                    ]
                  },
                  {
                    "id": "195185af-6262-4f08-9a20-737ce5688ee0",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a296c4f8-cbc0-481f-9672-46ec63058921",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9263ca7d-dada-48a0-b733-05f5633cc736"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f22268df-e728-41a9-88d2-489bdee8cbe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "b25e8718-b583-45cb-9f12-c9d9218a916c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7b3ee75-9ac6-4073-8386-be57611f21f7",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3615ec12-4289-40a4-a070-021690280fed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5840edb-8979-46f0-a432-e339c5c7862b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6783b4d-13dc-43e1-8757-dd0ee59eefca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6a18d16-0945-44d5-81fc-23939cec2863"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b77de27c-4b7e-4ea2-a629-952243843b0d",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b22bf840-ad44-4358-8b79-d4b67e6392aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85abb03f-621a-47a5-ba93-dad7ab50fb9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "902bfa46-7539-4118-b4fe-c6fa55058e93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d0b9309-e3aa-4fbf-a32e-7d055fc1fbc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24b10e99-c9a9-4ed0-be87-f634d364ef75",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de808a82-4358-4662-96c6-75ae9fab6e6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11d644cd-aeb4-4902-9285-e8c7d2d42906"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1254c45b-d4a9-49e1-8c58-4be6e07d6d21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "28309849-fd13-4825-b3d9-a84c7a13ed19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8160f6b0-9ff8-41e6-bbc4-8236a5d0c75d",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d14e220-0736-4247-b6a2-17c8e0498bf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c467749-ced9-4a6e-8567-982b28dca4fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f81a6870-a866-48b0-b859-0111dd39a20a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9665cc95-040c-4dc9-8276-984898b5cc36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af4a1c26-08f9-42eb-8e4a-3e7419ea4a3f",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "513c6cda-d85b-4f33-a82e-65682d8e90f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f87000ff-23e7-432a-8ea1-d6664dc29509"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56b7c0a4-8f13-49a8-b82b-583c1c99e21c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c987ca3b-5ef1-4a95-b1e6-31a781c522bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1040a5fa-bcb4-4bfd-adb9-79341125cfd5",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d332cec2-b7ba-49e2-b159-c474ab34c99d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1f05e15-93bb-44da-aee7-91d880d3074d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "285a415b-38eb-4a69-ab5e-ae61a8f8a656",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "216985f0-14a9-492e-b667-bb6838931d46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e92119d1-7201-439b-8b32-249e1a168217",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "869a1bd3-f031-4c57-abcc-a5818e35c83e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5482d7c-1250-4c5d-9e8a-433d64312820"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a32c741e-2103-4c1e-a1aa-e0f8fe34838d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "4876506e-a5b0-4932-9f9c-7f982833cecb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2cb4921-cb70-4c11-be6e-e63ce6466696",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b97a4fa-e64f-4afc-9d4a-1047524bda1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "496d7f43-161e-4377-9497-3b0b9f3b98e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42877b43-bd34-43f5-9da1-3836442445cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "00785e8b-cfe4-44b8-a523-baf6d6660b5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "841d0423-f021-4291-9f9f-95fee852ad90",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "974948eb-4616-4785-85be-1154ad506733",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5a4137c-f154-45d2-9a24-93b96d3eb8cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac880da8-f8e1-49e2-a59c-485c625f328e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "55c33cb8-3576-4df8-a918-c3cdc960baae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26420b15-22f4-419a-a6b3-3ad4a0a0fb5c",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbd0d26b-cb93-461d-a331-6d0fb0a47873",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b16d520a-820b-4531-92f7-f0ba9fbc12e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0317798-4e19-41dd-88ae-171a8f7bb5db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf65e9e4-f1ff-4fea-ad51-cc53ae7c253a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6473724f-c963-4fa8-ba7f-2bfc81cdd53c",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c09859a-4e8f-419f-b4be-892e1a360e0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85f23162-487f-4a04-9814-30478d764312"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "598eeffe-6f65-416f-8d32-4dd28e2ef7de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4007d6ad-8300-4c94-9cc8-5d1efcc4591a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe5a42c7-a5b7-4e03-9d4c-0a44051aaef6",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73f7bcc0-703a-42de-a3be-eb44794db3a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e35faabf-30a8-4369-91ff-70b90a822ad8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e42e05f-97c4-4790-972b-ee8e6d2c7e86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9232207d-1c8d-45a0-b3dc-ead838575773"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1292a77-9e3b-468f-98a1-933850360a62",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f111873c-49d9-4aff-b4e0-55a8ad07073e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49471c0a-3ff3-4b71-9623-4ee673d7c42c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69311344-b8b1-4092-9b5e-7c24f5509710",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d1b99f8-d1a7-4a91-b6d9-61b2dc367602"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6a00bac-3f5a-4939-a3a4-eaf9cfae4ba8",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1d5640c-9de8-4edb-95e4-b7c0471e6e72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86f4fd75-f268-4d19-a6b0-2fb3e6e6fb03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68b54b97-49d8-434f-b54c-3dfc1d22e55f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "189debc2-d1d3-4242-9d95-718885cafaf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b351f09a-b8f1-407f-8f6f-302ee3f9548a",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12f47b89-21a0-47c7-8d36-954837e825f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2325dfcb-678f-4329-b011-3f19ba60314e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "719822bf-264f-47ca-a62d-f02c84f5d885",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e24a2862-bde2-4f53-807d-e4cb68e23004"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75ec8e0c-dc07-4596-adb7-a34e67563c72",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c93f0f35-a812-4b57-8183-a70f0dbeab92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "558485ac-c652-4266-9aaf-54a4ab4e7c38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d8aef5a-ff20-4553-8bd2-263b169b4213",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d836dc16-3839-4df2-a0eb-68f1a64d96ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c333eda-a338-42f8-89a5-710ea16d267f",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b613572-4d5c-42e8-82c2-50910533f1ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cdc2022-ef76-497d-b4ca-4acde3b5f17c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99403388-2b4d-460d-bb93-dfc69be9e969",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0944181c-dedc-4db4-88ae-ec367f09add6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43005d36-f33b-48b8-998e-ce2180f255c3",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d47d1c8f-600d-4740-9507-cbc79d7ca243",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad9ea474-619d-4843-9a95-976367b86035"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73a75e95-3604-4009-ad14-a617c85375bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d26f0183-866c-45e9-bb47-b447b54f3fbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb61b343-f3e0-4329-aa3e-7c43c2cad0d2",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ff4dbe2-ba3a-4a79-aee8-3a76a095ad10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4226d458-85ef-4fb3-b389-cde2b440de1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec179c31-6d86-4380-b977-3f3de07b56b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "bae7a8f9-9877-489c-891b-111a2d245965"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6eed50d2-fe9e-4b4f-900f-49701013d7a6",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ed8eed1-6358-43e6-8654-32e69d508f37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adfd64fe-6f6f-4d50-8d81-01588d91af84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28e088e1-d7b8-4239-b841-86a004c15a15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "67cf42c3-e899-4018-9f71-d4d33d67d18d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d37271ad-2afe-4bfd-95b5-f8090c1c4df2",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e35633f-8735-4324-9506-12677d9c926c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "274c758c-7d3e-4efd-b66b-232ba1600491"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c5309ff-df40-40cb-8c08-c9bc385078cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f2940d2a-ee5f-4af5-bff0-2f70ab8b6408"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e6b1b46-1675-4a81-a022-be8ae5dfad6e",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c04956e1-865a-411e-8b71-7e3dcad15947",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "feaccfbc-6400-40df-a74c-03d03ac7e9c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c41390d-b630-4daa-a9b8-966f7d46f807",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c2ee11cc-8dde-482e-8f05-70e54a7f238a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79b7a6f7-3997-4730-8393-967af5da9165",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d62c3ad7-5dcd-4a43-8011-db696b9a5b95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cc5b3e4-378c-405d-afa9-bc5b37978251"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52b57943-af4c-4e2f-8b1a-0d44ef3012c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9d5281e7-b0c2-4974-b1cf-ef252baabb33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbe6b9d7-1760-41a2-b26e-a3157ef18f99",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74a1d05c-7250-4069-8f41-abc1fac5170a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "deae9355-1ee1-4bad-90a0-7134a8f1fb2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cb88565-f699-484a-af1d-4528b12df9dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d3029416-77dc-416d-8924-267f86247e87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "444f771e-3539-4846-9e17-57b204dfde6f",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e93d8b81-446f-4c5f-b09b-da23dc67add6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f5b582d-5b58-466a-a155-863c6b66a205"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d28bf3b2-a0c5-402c-93ae-058ec71016d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8243a34e-d9de-4c0b-9291-72e43e51d68e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b94c8505-2d22-4746-bfef-7757bcfab1ea",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7392a58b-b945-493f-8f9c-2e4ad8aa8ce2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79686c2c-05d6-4038-83c0-b662f8da77d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "923618bb-a9df-4ca3-8b47-319c360b46d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "bcf3632e-81e4-42db-b9d2-d39434da0b99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac0f65ea-a356-401d-9865-ab225aaebf84",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c033436-dccb-4594-aa8a-6ab615b545e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f17a35a4-d63a-40e3-8ee5-cf047e00ee0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d224350b-6ff0-47f5-a2c0-532e61c813d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1f1551cc-784a-4fba-b47c-1e09b71e25e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abf10c8c-98ee-4ed5-b059-14aab0ba0b06",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac300232-b748-4191-80b8-8146179154ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a14eb83a-e1f7-415e-8641-ba6d8f887c7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffe60f0b-c28a-4e8c-84da-2b8925760dd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "415f1e25-de27-4393-8ca7-0eda867d288e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8eab452-3ef7-4c78-91c3-3a927d69d6fa",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d88b2b91-eec4-4b9d-896f-71fa603d3f9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e54bc3f-8b72-4b17-9d20-2d5452664675"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a4519cc-0483-4bf2-b2ef-ebf5598a3091",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "7a1d7df1-cd7e-48d5-adac-47246781f97f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb3b572d-9fc9-40ab-a1ef-c4afdf2c7bf7",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f97a378-0c53-4fff-88a8-a371972bb1f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "2cb71cb8-a840-4c49-8987-b3b02e10b02c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36fe9817-03a7-419f-815c-11ef8eb4c125",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "45123bb4-8a3a-4044-8b09-c21780cc9a59"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5ea23026-4252-47cf-9ef1-30083c03d2f5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "731892e6-f7c7-44fb-b5fe-8242edf8d3ac",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f44fa9fd-6136-48e7-95ad-229ae8de48c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b72955b7-0c98-4fa1-bf34-361e2e1326a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "669b72aa-1bdd-45f8-8184-810683e79f60",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "af5edba5-99b3-4b0c-af99-68101c1c08d3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cc23ccd4-856c-4d00-bd7e-11852fad6d26",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0783baf3-34bf-412e-b565-9850870d4176"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "54e9f1a7-bb10-45e0-ae56-fbfe59f043f4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "31ffbb2d-d64b-4720-88c9-f9a50a3f7777"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "23179ba0-af5c-4135-8895-a39f746322a5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "78affb4c-3ab6-4568-8d39-4699e41bba3e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ba052ca2-20d2-4387-9fd4-3e28041a525d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7526ccb7-e96e-4acf-bcec-dd313765875f"
                }
              }
            ]
          },
          {
            "id": "5cf8ff71-9a92-40e8-9342-31e3cc96cf64",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c259ca2e-66e5-4bb4-b27a-b712c23fd8e9",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "e0b07e14-92b2-4d15-a792-aa9376573609",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61101288-a041-4f5d-ac0c-028e117eb62f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "9bbd7aae-1567-4313-8aa1-bf0e6616f5ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b8c9905-b162-40db-b7e3-357d0bc349c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09e3092e-5aba-4b0d-8189-bfd1038b0865"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "204b97f4-d308-4af9-b3e1-bf834667a123",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3de8d294-766f-47d2-8875-70ff352141c6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "47c25c6d-f1c5-4047-bf79-22e9e50842d2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "48bb4736-2dc4-4d96-90d3-00076d4ba7e5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3bf90c67-efae-467f-8a30-aab5bb587a71"
                    }
                  }
                ]
              },
              {
                "id": "2c537fbc-054e-4fc1-9b91-1e91ba90e600",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3f957780-8f89-4a60-91b7-ea6a801698d1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "10a31d96-c62a-4b43-9f44-b80b487019cd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "96ce9d9f-96b4-4127-912c-d4408655949f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6196d614-0954-4e41-a7af-6c6fcbe2178a"
                    }
                  }
                ]
              },
              {
                "id": "66cd7620-712f-4154-b235-b3b03840fc89",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "17d1779f-59a6-4718-97bf-538f868e2061",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "19878d7b-3f22-412f-ba2c-068dba7df4bc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "595cee4a-e188-483e-84b3-ca5fae1b42e5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6fe964c0-9d23-406d-9fc2-535b01c4d251"
                    }
                  }
                ]
              },
              {
                "id": "44420a8b-9397-454d-8331-4cc7b8b38795",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b072d3ec-7f77-40a8-97b3-b4ba0d619ba6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c3b984ca-fd09-4dd7-822a-94fc91ef5b5b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "67a750c8-d302-4075-9fe9-cc83258b9ebc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "fceea16f-d02e-40c6-9f5b-d6b4df15d3d7"
                    }
                  }
                ]
              },
              {
                "id": "b6c81058-9074-41bf-9edd-a4b28a65ccff",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1f9c747c-f019-423c-be7f-eda1147cc03f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9c620bf3-a900-4e7c-95e2-b6ea8e3af114"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "56bbb5e7-c0e8-44d0-9f76-7b144a3227c1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "c9b3fb6c-0481-449b-a4a9-ef29262a8f85"
                    }
                  }
                ]
              },
              {
                "id": "ad57f219-0472-465a-a4dc-6ecc7a9d4255",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2081a498-d3ec-4b83-a2f6-07b364c1e820",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ec04a7c3-2387-479a-af1a-80696a04a53b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fc1e3ec8-a090-46e0-b92a-923523407b81",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0e6d0fa7-d263-4890-821c-d5aee173e1e6"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "622c3898-a802-4c3c-a49b-f18a8bb1f91f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1ebc8615-992c-4854-b492-db6868c15770"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "32ee9a83-64e0-4287-a46e-3d3d1995cfda",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "dc4f0d18-2edb-48cd-bfc2-5b7b7f271d76"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c91363b8-80b2-4344-8717-df1862640529",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "8fd886c2-6505-47ea-8f57-0be4e4beab3b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fc380ecb-a3ce-44fc-8112-2142f0de6749",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6e641e3b-c359-40cb-966c-c1b891ffc430"
            }
          }
        ]
      },
      {
        "id": "7be14b66-eac4-4c8e-af06-02e076f43493",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "df0a3922-c38f-459a-84e3-fae56418511d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "74462555-0f96-41f0-afac-ed53d9eded2c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "61d9d70c-d890-4501-a502-1cd46f64f0f4",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6800b3e-4f5a-4fbc-84b8-bd51c552d5d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d10f8f6b-e2c8-4115-b861-003000245509"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaaf023f-1f51-4181-aa77-9a5d70818027",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "57ddf0a3-8ca7-4269-900f-88272ce16852"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ecd6d16-79c8-4908-8508-03b8b28323f4",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba48b622-2977-4d0b-bb4a-3654ceef7621",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbdee47e-fba4-4854-ae31-b8effd91fbcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa1753a5-10c4-4fec-b928-4055ff8cc9a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d2ed1d8-36e2-4184-8310-374a4040dbfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cfe426f-871f-42f3-beb9-98d25b956418",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4043f52c-2b31-443d-9650-2ca7b3691b7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf134170-b8fe-4d9f-a8ae-ff088d2094d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31e98da5-122f-442b-ac9b-c85cbc520ab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "586032da-814b-4e34-be9f-558eba938710"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fef692f-02f6-4cf2-8700-d56b2f5f1ae5",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "540cfa9b-36a4-49d1-8a48-80f77198cb45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57bd119d-780e-48f9-a31b-557c3c535ffc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f4875f5-a1ee-4b6b-a3d6-45084d308876",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "10e8ef01-5460-4af1-8544-73a5eef57beb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8889f5f-0601-444b-b002-33be2d3451d7",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ad04aad-d8b2-4893-a1a5-f440ea9d3397",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cb23b7c-ed51-44bf-94de-97d3d3d4cd3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e05e0b09-2417-446b-af63-633234941d97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ee63a881-cedc-4bc5-80e8-aa8810aa076e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49f26ae8-3bc9-4f31-96c9-21575b46fcdf",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60b30c35-b66f-4e9f-be27-df0638c1c862",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "816fdbf4-fa8f-4ba4-acb4-07097e25674f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2715088f-f21f-4ae1-bf9b-68a800f7416c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5724099c-4ddd-486f-b1d3-a68be43ae562"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44493097-b774-4c25-8c61-aab05ae1e45f",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaf22029-7a0a-4c7f-9612-ef46dc5995bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67741e7e-9054-4a34-b2e0-efa969d64290"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85634798-1a23-4b85-baa8-ad550c6caa95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "c85c8956-deb5-49fc-a8b0-52e8b307498b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d76174fc-c5ba-458c-88f5-c17cf28f5081",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd9b9e2e-5f23-4319-ba66-e73bb9c107f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa36d9c5-9ddf-4fa1-95c8-57c563c1bf5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "258fc618-5072-4d37-a5ed-fd579a78d570",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f9fb3916-a61f-45cf-82eb-7c607cd1e12c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "674c764d-9cd4-484d-902e-563481b9b532",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d0a691c-d9f0-4e6a-bc31-16fa18c4dfd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8549579f-e134-47fb-b542-2cba44bed247"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4a41a57-25c8-4698-a4cf-7ff29ee45e6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7a0bdc7d-48a4-4edb-9e87-8d9cb2c9e203"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55ddce82-bf00-4e57-9b84-7e902301b094",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30f02b62-0285-4272-907b-6b3d16bd7568",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65cf14d2-4472-4634-87e5-8e9676d2083b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c6496bf-834d-43b4-9db7-5ee62828a1e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "79541656-9908-48bd-b6e3-2f446c68e7e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad750df1-223a-4fad-9391-34fb978212ce",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d9bc740-5f1d-49a4-8943-a78cc2717370",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a2e8be3-7cce-4628-80d2-2d39d57dbd80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c06412eb-10d4-430d-8c0f-7c73dadddc1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "f11979cf-5f31-46e5-9730-3b70f6bb7877"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71a81d88-a8eb-4dfa-97fe-7aa3d6c4b86d",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1825b4ee-af68-4608-90ac-f0b8c5121179",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87383d29-11c3-4258-b4aa-aaef8f0dd28e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e77cd93e-f1d7-4446-8df0-67db3f179131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "91227fbf-7da5-4d2d-b604-01b9fb6f02c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd0b04d6-f978-414a-a036-2c82e43e0f30",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c607e16-a53c-4abd-b345-07f7027c13e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "751ecfee-815f-409f-8545-19e5491785d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9842c53f-92ec-4d79-b7b1-eaab49ddb748",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e57c0d2-5003-4b61-af74-616e5cb63de9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b47e08f9-e761-453a-9029-74353c680c00",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24b2b6df-2ced-43bc-9050-d81444757858",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ea43af1-37e4-4560-818d-e9ffd018b270"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d92303d-70b7-413d-9cd3-3f59ef0551bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "56d1efa6-1e9d-40cb-803e-6cbc9d4728cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fb847ed-1493-402d-b6da-57bbf144bad1",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dc02fa0-5370-4c8e-b0d3-0f4d40172dd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0649ed4d-5eb8-437c-8ea8-b3d2da134c1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ecf853d-d88f-4edc-9b56-0d8aa0059ac1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e000a3d-11da-4428-8dad-67d77c3108a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8671b945-c245-4609-979a-f5539866a088",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "712c1982-fcd7-439b-bcb7-3d3448f7cb73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9e7d35b-0bd2-48b5-b7cf-ea97e13fa372"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71bc4ca6-7122-4ef4-b107-2f9ffa6ee90d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "feadfc17-ff84-4496-9bd4-d947a691ef35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca9cbaf1-8bb8-440b-95c5-a5c517b9878d",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a4cf164-6ff8-4383-a29a-5513ea289e84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df215ac9-7efa-4ff0-8492-d05326f74db7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afe8343e-c821-4449-80a4-fd0858744b2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "319a9663-5a5c-45f8-bdcf-970fbab98cdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f147d293-d678-49b2-96b5-be9b06fd54a9",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a07615f4-67c8-4d93-b887-a3f291c09509",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cadc4593-bff3-4330-8a7a-ea99476e295f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8d19d93-5aa9-45ab-9ee5-742dfef5449e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "75a319d1-d877-4eba-9efe-640f98ebf0b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcc0cec6-240c-46df-b581-7b6de25dcf75",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7e6901a-9d11-4bc3-b297-1470a7735eaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91d15eab-be9b-47e3-b85c-a34fe20f7638"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23296323-871c-41d6-bdef-2f8afb416d3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "02881765-9bb6-4f85-b6fb-4a126ef78b50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fc5ef16-3753-4836-81ea-1a70f4b22fa6",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf9bd4ea-2642-49ef-959e-6ddee064b7af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0a82467-df15-490e-b273-e621b8b6165e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "935aec03-246e-4910-8ad1-cf7ef7f53097",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad537350-b533-44e1-9c5f-eb8ff8d25981"
                        }
                      }
                    ]
                  },
                  {
                    "id": "431ccbbb-7b53-4185-840e-461f9c1488fd",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "caffaa36-3928-43d5-b406-a4d607e1b8ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a9ca418-f978-4dff-b4d7-7930133fe987"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08a349ad-f481-49f8-8b6b-b867e7718025",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d2f29de1-5319-4066-8252-c9f12de24e6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f10cc470-bd93-46c5-a0f0-06d5ab48b161",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "329fffec-908f-498a-ba91-9584a0d71a26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23c24b46-783d-4e5e-ae19-d403511e31dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b8ec9e6-bded-4c46-bb23-12e6c9a8ab64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d34f28eb-2f9b-4648-a9c5-7b8f91616ebd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8612b08c-8d99-4e00-81aa-9b6463fa8eeb",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed2fdc9c-e77f-4eec-9406-681c27c17c90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0cd2ee0-a452-4e8c-ba65-453a77a8e4d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "039b34ee-f6a7-4b80-aebb-917d29cd3454",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5a42eeb-4617-4cc9-896a-0836899914cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20ccda5f-cd12-4362-815c-d1164ad5465c",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fcd99dc-d589-42dc-9133-bc8087df5ffb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6ae3517-86cf-4466-acbb-5ab5013333d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "943e050c-b702-4234-8685-8bf1314c8137",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "82f3128d-1f39-4017-815c-dcc5b910aec0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7351d1e-746e-4bce-97da-4cbf65a336bd",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc62ccbb-c181-4288-8c69-bf0700c8c04f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfffeb60-0c04-4fae-827e-fc6347595374"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb713c9f-5c21-4082-814d-17d7794924e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "10d6f018-843c-4c35-8866-6dcd6d344ed4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3c5e922-e157-4929-bf89-dde7ad585c72",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96a501f9-f5ed-4d45-b989-1c03d2358586",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aac63ed5-3412-4636-8542-59e7de988389"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f41c4d2-e6ff-41f1-b0ee-71ce032dac33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e7c3ddc-7333-485c-9eac-d9bd361cd643"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7e3fbed-c9f3-49f1-ae4f-0d02cdbc1dfc",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6111b2a7-57ee-4b53-9c5a-674ee1a52151",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "479f7e7e-af8f-4829-8e29-ff5a79013bc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18eb6a86-7a47-4043-bd3d-90fb109e4ca2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "44854dc2-959d-4216-9a64-b35c944c8d82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b78308f1-f4e3-49f1-849f-e71077fb89ca",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2de191ad-8022-45e8-971a-445bf7d81350",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b64dc589-1cfc-47c1-abe0-f0772047eadd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aad1d48f-be6a-4ca2-b326-37d8609ab5f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2fd80d09-e3d3-4b41-b807-e5875a14eb5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f251bbd-62fa-4500-966e-33f561e33f4e",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65f766d3-ef99-4e2a-a6dd-85528972e6a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e4b603b-4f6f-45b8-909b-e72775426e71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da11982d-ebc0-4935-9cf3-3c4b93e52bb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "916b6067-31a3-4733-91fc-cf00b6c1e8d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcd6db00-dcd8-417f-a58a-7da855af4df5",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd1ac728-0827-4cad-8ec5-169da7de6f8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17ad0629-159b-4790-83d9-ed980cc1a679"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ae2f75b-2ae7-4541-927f-bb0188508f23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2fe0b030-355e-462e-ade9-0e419e30efa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff49afbe-f95c-4f68-9c23-d171325e025c",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "291308eb-57c4-481b-bafa-59d577e71d10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ae74772-4bb2-4590-ae6d-ff1a70a985dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71dcef03-2d35-414a-969a-744b3805ab92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd7e7a4e-9477-462b-b99d-358010d8512b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6536cde1-1678-4733-834f-923da1db3394",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50ea5897-1000-473c-a0cb-ed04a7058490",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ca874fd-0a1b-489a-b8ac-7034e80736da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76f1f22a-6fce-40cd-9ba9-5b493934d50a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a124a38-512a-414c-954b-5130f634626c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f7c4730c-c15e-4034-bea4-718eb232a6b6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d3537992-8444-4e67-b024-60ce837403f5",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90a7ede6-993f-4a55-badd-fb5966c2ade7",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "72032852-2777-4e18-b1ab-6d61c6336726"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aa345c9-b314-442b-a870-0282e36cf355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "acccb7f4-ba35-4a56-bcf6-7062cd0cd239"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aa362c07-3445-4851-919e-d13478e7902b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e2b4d09a-c81d-4f25-ba4c-3df337b42db5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7bda2c01-ed67-4f42-8ab8-88cc7500335c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3c643f5f-aaff-476b-98c3-803892459838"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2a94b1d3-f5d7-458e-94da-8fe2eab7fbd9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "94363008-794a-4fc6-95db-d0238566665e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5cd4a6ec-51f4-4ed0-871c-e04f12a3df8d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a60d8a13-3a24-4079-9793-f7d5d2694d41"
            }
          }
        ]
      },
      {
        "id": "84c70bf1-2ff1-466e-963a-e1a997bbdd19",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "61c16b86-56f7-4185-9f69-fef6302b88da",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c36ec567-7497-4b57-91d5-7295b208c528",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d40b1fde-7fac-47aa-92a3-f88c109716cf",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3660877e-8870-4bd7-9c5b-9da7bbafad46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0abdb4d6-7f9b-4b35-8f80-e8c33f23d0f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55f748f3-e07c-4f5a-97d1-cb4c53e3e2fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "331036b2-d048-4185-8489-a8719d97c354"
                        }
                      }
                    ]
                  },
                  {
                    "id": "776426a0-e4e0-46b7-b834-61185edfa306",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0662f47-dffe-4dc9-93a1-c91c46ea508b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae30a2c9-5d2a-4fa2-8c1a-bef5fc2ff1ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc526819-e028-4d25-9fd4-17c13798db56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac76f4a1-b4a8-4953-a954-4c055f81919f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c61534d6-1ad3-4032-8e83-d721200943a9",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01033533-555d-4b7c-aa56-9e96818bb254",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4eacc6c7-021c-4ca5-ad77-c1c43c18e315"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cec172b9-5571-49d0-a810-16aa64a42c8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "98bd3e10-7aac-4dcc-ae44-213a2e67b1d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "867ad570-810b-47ab-904d-364fff9ed27a",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6adb3d39-654c-4c40-8c12-0481257cb3cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3793c6ca-db25-46d0-8133-cc1a85a4d687"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "224c4ef3-276b-438b-aa36-06248721d310",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4bb685ad-538e-418d-a748-c8f60ebfe92f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c0f9c49-c758-414d-8c8a-c6640f280817",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02961a65-fc29-4371-9b1d-184585381ff7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ccccfef-925e-42cd-9289-2fafd1d1c6f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2136983c-4be9-4b6b-8bd3-e4b31b65df78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "32549f32-e2b0-4016-9c0f-54f1f4ca057c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a0d7798-adf0-4e6c-ad7d-ccd22acff32e",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62b7775a-2163-4f59-a7f5-c614fe506232",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46136aee-8a96-43d6-9140-5ad45e213d21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06bcdad0-7af0-4240-ad21-fbe95c9620b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3ce64565-be75-4595-bc93-207ac8a60ea1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d89bb70e-f038-49fb-a79a-db527f0bd0aa",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73fc178f-6205-4cba-9863-87ff73f90830",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e58e0d7-7685-4cdc-8b4f-b143645d62d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "705e7500-f43d-45c1-a658-3f07302ff0b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "a563ac59-3747-417e-ad2e-4d1b2f2694d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8a633ce-608f-440b-8aee-f06b0e9f389c",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aacfe405-005a-4648-a71a-11b1034e0ff9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c33d3c0-ab8e-4016-82bf-2503ed15c4f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae2254e1-3050-425b-a695-85e9fe084d82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5c864dc-f11c-4d36-b490-1a6ed0e0512f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f406df46-8ddf-49cd-9e91-826da2533b62",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40f3ffc8-bcf9-4ec5-809e-83b81027b0bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b5d615e-1b58-41ea-ad27-adfecd829be0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f5d1866-e21b-4099-b957-1ee394add457",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c0f1f134-70a6-492e-9b61-4d0a26f1c9dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "641b7661-13f3-49f4-9a29-5004500c2c4e",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4a6d4a6-7fdd-41be-b85c-187a60a29892",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c15c023b-fc65-423e-83d8-dcfc2cb8f630"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57b18174-df1f-419f-a731-d37df64712a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f874c62a-381a-4a62-b362-a79eddeeaccf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6007a5c6-9245-467c-9470-f9ae50700dc3",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dc5bdee-7dd4-47da-b0d3-a03568670bdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7675d639-51f1-48fb-aa48-baababa5c164"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e03f72ee-f351-4f91-863e-08f52b4733fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "bf598bb8-acd6-4c13-a809-e7872cd7db8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f98f7e5-696f-495e-bf18-a5927960431c",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7a11770-03de-4c04-9b0a-7350f2a66e20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d04cd7ac-7b46-44a3-9e4c-9e33988ef3a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70500c04-dd7c-457b-812f-5452f329fa10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "335a38ed-ad42-45cd-acb5-89179374109c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e082c25-6364-4010-81e5-45e12ddfd5c9",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11fcb6b7-bab8-4bd9-80e3-f3ac6fb5a8fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39325af2-8b29-4ab1-9caf-7d7ab594d8fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5732cace-669d-4d75-b572-1d4a0f061ee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e5c230f-3d0b-4df2-ba8d-30b87e2e9ea5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "976ab64f-4811-4a13-b903-b5d8a02ea97a",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f80cbc7-58e2-47bc-b9ea-40b4fff7a93d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3342149b-1b9b-498c-b6d6-291605d861b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1907d86-3ae3-48d7-94d2-d330b4e8fdca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "66645e4d-d850-4caf-b7a7-950ccce6dd6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b4cf640-4e56-43bf-ac6e-4c0ae1a4215c",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36c0db29-cb92-41cf-83d5-6af51a240cee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fec778a8-8d28-4899-a831-6200cbe1b334"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5392a1c1-de0b-45b9-8b6d-e512a2a1f138",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "49d01270-da3b-41a0-9509-4db78979db90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f903990-cd1b-46fa-b9b0-8a50c2f5d422",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "562bea2a-fb6e-4f43-b921-04fc45e89e35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3e4c875-c8c4-4896-8c25-336359b21026"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e321879-2b53-43a5-a83d-e5678c00c528",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "7cd5e15a-9bc6-4ad8-8ff3-651ec111b65c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f55d6c0-e958-48e8-ba76-69e013f18c28",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd9e976a-614e-4d85-a5dd-895070855ada",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38d6959e-5fe6-4e45-b800-ad80aa8ce6f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95b890b0-131e-4df6-98c7-fedf1e218021",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "12528f66-6a79-49f8-ad31-be3869b90f8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a1f573f-ae93-4a54-b976-3f04da7dbf1d",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13b01577-b23d-4900-b7f4-50377956a35b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68e07dee-1629-45e2-ad12-382b13e20674"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f7b9c2c-7842-4ecd-892f-b9f78b55535e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c15e90b9-8834-43ce-835e-143fbc253a5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b92415e-78cf-43b0-8c76-bb90c31086cd",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd04600e-4268-4e10-a38b-9bbf820d360e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbe4b3a9-d721-4905-b845-7ed1e74f7c5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96bd10dd-535a-43a8-802a-3dbf25af5ebe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a31879c-1d0e-442f-8372-018550282330"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6eea9b2c-6e85-4aac-b10b-9227cd07aab2",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c684b2c5-caff-49e5-ba4d-5c5f6b6ee552",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5268f1a2-f595-4560-a786-8cdca51a3ccf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b713789c-92fd-44ef-b852-24ea38b0f2d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f154a51-84ae-4d1d-b1c6-4725fb53d3c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d8319ba-7765-4e5a-b1aa-b920ee34f4b2",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "174f727a-67bf-44de-9f66-99fa02d8ab8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71cbb493-a9ed-4a4d-bfed-22b3b97ec7e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4f8bfa2-d004-4a4e-aa56-bae90548bd2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c9c722d-17da-4d9b-bd19-8eb3f686b47c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d961998-0e61-473d-a7fe-595f9449a226",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07849f1a-d5db-4ea5-8433-5497e5062c21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91bdd3db-aff1-4ea6-90b4-14db77ace5d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c47371e7-7722-4158-982d-a05c969bf161",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "11b267b3-f642-40bd-a2c2-f848ed6482ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb70781d-e0c9-4824-8b09-ddc0d58b438a",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb16cc88-bc1a-4797-a6aa-c7ceee96d539",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f4dfd1c-d67f-4165-8b69-aacf1c89078b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d49955d-09e9-4dfe-b073-4da8a71e9079",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "09142747-683d-41c0-b53b-4361d360dc11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ff2f073-00dc-4edb-9c1b-df99282909b8",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c5d6320-3955-46ec-b4bb-b0471d0d0b7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd00fd41-c59a-4407-83a5-ccdedbb3b1e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29f35dd9-153a-4cc7-ac4d-8b482c9d8d65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "57455bb0-319d-453f-ba65-f9028b0ef935"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59c8e97b-0317-4a16-8695-58cc0d6a091d",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab09a5a5-6443-4d3c-83ac-7045427d876b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d4071f0-b248-43ee-be4f-4ef2ed3c0a87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d7d4341-d851-4742-960b-91b1b1f474a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d1bab07-1d4a-4a7c-9653-c84d5271a085"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9fafc1f-8517-4b52-b7b4-24f87edd48e1",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4f99f42-3c8f-4df9-8e03-e2261fd47560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e97e498-26e1-4239-a241-5fd695fd9500"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c13d7627-2df2-4c2c-9d1a-5f9d560fd547",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ce03871-609f-4196-954e-c4f397eb8399"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0c89e40-6024-4a84-9a77-fbebc1dab1bc",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d22e5ac1-213a-453a-8971-8332fa920577",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f4a7e5d-fe41-4078-b7db-5d9968c22021"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23a0fd62-f678-4d85-80f9-1200a2af4598",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7116161-96f5-4c3f-ad55-2f1856bd7507"
                        }
                      }
                    ]
                  },
                  {
                    "id": "224f3e2b-44f6-423e-9a0d-08429ccacb45",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65c9a49e-b229-47cc-9ff6-0e231e90ffc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b658f1d3-bd5d-4558-b4dc-96d0ddf8319e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a075283b-944d-495d-ab95-5093da3bb7cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "910df88b-baec-46f7-b125-3ba8f48f9728"
                        }
                      }
                    ]
                  },
                  {
                    "id": "476b8660-d369-4a54-b795-52028df45341",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4c3ec5c-7f64-4a49-a9f8-138b0ca92eff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d49acc5-ce80-4c92-98ba-bd5ef387bbfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "514de855-8aeb-4e21-b292-ac767e8a772a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c880186c-5664-4c56-b2e4-aa454db5d2cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f200d63-14d8-4b85-b5dc-ebe0f4ba7ad7",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbe07be2-1459-4629-94d4-002a573ac23f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7668d4b8-9617-45cf-8903-cba78759a75f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c9ae0d0-22f1-48a6-af69-820bc2c39053",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "31b4fa56-4bc3-4647-b38e-f5ad9a0990c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ff0c0b9-415c-4e00-9d90-dde56e440adb",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff421b0e-09a1-47b5-968d-9077305f09bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d21ecc16-f972-4567-90c3-7dde1a6396ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88edaf9a-d9f4-42aa-8051-bb537b7068dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1c25ff9-9daa-4d4c-8ac0-1924e0eaed39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "374563cf-af93-4d9c-a9a0-1ef8f6edb004",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5dbe8dd-01db-4aec-b947-791675de2f52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b731929-7606-4d58-8da7-acec6952fa2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25495b18-0884-4d7d-949b-586f46af7211",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7bd52228-f599-4270-b00c-acb2a380da4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e9b0b28-3ad7-4632-a56f-f7fd4c8ca9a4",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93c3ae51-f8aa-4cf4-a3df-de0e022565a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e3862eb-8ac2-491d-9c12-7dd55e3b6d0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa9f4cfa-8288-4eeb-a8cd-2aacffa0d1a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fbd4daf8-f08d-499a-8168-fe107fbfda63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6825f1a-3cb6-4611-9abf-1c63ff8a2e43",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d295c451-7a35-4781-819f-fa8809af1173",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b21d9c7b-af1e-43f2-84b9-a0fbfd073005"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48b559d6-b460-4c40-abed-1da615d04694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "24863d8d-cd47-4a73-9375-4c41b4deb889"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71ea108f-a631-4d7d-82b5-9f701e7b8bc5",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec650ab7-3851-425d-b4a4-9c1336364dde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6a4679d-14d0-4d87-b3ba-7adb7db32d82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "421836bf-f910-44cb-96a6-5ccccc5b8eb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b53db7b6-8f6c-4ec5-ad74-916500b3646c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92ca14f0-29cc-44b1-bd12-e9908b657093",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01d7df80-dc17-4ae2-a7ca-94b08fcb7d86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4d075e6-18c4-4b9c-9092-124b5120af27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9af70830-f889-489a-98e4-846b01731aeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4768cbd5-ab69-47e1-a241-292d085f8e6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa23348c-2846-429c-8bac-1db2be4998c9",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a990dfac-a78d-4a64-a7e0-930f59b1e527",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dad0aa2f-353a-4fd5-875c-cd3dd26b4682"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04add88f-74a2-48a4-a7f2-0bc8b46323cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c7d82e00-3e48-481d-8b35-71f5be9e57dd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1f9b7a7f-d8f9-473f-8e17-cbf35994ba7f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e3bcbcf4-1aff-4c50-bade-5c7c964814bf",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0164cc9e-67f8-4997-93ea-4ae9d07ac3ce",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "66e762e6-045f-4016-821b-c027d7b27d66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f1e9818-e209-465f-a9d8-6b626918e41c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "497f003d-d0e4-4025-a6fb-d55c26e04697"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1a10dcd3-744d-4b9c-a487-bd45c86f28c6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "61cc6797-28c0-437e-9a06-4992cc104938"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "be7c24a7-65f2-4278-a447-6007df09251a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f5fdf218-f3f2-43c7-bffe-5f98fc25175a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0e936a0e-a95d-454d-8bc3-214ba386b5d5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7c4a8507-3c05-4420-aeaa-b0df9741b8d7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "042231c8-7e43-4aba-82c2-b33a9a462643",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c9c28720-c994-4201-9513-4e72eed24367"
            }
          }
        ]
      },
      {
        "id": "d82894cf-11c0-437b-b94d-7084c6a4aa2c",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "0cdb442d-1329-44d1-8e7e-bcfd84f392b5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "114df71f-f814-408e-bc9b-396cc3a2da3b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "99a7e3b4-54e1-4796-9580-208b65d8d3e6",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a585fd8-3b2b-45c0-84fb-30364794c608",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "654af3a2-8ae1-4045-ade5-4d3d1627ddde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da96fe09-7c81-4c25-aca7-1bb1ed3bcd39",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f9f358f-7277-40e2-9c46-476f28a979e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bda4d30e-027e-4109-9ed1-809ede9ac57e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85f70e9a-2198-4dd7-962f-77a68da9bc8c",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b821a8b-e460-4391-b84f-2572be061024",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14ac90e4-a973-4be7-aaf3-1cfe8b8e6942"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe905d99-546e-4f4f-9846-bfe94fdea88a",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "822d301b-7736-466f-a187-65e9ec3f33ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f1ee205-7fad-459f-b413-eb38b07bb519"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e241b7c-4730-451e-a139-5969f7e98383",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45702e43-8796-4244-9fd8-c0f32d4397be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7f1845f-2321-4fe4-90a9-9a8e7fb1220e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b563600e-04e1-40e3-8e28-3f41d7265d0d",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52ec2d79-11fb-48c4-a713-62353a3bc9ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c892bf51-ea09-4da2-a4b1-554eb113d1de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70f48f6a-b05c-41bd-b214-afb2b91b0cb1",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7c702a3-fa7d-49bf-b6fb-59611b3a51e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a1bae42-d4da-47da-a1c9-52b1069ef78b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b8f7882-bc15-4beb-bda1-7f77755d1386",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4ad2c53-b07e-490b-b7b1-d286fb472628"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abba78eb-8441-414e-bc2c-4e806fca9911",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5709faa-9a1f-4f42-a2d4-f05289d1fe10",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b773728-a058-43fa-a4f3-fc4d4e8ebcff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d38e527-4d73-4d85-b37a-64f3e8b3676b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3822c4c-58fa-4f23-ac7c-833d7e1e4b37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fee3ee4-d3b2-4fb7-8e5d-75dc1ff0ccfd",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b86201a-69d7-411a-9291-622c5c65809e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f0f48c0-06d6-4488-8533-b31746501779"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7b2f160-078e-402f-91cc-26b1638b95ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6ef91de-4946-49cd-847d-3d9ae1d3cf07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18f038c7-146e-4d2a-8c7e-28306cbea3ab",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21483af7-eed3-446a-8e8d-013a77d9a32a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "081a1fa6-0c5a-44dd-a975-5c824b31d0ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26557644-60e6-45ba-8b56-fc5462276ecb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0aa105e8-4a1f-484d-910e-3ccf3571d1a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6593383a-0507-4e8d-b265-63ce2422e4d3",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90fb80d4-cef2-4ba7-aeb1-30c7bef701fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "123f2717-3da7-495a-bbc1-188fee740632"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2139a68-e819-4a73-b166-79c5b7094a5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a7163fb-1562-4681-9983-06b48b2ba4f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b606c402-5f7f-4590-8ce9-aac1dec2fcf1",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94accb12-259e-46f0-8a35-d372295c91da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cca9a996-8524-49ab-b248-4f40a74b7bb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "305cb63a-b9d3-4acc-ae18-195c17a896a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9e38a50-acdb-4264-ac1c-b5673291335a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ec23864-c8f3-401c-a3f8-7126770a7e4b",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "204a6f7d-1d5d-4dc8-a8ab-2968ce2adcb1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b7aeabe-2f25-447f-aecf-2134feeaf080"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdbdeb35-1bb4-4212-907f-54f2eebf4a43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a8414f3-2cc3-4894-803c-36899350195e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d081c35b-56ad-43b4-b99d-74b6d656f89f",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cd543ef-e41d-4fa3-98e9-b42010b21cc8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f20fa846-0399-4cd1-ad0e-1d8c110fc864"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b38a5a08-5c50-44fb-ae16-ae0540ba01d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d58965c-87e1-414f-8bd9-78005b2a1ae5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2f72ebb-c702-4c5e-bdf5-c82ba2636248",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d27526f-8271-482f-8c18-4186453223a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d009eec-c692-4777-ad1d-d72ead1d36bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83222398-71e2-4e2d-b5bb-26af2ace9a88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "269f3f05-4524-420b-b98a-8824dad9ac5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15ff01ed-88f1-4191-b9af-e984c44419e8",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4402cd8-3d5b-40bd-9527-5ee21a23a099",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63a3f76c-2f1a-427e-b467-32b8a0e097d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ea3cf03-e0ae-4cec-aeaf-81ed9196aa4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c95b3a22-1385-437d-a7b0-145b74758947"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb30da6f-9be5-418d-99cb-a7b8d42f0995",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00ab082a-875a-45aa-939f-b87a3c6e9e60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d36f89ee-2659-474b-afd2-69c637d7c2cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79935957-d4be-4843-b444-7f13c14f42a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bfbfcdf-0ac9-4f22-b2dc-69dd6440a137"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b826b75f-2811-4259-bfca-1caa14eefbfc",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2c88f2a-a91e-46a0-be11-8a12ab46e23c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f019471b-d701-407b-bbb0-d4863acf28c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21e02c41-24f5-4588-999c-e5d81acfc07c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1268528e-9ffb-4b6b-a79e-0f91dac96d95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "812872b7-1012-46e4-a041-d7393c68fbde",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a14506f0-421d-4dbd-975f-68100520f28f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "849e90fd-d83e-491a-a6f2-2ccf2572cbc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91d01e70-620b-42d9-920c-b549733e5bab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3865ac8e-7d94-4061-99b5-1bbc91ca633a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26c07c9d-626a-4aaa-873b-e571368397bb",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bade35b-16ac-471d-8d49-a3e3eb911ac6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d932bc2-98fb-458f-9713-2f476026a6b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b73350d1-1655-4e5c-8f03-5cfc0e5751f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a49b6d38-6d7b-4f73-9476-0807d9fa90a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6c6f261-90da-48bc-9a82-bfd7185bfb1e",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af143051-66c7-47aa-8049-a32d831f6985",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "953ca282-c22a-4954-b7c0-c76a9b14c696"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "566addf5-828c-40da-ace9-65463440543c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "648032ce-d546-44f2-adce-e0b28786a996"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f684b5d4-bbd8-442e-8a48-13995734bcbc",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ec033ce-e2cd-4b76-be6b-52e5fb20fdef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fed78e41-ecde-4156-83f5-17205c1dc38b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "360d8a96-de86-4de5-9b85-ebee2fc3b247",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6678f65c-eedd-43d5-b4bd-a1cba0ebd872"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a027bf1-a4b6-4008-9bf5-b7a6ecd41d16",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a255a617-50be-4f91-9765-ed9ed99c2ec5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b67550c0-c590-4acf-81f6-a68f4c12ba8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8c2f08f-fa63-4597-8e62-a16adbb963d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "599f93e6-b74c-4efb-8c11-e8bc53c6f95c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a21a78e1-45b3-445b-bfbe-f620ba23990a",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c6949c2-82bf-4106-b65d-7ee7935fe6a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e6c4fa2-e920-4bd7-886e-91be0ff53306"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c813d9b-dc59-44b9-b915-7b9c6eac7b84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "904ebbb7-60e9-4d5a-af8d-ceb5efc4ee32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cf3dbbd-a696-4119-8dc5-4cecbfc70f68",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "731aad98-f08c-4c46-a3d9-f77a0c34f93a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70afbf9a-6e3e-425b-83d3-b2389cc94c60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd2385b0-7b34-4de3-9840-7248a3d6b9ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8abafade-cef6-49a6-bbc4-a4e10fafc3df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8aa6d1d1-e71c-40d8-91f4-800d280a4dae",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3b7cb5d-fe22-4a66-83be-3cb62a747422",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "726650e0-5b75-48f6-a204-943644fa0af3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fffdc28b-39a0-47ad-9285-0b4362b7999d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8018f39-3083-4f10-bf7e-2e56883cf1ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62a3aefc-cfd2-440b-8bcc-44069881e1a1",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26a1f064-326a-44ac-9cb9-50a0cf4399e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "738d76d4-8723-431a-b6d3-6b77b40e205b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "739bd2fe-24ea-42bb-b3b3-b5273fd29e0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e400dc58-7925-4355-af3e-db1259197c68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23a6e160-e699-4acb-b63f-b2af5652c4e9",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c32a6d8f-851c-45b7-84d7-79e47be8813c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07d52489-f337-4b23-ac5e-525dbb2341e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c939e5aa-75d9-4077-ae89-a5c808abc5ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fa16931-2a99-4998-a5ed-cd643704b9a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43a04004-1654-4c29-a4de-df6c78e816e5",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfbce2cf-f9e5-4399-8674-937621790cc6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "063e7624-8c31-4efa-b113-3bbf511a1e2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02c8e676-655e-4d75-8693-f8327540ab15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a47d845-7ae3-44b7-aea8-7f13fe0bd10d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "269f2e5e-eb8c-40d6-8785-a3b2f0752996",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "238ae19e-e071-4b3f-945a-4a3ae4ff4491",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d16324af-5465-4e78-ab0a-5f0ad02a0159"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f95aee3-14ab-4492-ad0f-d1559f65ded6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "381ec60d-cab6-4ce1-b3bc-a920d352142a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd8cfa28-a465-42ca-893d-cd3b5d62f923",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4af2f1e-7505-45b9-8c0f-6cdee5e2e540",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0013aef-8a4c-4cb1-b441-a0aa5251fc60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2c4a6a5-0cb0-4ce8-8a72-1521b21d4b1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eab42248-17bb-4108-aa77-341d4c267592"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dede30d-853f-4669-86a5-0218a4556591",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c443788-003f-4d3f-9c6d-0f50e83cb948",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae5f6fb8-74b5-40c1-926a-63e09334104c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a03bd4d4-e63f-4c91-a070-8ee82f58f00f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df1d6ae5-4cb7-49cc-a7b5-2653ccfbc31a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5eec184-16ae-4f53-980b-0c326bcc4d1a",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2071c2f1-0de1-4368-bb70-f630cb0017c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d73af657-dc78-4d70-8a16-971390e91593"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df39c41e-d28d-467b-95f7-3a5a5a8110fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "140cac6f-123b-495d-92a1-15d5da10c138"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f806e7c-d298-4bab-b246-a16cbe4ec017",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdcad314-6ed5-4ce0-ae0f-df767af7c066",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba592a8a-2e6f-4cc1-88ab-9fc79ae554a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6515b839-36e8-47b5-b46d-fea29f531749",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e40a4eb-a834-4afd-ac79-f8eff76dc847"
                        }
                      }
                    ]
                  },
                  {
                    "id": "517535c1-1c46-4614-9a2d-601009043fe6",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b45a6f7a-da1b-4d3e-abe4-8fc4aa1f9ce1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "097c6f30-8a91-44bc-9426-5a77688165d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79ba9cd8-3e54-41ec-ada6-6faa7ec881fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c346066-9c07-46e6-b210-ac059c176c92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "034e205e-685e-4b70-95e8-e62c36b744ba",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72834b2d-4d2f-4c8f-821e-c0f5f201c66e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72dd4ac0-b0cf-42f6-8482-5df9d65687dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0b1e28a-fb65-4ddd-947e-76c35956f68e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8831e476-a7c3-4a32-b278-cdcf485f36d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d0a4a51-016e-4cc4-938c-9343bb6e0744",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30740a58-8316-46de-ae50-02f9e1c528b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "837a8f7d-82d9-4242-ab31-aa1b675e411b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "725596e2-d748-4800-8926-d5fd66972a48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d7e6335-b127-4a7f-a9e6-3c7c654496ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdc3797d-1c91-411f-bf7a-4a8781210248",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8811718-d4c6-4d4c-ad69-9e3fe0a97ba1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5a228bd-29e2-4501-951b-0e5db1b69e0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d772dca4-6e50-4abb-a383-20aa5af8550b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e3549eb-2726-467f-972b-685bedb122c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c4d0ed1-d87f-4a35-a769-b4da0c006244",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2af045b7-ac2e-410a-b65a-2e9b7eacee1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ee628ef-8168-4ee3-8fd6-663d2381d161"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "791f042a-5c52-4c9d-b079-d1b889f92dbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfd7b335-6864-41e2-b8e6-08ea9b2c25ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b91ad812-9125-4412-8e1f-fb7f0b8da406",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f09e974-282c-4533-9677-a6d12d801d2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11dc5a14-ccf8-472c-9267-3d2822b72301"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e50fcdf2-e438-4e87-9608-1c09dd4eb332",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6899ea5-3ba7-4a39-9a30-b859e9ed9eff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c11f0f0-c6e1-4666-87c7-9888bd8035eb",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "073328bd-919a-42ca-82d0-79daa696a652",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d3c2818-b1a2-44f9-b07c-bef6f6c6ce65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83166d88-e590-49be-9278-a3766fc59650",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f193eda2-4e48-455e-b6c5-3990fc992306"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26c7a5a6-ef04-4f92-acbd-5988982888a4",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2007c978-0638-420d-b23b-d5730bfd01aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3662ab2a-5f5f-4b62-ae13-5f7bd34a69ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "558daa6e-e540-4dc6-9ea9-c1a9503667d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "031b4f0a-fe92-4b0e-b704-16ffcbe8f45c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f2de4a2-9674-41a2-82c2-60d9c470dbdf",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3105991b-1302-4ba3-a41c-96c5e3bde4e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e3a0e97-21d4-4c82-9246-8b40e5b24b1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba78181f-94cb-4798-a949-a3d7e06339a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1dbcab5-9f74-40cd-8a64-61745faf15e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bb387b6-c9f2-40e9-a10f-e3b5fec585b9",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "509624bb-78e8-470b-8ab2-d3ecee730240",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f86942d9-b247-4d33-83ab-af96f18da396"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f15ef9d7-4596-4e32-970d-9d0cb94fc451",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "765aa8eb-0453-4351-9984-623633922e7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6fb2d09-5af2-4272-85be-9d9c63cce834",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6723a500-a656-4eb3-a34f-1fdf1cce00a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "997a2b8c-8472-4b86-be2b-54218ed113e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "164ac71e-3fb9-41f0-9536-7826bee296eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2c038f1-3d8a-44b8-afdd-9077bd112e1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9846a6ea-f0e4-4c98-bd7e-2b8106ce4dd0",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad35aef6-e9d3-4815-8268-f345f362b6da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4abd78e8-24ac-49de-8ddf-010698252140"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a563737-e453-47d4-bde6-5f36f4b198a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fda578f-3d89-47ce-bc86-2c17ea1afb5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6bbe0f2-4674-48ad-8bf6-179349b88d34",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "058bedbe-8c78-480c-afab-aea756cca219",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "395dc07f-13a2-4e9d-b717-30d63e1e86e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54be8e5f-0dd6-46e9-bac3-302f19c2448e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4310d9c2-efa6-45fc-980d-12fdacd53032"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a3a6ece-96fa-4a72-8375-456176396d30",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d51b62b6-fe85-4633-b032-67a36418eed8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72e51c2d-9540-4458-a286-9afe93fd8f96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "145cdbe1-24b4-4f6a-ac2c-6684e7a9dcfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20b119e1-4675-456a-97cc-dcc37216e66e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a769b9ac-6572-4f8c-b9fd-edc55c193cb2",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1920e974-3842-4386-9be9-e6c9b24747e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be1dc5a5-d0e1-4733-8788-b9bf020374f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "878fccc7-e97e-48be-aef0-3fbc364bd554",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9200e366-9c61-4568-99f5-15f3b62dd99e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba915e27-e808-4822-9550-6b0873c667c6",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8921c2a-bb7a-47c4-98c8-beaf42b62c43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f70eb702-f7cd-470f-b29f-e678aacb90c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3a91a97-a2f5-4fce-8ba5-061e0f01bfb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20fa5585-4823-48f0-a5d1-085050266625"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32778fdc-b246-4b31-a835-5c8c709c4518",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a196649b-98fc-4a3d-9e1a-892420caf6ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebceb879-c4f1-4e06-9419-0b1f15ebac97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87968899-e396-4262-9ba9-ef50df37516c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f5983c3-4412-4196-8654-000da369ee50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8fdcc5a-342e-4322-ae9f-77ec0540e655",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b57e1dd-6cdd-4e7b-9c57-48b3c29679f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c53e775-ff79-4944-ad12-5db354dee330"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4199321b-9d8c-4a18-abc1-5b56ea3716f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c2c5224-0669-4082-8058-51aeb61875d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "add05342-6358-4752-a785-ca35c039731c",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59d232f7-c25a-4d51-bbac-082cb1e26033",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53e407e0-45fd-47e3-81c9-1a5e346880d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d4ae6d0-b233-4786-a60c-abcb426f52fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58d1b508-01e9-4792-aa71-8b27becfda9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e45368fe-2e57-44cb-b0ee-9c6719f57590",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78f91370-9b0a-4c6b-a1d1-23214e7066dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "900f3548-dfa7-42e6-8da6-9c8e022b7e74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "725ebb39-37f1-485b-888e-60eafb30b0a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e437711-e08f-4eda-8a4f-7807a8c02001"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68af91f9-493d-42d1-8ab0-2757542e5269",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c382ea4b-b63e-4ac3-a3cd-43170d84ddff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f80a8f6-89d2-4e61-8653-d9d6581e84f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4c54d67-d086-4cf6-8f8b-a0426a74e633",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1af41c4e-3383-41b2-bfe7-bc2e870d7757"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b14d95b-e7fb-4827-9057-f828c4ceebe4",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21272440-d500-44f3-964c-7e3818a5e1b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0244363e-de62-43dc-bd89-131a5db2359a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b4febeb-9e71-4a58-a611-76fcbdc6860b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4afd13e0-3936-481a-8d28-75ebc9eb506c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7916a808-700b-4568-b4d3-7c5f78469054",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b503578-59ad-4f0d-a030-fa0d48e922f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a8b1ee0-27a0-4edc-aba9-6fa42e1b6f2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95627354-59c1-4a90-a71d-ed37766a293a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8d14d3a-3884-403a-a3a3-d7b340d8b6d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72654ca9-32a8-47b7-8f33-a6888eaf84df",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18b6ccde-fa59-45bc-8cdf-a85db88dd3e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f0d715a-fd14-4d04-90dc-b4974708c7d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0c44c23-5523-467f-9ed5-8bf5eef3508a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69ac86bb-5289-4e09-bf90-b7fa2b7b32f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9177a4c-4915-44fa-ae35-6cc3df851b35",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29eabc71-49eb-4075-ae88-97a8bd0364ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72fc310f-9777-4dc4-9c8a-d68ad929c0ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74f12b05-9e12-48c0-b52a-90799bcd8348",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f073736-4528-472c-8422-98708a159cc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcb9112d-3c09-432e-a4c1-3fd5b5613a31",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6071d45b-5861-436b-972b-30c20c0d5b52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90d02863-a4cf-43d7-a196-f6c3fea6d0e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f877b15e-8d93-4a8f-8b7c-26b1c9720944",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "162c2395-ca01-4f35-9dc6-56c0bfe997c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e70fcfc-fcc8-4a7f-9911-080953a19c11",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5ffabf4-f946-4f5d-968c-2ea7c09c3d12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccf7a1e2-1221-4c6c-9396-b2a8b4f761c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad2192b3-3d02-4e12-8f38-f8abf8a3ae7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21b03c95-1aee-4fff-9ec5-5c0b58138848"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bacb512-d7b6-43df-8a46-8ef363a1102c",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b27a24d-769c-42cd-9045-78b25deedfe0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82a828f3-e07a-4cd2-81e5-dc6eaf4d6f34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03ed599a-21b3-4275-91c9-018a39572ca2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b6038a4-6d0a-4d6b-829d-4e58931ce154"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ace8e319-a05c-45d9-b982-f659e7e85b2d",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "459ffb81-65f4-41cf-87aa-15c3ddc2e0f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cd7cc2a-1b21-4d1f-83ce-403b3caa38e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a922d36-81fb-4e28-8f18-96b7252b30a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a85a9a9-1d41-459e-8773-147929f3cb3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f06a083-4f50-42ba-8ca8-793c914133a3",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f0d2a08-94a6-4518-9225-7cefa79bf2d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8efd343-0e10-4eee-a02d-0066df316695"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6056e9b-9763-4ca8-8be9-37c842e09d71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d4aed03-4d6f-4df9-a251-7293535f6ea6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44d42227-9b36-4648-9696-f3498586ed0b",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "669b61ec-d8de-47c2-ac84-38a69a0a9074",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6c65eb3-5db6-4e48-8eee-c9432c8a7cc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df801e89-143f-428f-beb9-b0918d80c4f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55d6e7eb-c92e-4cbd-a408-22c46561ef78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dd64279-e6e8-4933-8e24-af448a2b5287",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71d0f81e-86be-4b4d-b388-ede33baf032f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cde024e2-05e0-45b4-8de4-66c7aa50d760"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b37925f-4783-4ab8-bb8a-8987e90bd780",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f856fd5-dd83-4006-b722-b1749fa1651c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2050cb0-892f-441b-b657-fe51777075ae",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6be11928-f0ef-4ad3-8867-e2398184a9c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "282f7de2-ccc8-44d4-b8d6-3f78baae53a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd0b3c74-7d48-4e02-9a13-2b86eb75f940",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84bbba1b-0164-47e5-8e35-3ae99ef729fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "732ca2bf-b322-4ea4-8f00-ee6a8e14b24e",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68a046d6-11de-408a-a4ab-a0823ec08f22",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ab55ff0-bb3b-4cba-98c4-7d14ce2a769a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "042a6c92-c6f6-4ea8-b54c-eedacd243326",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fb32090-39ad-4e76-921f-eb7c823d029f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b090fa2-79eb-4333-8e29-fc7e878ce6b9",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1552b77-2168-4c19-b713-6997d7a3d896",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eafae7aa-c3fa-406c-9f9f-11633d37d896"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d71de82-c9ae-48df-a63e-903e034cbe1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39fd18ba-8c79-4cdd-80d0-eed2e34b0209"
                        }
                      }
                    ]
                  },
                  {
                    "id": "491d6b3f-b6f0-49ad-a0c8-352e107d0162",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e2d186b-34a0-41dd-85c8-295334a9989a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7338e2c-714c-4216-8cdb-0c73fa79cec9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61432876-c7e4-484e-bb11-9e5c28b99d76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9a9127e-ba84-471e-98e7-a15173e8c058"
                        }
                      }
                    ]
                  },
                  {
                    "id": "808f6747-8c2b-4184-b68e-3e2b75e488fe",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae74aff1-0a18-45e4-9213-5ed5f4a3fd0f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b425b29c-e12b-40fa-93fa-78e0d4814c1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0650f91c-1bcc-4ae4-af69-243bde1c023f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b9ba245-f21a-4271-a5d5-7bbc308c4a1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "566c2a3b-1d51-4469-94df-8ab379dec1e2",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14aa17c5-d7a4-4f01-a57e-e39882d084f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "741ad688-7c80-4223-b471-73869b303801"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "428c025e-f0a6-4366-a2fb-599f04fc91e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c11dabab-37f7-44bd-b655-ce0205117919"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eb9da98-85a8-43ca-8dc2-58438b8ddfe4",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9f66e9d-5052-4c7c-adaa-c40b93e00f14",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db6b1fa0-f57c-4f0b-86a9-80132fc69e1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "485161e6-2251-4483-bb0f-f4c675e21bc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c187ba1-fdc1-4aa1-8908-dd7c5934cd19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "131805cf-221c-4972-a3dd-ee86b74122b6",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2174671-c3f6-4324-aba0-c9f631259fad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02623b34-7983-454e-be8e-1b67fb8827f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "092ab545-e297-4bb7-a297-27db5c16ca30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5bd1684-eb96-4989-b04b-25ffd652cef9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16b564dc-ad02-4d74-ad73-06b15abdcb2d",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ca67015-a696-409d-bcbd-64d71fcf0c53",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0bf8d6f7-71a5-4dbf-8046-3a64990595d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7f4fd46-1183-4b3e-916f-443168ad1765",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ad5a75a-baf9-4ffc-8f45-6f75813a5d6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b4e6be2-8cf1-4e8c-ade0-64368be67a0a",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "257270af-c86c-489e-8fe1-8806b80001e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc809aa3-e301-4453-9ec5-e97b4cbf2bab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12a4966a-32ec-4fe6-ab9a-589a28b094b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b44dfac8-1695-4347-8329-3ce4277296df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3c66b9f-6788-41c1-9ba3-f2aab83b648d",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e91e06f3-834f-4eb6-9094-62535c4f867d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b56f1504-210b-4aa9-9c0a-9ed922173f34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38718a8d-d413-4f54-8fd6-2a4b3da42b1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b037ed8-b370-4ec3-b155-68d319e38bdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baf89239-72af-424c-94ca-c4de7a0d6aa3",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aa933a5-038b-4cd0-84bc-2cb210ffd682",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "33103e06-b093-4934-bbf5-a2b7577b04f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27301ba6-3051-4a56-aebd-bd241daf24af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b48157f5-0d18-4606-bf0c-8b13b1577a8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "302383cc-94ad-449b-984b-e5f8fbcb26e1",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a84de81a-59c3-4c62-968c-a3c39c660bf2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a012ccb0-0f18-4a8c-ab93-ee100736639c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0373455-6433-4d05-94c4-39d4f9507771",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc9e0052-69e9-4b21-b720-3c21e1be7f9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1e39f8e-34cb-40b4-b8d0-48c8e9964ae1",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4936e68d-7e25-4828-82f3-9a6dced36f84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e0382d3-ca5d-4675-a71a-d219f02160d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a958a4d-5415-415f-979c-db820cfc232b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41ec67eb-b1ee-4fc1-9f6c-580cc35e7710"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c84913b-eed9-4477-ab17-7cbc3fdbde3f",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "065f1cb2-bb5d-4c05-9436-19911b352b65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ef2672a-0c65-4e8a-aa90-3b86cc4f0029"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49754cfd-48e7-4165-a267-b09379c83922",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7d80cbf-5443-40ce-8532-235183ed269a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd729975-91c9-44a6-949a-df9998e2dfc4",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39b5efc3-bd6c-455d-84fb-698f79438ab9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "877d67e4-e8ea-4026-9eed-2e81ff48e7e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae0e814d-721d-4624-9831-29cc163a2804",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63bff786-b31a-4e69-be5b-ffbf39f3ba77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a5f6d97-a384-448f-8633-e34d6b406bdf",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5b2f040-1401-4168-afe2-2a444ce3bcb4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f50496bf-78be-4c71-a534-36fcf39509fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "812b7de5-2730-4bf4-8f08-a6c8e540268b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5d96dbf-6d2a-44a6-9969-34598b5333b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42c1f83e-0bf6-4426-8553-3fbccc5d0a99",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c2c9ce0-33a0-475d-904d-4a675615b99a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de87c7fc-a808-4413-9a3b-7f99b5a2fafc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2743d59c-3b92-4430-9e7f-2677cd468473",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e71f36ba-c7db-4087-b090-631680dceb9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "346186b0-dd8c-404a-ad85-edbcab537377",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38c4368c-04dd-462a-bd20-867ec94bd97b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bac89e67-f555-4644-9513-cec8e4273bad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02901777-09a9-4b7d-bc22-1c1ccccd0b1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "680fb123-0b8c-4f3d-90ab-f5fd3919c8c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d766383d-0082-4204-9aa7-874d7814ddfa",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ff4a5e7-f350-416b-a3d4-be13439168ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6bcfd989-357e-4a04-98f3-2a62a94cce12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fb5add7-2e1d-4e74-bad6-0a3292774041",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3d4d002-d912-4e0b-a640-0ac5ef95419c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83a5e0f9-e005-49fe-a5f2-e50501063cf8",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23772175-5614-4c9a-8043-768a5998b52f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10a3dfc8-443c-4c7b-9237-fdab4b2d38c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca6493d5-ed24-43a4-b563-16033e7bcd0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cf39ce6-340d-47b4-a880-6737ac9c049e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "640a0861-24c2-46c2-b6b6-d82dddc67d68",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c009ead0-16ca-459c-bfe6-a17c4b9a4c5b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3a42f3c-1de9-49f2-ad32-28d09a622ca3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf0b556f-7ffa-4ce7-ac3c-44c037fd404e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80fd641a-17a6-4785-8411-745c06005448"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ede0ba32-5f0b-4926-8921-7bb988da419b",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4db7700d-28b0-45c9-a34a-a974f2084bb5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "803c3e56-ef91-402a-96ac-9cd8553f6a5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d6c7ba0-b42f-4431-944a-b78629dfccbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44970a47-a28e-4e39-b828-87ad4591cb2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a64495cf-bb44-46b5-886e-1fdf1d8597f2",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53c973a2-a6f8-4704-8aea-3bb2a934c785",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd61767f-f1c9-4f04-a0da-d39d1f9c9c3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d704850d-2236-4a9e-af1c-9a95a474eb7e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9477a56c-b947-468f-b0d5-7a7ca8e8c9a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd4f1892-4b9f-4951-8b3e-b249fd94fe2a",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c98eb82-3934-4d62-aa45-c558f6a315d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a506b6f-f956-4b38-967a-577d1a420e3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7948c5a9-ab40-4fdb-88df-944595d4ce5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c64a98c1-0292-44a4-86bb-686ea0908bd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be25d967-f135-4471-9ba8-ebfbcc9cf1be",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3b110d6-3bf3-424d-be82-f12e47b178d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76e215c0-7f55-4d23-8422-f60ad7c262ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "411b894b-7f4a-4276-89a4-d83edbb1d1b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8803c845-614b-42b0-9591-d6b5b634c8c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad000dc5-4691-464d-b741-57388794f87a",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49332b9c-6f34-4167-9ac2-67d3ea208471",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df7a1f99-fa56-41d3-8c64-25ca894499a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22991863-03da-4c4e-9d3c-4a73fbd3893b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "457e6f70-c2f9-4040-830a-cb2763036f63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d4d356a-52c4-4309-a279-f14a23ba1893",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90fe1f94-36d9-4cc9-bfa6-746f38d8f58b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a85a1407-e206-42af-81da-97119930627a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "653e54a4-37bc-456e-9c22-af1685438978",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f67254c-82ef-4bc2-923e-a0b030bf124c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1026771f-875f-4f40-9da5-e9e4f63a651f",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49e4a6cf-230d-4be8-bb9a-a17b02bfa625",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c52f9734-c1f3-4a0f-80b4-224fce18f932"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51a97708-4caa-4578-b709-9290bff98db9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "649cb8aa-a2f9-44b5-9dc4-01c774575351"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d96b313-f841-423f-a206-ae5c0e02d9c0",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2105b449-4458-478c-ac5b-96ef01c8ce9f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79727219-3d42-4992-a21c-d1407a9eb5f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc745b0e-cc5c-4587-818f-133c5f795b0b",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53ed189e-9bb3-4369-8bf4-d66e21f7119d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14692d8d-56f0-443c-a4b5-47b04a4ba0d4",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "def1f9a0-a86c-426f-9d94-7947e930a107",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85fc3139-e560-4916-8d94-72b37ccc7e51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85168970-372f-48a2-99fc-17ffbc0cdb80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97dde5d9-0918-49ba-a12e-e96059447e7c"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d0bcd49e-95cb-45fb-a736-b470f9d7e5e2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "73834e0b-a7e6-4333-a82c-1fce384ab5e1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "864338c8-4a93-4c6e-bead-a46b0a4306fa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "253e3ba9-9ca3-45f9-86e3-4bd334c174d4"
                    }
                  }
                ]
              },
              {
                "id": "07cf2798-2da5-46b4-94ed-01eac553a471",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a7c00c8a-9d83-429c-8774-ac3a1f37f47a",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd8a39f8-52c5-409c-82b5-c5a913e56946",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "78a04b27-ab00-472b-b3ad-12eb33f708f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f1f77f8-aa15-4da8-85a4-57aa41625e0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "19d43a12-3a1b-4481-8978-361facd20e81"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4ae9c132-f65e-4963-957a-16a76c923345",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "01007d6b-f3f6-4a65-b637-4f951912a946"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6f38455a-a4d0-4c1b-a56c-eb56dd3987b4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a95629e1-1f25-4f72-afb1-76519e3ed318"
                    }
                  }
                ]
              },
              {
                "id": "36aa952b-9d74-48ae-9b32-fc48f13dbdc7",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "7fdb6815-6083-481c-b35b-acb87e5f739b",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72d7867e-5601-4ef6-aa99-148828cdc49d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "8de74604-72dd-4872-b214-6ab55f39449d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51288dc4-4e79-489c-813c-8b6b5aeb1c9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0f557f7-613a-44c0-a208-a6c6622aa151"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "5391e823-a793-49c2-8779-7750cd65a248",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b9203ad3-79a2-45b7-bf97-26f2558a1272",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "036c86c8-c7a6-4942-a734-022340371294",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "29575b88-97c2-4723-8abe-8efeff0b50c2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f07060b9-b76e-49c2-b9fb-a9997a69ff31",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "741342a7-3528-4af1-bb80-fa3160a7f178"
                    }
                  }
                ]
              },
              {
                "id": "163c294e-eb2f-4291-ad0c-918b584c6634",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "19f34d39-4e5c-4603-81ac-e89758e0333d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "456b11ab-48f7-4857-bf1b-1889c4f2b885"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3612cf1f-a1fe-4e0e-bb76-09e225d0e204",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "96bcb2e6-d805-4d49-affc-d2902d4b9484"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "943c4436-6dba-4ae9-ade1-db04c4cb0a1d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "81acf10a-515a-41c9-a710-49a1baaffbb8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "61fc8d48-b047-4683-bd01-27b62ffe2b6f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9d14c813-b94a-4fdc-9112-782676f2f484"
            }
          }
        ]
      },
      {
        "id": "932cf3ec-e3a8-4ba8-82f0-c00c04337b78",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "a3c85191-f4c9-4782-bbcc-fb9e836586c8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "95bcfa2c-b80d-4a88-8b91-52dd8b983fc2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c601ddf1-ef92-4166-9daf-58bf53959c46",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5bb90bc-06a1-44ec-819c-2ec8be9705f5",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "fe801975-0bd7-4558-a3b9-9d73e9c298de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9cd7cd5-4485-4c41-a37a-9dc20c974c3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1f49a0f0-cf1c-4011-a1d5-61dc1d33dec4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bb0b57bd-4a90-473f-905c-6a980ea8a3eb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "963a1cc9-ddb8-4a80-9606-31bdcbd00f17"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "57661684-c751-4f79-9d0f-30e6afdc8932",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0a86b894-5e7a-4970-beba-a6a4fba6bc03"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6daf474c-26c3-434d-9137-18fdc17d663a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "70f7c371-96f2-4a0d-8fbd-28724397c9c6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "345ebf82-2c64-497c-a825-9e1827b2b653",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d56d5940-f76f-4bb6-b24e-afdad53a99b5"
            }
          }
        ]
      },
      {
        "id": "b1d9304c-206f-45af-8497-ae77b2174062",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "adec0ca4-b6b7-47e1-92a3-bdad18fe81a1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4a65b22f-887e-4a1f-b4be-57e39cde94e5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bb998433-e3a8-4dd3-9cc2-fa76a8e17e54",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0587556-887b-49db-b078-8554b35fdbdd",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e7eed5d6-ba88-4c04-a0b2-9e460eea1b2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dd51d02-6aca-4473-bec3-d00beb4d463c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f6639386-bcd6-4a08-8a7e-2778d4caeaab"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a43fb325-7630-4b45-8108-ae58061ac494",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0adb93ad-1690-421b-9240-00878cb186e4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ccde74a1-dfae-4130-a357-5c8be0ca867e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a7bd8d4b-23c3-4eae-a1f6-36bdab019125"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7ea66f2d-0185-4b40-bc6c-29d7d425ccc1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "25d420bb-7300-4fed-9735-c237942e3c2e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "65d345ef-202e-48ba-8764-15e21690f7b7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b5a11eee-c9a7-4a6d-b0b1-16762505d3b8"
            }
          }
        ]
      },
      {
        "id": "900e7412-49e6-43db-9a69-1bc1a12fc4fb",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "24cbff7f-9568-4a8d-9b28-064216f01aa6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "879d109a-59f6-4b4e-a33b-fddadabb9e31",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fd373a1f-ac7c-4465-8b05-d5040f7d341a",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0ca8c29-8a49-4d6a-ba02-6b132fda32b3",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "edabc37b-65b1-456d-9fae-7d03cb3c036d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "970af8e8-1803-4ced-b15f-8f532d2878dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f67e72de-40da-41d8-8f77-7a8afc9ac922"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "69921e09-6d54-4b66-b979-8b2f54968023",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "79522425-05ba-420c-a2b4-8a328ca2d3df"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "45b10fa4-055f-4fd1-aa56-7568b97900fc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7553b57f-c234-40d3-ac3b-479c0a162692"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "af5be33b-3386-466e-a38d-880991a0521f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b8692a1e-bb06-44bd-a61e-e9a0b5a23899"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5132de35-7982-489c-8aa3-1808c0e6a4f5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3794b72b-ce17-47d1-824c-d1ae6c009304"
            }
          }
        ]
      },
      {
        "id": "709a9ef4-0ea3-47ad-9945-bbe4cf1e5ad1",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6bfa8b3e-ce37-4993-9b70-a58906447ac1",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "82e21940-fde2-4c8f-bee7-a5c02014e19d",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "b077d7fb-09fa-43a0-836f-8361231abf30",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b14bcb32-b75e-457d-8015-a8ebb39e8d90",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "79312ad7-c540-40aa-b4a9-aa2fe075c5af",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 71.36140350877189,
      "responseMin": 6,
      "responseMax": 671,
      "responseSd": 80.29847337341056,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1704155702648,
      "completed": 1704155732341
    },
    "executions": [
      {
        "id": "d4d76c1c-cf74-484e-a153-aebf0b914186",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "793aeb83-0e19-4d9a-b8ac-830d42e1d215",
          "httpRequestId": "491cd313-64ec-491b-a909-185c630d1e63"
        },
        "item": {
          "id": "d4d76c1c-cf74-484e-a153-aebf0b914186",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "260a2049-147e-4898-9f7a-b339bd146f56",
          "status": "OK",
          "code": 200,
          "responseTime": 61,
          "responseSize": 0
        }
      },
      {
        "id": "acca235f-8bc5-43dc-bdd9-d4e8ad16cf59",
        "cursor": {
          "ref": "86e167da-f6c8-4e19-b828-0a3c7798e4b7",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "ea57cafc-4a43-4296-9779-70e7aa68c720"
        },
        "item": {
          "id": "acca235f-8bc5-43dc-bdd9-d4e8ad16cf59",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "104c1abb-5eaf-4111-a7f0-b75e5998d332",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "31694942-8049-40d7-a5da-18c8decf9a3e",
        "cursor": {
          "ref": "f44674c6-56c3-4f89-aa4a-8168cbc11c03",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "5545c8c8-3b8c-4f7d-9a63-e375d56de6d0"
        },
        "item": {
          "id": "31694942-8049-40d7-a5da-18c8decf9a3e",
          "name": "did_json"
        },
        "response": {
          "id": "10ab069c-88f0-4859-805e-12999a8d5c91",
          "status": "OK",
          "code": 200,
          "responseTime": 379,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ceba59a-97d6-45b8-898e-42d194520f3d",
        "cursor": {
          "ref": "9dce069d-84c2-4ce0-937e-cf93f62f018a",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a3b956fd-b651-46eb-a8b3-0f19065a08fe"
        },
        "item": {
          "id": "6ceba59a-97d6-45b8-898e-42d194520f3d",
          "name": "did:invalid"
        },
        "response": {
          "id": "dc041de8-2056-4a79-8105-ce9c210ddf07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ceba59a-97d6-45b8-898e-42d194520f3d",
        "cursor": {
          "ref": "9dce069d-84c2-4ce0-937e-cf93f62f018a",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a3b956fd-b651-46eb-a8b3-0f19065a08fe"
        },
        "item": {
          "id": "6ceba59a-97d6-45b8-898e-42d194520f3d",
          "name": "did:invalid"
        },
        "response": {
          "id": "dc041de8-2056-4a79-8105-ce9c210ddf07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b385580b-d3aa-4bfa-918b-1230022efd72",
        "cursor": {
          "ref": "18b85d73-c4e7-4a48-a6fc-3ee5d6fb5a58",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "7164ae7f-c5c0-4798-a9c2-4bc4b524bb15"
        },
        "item": {
          "id": "b385580b-d3aa-4bfa-918b-1230022efd72",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "c97c0d4a-d3d4-4b2b-9c92-1261467c1a79",
          "status": "Not Found",
          "code": 404,
          "responseTime": 119,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac29aec4-fd9e-4c67-b844-580284f14ced",
        "cursor": {
          "ref": "a0b4820d-1a6e-4e2e-b193-6c2141703193",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "226b1547-3316-4290-8464-f62b0b38065f"
        },
        "item": {
          "id": "ac29aec4-fd9e-4c67-b844-580284f14ced",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "6257102b-64c3-42fe-a297-1fa1d53af608",
          "status": "Not Found",
          "code": 404,
          "responseTime": 46,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db5ba54f-d281-4121-8a83-943d71fa266b",
        "cursor": {
          "ref": "bfe52dd2-9263-45f1-a9aa-f9b139fb2f3e",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "a75d70ce-6000-4243-8f53-7b84b5d9ae4b"
        },
        "item": {
          "id": "db5ba54f-d281-4121-8a83-943d71fa266b",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "e8ece089-b649-424f-9d97-80da5892f9de",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96e5ce33-65cb-4837-b734-44b79deac14e",
        "cursor": {
          "ref": "3fbbd020-ea8e-491f-bfab-69f7f0d06fec",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "9d237c2b-d938-40c5-aa07-34828eefc211"
        },
        "item": {
          "id": "96e5ce33-65cb-4837-b734-44b79deac14e",
          "name": "identifiers"
        },
        "response": {
          "id": "14469573-38dc-4731-af3f-c3dae1c861ef",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea10b7f5-6eca-44aa-bb4a-35ffd76af3b5",
        "cursor": {
          "ref": "04e79784-4cbf-4c28-bf86-6e6d61c48be2",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "1cb60eb9-5ade-4db1-8b6e-65ee919126a0"
        },
        "item": {
          "id": "ea10b7f5-6eca-44aa-bb4a-35ffd76af3b5",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "0a881aa1-81f2-4d71-b6ea-017712ad9835",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17a6188f-4f57-49f5-a4e0-6b47420a01cf",
        "cursor": {
          "ref": "a6d8304a-fce3-4ade-9a15-ef27b1451251",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "65cc2f48-c0df-4ddb-87b7-121f38cdf3a2"
        },
        "item": {
          "id": "17a6188f-4f57-49f5-a4e0-6b47420a01cf",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "67facd57-99d6-42c0-9e1d-19aa9b2b04c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f14e9263-19ac-4343-8786-c83f81e6e204",
        "cursor": {
          "ref": "3b9bd60c-d5ea-4fa0-b09f-04a4678902ce",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "93d44360-b697-4595-b27e-7ec0baeb3e4e"
        },
        "item": {
          "id": "f14e9263-19ac-4343-8786-c83f81e6e204",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "2b06c9b7-d1d4-4213-a38a-e0a97f02c29d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb346719-f532-429a-a435-cd7d5f806f62",
        "cursor": {
          "ref": "26db8326-0452-48c5-847b-5a0a17da7c2b",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "30680b44-b906-44cc-a149-24ca9dda5f9b"
        },
        "item": {
          "id": "eb346719-f532-429a-a435-cd7d5f806f62",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "46a08137-513b-4940-a415-98540c77951f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd8ac5a5-b99b-4af1-ac0b-5a7e4629d8dd",
        "cursor": {
          "ref": "20fa8508-a48d-423a-8d81-168cca6d7449",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "ad5c98d5-b565-40ce-85a1-847f444224b6"
        },
        "item": {
          "id": "cd8ac5a5-b99b-4af1-ac0b-5a7e4629d8dd",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "39d61ef6-38c7-4ddf-b9b9-07832a30b003",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71b97fbc-1902-4195-a027-e419d16b39c5",
        "cursor": {
          "ref": "fa4b650c-5c18-42d2-82b7-64afec453bb1",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "cc112fb0-3694-4173-83d7-d66bd3218ae2"
        },
        "item": {
          "id": "71b97fbc-1902-4195-a027-e419d16b39c5",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "03ff71a1-0ada-412c-8fd7-0aa73f0390c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7aa4474-03fe-4e38-b9c9-c7a9836089da",
        "cursor": {
          "ref": "1f1e7c2e-476d-4823-8323-239e0f485c47",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "95a874ca-58f5-4809-a7ec-b18e0298e3bd"
        },
        "item": {
          "id": "a7aa4474-03fe-4e38-b9c9-c7a9836089da",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "6ff721ee-6290-4433-a704-9c4a773858b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ba93ebf-e0ab-4492-a3ea-915c32767368",
        "cursor": {
          "ref": "dcda4645-847b-4fa5-b7c1-15756d798390",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "d636a63f-8cbc-4226-8c5a-2ff3f8ea5a0a"
        },
        "item": {
          "id": "8ba93ebf-e0ab-4492-a3ea-915c32767368",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "57efcb11-7187-41b5-a018-dc3d034d702f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d998c79d-0514-43cf-9a41-b987c1c6b030",
        "cursor": {
          "ref": "ede5bd81-1cdf-48bf-82f1-2552a2eb958b",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "760023a3-818e-4e1b-9a11-6a364731fcdf"
        },
        "item": {
          "id": "d998c79d-0514-43cf-9a41-b987c1c6b030",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "de3594e9-65fb-4dba-9e11-968541f4ffe6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "717c8783-9df2-473a-acb2-677eed4b6d3e",
        "cursor": {
          "ref": "cbfe5c97-5ded-40de-bb9e-19ab1ed221e6",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "c52ac622-e4fa-4075-9fa6-629598553b96"
        },
        "item": {
          "id": "717c8783-9df2-473a-acb2-677eed4b6d3e",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "d0739dcf-b1ce-4b2e-bf8b-8068381bdf9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "855f1121-6eda-4848-ab49-52c91ea5dc2b",
        "cursor": {
          "ref": "cfc0d643-dbb3-4191-b185-dd041d5e39aa",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "0ac83dcd-e91c-49fc-9955-75f7b13ed42b"
        },
        "item": {
          "id": "855f1121-6eda-4848-ab49-52c91ea5dc2b",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "77666d3a-a80d-4d9c-8239-82ca50d1db6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f035017f-2807-4fd1-93d6-4d46ebc365c5",
        "cursor": {
          "ref": "4d70e015-7174-4637-95df-10bf53b1d0bf",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "1b330b7a-6722-4c95-a301-a3b5f05dbbac"
        },
        "item": {
          "id": "f035017f-2807-4fd1-93d6-4d46ebc365c5",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "bec805ac-2294-42f6-96ab-0e43b7741cda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71427bb2-79c4-420e-a145-c20a9e902eb5",
        "cursor": {
          "ref": "af1e7851-f846-44ce-bae1-1b7c81a91769",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "50acccb4-af15-47cd-bd9e-2e7b393d05d0"
        },
        "item": {
          "id": "71427bb2-79c4-420e-a145-c20a9e902eb5",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "a5ea567a-3ba3-4a75-960e-ee1caa49c1ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94e8aa5d-9728-4676-9d37-fd5aec605edd",
        "cursor": {
          "ref": "2a166077-c57d-4e24-bcfc-6706c14b62e3",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "71ad3320-4b76-4f93-96ab-525a25a1d99f"
        },
        "item": {
          "id": "94e8aa5d-9728-4676-9d37-fd5aec605edd",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "118789c8-240f-4f55-b73a-0419b2cdedde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b871f4c-a545-46e6-9d34-7bb71c97bb05",
        "cursor": {
          "ref": "720427bd-fd2a-415b-a90e-82c0ad23a264",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "486afe58-d849-4cae-b97c-3928a8d5679f"
        },
        "item": {
          "id": "7b871f4c-a545-46e6-9d34-7bb71c97bb05",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "d4840a23-89e6-4734-b4b1-34e664f9521c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffb2c11b-6d19-44b3-b9e2-69bef90e1276",
        "cursor": {
          "ref": "ec74b468-5920-4779-aeca-a38c1028ff6d",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "4c09c4ad-214b-4104-b12e-3220b1e4d4a4"
        },
        "item": {
          "id": "ffb2c11b-6d19-44b3-b9e2-69bef90e1276",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "87807f1b-5d08-4221-9c0d-b4dd762de90e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2ae3b0e-3c73-45ca-a288-e9bf2ccc77b1",
        "cursor": {
          "ref": "7ded2d3d-ce92-4b09-98a6-76d193f7af06",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "62731489-3e5d-46ec-8922-6ce7f474308f"
        },
        "item": {
          "id": "e2ae3b0e-3c73-45ca-a288-e9bf2ccc77b1",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "5a38abd9-f4b7-4859-aa2e-053d87e79441",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e028bb8f-04f0-40ba-90ea-ca64db284a39",
        "cursor": {
          "ref": "0ce2bc37-e927-4a9f-8116-58def1168322",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "2f675690-80f9-40f8-96d5-d7a4389726b6"
        },
        "item": {
          "id": "e028bb8f-04f0-40ba-90ea-ca64db284a39",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "b0a99a48-77c3-4ae4-8be6-eb11e90c18c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb95fb1e-6e33-40e1-aae3-fd55582f4794",
        "cursor": {
          "ref": "4cd7bc3d-7a61-415c-b54c-20963651336b",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "39452244-9a61-490e-806b-23dc13d21d6f"
        },
        "item": {
          "id": "bb95fb1e-6e33-40e1-aae3-fd55582f4794",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "049315d5-8ae5-4655-8cca-62bfcc0e46a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d3e1e16-8402-4509-a9a7-e6a9a5728eb3",
        "cursor": {
          "ref": "bb53e917-42cb-402a-9fd1-685051bd21d9",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "012840b2-ba7d-439a-920d-b3d613f071b4"
        },
        "item": {
          "id": "6d3e1e16-8402-4509-a9a7-e6a9a5728eb3",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "ef2d4b3f-4e8c-4a91-8fd7-eca71c96160c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9639ebb-7603-4503-bb60-b2db2dbb7868",
        "cursor": {
          "ref": "17b2a3aa-5532-4034-a591-781586836b1d",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "19792280-6843-47fd-9f3d-bab09fa438d4"
        },
        "item": {
          "id": "d9639ebb-7603-4503-bb60-b2db2dbb7868",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "8e1d22d2-08ff-4361-883e-0fdc26aa22d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7521c36c-808e-4389-b5df-9097265b5719",
        "cursor": {
          "ref": "6349cf33-64ea-4492-bb62-0101935297da",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "88170ebd-766c-4fd1-9445-329c38c029dd"
        },
        "item": {
          "id": "7521c36c-808e-4389-b5df-9097265b5719",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "4723aec8-2be6-40d9-b26a-fba850776c7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "393c657f-ea15-4634-9ae0-192eee5e1475",
        "cursor": {
          "ref": "5572ee17-bb0a-4922-9e3b-0a45dd479cfa",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "9808418d-b31f-4d9c-ac10-2693fcbe838b"
        },
        "item": {
          "id": "393c657f-ea15-4634-9ae0-192eee5e1475",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "343322a4-6ce6-41b0-ba1e-1ef820e66dc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f7841d5-560b-4519-a418-87812d7d1eb8",
        "cursor": {
          "ref": "ca8f33b8-d63a-4f5d-8bab-fb804262e825",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "e4dfe848-7d72-45a6-b0e8-a4a0e1ade5c3"
        },
        "item": {
          "id": "0f7841d5-560b-4519-a418-87812d7d1eb8",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "551e099d-9846-48d1-9b75-3a5a30fe8f3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "370c6179-9c24-4be4-a9cb-fb1b29255fbf",
        "cursor": {
          "ref": "c183967d-d297-4967-834c-e91f654b9ca5",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "5b477a92-c41d-4790-b84a-6d28be54dd34"
        },
        "item": {
          "id": "370c6179-9c24-4be4-a9cb-fb1b29255fbf",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "68222c86-1317-47e8-94a6-1a6b6198cf6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bf64d7e-54ef-49e5-8c3f-19fc094ec114",
        "cursor": {
          "ref": "ca3ea0b1-dfd7-4343-8c4b-652ac362aae8",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "5563825e-5a03-406a-98b8-40849f46a421"
        },
        "item": {
          "id": "1bf64d7e-54ef-49e5-8c3f-19fc094ec114",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "c35cbb1f-491d-4d50-8728-1ced9f721dc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "941ecf2d-3935-471d-93cc-6411d986421f",
        "cursor": {
          "ref": "54ce3565-9ba8-4824-a2c2-9b59158d09e6",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "0bbf4131-a8b6-4048-9c2e-5be226cf60c7"
        },
        "item": {
          "id": "941ecf2d-3935-471d-93cc-6411d986421f",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "9c8008b9-c678-452f-9814-c862758d4d53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9115d101-cfa8-413b-a7d1-0fc00e12fe01",
        "cursor": {
          "ref": "4d078a4e-c396-453a-bf11-ac6456bda6f5",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "d23c0ea7-fd87-4fc4-b70e-965403c8d438"
        },
        "item": {
          "id": "9115d101-cfa8-413b-a7d1-0fc00e12fe01",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "2408104b-df37-43c5-ade2-147b8fe610ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e0e092b-e0a2-484b-b75c-cb8196aa15b6",
        "cursor": {
          "ref": "0693948f-525f-4f46-ae14-d39e4b4298f6",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "cd91349c-a7e5-40b4-8278-a25c18efc9fe"
        },
        "item": {
          "id": "7e0e092b-e0a2-484b-b75c-cb8196aa15b6",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "3de463d7-3df0-4834-a597-2f06f04c5ae0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b67b6d4b-db88-4eff-9243-bec37e41f4a3",
        "cursor": {
          "ref": "5cbe3005-9ae8-441e-ae9c-83d039df4131",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "48c45eff-7a62-4a42-ba10-919fd998d69e"
        },
        "item": {
          "id": "b67b6d4b-db88-4eff-9243-bec37e41f4a3",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "656704fd-327e-4c47-87e3-92b9c1147c36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b81d7f2-3b9d-4d04-b90a-ae140a696518",
        "cursor": {
          "ref": "d5beb6ac-78c2-497e-98a4-62c4356121f2",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "712cf811-5104-48e1-9e28-b5feb384a4e6"
        },
        "item": {
          "id": "4b81d7f2-3b9d-4d04-b90a-ae140a696518",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "48e278a1-9dcf-482b-9dde-546f7bfa0b38",
          "status": "Created",
          "code": 201,
          "responseTime": 546,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "e0454b8a-eee5-466e-97e3-d1b19188eeba",
        "cursor": {
          "ref": "0d91a884-5944-495d-bbe3-f4120ba481d1",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "f4de600d-20eb-423e-aacf-c2a6572f15f5"
        },
        "item": {
          "id": "e0454b8a-eee5-466e-97e3-d1b19188eeba",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "f66e065d-67f2-42e6-a04e-93f7a69f4de7",
          "status": "Created",
          "code": 201,
          "responseTime": 270,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "93bd6ebd-5c75-4c3e-9e74-7a90b351798d",
        "cursor": {
          "ref": "a9429d0d-9668-46d4-9759-ff23015d4bac",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "0b69198c-e377-4e42-aead-18df00488436"
        },
        "item": {
          "id": "93bd6ebd-5c75-4c3e-9e74-7a90b351798d",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "b7ea5ee1-3862-4ede-b8c9-c88af9070115",
          "status": "Created",
          "code": 201,
          "responseTime": 342,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "03d45b68-7e82-40b1-a2d8-9d612da22b41",
        "cursor": {
          "ref": "6dc738e8-f411-475e-b4ba-e5fb09e29cb3",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "81d5519b-c45d-4964-a429-0dcd4c72ea97"
        },
        "item": {
          "id": "03d45b68-7e82-40b1-a2d8-9d612da22b41",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "482ee081-8fda-4ea7-baa7-f1cfda457da0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2e25434-f7de-40cc-8323-a42371b822cb",
        "cursor": {
          "ref": "de5b4b59-b9f0-4793-8405-ae99955cb935",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "0b9ce4b1-b713-42b3-a637-20409e9da6ba"
        },
        "item": {
          "id": "e2e25434-f7de-40cc-8323-a42371b822cb",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "37f401e8-36eb-4c80-8124-b6a22bbb47f9",
          "status": "Created",
          "code": 201,
          "responseTime": 248,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "6c24f218-9678-4636-b0f4-0640757918d5",
        "cursor": {
          "ref": "96f74deb-51f8-4ce8-a9f4-832164f2a24b",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "aabd6a67-d3a5-4c5c-93cf-450cbb183de5"
        },
        "item": {
          "id": "6c24f218-9678-4636-b0f4-0640757918d5",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "0c6e1a83-9b40-4592-8bdf-dc677f226ddf",
          "status": "Created",
          "code": 201,
          "responseTime": 248,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "7406356b-6f4a-48cd-b69d-092a99237abc",
        "cursor": {
          "ref": "01245891-1cfa-4271-9e4f-20c9b6561027",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "06ecce53-6040-4c85-9a6e-a2dadd37040f"
        },
        "item": {
          "id": "7406356b-6f4a-48cd-b69d-092a99237abc",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "24cbc0c0-94b6-49ee-b003-6fbfa1c68d16",
          "status": "Created",
          "code": 201,
          "responseTime": 249,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "1ff1fffd-43cf-43d6-b66b-80d9a732e88d",
        "cursor": {
          "ref": "18d339c0-3918-4e57-bad9-d2c96e195ff2",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "93a3ede2-1717-41c8-8f32-32f1d6aa38e0"
        },
        "item": {
          "id": "1ff1fffd-43cf-43d6-b66b-80d9a732e88d",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "e3c7d09f-6e1c-4348-8d6f-c935faf5656e",
          "status": "Created",
          "code": 201,
          "responseTime": 249,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "aeeb37e7-08cd-4e16-9416-cb3f46273a88",
        "cursor": {
          "ref": "1da9bf05-7da9-4064-b661-264d7c12da77",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "5f6dd635-80f7-4447-a7f4-69652ee4840f"
        },
        "item": {
          "id": "aeeb37e7-08cd-4e16-9416-cb3f46273a88",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "405e5d9e-51a9-4b34-9f29-d113005bc1e4",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "765c88be-f698-4efb-87f2-1f217d5312c2",
        "cursor": {
          "ref": "7e63362a-8ad6-49a3-9dec-9fc36da61fad",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "415e9483-2a4f-49d8-b1e5-d4dee23235ba"
        },
        "item": {
          "id": "765c88be-f698-4efb-87f2-1f217d5312c2",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "b38b53c8-ca28-486a-8705-9fc896ba350d",
          "status": "Created",
          "code": 201,
          "responseTime": 241,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "b348be7e-ee74-4831-8b4a-b81c6ac68763",
        "cursor": {
          "ref": "86ddc3d1-ac70-44f9-87aa-82bdaaf90db0",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "3e0bf7cf-9af8-4563-9ccd-2e246c4824cc"
        },
        "item": {
          "id": "b348be7e-ee74-4831-8b4a-b81c6ac68763",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "ab874690-a217-4fa4-be92-59e54c7dff1a",
          "status": "Created",
          "code": 201,
          "responseTime": 245,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "ee19888d-ce60-4c4c-bbe7-2102f2ec9ad2",
        "cursor": {
          "ref": "aa2a9020-2fa8-48ff-b09e-bb3c65d0b41c",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "03c1d9d9-357d-4ba2-98cb-ea6953c80bd2"
        },
        "item": {
          "id": "ee19888d-ce60-4c4c-bbe7-2102f2ec9ad2",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "93097988-a741-4006-aaf4-bc0efd0cc45e",
          "status": "Created",
          "code": 201,
          "responseTime": 240,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "4a896520-942b-44ff-b226-2028289b5514",
        "cursor": {
          "ref": "eed70a95-485e-462b-80fe-657abd211492",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "9c169e5e-63a1-4833-8773-425889f31e89"
        },
        "item": {
          "id": "4a896520-942b-44ff-b226-2028289b5514",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "70e85288-e7e5-4035-b813-2ce3badd1c22",
          "status": "Created",
          "code": 201,
          "responseTime": 307,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "f2dc59f1-4bc8-4c7a-8671-fba3a7017570",
        "cursor": {
          "ref": "2fbf7ccc-d6f1-43ae-8944-1d85a14c333a",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "8163be6c-3e52-4ea8-a6ed-f3090a6da203"
        },
        "item": {
          "id": "f2dc59f1-4bc8-4c7a-8671-fba3a7017570",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "10c6481e-78e0-492e-820f-ef31c17740b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99473285-cd2f-4cf4-abfb-d13916cb9eb5",
        "cursor": {
          "ref": "e5467270-d766-4766-bfb9-e0432feb6d70",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "21569584-f074-491c-8e3b-6dbb12a1ecc5"
        },
        "item": {
          "id": "99473285-cd2f-4cf4-abfb-d13916cb9eb5",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "cadc6f3e-b180-4e61-8203-797e350305ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0b808a1-5616-45a0-84bb-0c7ec4e538c9",
        "cursor": {
          "ref": "a209f51e-8802-4efe-9742-22b82dee97f7",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "c3ad52b5-388f-442a-8342-2fe05bf29af3"
        },
        "item": {
          "id": "f0b808a1-5616-45a0-84bb-0c7ec4e538c9",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "f54b27d5-fbc8-4270-9fcc-00d618b0599b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8bacd06-ebb0-4334-b14f-c4886001d594",
        "cursor": {
          "ref": "99bbd48b-d087-40cd-b343-c1390cbe9a0c",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "f4add96b-863d-4405-aa82-d030de3e9afb"
        },
        "item": {
          "id": "e8bacd06-ebb0-4334-b14f-c4886001d594",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "b5905ed7-8358-49ff-b6a0-524b80d0d979",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdd22e50-7d98-43e2-9aca-6fcaabc1736a",
        "cursor": {
          "ref": "468f1b4a-2753-40f9-a376-39a8631937e0",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "e838f801-742c-41c6-baa0-e105526a80d9"
        },
        "item": {
          "id": "bdd22e50-7d98-43e2-9aca-6fcaabc1736a",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "3191f5f3-9d81-45e3-b265-728c7f51416b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c52b10f-c938-44ab-9099-8acbb1ffedf2",
        "cursor": {
          "ref": "3358130e-cfb4-4071-83d3-c9e6e05a2cb2",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "b4376f78-ebd9-41f2-b5b2-1fda6942fd72"
        },
        "item": {
          "id": "8c52b10f-c938-44ab-9099-8acbb1ffedf2",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "202514e9-5833-499a-bb73-a05c34dfd27a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cb6c297-394e-4212-b8e0-c7106145d536",
        "cursor": {
          "ref": "c981cec7-426a-4845-aa0a-657039b90d0c",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "818d24b6-03f7-46bd-89e3-622268f59bd1"
        },
        "item": {
          "id": "6cb6c297-394e-4212-b8e0-c7106145d536",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "e3a8e9ea-c12d-4a51-88ce-dd108a70475f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8829094c-24f5-43b6-b1e8-48186af98d14",
        "cursor": {
          "ref": "f0aebb50-6705-4456-9046-8eeea7bd253f",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "e95495bd-38b6-49a5-a337-c8cc8a0aed87"
        },
        "item": {
          "id": "8829094c-24f5-43b6-b1e8-48186af98d14",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "0fe0e57c-c577-4aff-9c64-a79dda292abd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "317fea24-c41d-49fd-9640-e6a3ca20b559",
        "cursor": {
          "ref": "675d98df-7689-4bf6-b6fc-35c9bdade6e8",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "a80c64ad-69aa-4d60-9056-088f035dea8b"
        },
        "item": {
          "id": "317fea24-c41d-49fd-9640-e6a3ca20b559",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "c1b1d8ff-a15b-46e8-a6a3-88744273756f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9212bc4a-bcc7-4ab2-adc5-c89ca81e1507",
        "cursor": {
          "ref": "5809a830-6b8c-4a17-8b0a-3aaf8767b4f0",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "5470455b-2b09-4cf8-a0e3-0520a5da334e"
        },
        "item": {
          "id": "9212bc4a-bcc7-4ab2-adc5-c89ca81e1507",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "83adf528-22e0-4c36-80c8-0fe8f1247c79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4785c442-f7c4-46e1-9165-51963f73f2e1",
        "cursor": {
          "ref": "769a84da-f31e-4291-a1f2-e2a4d99710a9",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "3a975391-f225-4b4c-a283-92ae60f96572"
        },
        "item": {
          "id": "4785c442-f7c4-46e1-9165-51963f73f2e1",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "0a612a65-f50c-4eb0-b645-f332cacdebfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "714ffada-1eff-4982-9b87-705b811b77fa",
        "cursor": {
          "ref": "c143768c-9675-410e-835e-1faf62972acd",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "5b6492ab-628b-4ed6-8dc7-91f431543bcb"
        },
        "item": {
          "id": "714ffada-1eff-4982-9b87-705b811b77fa",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "e3f21d22-e551-49a1-824a-e148db6cb897",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b479d773-00f8-4f92-9766-2496a3d05cf2",
        "cursor": {
          "ref": "1c2b4d83-407a-429c-86e5-ad9207f724d7",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "8460918e-3def-4f46-81bd-80ac8f447fe0"
        },
        "item": {
          "id": "b479d773-00f8-4f92-9766-2496a3d05cf2",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "050c0efe-fc9c-4d13-9383-9bb5186065fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f98f798c-e30c-44b8-966c-9c9519060a5c",
        "cursor": {
          "ref": "b1f3125b-fee1-4c02-b5bf-7df586473b73",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "882515b7-a15e-4fff-a716-e19e3e269d37"
        },
        "item": {
          "id": "f98f798c-e30c-44b8-966c-9c9519060a5c",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "1c16dd88-e2ed-4a63-b664-dc96be48e361",
          "status": "Created",
          "code": 201,
          "responseTime": 270,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "0f9c4daa-22b3-42aa-962a-d7fa90427733",
        "cursor": {
          "ref": "b58b04ab-50a3-4fce-94d4-1f5ab21ed390",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "d74bc79e-a1d0-4cbb-ae05-c4bbd9e23c1d"
        },
        "item": {
          "id": "0f9c4daa-22b3-42aa-962a-d7fa90427733",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "5f6fadd5-270e-4316-be6f-9bb1bb24f4bb",
          "status": "Created",
          "code": 201,
          "responseTime": 271,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "2b18a9e5-82da-4fda-893c-6833b00b315b",
        "cursor": {
          "ref": "74e72945-4243-4eb4-9a31-9f9404fac6ce",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "06e7af20-7ae1-4eaa-bff7-20f96c47f025"
        },
        "item": {
          "id": "2b18a9e5-82da-4fda-893c-6833b00b315b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "8728b7ad-ceee-4440-94e4-00b8faa82b4b",
          "status": "Created",
          "code": 201,
          "responseTime": 256,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "321ed208-a6bc-40eb-8596-bec2f3170384",
        "cursor": {
          "ref": "e40c972d-311b-4e26-b8d6-364935b9629e",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "e31955bf-7755-4a0f-8828-d64ae67b6bb0"
        },
        "item": {
          "id": "321ed208-a6bc-40eb-8596-bec2f3170384",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "167f8563-91a3-4d95-93e2-33370160a34c",
          "status": "Created",
          "code": 201,
          "responseTime": 282,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "45cbb511-383c-4086-b929-81363ca1b8ba",
        "cursor": {
          "ref": "0f20b058-6843-40a0-a0eb-fc268c83f812",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "81850353-4749-41b6-b221-82878b53af72"
        },
        "item": {
          "id": "45cbb511-383c-4086-b929-81363ca1b8ba",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "0e33ed93-2f3a-4788-96b9-252a258431a4",
          "status": "Created",
          "code": 201,
          "responseTime": 270,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "195185af-6262-4f08-9a20-737ce5688ee0",
        "cursor": {
          "ref": "0a554c9b-1dae-47b1-aca6-d3917d5c80a3",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "0d06dc03-cb14-469b-85b6-01bf7d6719e1"
        },
        "item": {
          "id": "195185af-6262-4f08-9a20-737ce5688ee0",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "bf021aa0-9b2d-431e-b750-8ad743d12692",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7b3ee75-9ac6-4073-8386-be57611f21f7",
        "cursor": {
          "ref": "bc8752b9-da1a-4f80-b958-eb46fcc2dbe4",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "02b2e698-8b3b-4b2e-b43e-f9b3bbc2fcf9"
        },
        "item": {
          "id": "a7b3ee75-9ac6-4073-8386-be57611f21f7",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "828a3f9b-7b55-4ae3-a5b0-9bd9929be7cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b77de27c-4b7e-4ea2-a629-952243843b0d",
        "cursor": {
          "ref": "74b9a975-d964-4777-999a-4d02a2e2aeec",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "12013be5-0477-4c92-bc3b-0a28af0f0b5c"
        },
        "item": {
          "id": "b77de27c-4b7e-4ea2-a629-952243843b0d",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "b44f5383-565a-4f90-8a17-75852baaac9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24b10e99-c9a9-4ed0-be87-f634d364ef75",
        "cursor": {
          "ref": "e98b381d-18d4-4415-bb62-289b90774a41",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "1b7b54ee-9143-477b-a7bf-3b2baa710254"
        },
        "item": {
          "id": "24b10e99-c9a9-4ed0-be87-f634d364ef75",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "fd536bc8-8876-439d-9e96-046bc56543f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8160f6b0-9ff8-41e6-bbc4-8236a5d0c75d",
        "cursor": {
          "ref": "ae44a2f9-047d-458c-9ed0-34fac73931d1",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "81630f0d-331d-436f-b4b1-cf2e067b55af"
        },
        "item": {
          "id": "8160f6b0-9ff8-41e6-bbc4-8236a5d0c75d",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "daf956fa-b6d0-430f-a0c7-1a53d81ea36d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af4a1c26-08f9-42eb-8e4a-3e7419ea4a3f",
        "cursor": {
          "ref": "d0fd9b7c-1cef-421f-95f1-f4ff7278c22f",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "51b90565-dafc-4ef0-8019-720a1019c209"
        },
        "item": {
          "id": "af4a1c26-08f9-42eb-8e4a-3e7419ea4a3f",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "6ddd7627-8b1a-42e1-a07d-ce19e9688157",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1040a5fa-bcb4-4bfd-adb9-79341125cfd5",
        "cursor": {
          "ref": "1f6d7e31-aa72-4df2-9f3d-d2f5d4178046",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "1f2875f0-2b7d-4b95-a118-7431017afe79"
        },
        "item": {
          "id": "1040a5fa-bcb4-4bfd-adb9-79341125cfd5",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "c1002e2c-593a-4873-bc16-c3772bf8259e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e92119d1-7201-439b-8b32-249e1a168217",
        "cursor": {
          "ref": "343395aa-5422-4e0a-9b0d-8ba4d6fded5e",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "77bc34ac-77b2-41bb-aa77-ce0e60d1d902"
        },
        "item": {
          "id": "e92119d1-7201-439b-8b32-249e1a168217",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "1fe79fe6-9b67-4234-a04f-6f6b121e27b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2cb4921-cb70-4c11-be6e-e63ce6466696",
        "cursor": {
          "ref": "1cf63cca-b987-4399-a359-c8dea662a86d",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "50ed4cc1-d6e4-4fb3-a70a-19c7d56761db"
        },
        "item": {
          "id": "f2cb4921-cb70-4c11-be6e-e63ce6466696",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "22210c0d-cd81-4f4b-9808-fdb100c4eee0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "841d0423-f021-4291-9f9f-95fee852ad90",
        "cursor": {
          "ref": "712dbc38-6265-44ff-970b-f7a4061f80d9",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "e731822e-1485-478e-a890-a909f38d4ea2"
        },
        "item": {
          "id": "841d0423-f021-4291-9f9f-95fee852ad90",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "8d723083-f846-4875-a7f3-1c9a195d1560",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26420b15-22f4-419a-a6b3-3ad4a0a0fb5c",
        "cursor": {
          "ref": "72f44712-b429-4d5a-bc58-255c2bd3ee3b",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "e6924b42-d8bb-48ba-96f7-f0cab11f0911"
        },
        "item": {
          "id": "26420b15-22f4-419a-a6b3-3ad4a0a0fb5c",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "fd168a56-b6b0-4166-b658-4bb7d6b7e154",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6473724f-c963-4fa8-ba7f-2bfc81cdd53c",
        "cursor": {
          "ref": "0075425a-f9d3-455a-9400-4d1eb2ad701e",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "f49fe625-acae-4146-a7fd-7a5fbc37fd6e"
        },
        "item": {
          "id": "6473724f-c963-4fa8-ba7f-2bfc81cdd53c",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "77b10df9-8031-4733-b593-e75eb26c6907",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe5a42c7-a5b7-4e03-9d4c-0a44051aaef6",
        "cursor": {
          "ref": "a98bae23-7265-4e35-a374-50cf38315919",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "2964b59a-2d5a-4c9a-823f-024e3755b503"
        },
        "item": {
          "id": "fe5a42c7-a5b7-4e03-9d4c-0a44051aaef6",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "39567678-6cbd-4ba5-bd0d-8db0c76d2942",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1292a77-9e3b-468f-98a1-933850360a62",
        "cursor": {
          "ref": "e290be59-c677-4d73-baaf-55f4966354cb",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "13ee480a-589d-47a8-859b-ea1a8c9fc31c"
        },
        "item": {
          "id": "b1292a77-9e3b-468f-98a1-933850360a62",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "8bd9a12b-9b61-4ca7-b99c-bd9f3ff5e56e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6a00bac-3f5a-4939-a3a4-eaf9cfae4ba8",
        "cursor": {
          "ref": "0f39fd74-a379-40cf-81d5-e07a6602b4f9",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "d23cf521-7745-4395-b5eb-f98c4ea0f0a4"
        },
        "item": {
          "id": "f6a00bac-3f5a-4939-a3a4-eaf9cfae4ba8",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "02204d55-ee43-43f0-8ed7-08b0766a5978",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b351f09a-b8f1-407f-8f6f-302ee3f9548a",
        "cursor": {
          "ref": "3668dabb-728f-4716-a1ac-4e0c5aec5439",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "178b0895-53ee-4182-92e1-10f9cbce96b9"
        },
        "item": {
          "id": "b351f09a-b8f1-407f-8f6f-302ee3f9548a",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "d383b26c-8c32-4cd3-a125-98656dae03f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75ec8e0c-dc07-4596-adb7-a34e67563c72",
        "cursor": {
          "ref": "5b2775ad-5dc9-45fa-831b-3869d5eee482",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "939479e7-59e0-45e4-b738-7193f3a4e7f9"
        },
        "item": {
          "id": "75ec8e0c-dc07-4596-adb7-a34e67563c72",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "09899c30-1a4e-4fbc-a6e9-0c0cb6a31376",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c333eda-a338-42f8-89a5-710ea16d267f",
        "cursor": {
          "ref": "be182b3c-a845-48cf-9061-864b057707d7",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "3e9a7371-cced-4366-b95e-10ec57944ef8"
        },
        "item": {
          "id": "7c333eda-a338-42f8-89a5-710ea16d267f",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "78859a9b-6e55-4aca-9d24-60866f6b9f92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43005d36-f33b-48b8-998e-ce2180f255c3",
        "cursor": {
          "ref": "20fd5c69-3a7a-49b9-8975-4217d1d0d445",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "5fb8033b-b3d6-42f6-83b7-e904f3dac112"
        },
        "item": {
          "id": "43005d36-f33b-48b8-998e-ce2180f255c3",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "be705983-fc47-48d7-9fdd-e07eaa907566",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb61b343-f3e0-4329-aa3e-7c43c2cad0d2",
        "cursor": {
          "ref": "c547df66-16e0-4dec-96a1-b969fe291d9f",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "472dfeb1-ff80-44e9-99d9-b35f9f94c4f8"
        },
        "item": {
          "id": "cb61b343-f3e0-4329-aa3e-7c43c2cad0d2",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "95916266-743c-4e56-867e-8d2aaf7aea02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6eed50d2-fe9e-4b4f-900f-49701013d7a6",
        "cursor": {
          "ref": "aac14ce6-d24d-46a4-a83f-c9404c64dcef",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "618ed0e4-879a-4d84-8419-de9c8620b3a4"
        },
        "item": {
          "id": "6eed50d2-fe9e-4b4f-900f-49701013d7a6",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "7b56b836-db11-4f87-bd7a-1d93f6be02d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d37271ad-2afe-4bfd-95b5-f8090c1c4df2",
        "cursor": {
          "ref": "3a0ba8d7-9028-4c17-9708-d772cd1e741b",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "04436baf-bd69-454b-9cdf-49fa7724e224"
        },
        "item": {
          "id": "d37271ad-2afe-4bfd-95b5-f8090c1c4df2",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "d92841f6-0a5f-47a0-aba3-178f05cd4033",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e6b1b46-1675-4a81-a022-be8ae5dfad6e",
        "cursor": {
          "ref": "c7a6c687-e43b-4521-90d0-cf6dd7803f1e",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "a5a2801d-9437-4b53-b39d-770cfacfb209"
        },
        "item": {
          "id": "0e6b1b46-1675-4a81-a022-be8ae5dfad6e",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "076a93df-f6ae-4f53-aba8-17f11f77114d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79b7a6f7-3997-4730-8393-967af5da9165",
        "cursor": {
          "ref": "3e971e56-f28a-4447-825b-0a95805c78c8",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "3d578204-b345-4785-a6f3-b101752a952f"
        },
        "item": {
          "id": "79b7a6f7-3997-4730-8393-967af5da9165",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "687de73a-64df-4f30-a281-dce9a40f1992",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbe6b9d7-1760-41a2-b26e-a3157ef18f99",
        "cursor": {
          "ref": "7c880963-8a5b-4ad3-9094-2ae6feba1546",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "8224242b-2808-4a0d-a4b6-7e59d17e79e9"
        },
        "item": {
          "id": "dbe6b9d7-1760-41a2-b26e-a3157ef18f99",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "c485329d-6b51-4486-bd68-ad123f28b234",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "444f771e-3539-4846-9e17-57b204dfde6f",
        "cursor": {
          "ref": "2143b37a-bb57-423b-8018-2066f81b9787",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "d0edb835-97ff-40c8-97f1-be5bd4b053d3"
        },
        "item": {
          "id": "444f771e-3539-4846-9e17-57b204dfde6f",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "cf6f900f-0208-4330-9279-6fadcb87bfbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b94c8505-2d22-4746-bfef-7757bcfab1ea",
        "cursor": {
          "ref": "6ea09c42-12fe-40a4-9a2c-0e525d978f2f",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "fc853179-c52b-42bf-a833-281270e80bfc"
        },
        "item": {
          "id": "b94c8505-2d22-4746-bfef-7757bcfab1ea",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "8e16b7cf-db58-41a3-be69-9d7d9d8f93df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac0f65ea-a356-401d-9865-ab225aaebf84",
        "cursor": {
          "ref": "5d287372-84c1-44e5-8356-1e46b45ae2c3",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "165866b3-9ec8-4ceb-bf28-bb62a63cc931"
        },
        "item": {
          "id": "ac0f65ea-a356-401d-9865-ab225aaebf84",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "2868aa14-12a3-4e72-88a2-2a4549e3ba65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abf10c8c-98ee-4ed5-b059-14aab0ba0b06",
        "cursor": {
          "ref": "5eccf5ef-8104-412b-b23b-f437bc928cfd",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "8f17c95a-e77c-48c3-9882-c62657f47650"
        },
        "item": {
          "id": "abf10c8c-98ee-4ed5-b059-14aab0ba0b06",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "09fffbec-2af6-4944-a695-53c40ad4f6e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8eab452-3ef7-4c78-91c3-3a927d69d6fa",
        "cursor": {
          "ref": "54e5a3c0-7fa2-4077-b160-2f395c3ea3ed",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "6b32462b-5218-4490-a789-df6f3e8c510e"
        },
        "item": {
          "id": "f8eab452-3ef7-4c78-91c3-3a927d69d6fa",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "389f8319-825b-401b-8b32-c3a750b661fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb3b572d-9fc9-40ab-a1ef-c4afdf2c7bf7",
        "cursor": {
          "ref": "8da5597c-a1a4-4c81-ac32-0a4fa7d1e76e",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "1808c4d8-f73f-47d4-b822-db5615f861c2"
        },
        "item": {
          "id": "fb3b572d-9fc9-40ab-a1ef-c4afdf2c7bf7",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "2b4af6eb-2768-4cbb-8afc-b8fbf5f97b54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "731892e6-f7c7-44fb-b5fe-8242edf8d3ac",
        "cursor": {
          "ref": "fadf5e68-7e6e-43aa-a167-59334e91ae01",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "a5da7ef7-84c1-4761-ac3d-56ba6c7607cd"
        },
        "item": {
          "id": "731892e6-f7c7-44fb-b5fe-8242edf8d3ac",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "d96bc870-cff8-4ff5-b5f2-7912ab1286f8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 29,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0b07e14-92b2-4d15-a792-aa9376573609",
        "cursor": {
          "ref": "c339f200-a392-4214-bef1-b11a283a397e",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "1aac3131-a3c1-4273-987e-6ae964f5fc9a"
        },
        "item": {
          "id": "e0b07e14-92b2-4d15-a792-aa9376573609",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "7a27d67d-4cfc-4483-83a3-79b623928ba3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "204b97f4-d308-4af9-b3e1-bf834667a123",
        "cursor": {
          "ref": "7bf131c2-1951-410b-943d-82ba89984aa9",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "1682c447-b425-4db3-8030-ae633a5e634f"
        },
        "item": {
          "id": "204b97f4-d308-4af9-b3e1-bf834667a123",
          "name": "credentials_issue"
        },
        "response": {
          "id": "cd725e41-b994-40f9-a2b2-9744168fd1f1",
          "status": "Created",
          "code": 201,
          "responseTime": 257,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c537fbc-054e-4fc1-9b91-1e91ba90e600",
        "cursor": {
          "ref": "a2ae2d80-0857-41e0-a7b0-d80ad4e472e4",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "e7f843ca-aad4-45af-8036-20ebb177adc0"
        },
        "item": {
          "id": "2c537fbc-054e-4fc1-9b91-1e91ba90e600",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "87f23475-25b2-4b80-9e61-df3ce72146bc",
          "status": "Created",
          "code": 201,
          "responseTime": 259,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "66cd7620-712f-4154-b235-b3b03840fc89",
        "cursor": {
          "ref": "4ddcf601-7104-461b-9431-af0da3d510d9",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "543c8358-2453-47bd-b362-83aad9b57b72"
        },
        "item": {
          "id": "66cd7620-712f-4154-b235-b3b03840fc89",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "0f688eee-e312-41c1-95fe-94d87d6c9427",
          "status": "Created",
          "code": 201,
          "responseTime": 265,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "44420a8b-9397-454d-8331-4cc7b8b38795",
        "cursor": {
          "ref": "a8f5003b-9019-4a72-92d5-a20708fcec75",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "13093d92-a038-487b-94f3-72f6f352ba49"
        },
        "item": {
          "id": "44420a8b-9397-454d-8331-4cc7b8b38795",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "57ca9d73-9e02-49fa-bdd7-2db6f17d8f74",
          "status": "Created",
          "code": 201,
          "responseTime": 260,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6c81058-9074-41bf-9edd-a4b28a65ccff",
        "cursor": {
          "ref": "26d14050-3a09-41b7-89fb-b189c9eb4b58",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "2cf7a48d-b25e-41fe-bb62-1ceefdf0c0c2"
        },
        "item": {
          "id": "b6c81058-9074-41bf-9edd-a4b28a65ccff",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "712e5ffa-5a81-48e7-8246-61f72a4282c9",
          "status": "Created",
          "code": 201,
          "responseTime": 260,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-01-02T00:35:16.827Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-01-02T00:35:16.827Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "ad57f219-0472-465a-a4dc-6ecc7a9d4255",
        "cursor": {
          "ref": "726b8bde-dae8-4261-9cbf-b1c471d1ebf8",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "34199e33-d6be-4576-bd65-dab42a909c0b"
        },
        "item": {
          "id": "ad57f219-0472-465a-a4dc-6ecc7a9d4255",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "8de37590-1eaf-4234-b2e1-be6599b610ed",
          "status": "Created",
          "code": 201,
          "responseTime": 312,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61d9d70c-d890-4501-a502-1cd46f64f0f4",
        "cursor": {
          "ref": "633eb768-0581-4503-ad62-c57516661d77",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "b7607f56-0fa5-4f7e-a236-caf44a5c7b0e"
        },
        "item": {
          "id": "61d9d70c-d890-4501-a502-1cd46f64f0f4",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "da445d57-144a-4562-9e85-b00ebf829e28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ecd6d16-79c8-4908-8508-03b8b28323f4",
        "cursor": {
          "ref": "68a60cb2-12ff-4b18-8287-ef2fa3418d30",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "4271cb4e-d73f-4509-8fef-5406a6fdf8be"
        },
        "item": {
          "id": "4ecd6d16-79c8-4908-8508-03b8b28323f4",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "adef5275-cfd4-4090-9106-c38739bcbf83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cfe426f-871f-42f3-beb9-98d25b956418",
        "cursor": {
          "ref": "f5a4acb8-7442-43a5-8260-1d150dee85a1",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "5a3623dd-d355-4150-a848-dc7e607870e0"
        },
        "item": {
          "id": "0cfe426f-871f-42f3-beb9-98d25b956418",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "07de5cd8-31ef-468b-af2c-3bd083314e0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fef692f-02f6-4cf2-8700-d56b2f5f1ae5",
        "cursor": {
          "ref": "f4234a84-d088-41e0-9258-3960db5ed39c",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "e7895691-cde3-4c1c-8a70-5e97a2cc1209"
        },
        "item": {
          "id": "8fef692f-02f6-4cf2-8700-d56b2f5f1ae5",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "f85b22fd-9b03-4a28-ae26-b958f2319098",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8889f5f-0601-444b-b002-33be2d3451d7",
        "cursor": {
          "ref": "3d42e7b6-bab1-4661-b9b7-f58ec3c2e41d",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "f7e26298-09eb-40f6-923e-9ac1c7c174de"
        },
        "item": {
          "id": "c8889f5f-0601-444b-b002-33be2d3451d7",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "5466017e-2036-4512-bb54-988894dd0583",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49f26ae8-3bc9-4f31-96c9-21575b46fcdf",
        "cursor": {
          "ref": "d5fd7699-79d8-492a-b470-70f890341f93",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "34e18f49-9e48-482b-a7b3-a0d67029d9ff"
        },
        "item": {
          "id": "49f26ae8-3bc9-4f31-96c9-21575b46fcdf",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "72c1655b-752a-4c4a-91a2-6999f4e42401",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44493097-b774-4c25-8c61-aab05ae1e45f",
        "cursor": {
          "ref": "ddf1f773-91d5-4760-a172-adbaa3d9128d",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "0d901ea6-a575-441a-8844-5d0cb9afffb9"
        },
        "item": {
          "id": "44493097-b774-4c25-8c61-aab05ae1e45f",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "bbb28b1c-ee1f-4485-ae11-e7d64c04d50b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d76174fc-c5ba-458c-88f5-c17cf28f5081",
        "cursor": {
          "ref": "ea638ff0-51d6-454f-8326-99969bcc5147",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "0e09cc9b-b969-4182-bad9-b6e7a7898679"
        },
        "item": {
          "id": "d76174fc-c5ba-458c-88f5-c17cf28f5081",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "c38744a2-7b1e-452d-9122-c1d938480447",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "674c764d-9cd4-484d-902e-563481b9b532",
        "cursor": {
          "ref": "8c3d0793-2b0d-47e7-9468-a9e8e8d0dc43",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "be18b857-fef4-4f5f-b7cc-a338b7ea571e"
        },
        "item": {
          "id": "674c764d-9cd4-484d-902e-563481b9b532",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "c15ef426-5643-444a-b493-c3583b464361",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55ddce82-bf00-4e57-9b84-7e902301b094",
        "cursor": {
          "ref": "cbc8bee0-01d2-41ed-916d-c94ba6b8caf6",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "1287c29a-3142-4a09-b9b2-83a36fe0d686"
        },
        "item": {
          "id": "55ddce82-bf00-4e57-9b84-7e902301b094",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "0cd3300f-daa0-443e-b476-ec1761b6aba7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad750df1-223a-4fad-9391-34fb978212ce",
        "cursor": {
          "ref": "507b7597-2d25-4ee1-b468-f0f051d08bf5",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "36a95060-86ab-4691-a0cd-b8e8511d8a96"
        },
        "item": {
          "id": "ad750df1-223a-4fad-9391-34fb978212ce",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "79100989-681b-4a50-908b-77a70371d37c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71a81d88-a8eb-4dfa-97fe-7aa3d6c4b86d",
        "cursor": {
          "ref": "a44580d7-951a-4c5b-b1bb-fe2c8f3244d1",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "66e200ce-d485-40a6-864b-9bf0971997e2"
        },
        "item": {
          "id": "71a81d88-a8eb-4dfa-97fe-7aa3d6c4b86d",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "c886ceed-526c-4a0c-ab78-0a29f2bee663",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd0b04d6-f978-414a-a036-2c82e43e0f30",
        "cursor": {
          "ref": "d8c454e7-a990-436c-a244-69fc73bd3c5b",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "04d5f1e8-beff-4f70-b2b0-d6ca28fa7d83"
        },
        "item": {
          "id": "cd0b04d6-f978-414a-a036-2c82e43e0f30",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "ce7d371b-cb9e-47bb-9372-ea7adc9633c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b47e08f9-e761-453a-9029-74353c680c00",
        "cursor": {
          "ref": "9d701e67-7919-4356-a9e1-452d2515048f",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "b09cacdc-a31c-4d20-a09c-3b6cc689915a"
        },
        "item": {
          "id": "b47e08f9-e761-453a-9029-74353c680c00",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "fe918396-6559-4eb1-aaa8-5fdbc150c190",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fb847ed-1493-402d-b6da-57bbf144bad1",
        "cursor": {
          "ref": "62cc984c-9aa8-4b71-8fc5-4c93bfedb841",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "33a825e3-fb0d-4c9d-a495-8d9532f66c78"
        },
        "item": {
          "id": "9fb847ed-1493-402d-b6da-57bbf144bad1",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "cc405c9d-dacc-4180-80b0-56f43f020530",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8671b945-c245-4609-979a-f5539866a088",
        "cursor": {
          "ref": "5dae1c89-33c8-4ca1-9aa1-6175fc13d5b6",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "41e51b76-4161-4173-abc3-ff331ba1b191"
        },
        "item": {
          "id": "8671b945-c245-4609-979a-f5539866a088",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "3806a4ab-b35c-464b-b1fa-db7b30fd2732",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca9cbaf1-8bb8-440b-95c5-a5c517b9878d",
        "cursor": {
          "ref": "98a69ed0-9c1b-4ba2-a83e-51831dbd93bc",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "d7ca4e9d-9696-45c9-94e5-fde039ff8565"
        },
        "item": {
          "id": "ca9cbaf1-8bb8-440b-95c5-a5c517b9878d",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "d6ec1734-e208-457d-b97d-50201072bf8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f147d293-d678-49b2-96b5-be9b06fd54a9",
        "cursor": {
          "ref": "e075e9ac-ec8e-4896-ba8f-5ecd1bd3ee00",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "76b99ef2-33e3-4c6c-a3e7-46e5ef612277"
        },
        "item": {
          "id": "f147d293-d678-49b2-96b5-be9b06fd54a9",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "c5d0dda8-fa59-4af1-bced-a2e3af11ae1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcc0cec6-240c-46df-b581-7b6de25dcf75",
        "cursor": {
          "ref": "5c0bf91b-f7ad-4455-adfd-7965d60a610c",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "1d603d5a-9a82-4fd8-ad18-b87628745b7e"
        },
        "item": {
          "id": "fcc0cec6-240c-46df-b581-7b6de25dcf75",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "b6a46d67-00b3-4238-9515-c66e16c10a91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fc5ef16-3753-4836-81ea-1a70f4b22fa6",
        "cursor": {
          "ref": "1869f1b4-1ab3-49af-9fca-72a6cfd0cef0",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "9912e050-2bbb-4092-b9b1-8d8524a05fa9"
        },
        "item": {
          "id": "3fc5ef16-3753-4836-81ea-1a70f4b22fa6",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "0e261289-7d1f-4e90-98a6-6e15dc63944e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "431ccbbb-7b53-4185-840e-461f9c1488fd",
        "cursor": {
          "ref": "be836c20-b3d0-45b0-a851-803bb7131c9f",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "e875019d-7bea-48eb-94f7-4109a9afdd86"
        },
        "item": {
          "id": "431ccbbb-7b53-4185-840e-461f9c1488fd",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "7d86ab5f-dc4e-4f8b-b11f-10a894ba7b9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f10cc470-bd93-46c5-a0f0-06d5ab48b161",
        "cursor": {
          "ref": "b8b7af11-f626-4d8a-b30d-3ac5c23ebbe4",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "3cf87650-301d-46d5-8048-1a67da2c841b"
        },
        "item": {
          "id": "f10cc470-bd93-46c5-a0f0-06d5ab48b161",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "fa206966-ed94-416f-b427-cb482ea12159",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8612b08c-8d99-4e00-81aa-9b6463fa8eeb",
        "cursor": {
          "ref": "2c4c59f4-a6cf-4c57-bcac-3d88f495d554",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "c6aeb40a-5d07-4b82-98cb-958efd41270f"
        },
        "item": {
          "id": "8612b08c-8d99-4e00-81aa-9b6463fa8eeb",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "03136fa5-3705-4994-9900-27e36ef8d57a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20ccda5f-cd12-4362-815c-d1164ad5465c",
        "cursor": {
          "ref": "0f752897-38f0-4417-8b3d-d6f96e64f584",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "5d8020b4-c7e8-454c-99ef-bde4907bc268"
        },
        "item": {
          "id": "20ccda5f-cd12-4362-815c-d1164ad5465c",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "6fea2741-4b0a-4a33-9740-bb5d74f30324",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7351d1e-746e-4bce-97da-4cbf65a336bd",
        "cursor": {
          "ref": "adf261e0-76ae-45a2-b851-ecf5cc7c6b8c",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "a9a379ca-5bdc-4149-ba4f-6dac896a4652"
        },
        "item": {
          "id": "f7351d1e-746e-4bce-97da-4cbf65a336bd",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "4a353222-911a-40aa-a05a-7f8c687646d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3c5e922-e157-4929-bf89-dde7ad585c72",
        "cursor": {
          "ref": "2806f07f-000a-4660-bb2b-50b68a0d37a6",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "757a2b22-7035-4678-a291-6bfddb6bf415"
        },
        "item": {
          "id": "a3c5e922-e157-4929-bf89-dde7ad585c72",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "2ab064d4-72f9-4858-80e5-432929b41f69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7e3fbed-c9f3-49f1-ae4f-0d02cdbc1dfc",
        "cursor": {
          "ref": "248f67db-a90a-4b9d-a300-0b5ffbe772e7",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "7ef7879b-5aed-47b1-92fa-6ca11c5b5736"
        },
        "item": {
          "id": "d7e3fbed-c9f3-49f1-ae4f-0d02cdbc1dfc",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "0278df1a-d2b8-43c2-9c33-6abab57f6e6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b78308f1-f4e3-49f1-849f-e71077fb89ca",
        "cursor": {
          "ref": "47a44bda-8647-4071-992f-dfb6be821db9",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "21a727fe-fec7-47f7-885c-50764fe3fc8b"
        },
        "item": {
          "id": "b78308f1-f4e3-49f1-849f-e71077fb89ca",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "5525cb15-4f25-40e8-b401-2672bd61eec1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f251bbd-62fa-4500-966e-33f561e33f4e",
        "cursor": {
          "ref": "a05c5bf1-66d7-47d3-9821-28142eb70f13",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "dc87b2f5-7f2b-4ae6-810a-e9e80780704f"
        },
        "item": {
          "id": "7f251bbd-62fa-4500-966e-33f561e33f4e",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "dda3bae3-3ba0-41a1-adb0-086030be277a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcd6db00-dcd8-417f-a58a-7da855af4df5",
        "cursor": {
          "ref": "c6700599-8a6f-404f-96b1-e76101853949",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "34d7e30d-b2f7-414b-beff-2799fa191772"
        },
        "item": {
          "id": "fcd6db00-dcd8-417f-a58a-7da855af4df5",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "b0868032-db1f-4dc9-ad50-e3524a51d29c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff49afbe-f95c-4f68-9c23-d171325e025c",
        "cursor": {
          "ref": "e1f865b8-020d-4381-af9b-4ced9dce0832",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "457c5b21-dec0-4692-bb5c-445bed12d53c"
        },
        "item": {
          "id": "ff49afbe-f95c-4f68-9c23-d171325e025c",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "a1f19295-57ef-4ded-9a3f-ecb9ee688f72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6536cde1-1678-4733-834f-923da1db3394",
        "cursor": {
          "ref": "5d2f03b0-22e7-4f0a-b41d-e880887e0f10",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "62b9b911-508c-4981-baf2-ae4cd83e6dd3"
        },
        "item": {
          "id": "6536cde1-1678-4733-834f-923da1db3394",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "c7f88633-58e5-47d9-b999-778ffab274dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3537992-8444-4e67-b024-60ce837403f5",
        "cursor": {
          "ref": "c3568dcd-b99e-4032-bcba-e40cbac758a5",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "ddaf8196-6761-4a58-9910-771aacd0b531"
        },
        "item": {
          "id": "d3537992-8444-4e67-b024-60ce837403f5",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "a4244fc1-c955-4836-8d65-0c59d50ba1cb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d40b1fde-7fac-47aa-92a3-f88c109716cf",
        "cursor": {
          "ref": "9d5da6d1-4127-4e10-9f89-24d8364f5947",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "8b4efa95-d6c5-47b5-b27c-7b6899092b00"
        },
        "item": {
          "id": "d40b1fde-7fac-47aa-92a3-f88c109716cf",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "9f8a2d15-ea02-494c-a177-7bfed653daee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "776426a0-e4e0-46b7-b834-61185edfa306",
        "cursor": {
          "ref": "8b53cd69-f57b-49fe-90f5-323a5751dab5",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "9d29ded9-3ab3-4cec-b11a-a0b6eab9d204"
        },
        "item": {
          "id": "776426a0-e4e0-46b7-b834-61185edfa306",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "cce75cb2-8208-40a1-a37f-d5729990b879",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c61534d6-1ad3-4032-8e83-d721200943a9",
        "cursor": {
          "ref": "04b2a503-57d9-4898-b0f2-9bfc42d0f831",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "3375b01e-57c9-40f7-a3f8-407e5363bff8"
        },
        "item": {
          "id": "c61534d6-1ad3-4032-8e83-d721200943a9",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "8a79e82f-909a-4f46-9ff7-3976cc580d01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "867ad570-810b-47ab-904d-364fff9ed27a",
        "cursor": {
          "ref": "70cffe06-d612-4c16-b5c3-dea9c6adba1d",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "8cf6e201-7043-4582-a4f0-49b7d8b6171d"
        },
        "item": {
          "id": "867ad570-810b-47ab-904d-364fff9ed27a",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "56f5eba9-e0f7-4290-ac02-c84adc09d3e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c0f9c49-c758-414d-8c8a-c6640f280817",
        "cursor": {
          "ref": "1aeb7da5-a564-41fb-a9da-f0d347f79d0f",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "43c7a453-2543-4d9a-981a-cca3b34a466c"
        },
        "item": {
          "id": "6c0f9c49-c758-414d-8c8a-c6640f280817",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "98c2786b-2ffc-4a4b-a0c6-3610f7a0b470",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a0d7798-adf0-4e6c-ad7d-ccd22acff32e",
        "cursor": {
          "ref": "ea12cdca-2f55-4fa5-8176-c42f60a5e2b4",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "6aea1547-79c4-46eb-b10a-d41ca992b116"
        },
        "item": {
          "id": "4a0d7798-adf0-4e6c-ad7d-ccd22acff32e",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "76eb890a-f036-43a5-89ee-5bf091f6785c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d89bb70e-f038-49fb-a79a-db527f0bd0aa",
        "cursor": {
          "ref": "817f6247-75d4-4d5c-a095-ea1e346a13e6",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "cc485f7b-0cee-446f-814e-55be87d7f563"
        },
        "item": {
          "id": "d89bb70e-f038-49fb-a79a-db527f0bd0aa",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "cc927c9d-7c7e-4b07-b856-8163623a0ade",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8a633ce-608f-440b-8aee-f06b0e9f389c",
        "cursor": {
          "ref": "fd490ee0-8b1b-4019-b30b-6574a8a06b24",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "271f25df-726e-4b97-9906-132af0365348"
        },
        "item": {
          "id": "f8a633ce-608f-440b-8aee-f06b0e9f389c",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "a384de31-5ef4-48a5-b356-fbfad11acc25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f406df46-8ddf-49cd-9e91-826da2533b62",
        "cursor": {
          "ref": "e86d4989-a24f-41fd-a9e1-5a2d90eb3e6d",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "621b8594-3eb6-4112-868a-cfb6d388a456"
        },
        "item": {
          "id": "f406df46-8ddf-49cd-9e91-826da2533b62",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "77051f0e-3d92-4516-9c78-c6042f9d88f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "641b7661-13f3-49f4-9a29-5004500c2c4e",
        "cursor": {
          "ref": "1e12da02-114f-4971-93e8-8ecc6b13b170",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "91b7aef7-49d9-47be-a471-7ab72c3ed54d"
        },
        "item": {
          "id": "641b7661-13f3-49f4-9a29-5004500c2c4e",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "02ba0a3b-6ef5-45f0-8766-e62169aeede8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6007a5c6-9245-467c-9470-f9ae50700dc3",
        "cursor": {
          "ref": "ca710599-7aa7-4413-8e7b-71c85712fc4a",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "1d2a6c05-dc6f-41fc-b395-9016b064ceb2"
        },
        "item": {
          "id": "6007a5c6-9245-467c-9470-f9ae50700dc3",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "7e6c4fdb-fcaa-4035-82f6-ce50156ded8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f98f7e5-696f-495e-bf18-a5927960431c",
        "cursor": {
          "ref": "1da59556-543a-48ad-854c-8635cfdad1f3",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "58bf30a3-41dd-46cb-87b6-74b9e84e374b"
        },
        "item": {
          "id": "5f98f7e5-696f-495e-bf18-a5927960431c",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "04d08457-7583-4e09-83e0-98ef149d426f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e082c25-6364-4010-81e5-45e12ddfd5c9",
        "cursor": {
          "ref": "0c848c3f-f683-4608-af9a-29affcee5f07",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "4b780a27-ff24-4bbf-b0ed-cd80a0faa9ae"
        },
        "item": {
          "id": "3e082c25-6364-4010-81e5-45e12ddfd5c9",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "71f3a993-4268-4a52-8db0-179cee35286a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "976ab64f-4811-4a13-b903-b5d8a02ea97a",
        "cursor": {
          "ref": "c0434e54-faf8-48ba-b487-21313f4a6d6b",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "a7d50d34-4c0f-4ff6-906b-f3e362033723"
        },
        "item": {
          "id": "976ab64f-4811-4a13-b903-b5d8a02ea97a",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "464692ae-f244-48b3-b5bd-8ddf8b84ad11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b4cf640-4e56-43bf-ac6e-4c0ae1a4215c",
        "cursor": {
          "ref": "00cf37f1-5971-437a-9765-e84b416338c7",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "3765762f-755c-42d3-b726-954ebb5c90f7"
        },
        "item": {
          "id": "9b4cf640-4e56-43bf-ac6e-4c0ae1a4215c",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "06343a37-2093-44f1-8253-cf89448fcdf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f903990-cd1b-46fa-b9b0-8a50c2f5d422",
        "cursor": {
          "ref": "308dd0ed-bcbc-43ba-b60e-dfa33b338142",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "b440c2e4-bd98-4fa2-8179-f9a3b3e6b160"
        },
        "item": {
          "id": "9f903990-cd1b-46fa-b9b0-8a50c2f5d422",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "4994ad02-dfc6-417f-af7e-dd6a93ba9a15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f55d6c0-e958-48e8-ba76-69e013f18c28",
        "cursor": {
          "ref": "4c00a340-7b78-4a36-b89c-b5253214dffa",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "f432c422-e4fb-47ef-b83d-b222163fd1fa"
        },
        "item": {
          "id": "5f55d6c0-e958-48e8-ba76-69e013f18c28",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "29ad9aa5-0cf2-40f9-877c-e8627adba443",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a1f573f-ae93-4a54-b976-3f04da7dbf1d",
        "cursor": {
          "ref": "226b490b-9abe-477b-b705-5c44557cae2c",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "79505432-6b92-4860-9b24-5a481bb5259f"
        },
        "item": {
          "id": "8a1f573f-ae93-4a54-b976-3f04da7dbf1d",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "4ea0e27a-e4cb-431a-9d8b-449716464e2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b92415e-78cf-43b0-8c76-bb90c31086cd",
        "cursor": {
          "ref": "ac832da4-10e7-4351-b123-c8ac2d53dba2",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "475be57f-b691-427f-837f-1402880d2f92"
        },
        "item": {
          "id": "5b92415e-78cf-43b0-8c76-bb90c31086cd",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "83a41a21-1348-40b3-8648-dc856d23aa18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6eea9b2c-6e85-4aac-b10b-9227cd07aab2",
        "cursor": {
          "ref": "0eb4dcc4-5e3c-4539-a7cd-1251a8ada66d",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "095e280d-2abf-482a-ae4a-b18bc4b767f0"
        },
        "item": {
          "id": "6eea9b2c-6e85-4aac-b10b-9227cd07aab2",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "af4a0618-7e49-4ff0-aaf0-8162dba8d921",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d8319ba-7765-4e5a-b1aa-b920ee34f4b2",
        "cursor": {
          "ref": "823a157b-6f35-448d-83e2-6bb77e732b70",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "b5cc74c8-ce2c-4a27-9871-9af640b069fb"
        },
        "item": {
          "id": "0d8319ba-7765-4e5a-b1aa-b920ee34f4b2",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "2f9e599b-07d8-4f42-975f-90b4e75d3ca1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d961998-0e61-473d-a7fe-595f9449a226",
        "cursor": {
          "ref": "7c128692-0d1d-4e6e-94eb-037422443507",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "f2dcb8a1-cbb0-4be5-b402-c01c1a23448b"
        },
        "item": {
          "id": "9d961998-0e61-473d-a7fe-595f9449a226",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "2403c494-71b6-482a-92ee-5a5f62901313",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb70781d-e0c9-4824-8b09-ddc0d58b438a",
        "cursor": {
          "ref": "14c96d19-315e-4237-aff7-4a9f77525472",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "a35babb7-52a9-47b3-ba0f-67bbcb41bf6f"
        },
        "item": {
          "id": "bb70781d-e0c9-4824-8b09-ddc0d58b438a",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "60542cbf-287b-473c-b653-311998995b0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ff2f073-00dc-4edb-9c1b-df99282909b8",
        "cursor": {
          "ref": "faab2052-5a0b-422d-9b2a-928739fc5688",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "47fe1417-4b27-46f9-ad6f-56273c015e2c"
        },
        "item": {
          "id": "9ff2f073-00dc-4edb-9c1b-df99282909b8",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "2dc376b6-3b69-413a-a65f-9428910da5b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59c8e97b-0317-4a16-8695-58cc0d6a091d",
        "cursor": {
          "ref": "2703b29f-b510-42ca-8169-4e2105e65047",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "3d12d179-a02d-4835-b5df-e2836bd752ed"
        },
        "item": {
          "id": "59c8e97b-0317-4a16-8695-58cc0d6a091d",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "3c9061f9-3920-4e41-b2c9-2aec0ec5a961",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9fafc1f-8517-4b52-b7b4-24f87edd48e1",
        "cursor": {
          "ref": "2a3e870a-1577-4f82-9da7-f9c679b6946a",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "b6635ede-8bdb-473e-8e7a-bf2faa85cbe4"
        },
        "item": {
          "id": "d9fafc1f-8517-4b52-b7b4-24f87edd48e1",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "20baa5e8-143e-4e12-9860-14df4583be96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0c89e40-6024-4a84-9a77-fbebc1dab1bc",
        "cursor": {
          "ref": "f64dde86-1fab-4301-9be4-aa7b78ee3fb6",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "03e75b8e-dd91-42f1-af8d-a2076609e11e"
        },
        "item": {
          "id": "f0c89e40-6024-4a84-9a77-fbebc1dab1bc",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "913028e1-39e1-4cf6-925a-0feb2e7e9eb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "224f3e2b-44f6-423e-9a0d-08429ccacb45",
        "cursor": {
          "ref": "a0484f56-90dd-4f61-b323-fb8f43866f88",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "91e7a695-3902-4747-8297-9094110617e0"
        },
        "item": {
          "id": "224f3e2b-44f6-423e-9a0d-08429ccacb45",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "e464a64e-3883-4086-a57b-dc5fa8ac700d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "476b8660-d369-4a54-b795-52028df45341",
        "cursor": {
          "ref": "7d82cc7b-6d06-492d-b772-4132c34b3276",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "81d0aa55-152b-4673-bbaf-fa20715cbce1"
        },
        "item": {
          "id": "476b8660-d369-4a54-b795-52028df45341",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "2ac326e9-08be-48d9-a885-4fcbb4e50175",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f200d63-14d8-4b85-b5dc-ebe0f4ba7ad7",
        "cursor": {
          "ref": "3db3e661-6548-4d31-9b6e-ff64daaf53d1",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "619a976e-91d1-4f10-8042-affa736874fb"
        },
        "item": {
          "id": "1f200d63-14d8-4b85-b5dc-ebe0f4ba7ad7",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "bd89fbf7-17f8-412d-8234-3506cfc1648a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ff0c0b9-415c-4e00-9d90-dde56e440adb",
        "cursor": {
          "ref": "72504f61-6c21-4876-9f86-5b2184b08928",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "7cf5d19e-828f-4cac-b4e7-f8f9ff1d3079"
        },
        "item": {
          "id": "0ff0c0b9-415c-4e00-9d90-dde56e440adb",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "2d52b20c-b993-4427-b7cf-703cc6a6fd6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "374563cf-af93-4d9c-a9a0-1ef8f6edb004",
        "cursor": {
          "ref": "6b14b06a-68c2-41f8-9624-045037165d80",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "70cc5cba-2c76-4b77-99ee-15888e678466"
        },
        "item": {
          "id": "374563cf-af93-4d9c-a9a0-1ef8f6edb004",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "3bb8df86-8717-485e-8541-3b74b6889dc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e9b0b28-3ad7-4632-a56f-f7fd4c8ca9a4",
        "cursor": {
          "ref": "edfa26e4-3154-4206-acab-4c424a644d16",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "7b566b4b-3fe8-4f09-9ab4-614ed3a1535d"
        },
        "item": {
          "id": "9e9b0b28-3ad7-4632-a56f-f7fd4c8ca9a4",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "4577d999-9eb4-4974-8858-1073bfd666d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6825f1a-3cb6-4611-9abf-1c63ff8a2e43",
        "cursor": {
          "ref": "a3b680f1-13bf-4d7e-9971-151277f01c98",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "88ac93f2-ff65-4757-8962-ff73db10bab4"
        },
        "item": {
          "id": "e6825f1a-3cb6-4611-9abf-1c63ff8a2e43",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "7525bebd-c0ef-4456-bf7a-e58f627cf6f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71ea108f-a631-4d7d-82b5-9f701e7b8bc5",
        "cursor": {
          "ref": "d80eddd3-b615-4647-8b4b-730cef0e2afe",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "4e3fded1-66ef-4ee7-acc8-5033c8293fda"
        },
        "item": {
          "id": "71ea108f-a631-4d7d-82b5-9f701e7b8bc5",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "1b98ca89-b225-4cd7-9f50-091d42166b80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92ca14f0-29cc-44b1-bd12-e9908b657093",
        "cursor": {
          "ref": "11463f47-3aa9-4686-b0ef-972e92e8be83",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "bdafa741-38e5-4956-8411-e4b84a2fdf69"
        },
        "item": {
          "id": "92ca14f0-29cc-44b1-bd12-e9908b657093",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "504640b3-7268-405b-b846-6514693a510d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa23348c-2846-429c-8bac-1db2be4998c9",
        "cursor": {
          "ref": "fa7f0b48-9d92-4276-8877-e6e6651ddd17",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "a117eb77-57dd-4385-87a0-eb6e65c66c99"
        },
        "item": {
          "id": "fa23348c-2846-429c-8bac-1db2be4998c9",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "8273f66a-3f5d-42e6-acab-4e91c1153109",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3bcbcf4-1aff-4c50-bade-5c7c964814bf",
        "cursor": {
          "ref": "830ba163-9112-4878-a00a-aa9c7326cabd",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "32e89c8d-64ea-4488-b339-48f050e4f632"
        },
        "item": {
          "id": "e3bcbcf4-1aff-4c50-bade-5c7c964814bf",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "049fc849-5cf2-45c3-a8a1-808a9a1430e7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99a7e3b4-54e1-4796-9580-208b65d8d3e6",
        "cursor": {
          "ref": "e2655a21-1921-4e2b-a9e5-97d000c5e73e",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "4871ca94-3902-400d-9d7c-1d00b9aa6912"
        },
        "item": {
          "id": "99a7e3b4-54e1-4796-9580-208b65d8d3e6",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "cf362c2e-fd60-4359-a0cd-710b409cced5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da96fe09-7c81-4c25-aca7-1bb1ed3bcd39",
        "cursor": {
          "ref": "15b27b99-b084-49a4-b530-70f074358bbb",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "2d1779e0-6f7a-4912-bc23-db234abfe060"
        },
        "item": {
          "id": "da96fe09-7c81-4c25-aca7-1bb1ed3bcd39",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "fbf06702-754b-46b4-a80b-21ac9d0a9fc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85f70e9a-2198-4dd7-962f-77a68da9bc8c",
        "cursor": {
          "ref": "ff10c4b5-f422-49f7-8b3b-1d6605542b8c",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "09a285a5-ae88-4838-88ff-0343ceb6d280"
        },
        "item": {
          "id": "85f70e9a-2198-4dd7-962f-77a68da9bc8c",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "b78ac819-9ef4-467f-8b93-e2cecefd81bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe905d99-546e-4f4f-9846-bfe94fdea88a",
        "cursor": {
          "ref": "1e9fea34-8854-4693-8b93-a5daa7b748c2",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "339c3230-4c68-4d01-bac0-bef8f0208199"
        },
        "item": {
          "id": "fe905d99-546e-4f4f-9846-bfe94fdea88a",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "abab5d2a-c68e-4ac0-a017-34435e357daa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e241b7c-4730-451e-a139-5969f7e98383",
        "cursor": {
          "ref": "093638af-ccf2-4aa7-a0bb-3a46595bcc6b",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "b73bebfa-6311-4f28-abdc-85d1bbe953df"
        },
        "item": {
          "id": "8e241b7c-4730-451e-a139-5969f7e98383",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "9b26f7b1-d588-49a8-a91a-271b05fdbe3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b563600e-04e1-40e3-8e28-3f41d7265d0d",
        "cursor": {
          "ref": "e00d964c-d845-45e2-b259-15e1f52bd99d",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "2060a72b-f742-423a-ba7b-3c8f195883ed"
        },
        "item": {
          "id": "b563600e-04e1-40e3-8e28-3f41d7265d0d",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "f8628ca5-c2b1-418b-b678-88cf40fbe52b",
          "status": "OK",
          "code": 200,
          "responseTime": 118,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "70f48f6a-b05c-41bd-b214-afb2b91b0cb1",
        "cursor": {
          "ref": "41a6360d-affc-4b97-b4a1-f28e2d858b59",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "d227ab9d-102e-4766-b285-9f3190f5236a"
        },
        "item": {
          "id": "70f48f6a-b05c-41bd-b214-afb2b91b0cb1",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "c2230fb3-aa69-4d4d-8157-62e204e4558e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abba78eb-8441-414e-bc2c-4e806fca9911",
        "cursor": {
          "ref": "c47706ee-9fea-47a7-b874-a0e60ff6afed",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "d8af9430-7d8f-4761-ad23-626406f683e9"
        },
        "item": {
          "id": "abba78eb-8441-414e-bc2c-4e806fca9911",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "73b13909-84e1-417b-a283-01ae1c0f9c91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fee3ee4-d3b2-4fb7-8e5d-75dc1ff0ccfd",
        "cursor": {
          "ref": "ee27b37e-69a8-4830-ad11-9e543428d891",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "a4648457-f612-4c75-91eb-be4b96918568"
        },
        "item": {
          "id": "4fee3ee4-d3b2-4fb7-8e5d-75dc1ff0ccfd",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "1b1d4696-ff3d-4905-9dc1-e07189bffdaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18f038c7-146e-4d2a-8c7e-28306cbea3ab",
        "cursor": {
          "ref": "996ad41a-3d81-4403-8ff3-83233dfc1504",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "38782605-efd2-4f29-8fc8-1a767e87505d"
        },
        "item": {
          "id": "18f038c7-146e-4d2a-8c7e-28306cbea3ab",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "331cd25f-7f2c-42d4-bee0-3e28f59344cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6593383a-0507-4e8d-b265-63ce2422e4d3",
        "cursor": {
          "ref": "b7644dbc-fd0d-4eeb-808a-042cd7a7f3f5",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "dd306447-8c2f-43cc-afa8-da3579f23715"
        },
        "item": {
          "id": "6593383a-0507-4e8d-b265-63ce2422e4d3",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "1fbc4fb1-2200-438b-afcf-8f49df4a0d21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b606c402-5f7f-4590-8ce9-aac1dec2fcf1",
        "cursor": {
          "ref": "693795e3-ed45-47fc-bbbb-e5ef4d6e30fb",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "15eb58b6-973a-4568-b3a3-d71b77306f86"
        },
        "item": {
          "id": "b606c402-5f7f-4590-8ce9-aac1dec2fcf1",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "cf420b4f-14d9-40e0-ae44-df7227dc9902",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ec23864-c8f3-401c-a3f8-7126770a7e4b",
        "cursor": {
          "ref": "414c78c6-5da5-4277-8562-edfab6cd9cec",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "3f70ae3c-2997-4af7-8e71-323f8239fb72"
        },
        "item": {
          "id": "1ec23864-c8f3-401c-a3f8-7126770a7e4b",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "e43db657-d4b5-42c9-b024-ae77d4c30f98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d081c35b-56ad-43b4-b99d-74b6d656f89f",
        "cursor": {
          "ref": "bb37a6cf-60b4-4a97-a3d8-f100e7d3d98a",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "bf5c2424-d1a1-485d-8d0a-1b82a311318b"
        },
        "item": {
          "id": "d081c35b-56ad-43b4-b99d-74b6d656f89f",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "7615742a-0b43-42c3-b62e-18d644840835",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2f72ebb-c702-4c5e-bdf5-c82ba2636248",
        "cursor": {
          "ref": "d0526517-13f3-488b-90f7-8157d36f4bcc",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "cc06de03-67e9-4b8c-8153-21fe6ed494c8"
        },
        "item": {
          "id": "b2f72ebb-c702-4c5e-bdf5-c82ba2636248",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "67b9d538-0eb8-4159-a9fb-5fad5e35446f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15ff01ed-88f1-4191-b9af-e984c44419e8",
        "cursor": {
          "ref": "b253809a-948d-4c32-b21c-ab3d023aa2bc",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "752139fa-b9a1-45c8-b7ac-f9c57835669f"
        },
        "item": {
          "id": "15ff01ed-88f1-4191-b9af-e984c44419e8",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "b7906dfc-2184-4d2c-9b8a-383d81f415c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb30da6f-9be5-418d-99cb-a7b8d42f0995",
        "cursor": {
          "ref": "5932988e-c6a1-4430-b73e-2210d7b52b40",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "6103cfbe-1722-47e7-8cc2-f44056b80a28"
        },
        "item": {
          "id": "fb30da6f-9be5-418d-99cb-a7b8d42f0995",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "095a35cf-7a48-4086-bae0-d858bd33b402",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b826b75f-2811-4259-bfca-1caa14eefbfc",
        "cursor": {
          "ref": "75340fc3-f653-41cf-b033-8e55f1bd337d",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "63fc3cb0-63f5-4141-ac2b-6e59e634196d"
        },
        "item": {
          "id": "b826b75f-2811-4259-bfca-1caa14eefbfc",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "d7fb0a7f-c939-41f5-bf68-a6e95002516b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "812872b7-1012-46e4-a041-d7393c68fbde",
        "cursor": {
          "ref": "3dd9595f-6422-40ff-b54c-85f33b7f277d",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "a1a02c4f-bdaf-4f8b-bf6a-041c51ee1eea"
        },
        "item": {
          "id": "812872b7-1012-46e4-a041-d7393c68fbde",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "f08b5240-f18f-4033-a9e9-eaa0d577308e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26c07c9d-626a-4aaa-873b-e571368397bb",
        "cursor": {
          "ref": "8574f5af-2cc0-49c1-b92a-9c0f780ad65b",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "88fd5cc4-f699-4658-9477-23c679afac0f"
        },
        "item": {
          "id": "26c07c9d-626a-4aaa-873b-e571368397bb",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "85b3afd0-7cd0-4894-bf35-eda07d1e138b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6c6f261-90da-48bc-9a82-bfd7185bfb1e",
        "cursor": {
          "ref": "03f57f9e-0450-4a5c-8430-d99aae66a6bf",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "1c7b9934-b582-41c7-bd36-179fa783e275"
        },
        "item": {
          "id": "e6c6f261-90da-48bc-9a82-bfd7185bfb1e",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "cf9be8c6-4cd4-4ccb-8a57-b62c38bbc8de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f684b5d4-bbd8-442e-8a48-13995734bcbc",
        "cursor": {
          "ref": "17ba6d8a-980f-4b2a-8056-def6b08b1e7f",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "78de4224-00fb-44e9-9f8e-ed801f4d8481"
        },
        "item": {
          "id": "f684b5d4-bbd8-442e-8a48-13995734bcbc",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "d9f8e488-6fec-4aa5-98b1-0943ab8ff7ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a027bf1-a4b6-4008-9bf5-b7a6ecd41d16",
        "cursor": {
          "ref": "d6cda042-ab81-4ffb-a868-4c0fe9d39051",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "7f734925-9218-4be2-9161-c7a5528e4be4"
        },
        "item": {
          "id": "0a027bf1-a4b6-4008-9bf5-b7a6ecd41d16",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "10283177-c351-45af-b0cf-faefb504858b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a21a78e1-45b3-445b-bfbe-f620ba23990a",
        "cursor": {
          "ref": "60febf93-e941-44f1-880b-b312803e0db6",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "f0a78951-9bbf-48a4-bcaa-7d16116ab10c"
        },
        "item": {
          "id": "a21a78e1-45b3-445b-bfbe-f620ba23990a",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "19587c1e-390a-4e6c-8ba9-fa69832f645c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cf3dbbd-a696-4119-8dc5-4cecbfc70f68",
        "cursor": {
          "ref": "2511f546-5a8a-422e-ab0d-8b64aa371726",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "87aad295-bc2e-402b-af9d-39907cfc1435"
        },
        "item": {
          "id": "7cf3dbbd-a696-4119-8dc5-4cecbfc70f68",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "c822fc00-0395-4862-b90e-5ea1ab16cd44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aa6d1d1-e71c-40d8-91f4-800d280a4dae",
        "cursor": {
          "ref": "e92cb167-a837-49ac-bdb5-56485e577664",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "d4b99c45-5546-4a90-8faf-ebe55fa9af45"
        },
        "item": {
          "id": "8aa6d1d1-e71c-40d8-91f4-800d280a4dae",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "1dd0df7c-b9e9-48ea-8abd-90427c8d9182",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62a3aefc-cfd2-440b-8bcc-44069881e1a1",
        "cursor": {
          "ref": "037f23f8-a488-4f3c-85dd-827899c3ad6b",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "436d56da-7928-4279-9c8c-a911bc3cc564"
        },
        "item": {
          "id": "62a3aefc-cfd2-440b-8bcc-44069881e1a1",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "c5bdef17-f598-4025-94af-d2f6d7773834",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23a6e160-e699-4acb-b63f-b2af5652c4e9",
        "cursor": {
          "ref": "8eca7d6b-61e0-4599-a3b9-f0e1bd9f56e1",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "d3f89f56-30aa-4ec5-beac-9fa372f2ef70"
        },
        "item": {
          "id": "23a6e160-e699-4acb-b63f-b2af5652c4e9",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "6b135c4f-eb9c-4b3f-8129-ca4ae6e42a05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43a04004-1654-4c29-a4de-df6c78e816e5",
        "cursor": {
          "ref": "97b18b9f-c2ba-47f6-9d37-0f1592d138ea",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "4666cd7d-daef-4ab3-81a9-e630d20cbe83"
        },
        "item": {
          "id": "43a04004-1654-4c29-a4de-df6c78e816e5",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "ea2c54cf-ecb2-436d-a56e-c65c2f6eb1e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "269f2e5e-eb8c-40d6-8785-a3b2f0752996",
        "cursor": {
          "ref": "b7dd06c9-7fbd-437c-a383-f44618e8fe1f",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "0abe7e0c-a080-4458-8409-7c85c9ccd35f"
        },
        "item": {
          "id": "269f2e5e-eb8c-40d6-8785-a3b2f0752996",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "0ed3d0ea-d974-44ba-bcb7-a53c623b7c74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd8cfa28-a465-42ca-893d-cd3b5d62f923",
        "cursor": {
          "ref": "54371e8b-5056-4f82-af95-d3b9912f81d3",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "024e5f8e-10d7-4c6b-9268-d016c1dfd278"
        },
        "item": {
          "id": "dd8cfa28-a465-42ca-893d-cd3b5d62f923",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "789015e6-305f-416c-a64e-637e5bc24a2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dede30d-853f-4669-86a5-0218a4556591",
        "cursor": {
          "ref": "0666804c-26e9-4d7d-a034-66c401da7552",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "22795016-2836-4de2-80e2-ea072139a7d9"
        },
        "item": {
          "id": "7dede30d-853f-4669-86a5-0218a4556591",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "92493541-6620-4893-9fed-82e3d5d3a41b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5eec184-16ae-4f53-980b-0c326bcc4d1a",
        "cursor": {
          "ref": "6508fe6d-a068-41ab-9800-3d5ecf5cee40",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "85e39819-10d4-4edf-92c8-4365f4761e0c"
        },
        "item": {
          "id": "d5eec184-16ae-4f53-980b-0c326bcc4d1a",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "478262b2-2472-45b6-a6f7-d73c06b204b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f806e7c-d298-4bab-b246-a16cbe4ec017",
        "cursor": {
          "ref": "7a4b01de-6fb2-4de9-b042-e6264c19f002",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "fef0b85b-aab2-45f4-b2a3-531e25d7332a"
        },
        "item": {
          "id": "5f806e7c-d298-4bab-b246-a16cbe4ec017",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "86419ed8-08cd-4bff-b2f0-6fbc6477c40b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "517535c1-1c46-4614-9a2d-601009043fe6",
        "cursor": {
          "ref": "1d92a463-05d9-43c9-b998-442b346661d3",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "c9488935-3e3e-4cc3-906c-4111d56d26ab"
        },
        "item": {
          "id": "517535c1-1c46-4614-9a2d-601009043fe6",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "7fc1838a-604c-4a79-bd0d-60f960d69163",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "034e205e-685e-4b70-95e8-e62c36b744ba",
        "cursor": {
          "ref": "9017bc3c-63ff-463e-a9ad-c4e4edfdf50b",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "de576217-2332-4fc7-8850-ef308028dbe8"
        },
        "item": {
          "id": "034e205e-685e-4b70-95e8-e62c36b744ba",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "63966006-fced-4ed0-b5dd-ac061b51a7fc",
          "status": "OK",
          "code": 200,
          "responseTime": 124,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "1d0a4a51-016e-4cc4-938c-9343bb6e0744",
        "cursor": {
          "ref": "31946ae5-87b6-430f-ab72-a5d912a33ad2",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "ae02bcff-ba5b-42f2-a1e1-7573f903464a"
        },
        "item": {
          "id": "1d0a4a51-016e-4cc4-938c-9343bb6e0744",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "9a2afc2d-10ba-44a6-936a-988fc2af8968",
          "status": "OK",
          "code": 200,
          "responseTime": 114,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "cdc3797d-1c91-411f-bf7a-4a8781210248",
        "cursor": {
          "ref": "99eee61e-6361-4f59-ae11-a7284960917d",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "ca55cf49-a7b0-45d7-97a8-c8113f71ade9"
        },
        "item": {
          "id": "cdc3797d-1c91-411f-bf7a-4a8781210248",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "2f64b9d5-d5c0-4450-94fe-f9e38bdac24e",
          "status": "OK",
          "code": 200,
          "responseTime": 118,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "5c4d0ed1-d87f-4a35-a769-b4da0c006244",
        "cursor": {
          "ref": "8dfe36bf-f590-44e9-ad60-7b323e1694cd",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "aff8f8e0-bbd8-4b45-a5e4-40ff70c1609b"
        },
        "item": {
          "id": "5c4d0ed1-d87f-4a35-a769-b4da0c006244",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "4ea14523-6b45-4469-a62d-de181cd84ad6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b91ad812-9125-4412-8e1f-fb7f0b8da406",
        "cursor": {
          "ref": "74345b16-9c64-47b9-b6eb-0ecaf49d0279",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "d5a0afb1-fa11-44d4-a431-6d702a6fee27"
        },
        "item": {
          "id": "b91ad812-9125-4412-8e1f-fb7f0b8da406",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "32371122-6e07-44f4-9ce8-5d09034d52ee",
          "status": "OK",
          "code": 200,
          "responseTime": 121,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "9c11f0f0-c6e1-4666-87c7-9888bd8035eb",
        "cursor": {
          "ref": "e3d7483b-e8d1-48f2-afeb-2d80e1582df2",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "732f2e10-5e9e-424c-9b48-b4c8a201db60"
        },
        "item": {
          "id": "9c11f0f0-c6e1-4666-87c7-9888bd8035eb",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "6e401c60-ab3b-4e38-b366-add0566ed476",
          "status": "OK",
          "code": 200,
          "responseTime": 111,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "26c7a5a6-ef04-4f92-acbd-5988982888a4",
        "cursor": {
          "ref": "9b204064-0107-4349-9f39-04d692eb10d1",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "0049cbcd-e6d6-4964-b200-8672903410ce"
        },
        "item": {
          "id": "26c7a5a6-ef04-4f92-acbd-5988982888a4",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "d22d7001-0059-4ad9-9941-866dd9c75502",
          "status": "OK",
          "code": 200,
          "responseTime": 671,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "1f2de4a2-9674-41a2-82c2-60d9c470dbdf",
        "cursor": {
          "ref": "7104ddf8-cb76-4d6c-ba8f-3f61df6d8b05",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "1a18099f-0bd1-4755-b6da-e558504b8de9"
        },
        "item": {
          "id": "1f2de4a2-9674-41a2-82c2-60d9c470dbdf",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "ba9c431c-8839-42d8-a2d1-c3fca2e6dbbf",
          "status": "OK",
          "code": 200,
          "responseTime": 160,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "0bb387b6-c9f2-40e9-a10f-e3b5fec585b9",
        "cursor": {
          "ref": "30c7239e-6ef3-43e3-bf84-f4db7e9ceb6a",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "33b145f0-ffe3-429c-9fa5-4dabd834c364"
        },
        "item": {
          "id": "0bb387b6-c9f2-40e9-a10f-e3b5fec585b9",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "718f6493-7970-4181-ad2a-f9438254a89d",
          "status": "OK",
          "code": 200,
          "responseTime": 117,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "a6fb2d09-5af2-4272-85be-9d9c63cce834",
        "cursor": {
          "ref": "4ff1eb7a-389d-477c-92cf-7f7a245e54ca",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "295f0c1b-2374-452c-aed1-07403182b50f"
        },
        "item": {
          "id": "a6fb2d09-5af2-4272-85be-9d9c63cce834",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "73e58653-d1e5-43dd-93dc-093bbb2810fc",
          "status": "OK",
          "code": 200,
          "responseTime": 140,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "9846a6ea-f0e4-4c98-bd7e-2b8106ce4dd0",
        "cursor": {
          "ref": "c1e841be-a8ef-479e-a815-c03ebff3b0ea",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "4d0470da-03c1-4231-9ce7-8664bc4fd81f"
        },
        "item": {
          "id": "9846a6ea-f0e4-4c98-bd7e-2b8106ce4dd0",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "0fc554ac-5356-4da2-b834-48d81ac9b6da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6bbe0f2-4674-48ad-8bf6-179349b88d34",
        "cursor": {
          "ref": "d04eff58-7b30-4496-a053-bdad99b486b2",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "6ad75750-7566-4392-ad45-e9274af94aee"
        },
        "item": {
          "id": "f6bbe0f2-4674-48ad-8bf6-179349b88d34",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "d50131b5-d40a-43fd-bbe8-455c476fca5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a3a6ece-96fa-4a72-8375-456176396d30",
        "cursor": {
          "ref": "1df6d490-cf78-4128-873c-40f43242604d",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "2f3d75f3-d302-4aa7-9a21-8da923c19bc1"
        },
        "item": {
          "id": "8a3a6ece-96fa-4a72-8375-456176396d30",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "223f9065-35d7-4446-b614-d9a89c166316",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a769b9ac-6572-4f8c-b9fd-edc55c193cb2",
        "cursor": {
          "ref": "81e8c15b-4a75-4195-be00-e181f7d0c63d",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "f78fa181-206b-458c-bcef-103b2944bdc9"
        },
        "item": {
          "id": "a769b9ac-6572-4f8c-b9fd-edc55c193cb2",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "5c5ba19f-1c4b-492a-93e7-8659d1501dab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba915e27-e808-4822-9550-6b0873c667c6",
        "cursor": {
          "ref": "7e9aac7a-380d-48ad-b7f6-eab8ec7411db",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "88689fe5-1bb1-4c10-a043-89b25d611b50"
        },
        "item": {
          "id": "ba915e27-e808-4822-9550-6b0873c667c6",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "0bcc6818-8725-4e1b-8f69-d1c25f3637a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32778fdc-b246-4b31-a835-5c8c709c4518",
        "cursor": {
          "ref": "4841b27b-a70d-475a-95a5-f6a9e1e17f67",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "f185deb2-9416-452d-b51c-af1afb06e0b8"
        },
        "item": {
          "id": "32778fdc-b246-4b31-a835-5c8c709c4518",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "bb5f5097-1386-4850-b7a8-f28ef8f42ea8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8fdcc5a-342e-4322-ae9f-77ec0540e655",
        "cursor": {
          "ref": "70d306a8-6157-4685-9e74-6bb062d93ffb",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "0e78e46e-028c-498c-923b-5cf9ff99fc93"
        },
        "item": {
          "id": "b8fdcc5a-342e-4322-ae9f-77ec0540e655",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "8b8f6f91-a901-45cf-a064-e3cdbe9f944c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "add05342-6358-4752-a785-ca35c039731c",
        "cursor": {
          "ref": "c2af34fe-9184-4b84-9516-0e868578424d",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "970907cd-2d6c-40a5-b2ef-ae26438e387d"
        },
        "item": {
          "id": "add05342-6358-4752-a785-ca35c039731c",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "56fa625f-da3b-4fba-87d8-468400635154",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e45368fe-2e57-44cb-b0ee-9c6719f57590",
        "cursor": {
          "ref": "d4bd195e-8775-4c05-93ed-85ae193c5fbe",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "30a1f18e-8724-4e68-838c-a92aeb015335"
        },
        "item": {
          "id": "e45368fe-2e57-44cb-b0ee-9c6719f57590",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "67b7fefb-dd31-44b4-963a-ae40102f9c1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68af91f9-493d-42d1-8ab0-2757542e5269",
        "cursor": {
          "ref": "ffb8925d-b4ff-4cc3-9004-7a9ff644d0af",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "927ad38d-033e-4c5e-baf7-bb5b6317d5a8"
        },
        "item": {
          "id": "68af91f9-493d-42d1-8ab0-2757542e5269",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "f2d2e6eb-b2c0-49b9-b261-8739661db643",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b14d95b-e7fb-4827-9057-f828c4ceebe4",
        "cursor": {
          "ref": "3a072f01-e6ab-4289-8999-ec6b36ffff86",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "c1e94f8e-218d-4caf-b7f6-57e644d4c5a7"
        },
        "item": {
          "id": "0b14d95b-e7fb-4827-9057-f828c4ceebe4",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "eb7af659-909d-4c1d-a866-132eb5fe7cc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7916a808-700b-4568-b4d3-7c5f78469054",
        "cursor": {
          "ref": "df0d1c94-f826-4bad-81e8-cbd40069e3d5",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "4e2c6d34-1690-4a10-a79e-d95c7935e6ba"
        },
        "item": {
          "id": "7916a808-700b-4568-b4d3-7c5f78469054",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "69b61cd8-2b14-412a-bd6a-ececf4f444a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72654ca9-32a8-47b7-8f33-a6888eaf84df",
        "cursor": {
          "ref": "d530aab5-3d89-435a-b6cd-f662ebca922e",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "835a9270-d4ac-42f7-a770-6803ef21318a"
        },
        "item": {
          "id": "72654ca9-32a8-47b7-8f33-a6888eaf84df",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "cf28bee6-8160-405b-94a5-5047bd9f501d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9177a4c-4915-44fa-ae35-6cc3df851b35",
        "cursor": {
          "ref": "908b7e9f-7d0c-49e5-96c7-436ed65e7d02",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "e20bf883-8c1a-4463-8ab0-403c029d3892"
        },
        "item": {
          "id": "d9177a4c-4915-44fa-ae35-6cc3df851b35",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "67f8f18d-c400-44a2-ad83-37df7efba71a",
          "status": "OK",
          "code": 200,
          "responseTime": 121,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "dcb9112d-3c09-432e-a4c1-3fd5b5613a31",
        "cursor": {
          "ref": "ea56cb4e-eac7-495d-8222-16640ed6c0fc",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "b51c7579-d493-4290-bafe-2f42ad859121"
        },
        "item": {
          "id": "dcb9112d-3c09-432e-a4c1-3fd5b5613a31",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "3708458d-9c30-427f-8414-ceef73881a7c",
          "status": "OK",
          "code": 200,
          "responseTime": 183,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "9e70fcfc-fcc8-4a7f-9911-080953a19c11",
        "cursor": {
          "ref": "1be34a01-d91e-4d2f-9336-0399d8518173",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "07eefb71-c9ba-4c60-8ef0-a519771a2941"
        },
        "item": {
          "id": "9e70fcfc-fcc8-4a7f-9911-080953a19c11",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "b9303aaf-a6a9-4b89-b1a0-d48847553021",
          "status": "OK",
          "code": 200,
          "responseTime": 121,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "0bacb512-d7b6-43df-8a46-8ef363a1102c",
        "cursor": {
          "ref": "bf986de1-1d98-4ae5-91bb-f19a44e937e8",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "6528557c-5b7c-44fe-a483-8cc3ae720cf1"
        },
        "item": {
          "id": "0bacb512-d7b6-43df-8a46-8ef363a1102c",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "55c171fd-fe26-4f9e-9871-90d418e1f539",
          "status": "OK",
          "code": 200,
          "responseTime": 121,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "ace8e319-a05c-45d9-b982-f659e7e85b2d",
        "cursor": {
          "ref": "9444251c-09c8-4726-8da2-404dbbab714f",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "b1bf471b-0e99-4c98-97e0-86b15e523228"
        },
        "item": {
          "id": "ace8e319-a05c-45d9-b982-f659e7e85b2d",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "e8719298-b3af-4237-bb50-5a9d9283711f",
          "status": "OK",
          "code": 200,
          "responseTime": 126,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "7f06a083-4f50-42ba-8ca8-793c914133a3",
        "cursor": {
          "ref": "4e0ada21-e717-4f65-a955-1185ca5d9c1c",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "3fe4571e-7d6c-4cc3-bcad-93e647345c2c"
        },
        "item": {
          "id": "7f06a083-4f50-42ba-8ca8-793c914133a3",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "8fba2349-7d95-4cc0-bb92-0005ba56dc75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44d42227-9b36-4648-9696-f3498586ed0b",
        "cursor": {
          "ref": "26d75de4-3964-4aa3-b738-872c50ba6871",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "3ca941b7-c7ee-42fe-8e8b-a035f09772c3"
        },
        "item": {
          "id": "44d42227-9b36-4648-9696-f3498586ed0b",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "c065810f-a498-4b05-8d0b-08ee84c6416a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dd64279-e6e8-4933-8e24-af448a2b5287",
        "cursor": {
          "ref": "3fc2b97d-4d1f-438c-9b4a-3d1dfa421de1",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "4e4f1acd-8e63-47ba-9d46-ac23fa311517"
        },
        "item": {
          "id": "3dd64279-e6e8-4933-8e24-af448a2b5287",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "f6c4b1a4-7451-4ccd-8515-188c826b0a80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2050cb0-892f-441b-b657-fe51777075ae",
        "cursor": {
          "ref": "2bba2a03-4b7e-49cc-b0c7-58d3fb5ea6a7",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "154fcfb5-085b-4353-9f61-3ad48a2dba75"
        },
        "item": {
          "id": "b2050cb0-892f-441b-b657-fe51777075ae",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "e1557da7-dcef-4654-b153-9a2b5b71063d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "732ca2bf-b322-4ea4-8f00-ee6a8e14b24e",
        "cursor": {
          "ref": "30ecf68c-587c-4328-a291-7a4aea53d78b",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "893c79ff-6fd8-4d73-8b60-1a0133c6b756"
        },
        "item": {
          "id": "732ca2bf-b322-4ea4-8f00-ee6a8e14b24e",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "29aa4937-ae35-4d3d-82ea-fba714b29f6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b090fa2-79eb-4333-8e29-fc7e878ce6b9",
        "cursor": {
          "ref": "b0004cae-558d-403c-b9fb-c4f363ca5792",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "e239ca83-7566-46cd-b020-5a57dbc777dc"
        },
        "item": {
          "id": "3b090fa2-79eb-4333-8e29-fc7e878ce6b9",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "4cb984f8-3f5a-40b4-b6cf-12a634603d8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "491d6b3f-b6f0-49ad-a0c8-352e107d0162",
        "cursor": {
          "ref": "f33fab51-2007-46fc-818e-f2093f82b92b",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "7bce2a4f-ea90-4d6f-bcac-0778fb17585c"
        },
        "item": {
          "id": "491d6b3f-b6f0-49ad-a0c8-352e107d0162",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "294ff1d8-c238-4bf8-8d0b-4b406f063df0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "808f6747-8c2b-4184-b68e-3e2b75e488fe",
        "cursor": {
          "ref": "20eb62f1-0bdd-4d12-a0a3-d4578124718b",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "0fe1779a-d448-432a-b73b-8d3dabc6d3d2"
        },
        "item": {
          "id": "808f6747-8c2b-4184-b68e-3e2b75e488fe",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "929eb988-4a04-4401-b985-6db3068e10bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "566c2a3b-1d51-4469-94df-8ab379dec1e2",
        "cursor": {
          "ref": "d8655391-6e5d-4538-b131-0fff8c719b05",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "07a61afe-5b55-411c-af64-e1fff3771cae"
        },
        "item": {
          "id": "566c2a3b-1d51-4469-94df-8ab379dec1e2",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "320e7374-5eb6-47d1-8207-02b4af158968",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eb9da98-85a8-43ca-8dc2-58438b8ddfe4",
        "cursor": {
          "ref": "4e43bb81-a8a1-437f-ad77-c85efb05be0a",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "5aa977cc-3584-47d8-a93d-1891addbd22b"
        },
        "item": {
          "id": "5eb9da98-85a8-43ca-8dc2-58438b8ddfe4",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "dfba646b-ae17-4bfa-a7d1-3fce30f32902",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "131805cf-221c-4972-a3dd-ee86b74122b6",
        "cursor": {
          "ref": "50d4135b-4437-491d-9817-d77e7729b9ea",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "83fb972e-5c3a-4d63-a1b1-9aa4c1b0aa75"
        },
        "item": {
          "id": "131805cf-221c-4972-a3dd-ee86b74122b6",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "2c992447-2864-4c1a-a15f-8c77ef1dfc1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16b564dc-ad02-4d74-ad73-06b15abdcb2d",
        "cursor": {
          "ref": "9322eb34-35e0-4fa7-b3d8-0fa9b2502b0c",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "67136e9f-f05f-44e0-b25e-0d009114f2d0"
        },
        "item": {
          "id": "16b564dc-ad02-4d74-ad73-06b15abdcb2d",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "6b860b7d-91a2-40e5-be58-a7cc5ff15175",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b4e6be2-8cf1-4e8c-ade0-64368be67a0a",
        "cursor": {
          "ref": "b638f2c8-2cad-4f08-8a6d-340aa8f10f82",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "bfad9570-c76a-4598-9b98-58cd95023e9c"
        },
        "item": {
          "id": "6b4e6be2-8cf1-4e8c-ade0-64368be67a0a",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "d82d1dbb-a64a-4425-96f8-14a3a96ed752",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3c66b9f-6788-41c1-9ba3-f2aab83b648d",
        "cursor": {
          "ref": "e32a4528-8611-4a26-914c-8151c64ddd7e",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "73981302-f59e-4339-a783-f93a26312c53"
        },
        "item": {
          "id": "f3c66b9f-6788-41c1-9ba3-f2aab83b648d",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "976f55d7-8444-4d5d-951f-1177464b5473",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baf89239-72af-424c-94ca-c4de7a0d6aa3",
        "cursor": {
          "ref": "e8eade70-466a-491f-9ade-f523a0aa8e04",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "a124523a-ef3d-49e3-88d9-e36d5eb3a0a8"
        },
        "item": {
          "id": "baf89239-72af-424c-94ca-c4de7a0d6aa3",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "ecaea57a-c1f9-4eaa-a104-98e473f5a949",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "302383cc-94ad-449b-984b-e5f8fbcb26e1",
        "cursor": {
          "ref": "6e69cf29-32a4-4930-bf79-2bbc7e24b88a",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "14b1e23d-602f-42ff-8ece-a32e2dcd39ea"
        },
        "item": {
          "id": "302383cc-94ad-449b-984b-e5f8fbcb26e1",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "b79ad43a-e6d0-42f7-bcf2-03f7bd9106f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1e39f8e-34cb-40b4-b8d0-48c8e9964ae1",
        "cursor": {
          "ref": "44f5693a-566a-4858-a0ae-e3725f31b693",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "39c527c7-e3f9-414e-bcd6-30a58b3538f3"
        },
        "item": {
          "id": "c1e39f8e-34cb-40b4-b8d0-48c8e9964ae1",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "aa688448-c5ad-4d21-b61c-03b4f720ff1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c84913b-eed9-4477-ab17-7cbc3fdbde3f",
        "cursor": {
          "ref": "f920f08e-de46-4b61-8436-1fc9cb19ae73",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "72fdfb9d-9e1d-44ff-9a30-e8d0fa3adb60"
        },
        "item": {
          "id": "2c84913b-eed9-4477-ab17-7cbc3fdbde3f",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "a95161a8-85ae-45d6-9085-0659fa859648",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd729975-91c9-44a6-949a-df9998e2dfc4",
        "cursor": {
          "ref": "8f458b12-ce5e-4b61-abf0-ceff36100b67",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "e17956e3-ab09-422a-b0c3-4ed5166e09fd"
        },
        "item": {
          "id": "fd729975-91c9-44a6-949a-df9998e2dfc4",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "8e599a2f-9a87-4075-9634-a406a8767a59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a5f6d97-a384-448f-8633-e34d6b406bdf",
        "cursor": {
          "ref": "5e612ce5-6c25-49fc-8225-f91d41b1d9d5",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "914dcc2d-7401-4627-b2e4-7802c5be7622"
        },
        "item": {
          "id": "5a5f6d97-a384-448f-8633-e34d6b406bdf",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "68652dce-e010-4d0f-acba-7a007f1534d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42c1f83e-0bf6-4426-8553-3fbccc5d0a99",
        "cursor": {
          "ref": "5e547829-374d-4f6c-ae42-77a2917bd7e3",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "2e72fc9a-557f-4585-b806-ddf96cc3ffaa"
        },
        "item": {
          "id": "42c1f83e-0bf6-4426-8553-3fbccc5d0a99",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "4bc58d68-6e2d-43d5-83f4-5e36e7394ebf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "346186b0-dd8c-404a-ad85-edbcab537377",
        "cursor": {
          "ref": "75af4df3-510a-4384-b4d4-09613c9feff9",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "7cf48815-b232-4282-98d2-a5006f9be625"
        },
        "item": {
          "id": "346186b0-dd8c-404a-ad85-edbcab537377",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "7b20d995-d97e-4ac4-ac50-15b28592d500",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d766383d-0082-4204-9aa7-874d7814ddfa",
        "cursor": {
          "ref": "0975fa92-e670-4671-a11d-cbe5f094e333",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "cc5d600a-e5b9-4f20-a7a7-0c2966ba4374"
        },
        "item": {
          "id": "d766383d-0082-4204-9aa7-874d7814ddfa",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "47410b4d-a190-4357-80de-2cf21b4dd58e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83a5e0f9-e005-49fe-a5f2-e50501063cf8",
        "cursor": {
          "ref": "733e4222-f4f7-48d8-9b80-ccc56ae93568",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "0bbbeccf-10df-4a17-ad7c-feb7d702975b"
        },
        "item": {
          "id": "83a5e0f9-e005-49fe-a5f2-e50501063cf8",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "9ce5708c-3dad-454c-b5d1-e6c4c3a72c42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "640a0861-24c2-46c2-b6b6-d82dddc67d68",
        "cursor": {
          "ref": "68ac0386-ba8a-4567-9e04-ada96ef63343",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "699898c4-af4d-43b7-a518-805b7ba28c11"
        },
        "item": {
          "id": "640a0861-24c2-46c2-b6b6-d82dddc67d68",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "92efa7c3-a56b-46b2-8f51-7291e3c7c95d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ede0ba32-5f0b-4926-8921-7bb988da419b",
        "cursor": {
          "ref": "7e315d7f-f880-4385-a114-0cb4f2357e24",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "48fa10d5-3b1e-4218-a509-ed72acc1b8d6"
        },
        "item": {
          "id": "ede0ba32-5f0b-4926-8921-7bb988da419b",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "e37bc3be-8b55-4e7f-b120-b65e293434db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a64495cf-bb44-46b5-886e-1fdf1d8597f2",
        "cursor": {
          "ref": "1b6ad0e1-4c64-4f25-baca-de3b5347b013",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "601e8f0a-0c65-4e6b-a0ea-45701eca5733"
        },
        "item": {
          "id": "a64495cf-bb44-46b5-886e-1fdf1d8597f2",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "ac9734bc-01ff-40bb-a27c-24fd62acb3cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd4f1892-4b9f-4951-8b3e-b249fd94fe2a",
        "cursor": {
          "ref": "df5f2172-ff28-4ca7-8399-7fbc417172e1",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "6f8e0aab-a593-4a8f-a1dd-fbb8fd2a0103"
        },
        "item": {
          "id": "cd4f1892-4b9f-4951-8b3e-b249fd94fe2a",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "b4951765-7715-4b6e-a3ba-18b196187171",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be25d967-f135-4471-9ba8-ebfbcc9cf1be",
        "cursor": {
          "ref": "cabf430a-a45c-4e77-a29b-3e804f23e369",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "4c7092cd-c73c-4be6-871c-6f88094f8507"
        },
        "item": {
          "id": "be25d967-f135-4471-9ba8-ebfbcc9cf1be",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "5381ef75-876a-4fc2-9f4c-e479a7b1948f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad000dc5-4691-464d-b741-57388794f87a",
        "cursor": {
          "ref": "3ead0799-0447-44c1-9877-71e59d3f1e15",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "a5739a49-550f-488f-830f-b01a8aa58d31"
        },
        "item": {
          "id": "ad000dc5-4691-464d-b741-57388794f87a",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "8a2b1e6f-7b15-4247-8329-6a9e6d80ea9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d4d356a-52c4-4309-a279-f14a23ba1893",
        "cursor": {
          "ref": "9990cf3d-0233-4b7a-ba71-0a720221ef4f",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "c9161bf9-6ea5-4a21-b7ad-10f090fd6d74"
        },
        "item": {
          "id": "6d4d356a-52c4-4309-a279-f14a23ba1893",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "ba9fa251-849c-42b0-a9d7-b8d22a00e01c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1026771f-875f-4f40-9da5-e9e4f63a651f",
        "cursor": {
          "ref": "92f63b93-4b5c-4feb-803b-17bfc0137e17",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "fe8d3345-51f8-4e11-b1fe-282db484faf3"
        },
        "item": {
          "id": "1026771f-875f-4f40-9da5-e9e4f63a651f",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "0023c0ee-dc11-4d66-87a1-49234040401c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d96b313-f841-423f-a206-ae5c0e02d9c0",
        "cursor": {
          "ref": "f6905601-ca58-46d9-acc5-8e10269c9aef",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "43be2e65-34dc-443f-a7ee-d1b8868fa33d"
        },
        "item": {
          "id": "2d96b313-f841-423f-a206-ae5c0e02d9c0",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "e1290fe2-e5b4-4c7e-9fdb-315708c9558f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14692d8d-56f0-443c-a4b5-47b04a4ba0d4",
        "cursor": {
          "ref": "1d6d4d03-25c2-4f4d-a989-6ceb4417c7aa",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "b2a256bd-bed4-42d8-bc34-6fcec8c2b0e8"
        },
        "item": {
          "id": "14692d8d-56f0-443c-a4b5-47b04a4ba0d4",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "5129740a-0b2e-4c08-a945-b2093ff9ec5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7c00c8a-9d83-429c-8774-ac3a1f37f47a",
        "cursor": {
          "ref": "a0bd2de4-8b4d-4d66-88b2-60423418bddc",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "1814ccce-f27f-438b-8be6-4c942ed05091"
        },
        "item": {
          "id": "a7c00c8a-9d83-429c-8774-ac3a1f37f47a",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "29decd7f-1e1c-4247-af41-0ccb80f52e23",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fdb6815-6083-481c-b35b-acb87e5f739b",
        "cursor": {
          "ref": "1b575341-d70d-41c9-a445-74f781835e1e",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "2a21b9e1-192e-4c3f-8054-0f431184317e"
        },
        "item": {
          "id": "7fdb6815-6083-481c-b35b-acb87e5f739b",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "1f2c3f65-15b2-43ea-9306-365a3305b77f",
          "status": "OK",
          "code": 200,
          "responseTime": 121,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "b9203ad3-79a2-45b7-bf97-26f2558a1272",
        "cursor": {
          "ref": "86c5c114-5051-4786-a69b-3a6cfadf2029",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "6458cb9e-8dbd-4cf4-9e39-6c9017cf893d"
        },
        "item": {
          "id": "b9203ad3-79a2-45b7-bf97-26f2558a1272",
          "name": "credentials_verify"
        },
        "response": {
          "id": "d0961782-3cab-4512-8881-3a09a95b9e02",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "163c294e-eb2f-4291-ad0c-918b584c6634",
        "cursor": {
          "ref": "f26efab8-b143-44cb-9553-66b9a58f13e2",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "3e2bcae0-4bab-4771-8141-ff1633ea0cc0"
        },
        "item": {
          "id": "163c294e-eb2f-4291-ad0c-918b584c6634",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "12303778-96c0-4fd0-889d-e1d6ff9cef22",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "c601ddf1-ef92-4166-9daf-58bf53959c46",
        "cursor": {
          "ref": "e5b8b60c-400b-43c0-a416-6723bd954a61",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "a9148929-b289-4d90-8ac4-40bafa77a05e"
        },
        "item": {
          "id": "c601ddf1-ef92-4166-9daf-58bf53959c46",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "52e9493b-4067-43e1-93b7-b5d5ecdebfec",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c601ddf1-ef92-4166-9daf-58bf53959c46",
        "cursor": {
          "ref": "e5b8b60c-400b-43c0-a416-6723bd954a61",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "a9148929-b289-4d90-8ac4-40bafa77a05e"
        },
        "item": {
          "id": "c601ddf1-ef92-4166-9daf-58bf53959c46",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "52e9493b-4067-43e1-93b7-b5d5ecdebfec",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb998433-e3a8-4dd3-9cc2-fa76a8e17e54",
        "cursor": {
          "ref": "0fe64bc5-7911-4c4a-a3fb-0dfe048fb05a",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "386fb7b4-3b3f-4abb-bd78-5e06ddc1f4f2"
        },
        "item": {
          "id": "bb998433-e3a8-4dd3-9cc2-fa76a8e17e54",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "656982cf-ad64-4e55-9dff-8b69e107283d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd373a1f-ac7c-4465-8b05-d5040f7d341a",
        "cursor": {
          "ref": "75858893-27c2-4a99-b0a7-669a22fab865",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "a9607ae4-d477-4c61-a0b3-6cd720b61f93"
        },
        "item": {
          "id": "fd373a1f-ac7c-4465-8b05-d5040f7d341a",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "d19682c0-aed3-463a-886e-3ef6c8c60af3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}